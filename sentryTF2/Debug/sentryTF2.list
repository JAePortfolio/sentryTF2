
sentryTF2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7dc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800b9a8  0800b9a8  0001b9a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbe0  0800bbe0  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbe0  0800bbe0  0001bbe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbe8  0800bbe8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbe8  0800bbe8  0001bbe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbec  0800bbec  0001bbec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800bbf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c4c  200001f8  0800bde8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e44  0800bde8  00021e44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad3d  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000385b  00000000  00000000  0003af65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  0003e7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  0003fb20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000292b7  00000000  00000000  00040cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012e53  00000000  00000000  00069f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0ac0  00000000  00000000  0007cde2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d8a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b0  00000000  00000000  0016d920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001f8 	.word	0x200001f8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b98c 	.word	0x0800b98c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001fc 	.word	0x200001fc
 8000204:	0800b98c 	.word	0x0800b98c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b972 	b.w	8000e40 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9e08      	ldr	r6, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	4688      	mov	r8, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d14b      	bne.n	8000c1a <__udivmoddi4+0xa6>
 8000b82:	428a      	cmp	r2, r1
 8000b84:	4615      	mov	r5, r2
 8000b86:	d967      	bls.n	8000c58 <__udivmoddi4+0xe4>
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	b14a      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b8e:	f1c2 0720 	rsb	r7, r2, #32
 8000b92:	fa01 f302 	lsl.w	r3, r1, r2
 8000b96:	fa20 f707 	lsr.w	r7, r0, r7
 8000b9a:	4095      	lsls	r5, r2
 8000b9c:	ea47 0803 	orr.w	r8, r7, r3
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba6:	0c23      	lsrs	r3, r4, #16
 8000ba8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bac:	fa1f fc85 	uxth.w	ip, r5
 8000bb0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x60>
 8000bc0:	18eb      	adds	r3, r5, r3
 8000bc2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bc6:	f080 811b 	bcs.w	8000e00 <__udivmoddi4+0x28c>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 8118 	bls.w	8000e00 <__udivmoddi4+0x28c>
 8000bd0:	3f02      	subs	r7, #2
 8000bd2:	442b      	add	r3, r5
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bdc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be8:	45a4      	cmp	ip, r4
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x8c>
 8000bec:	192c      	adds	r4, r5, r4
 8000bee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf2:	f080 8107 	bcs.w	8000e04 <__udivmoddi4+0x290>
 8000bf6:	45a4      	cmp	ip, r4
 8000bf8:	f240 8104 	bls.w	8000e04 <__udivmoddi4+0x290>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	442c      	add	r4, r5
 8000c00:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c04:	eba4 040c 	sub.w	r4, r4, ip
 8000c08:	2700      	movs	r7, #0
 8000c0a:	b11e      	cbz	r6, 8000c14 <__udivmoddi4+0xa0>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c6 4300 	strd	r4, r3, [r6]
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0xbe>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	f000 80eb 	beq.w	8000dfa <__udivmoddi4+0x286>
 8000c24:	2700      	movs	r7, #0
 8000c26:	e9c6 0100 	strd	r0, r1, [r6]
 8000c2a:	4638      	mov	r0, r7
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	fab3 f783 	clz	r7, r3
 8000c36:	2f00      	cmp	r7, #0
 8000c38:	d147      	bne.n	8000cca <__udivmoddi4+0x156>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d302      	bcc.n	8000c44 <__udivmoddi4+0xd0>
 8000c3e:	4282      	cmp	r2, r0
 8000c40:	f200 80fa 	bhi.w	8000e38 <__udivmoddi4+0x2c4>
 8000c44:	1a84      	subs	r4, r0, r2
 8000c46:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	4698      	mov	r8, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d0e0      	beq.n	8000c14 <__udivmoddi4+0xa0>
 8000c52:	e9c6 4800 	strd	r4, r8, [r6]
 8000c56:	e7dd      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000c58:	b902      	cbnz	r2, 8000c5c <__udivmoddi4+0xe8>
 8000c5a:	deff      	udf	#255	; 0xff
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	f040 808f 	bne.w	8000d84 <__udivmoddi4+0x210>
 8000c66:	1b49      	subs	r1, r1, r5
 8000c68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6c:	fa1f f885 	uxth.w	r8, r5
 8000c70:	2701      	movs	r7, #1
 8000c72:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c76:	0c23      	lsrs	r3, r4, #16
 8000c78:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c80:	fb08 f10c 	mul.w	r1, r8, ip
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x124>
 8000c88:	18eb      	adds	r3, r5, r3
 8000c8a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x122>
 8000c90:	4299      	cmp	r1, r3
 8000c92:	f200 80cd 	bhi.w	8000e30 <__udivmoddi4+0x2bc>
 8000c96:	4684      	mov	ip, r0
 8000c98:	1a59      	subs	r1, r3, r1
 8000c9a:	b2a3      	uxth	r3, r4
 8000c9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca8:	fb08 f800 	mul.w	r8, r8, r0
 8000cac:	45a0      	cmp	r8, r4
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x14c>
 8000cb0:	192c      	adds	r4, r5, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x14a>
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	f200 80b6 	bhi.w	8000e2a <__udivmoddi4+0x2b6>
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	eba4 0408 	sub.w	r4, r4, r8
 8000cc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc8:	e79f      	b.n	8000c0a <__udivmoddi4+0x96>
 8000cca:	f1c7 0c20 	rsb	ip, r7, #32
 8000cce:	40bb      	lsls	r3, r7
 8000cd0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cdc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ce0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce8:	4325      	orrs	r5, r4
 8000cea:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cee:	0c2c      	lsrs	r4, r5, #16
 8000cf0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf4:	fa1f fa8e 	uxth.w	sl, lr
 8000cf8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cfc:	fb09 f40a 	mul.w	r4, r9, sl
 8000d00:	429c      	cmp	r4, r3
 8000d02:	fa02 f207 	lsl.w	r2, r2, r7
 8000d06:	fa00 f107 	lsl.w	r1, r0, r7
 8000d0a:	d90b      	bls.n	8000d24 <__udivmoddi4+0x1b0>
 8000d0c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d14:	f080 8087 	bcs.w	8000e26 <__udivmoddi4+0x2b2>
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	f240 8084 	bls.w	8000e26 <__udivmoddi4+0x2b2>
 8000d1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d22:	4473      	add	r3, lr
 8000d24:	1b1b      	subs	r3, r3, r4
 8000d26:	b2ad      	uxth	r5, r5
 8000d28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d30:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d34:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d38:	45a2      	cmp	sl, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x1da>
 8000d3c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d44:	d26b      	bcs.n	8000e1e <__udivmoddi4+0x2aa>
 8000d46:	45a2      	cmp	sl, r4
 8000d48:	d969      	bls.n	8000e1e <__udivmoddi4+0x2aa>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	4474      	add	r4, lr
 8000d4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d52:	fba0 8902 	umull	r8, r9, r0, r2
 8000d56:	eba4 040a 	sub.w	r4, r4, sl
 8000d5a:	454c      	cmp	r4, r9
 8000d5c:	46c2      	mov	sl, r8
 8000d5e:	464b      	mov	r3, r9
 8000d60:	d354      	bcc.n	8000e0c <__udivmoddi4+0x298>
 8000d62:	d051      	beq.n	8000e08 <__udivmoddi4+0x294>
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d069      	beq.n	8000e3c <__udivmoddi4+0x2c8>
 8000d68:	ebb1 050a 	subs.w	r5, r1, sl
 8000d6c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d70:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d74:	40fd      	lsrs	r5, r7
 8000d76:	40fc      	lsrs	r4, r7
 8000d78:	ea4c 0505 	orr.w	r5, ip, r5
 8000d7c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d80:	2700      	movs	r7, #0
 8000d82:	e747      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000d84:	f1c2 0320 	rsb	r3, r2, #32
 8000d88:	fa20 f703 	lsr.w	r7, r0, r3
 8000d8c:	4095      	lsls	r5, r2
 8000d8e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d92:	fa21 f303 	lsr.w	r3, r1, r3
 8000d96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d9a:	4338      	orrs	r0, r7
 8000d9c:	0c01      	lsrs	r1, r0, #16
 8000d9e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000da2:	fa1f f885 	uxth.w	r8, r5
 8000da6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000daa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dae:	fb07 f308 	mul.w	r3, r7, r8
 8000db2:	428b      	cmp	r3, r1
 8000db4:	fa04 f402 	lsl.w	r4, r4, r2
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x256>
 8000dba:	1869      	adds	r1, r5, r1
 8000dbc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dc0:	d22f      	bcs.n	8000e22 <__udivmoddi4+0x2ae>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d92d      	bls.n	8000e22 <__udivmoddi4+0x2ae>
 8000dc6:	3f02      	subs	r7, #2
 8000dc8:	4429      	add	r1, r5
 8000dca:	1acb      	subs	r3, r1, r3
 8000dcc:	b281      	uxth	r1, r0
 8000dce:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dda:	fb00 f308 	mul.w	r3, r0, r8
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x27e>
 8000de2:	1869      	adds	r1, r5, r1
 8000de4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de8:	d217      	bcs.n	8000e1a <__udivmoddi4+0x2a6>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d915      	bls.n	8000e1a <__udivmoddi4+0x2a6>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4429      	add	r1, r5
 8000df2:	1ac9      	subs	r1, r1, r3
 8000df4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df8:	e73b      	b.n	8000c72 <__udivmoddi4+0xfe>
 8000dfa:	4637      	mov	r7, r6
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e709      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000e00:	4607      	mov	r7, r0
 8000e02:	e6e7      	b.n	8000bd4 <__udivmoddi4+0x60>
 8000e04:	4618      	mov	r0, r3
 8000e06:	e6fb      	b.n	8000c00 <__udivmoddi4+0x8c>
 8000e08:	4541      	cmp	r1, r8
 8000e0a:	d2ab      	bcs.n	8000d64 <__udivmoddi4+0x1f0>
 8000e0c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e10:	eb69 020e 	sbc.w	r2, r9, lr
 8000e14:	3801      	subs	r0, #1
 8000e16:	4613      	mov	r3, r2
 8000e18:	e7a4      	b.n	8000d64 <__udivmoddi4+0x1f0>
 8000e1a:	4660      	mov	r0, ip
 8000e1c:	e7e9      	b.n	8000df2 <__udivmoddi4+0x27e>
 8000e1e:	4618      	mov	r0, r3
 8000e20:	e795      	b.n	8000d4e <__udivmoddi4+0x1da>
 8000e22:	4667      	mov	r7, ip
 8000e24:	e7d1      	b.n	8000dca <__udivmoddi4+0x256>
 8000e26:	4681      	mov	r9, r0
 8000e28:	e77c      	b.n	8000d24 <__udivmoddi4+0x1b0>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	442c      	add	r4, r5
 8000e2e:	e747      	b.n	8000cc0 <__udivmoddi4+0x14c>
 8000e30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e34:	442b      	add	r3, r5
 8000e36:	e72f      	b.n	8000c98 <__udivmoddi4+0x124>
 8000e38:	4638      	mov	r0, r7
 8000e3a:	e708      	b.n	8000c4e <__udivmoddi4+0xda>
 8000e3c:	4637      	mov	r7, r6
 8000e3e:	e6e9      	b.n	8000c14 <__udivmoddi4+0xa0>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <delay_us>:
int distance = 0;

float startVolt = 0.5;
uint32_t sineVal[100];

void delay_us(uint16_t us){
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0); // Set counter start to 0
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <delay_us+0x2c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < us);
 8000e56:	bf00      	nop
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <delay_us+0x2c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d3f9      	bcc.n	8000e58 <delay_us+0x14>
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	20000234 	.word	0x20000234

08000e74 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	if(htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d122      	bne.n	8000eca <HAL_TIM_IC_CaptureCallback+0x56>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7f1b      	ldrb	r3, [r3, #28]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d11e      	bne.n	8000eca <HAL_TIM_IC_CaptureCallback+0x56>
		if(firstCaptured == 0) firstCaptured++;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d105      	bne.n	8000ea0 <HAL_TIM_IC_CaptureCallback+0x2c>
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000e9c:	6013      	str	r3, [r2, #0]
			totalTimeOne = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //Retrieves pulse width value from ultrasonic
			calcObjDist(totalTimeOne);
			firstCaptured--;
		}
	}
}
 8000e9e:	e014      	b.n	8000eca <HAL_TIM_IC_CaptureCallback+0x56>
		else if(firstCaptured == 1){
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d110      	bne.n	8000eca <HAL_TIM_IC_CaptureCallback+0x56>
			totalTimeOne = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //Retrieves pulse width value from ultrasonic
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f005 f95c 	bl	8006168 <HAL_TIM_ReadCapturedValue>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_TIM_IC_CaptureCallback+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
			calcObjDist(totalTimeOne);
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_TIM_IC_CaptureCallback+0x68>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f810 	bl	8000ee0 <calcObjDist>
			firstCaptured--;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000ec8:	6013      	str	r3, [r2, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000340 	.word	0x20000340
 8000ed8:	20000214 	.word	0x20000214
 8000edc:	20000218 	.word	0x20000218

08000ee0 <calcObjDist>:

void calcObjDist(uint32_t totalTime){
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	totalFinal = totalTime/2;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	085b      	lsrs	r3, r3, #1
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <calcObjDist+0x50>)
 8000ef0:	601a      	str	r2, [r3, #0]
	distance = totalFinal * velSound * pow(10,-6);
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <calcObjDist+0x50>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <calcObjDist+0x54>)
 8000ef8:	6812      	ldr	r2, [r2, #0]
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fad4 	bl	80004ac <__aeabi_i2d>
 8000f04:	a308      	add	r3, pc, #32	; (adr r3, 8000f28 <calcObjDist+0x48>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	f7ff fb39 	bl	8000580 <__aeabi_dmul>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460c      	mov	r4, r1
 8000f12:	4618      	mov	r0, r3
 8000f14:	4621      	mov	r1, r4
 8000f16:	f7ff fdcd 	bl	8000ab4 <__aeabi_d2iz>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <calcObjDist+0x58>)
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	a0b5ed8d 	.word	0xa0b5ed8d
 8000f2c:	3eb0c6f7 	.word	0x3eb0c6f7
 8000f30:	2000021c 	.word	0x2000021c
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000220 	.word	0x20000220

08000f3c <sensorRoutine>:

void sensorRoutine(){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f46:	4808      	ldr	r0, [pc, #32]	; (8000f68 <sensorRoutine+0x2c>)
 8000f48:	f001 ff4e 	bl	8002de8 <HAL_GPIO_WritePin>
	delay_us(10);
 8000f4c:	200a      	movs	r0, #10
 8000f4e:	f7ff ff79 	bl	8000e44 <delay_us>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <sensorRoutine+0x2c>)
 8000f5a:	f001 ff45 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f5e:	2064      	movs	r0, #100	; 0x64
 8000f60:	f000 fe54 	bl	8001c0c <HAL_Delay>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40020c00 	.word	0x40020c00

08000f6c <sentryFireRoutine>:

void sentryFireRoutine(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
  for(int i = 0; i < 12; i++){
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	e009      	b.n	8000f8c <sentryFireRoutine+0x20>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4808      	ldr	r0, [pc, #32]	; (8000f9c <sentryFireRoutine+0x30>)
 8000f7c:	f001 ff4d 	bl	8002e1a <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000f80:	20fa      	movs	r0, #250	; 0xfa
 8000f82:	f000 fe43 	bl	8001c0c <HAL_Delay>
  for(int i = 0; i < 12; i++){
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b0b      	cmp	r3, #11
 8000f90:	ddf2      	ble.n	8000f78 <sentryFireRoutine+0xc>
  }
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <getSineVal>:

void getSineVal(){
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 100; i++){
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	e038      	b.n	800101e <getSineVal+0x7e>
		sineVal[i] = (sin(i*PI/5)+1)*((0xFFF+1)/2);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fa7d 	bl	80004ac <__aeabi_i2d>
 8000fb2:	a323      	add	r3, pc, #140	; (adr r3, 8001040 <getSineVal+0xa0>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff fae2 	bl	8000580 <__aeabi_dmul>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <getSineVal+0x90>)
 8000fca:	f7ff fc03 	bl	80007d4 <__aeabi_ddiv>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460c      	mov	r4, r1
 8000fd2:	ec44 3b17 	vmov	d7, r3, r4
 8000fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8000fda:	eef0 0a67 	vmov.f32	s1, s15
 8000fde:	f009 fcc3 	bl	800a968 <sin>
 8000fe2:	ec51 0b10 	vmov	r0, r1, d0
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <getSineVal+0x94>)
 8000fec:	f7ff f912 	bl	8000214 <__adddf3>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	460c      	mov	r4, r1
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <getSineVal+0x98>)
 8000ffe:	f7ff fabf 	bl	8000580 <__aeabi_dmul>
 8001002:	4603      	mov	r3, r0
 8001004:	460c      	mov	r4, r1
 8001006:	4618      	mov	r0, r3
 8001008:	4621      	mov	r1, r4
 800100a:	f7ff fd7b 	bl	8000b04 <__aeabi_d2uiz>
 800100e:	4601      	mov	r1, r0
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <getSineVal+0x9c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 100; i++){
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3301      	adds	r3, #1
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b63      	cmp	r3, #99	; 0x63
 8001022:	ddc3      	ble.n	8000fac <getSineVal+0xc>
	}
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bd90      	pop	{r4, r7, pc}
 800102c:	f3af 8000 	nop.w
 8001030:	40140000 	.word	0x40140000
 8001034:	3ff00000 	.word	0x3ff00000
 8001038:	40a00000 	.word	0x40a00000
 800103c:	200003d8 	.word	0x200003d8
 8001040:	4d12d84a 	.word	0x4d12d84a
 8001044:	400921fb 	.word	0x400921fb

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104e:	f000 fd80 	bl	8001b52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001052:	f000 f863 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001056:	f000 fad5 	bl	8001604 <MX_GPIO_Init>
  MX_DMA_Init();
 800105a:	f000 fab5 	bl	80015c8 <MX_DMA_Init>
  MX_TIM1_Init();
 800105e:	f000 f919 	bl	8001294 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001062:	f000 fa2d 	bl	80014c0 <MX_TIM3_Init>
  MX_DAC_Init();
 8001066:	f000 f8eb 	bl	8001240 <MX_DAC_Init>
  MX_TIM6_Init();
 800106a:	f000 fa77 	bl	800155c <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 800106e:	f008 fe3d 	bl	8009cec <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001072:	f000 f9af 	bl	80013d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001076:	2100      	movs	r1, #0
 8001078:	4821      	ldr	r0, [pc, #132]	; (8001100 <main+0xb8>)
 800107a:	f004 fb6b 	bl	8005754 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 800107e:	2104      	movs	r1, #4
 8001080:	481f      	ldr	r0, [pc, #124]	; (8001100 <main+0xb8>)
 8001082:	f004 fb67 	bl	8005754 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8001086:	481f      	ldr	r0, [pc, #124]	; (8001104 <main+0xbc>)
 8001088:	f004 f936 	bl	80052f8 <HAL_TIM_Base_Start>

  getSineVal();
 800108c:	f7ff ff88 	bl	8000fa0 <getSineVal>
  HAL_TIM_Base_Start(&htim6);
 8001090:	481d      	ldr	r0, [pc, #116]	; (8001108 <main+0xc0>)
 8001092:	f004 f931 	bl	80052f8 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001096:	2100      	movs	r1, #0
 8001098:	481c      	ldr	r0, [pc, #112]	; (800110c <main+0xc4>)
 800109a:	f000 ff0c 	bl	8001eb6 <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sineVal, 100, DAC_ALIGN_12B_R);
 800109e:	2300      	movs	r3, #0
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2364      	movs	r3, #100	; 0x64
 80010a4:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <main+0xc8>)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4818      	ldr	r0, [pc, #96]	; (800110c <main+0xc4>)
 80010aa:	f000 ff57 	bl	8001f5c <HAL_DAC_Start_DMA>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010ae:	2100      	movs	r1, #0
 80010b0:	4818      	ldr	r0, [pc, #96]	; (8001114 <main+0xcc>)
 80010b2:	f004 f9f3 	bl	800549c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  htim2.Instance->CCR1 = 7.5; // 1.5ms
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <main+0xcc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2207      	movs	r2, #7
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(5000);
 80010be:	f241 3088 	movw	r0, #5000	; 0x1388
 80010c2:	f000 fda3 	bl	8001c0c <HAL_Delay>
	  htim2.Instance->CCR1 = 5;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <main+0xcc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2205      	movs	r2, #5
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(5000);
 80010ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80010d2:	f000 fd9b 	bl	8001c0c <HAL_Delay>
	  htim2.Instance->CCR1 = 10;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <main+0xcc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	220a      	movs	r2, #10
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(5000);
 80010de:	f241 3088 	movw	r0, #5000	; 0x1388
 80010e2:	f000 fd93 	bl	8001c0c <HAL_Delay>
	  sensorRoutine();
 80010e6:	f7ff ff29 	bl	8000f3c <sensorRoutine>
	  if(distance < 12 && distance > 0){
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <main+0xd0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b0b      	cmp	r3, #11
 80010f0:	dce1      	bgt.n	80010b6 <main+0x6e>
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <main+0xd0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	dddd      	ble.n	80010b6 <main+0x6e>
		  sentryFireRoutine();
 80010fa:	f7ff ff37 	bl	8000f6c <sentryFireRoutine>
	  htim2.Instance->CCR1 = 7.5; // 1.5ms
 80010fe:	e7da      	b.n	80010b6 <main+0x6e>
 8001100:	20000340 	.word	0x20000340
 8001104:	20000234 	.word	0x20000234
 8001108:	200002f4 	.word	0x200002f4
 800110c:	200002e0 	.word	0x200002e0
 8001110:	200003d8 	.word	0x200003d8
 8001114:	2000038c 	.word	0x2000038c
 8001118:	20000220 	.word	0x20000220

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b0b4      	sub	sp, #208	; 0xd0
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001126:	2230      	movs	r2, #48	; 0x30
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f009 fb5a 	bl	800a7e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	2284      	movs	r2, #132	; 0x84
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f009 fb4b 	bl	800a7e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <SystemClock_Config+0x11c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a39      	ldr	r2, [pc, #228]	; (8001238 <SystemClock_Config+0x11c>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b37      	ldr	r3, [pc, #220]	; (8001238 <SystemClock_Config+0x11c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001166:	4b35      	ldr	r3, [pc, #212]	; (800123c <SystemClock_Config+0x120>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800116e:	4a33      	ldr	r2, [pc, #204]	; (800123c <SystemClock_Config+0x120>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b31      	ldr	r3, [pc, #196]	; (800123c <SystemClock_Config+0x120>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001182:	2303      	movs	r3, #3
 8001184:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001196:	2310      	movs	r3, #16
 8001198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119c:	2302      	movs	r3, #2
 800119e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 80011aa:	230f      	movs	r3, #15
 80011ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 144;
 80011b0:	2390      	movs	r3, #144	; 0x90
 80011b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80011bc:	2305      	movs	r3, #5
 80011be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 f800 	bl	80041cc <HAL_RCC_OscConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011d2:	f000 fa91 	bl	80016f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	230f      	movs	r3, #15
 80011d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80011e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80011f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fa88 	bl	8004714 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800120a:	f000 fa75 	bl	80016f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800120e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001212:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4618      	mov	r0, r3
 8001220:	f003 fc22 	bl	8004a68 <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x112>
  {
    Error_Handler();
 800122a:	f000 fa65 	bl	80016f8 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	37d0      	adds	r7, #208	; 0xd0
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40007000 	.word	0x40007000

08001240 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_DAC_Init+0x4c>)
 8001250:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <MX_DAC_Init+0x50>)
 8001252:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <MX_DAC_Init+0x4c>)
 8001256:	f000 fe0c 	bl	8001e72 <HAL_DAC_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001260:	f000 fa4a 	bl	80016f8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001264:	2304      	movs	r3, #4
 8001266:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001268:	2302      	movs	r3, #2
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	4619      	mov	r1, r3
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <MX_DAC_Init+0x4c>)
 8001274:	f000 ffb4 	bl	80021e0 <HAL_DAC_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800127e:	f000 fa3b 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200002e0 	.word	0x200002e0
 8001290:	40007400 	.word	0x40007400

08001294 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b090      	sub	sp, #64	; 0x40
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012d0:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <MX_TIM1_Init+0x138>)
 80012d2:	4a3f      	ldr	r2, [pc, #252]	; (80013d0 <MX_TIM1_Init+0x13c>)
 80012d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <MX_TIM1_Init+0x138>)
 80012d8:	2201      	movs	r2, #1
 80012da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <MX_TIM1_Init+0x138>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012e2:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <MX_TIM1_Init+0x138>)
 80012e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <MX_TIM1_Init+0x138>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012f0:	4b36      	ldr	r3, [pc, #216]	; (80013cc <MX_TIM1_Init+0x138>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b35      	ldr	r3, [pc, #212]	; (80013cc <MX_TIM1_Init+0x138>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012fc:	4833      	ldr	r0, [pc, #204]	; (80013cc <MX_TIM1_Init+0x138>)
 80012fe:	f003 ffa3 	bl	8005248 <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001308:	f000 f9f6 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001316:	4619      	mov	r1, r3
 8001318:	482c      	ldr	r0, [pc, #176]	; (80013cc <MX_TIM1_Init+0x138>)
 800131a:	f004 fe29 	bl	8005f70 <HAL_TIM_ConfigClockSource>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001324:	f000 f9e8 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001328:	4828      	ldr	r0, [pc, #160]	; (80013cc <MX_TIM1_Init+0x138>)
 800132a:	f004 f9b1 	bl	8005690 <HAL_TIM_IC_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001334:	f000 f9e0 	bl	80016f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001338:	2304      	movs	r3, #4
 800133a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800133c:	2350      	movs	r3, #80	; 0x50
 800133e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	481f      	ldr	r0, [pc, #124]	; (80013cc <MX_TIM1_Init+0x138>)
 8001350:	f004 fec8 	bl	80060e4 <HAL_TIM_SlaveConfigSynchro>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800135a:	f000 f9cd 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4619      	mov	r1, r3
 8001370:	4816      	ldr	r0, [pc, #88]	; (80013cc <MX_TIM1_Init+0x138>)
 8001372:	f005 fcd5 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800137c:	f000 f9bc 	bl	80016f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001380:	2300      	movs	r3, #0
 8001382:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001384:	2301      	movs	r3, #1
 8001386:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	4619      	mov	r1, r3
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_TIM1_Init+0x138>)
 8001398:	f004 fc45 	bl	8005c26 <HAL_TIM_IC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80013a2:	f000 f9a9 	bl	80016f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80013a6:	2302      	movs	r3, #2
 80013a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80013aa:	2302      	movs	r3, #2
 80013ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	2204      	movs	r2, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_TIM1_Init+0x138>)
 80013b6:	f004 fc36 	bl	8005c26 <HAL_TIM_IC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80013c0:	f000 f99a 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3740      	adds	r7, #64	; 0x40
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000340 	.word	0x20000340
 80013d0:	40010000 	.word	0x40010000

080013d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08e      	sub	sp, #56	; 0x38
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001406:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <MX_TIM2_Init+0xe8>)
 8001408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 800140e:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <MX_TIM2_Init+0xe8>)
 8001410:	f240 128f 	movw	r2, #399	; 0x18f
 8001414:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b29      	ldr	r3, [pc, #164]	; (80014bc <MX_TIM2_Init+0xe8>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <MX_TIM2_Init+0xe8>)
 800141e:	2263      	movs	r2, #99	; 0x63
 8001420:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <MX_TIM2_Init+0xe8>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <MX_TIM2_Init+0xe8>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800142e:	4823      	ldr	r0, [pc, #140]	; (80014bc <MX_TIM2_Init+0xe8>)
 8001430:	f003 ff0a 	bl	8005248 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800143a:	f000 f95d 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001448:	4619      	mov	r1, r3
 800144a:	481c      	ldr	r0, [pc, #112]	; (80014bc <MX_TIM2_Init+0xe8>)
 800144c:	f004 fd90 	bl	8005f70 <HAL_TIM_ConfigClockSource>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001456:	f000 f94f 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800145a:	4818      	ldr	r0, [pc, #96]	; (80014bc <MX_TIM2_Init+0xe8>)
 800145c:	f003 ffbc 	bl	80053d8 <HAL_TIM_PWM_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001466:	f000 f947 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	4810      	ldr	r0, [pc, #64]	; (80014bc <MX_TIM2_Init+0xe8>)
 800147a:	f005 fc51 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001484:	f000 f938 	bl	80016f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001488:	2360      	movs	r3, #96	; 0x60
 800148a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4807      	ldr	r0, [pc, #28]	; (80014bc <MX_TIM2_Init+0xe8>)
 80014a0:	f004 fc56 	bl	8005d50 <HAL_TIM_PWM_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014aa:	f000 f925 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014ae:	4803      	ldr	r0, [pc, #12]	; (80014bc <MX_TIM2_Init+0xe8>)
 80014b0:	f000 fa52 	bl	8001958 <HAL_TIM_MspPostInit>

}
 80014b4:	bf00      	nop
 80014b6:	3738      	adds	r7, #56	; 0x38
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	2000038c 	.word	0x2000038c

080014c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <MX_TIM3_Init+0x94>)
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <MX_TIM3_Init+0x98>)
 80014e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <MX_TIM3_Init+0x94>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <MX_TIM3_Init+0x94>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <MX_TIM3_Init+0x94>)
 80014f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <MX_TIM3_Init+0x94>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <MX_TIM3_Init+0x94>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001504:	4813      	ldr	r0, [pc, #76]	; (8001554 <MX_TIM3_Init+0x94>)
 8001506:	f003 fe9f 	bl	8005248 <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001510:	f000 f8f2 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001518:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <MX_TIM3_Init+0x94>)
 8001522:	f004 fd25 	bl	8005f70 <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800152c:	f000 f8e4 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_TIM3_Init+0x94>)
 800153e:	f005 fbef 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001548:	f000 f8d6 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000234 	.word	0x20000234
 8001558:	40000400 	.word	0x40000400

0800155c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_TIM6_Init+0x64>)
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <MX_TIM6_Init+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2-1;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <MX_TIM6_Init+0x64>)
 8001574:	2201      	movs	r2, #1
 8001576:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_TIM6_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 22-1;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <MX_TIM6_Init+0x64>)
 8001580:	2215      	movs	r2, #21
 8001582:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_TIM6_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800158a:	480d      	ldr	r0, [pc, #52]	; (80015c0 <MX_TIM6_Init+0x64>)
 800158c:	f003 fe5c 	bl	8005248 <HAL_TIM_Base_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001596:	f000 f8af 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800159a:	2320      	movs	r3, #32
 800159c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <MX_TIM6_Init+0x64>)
 80015a8:	f005 fbba 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80015b2:	f000 f8a1 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200002f4 	.word	0x200002f4
 80015c4:	40001000 	.word	0x40001000

080015c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_DMA_Init+0x38>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <MX_DMA_Init+0x38>)
 80015d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_DMA_Init+0x38>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2010      	movs	r0, #16
 80015ec:	f000 fc0b 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015f0:	2010      	movs	r0, #16
 80015f2:	f000 fc24 	bl	8001e3e <HAL_NVIC_EnableIRQ>

}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <MX_GPIO_Init+0xe8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a33      	ldr	r2, [pc, #204]	; (80016ec <MX_GPIO_Init+0xe8>)
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b31      	ldr	r3, [pc, #196]	; (80016ec <MX_GPIO_Init+0xe8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <MX_GPIO_Init+0xe8>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a2d      	ldr	r2, [pc, #180]	; (80016ec <MX_GPIO_Init+0xe8>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <MX_GPIO_Init+0xe8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <MX_GPIO_Init+0xe8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a27      	ldr	r2, [pc, #156]	; (80016ec <MX_GPIO_Init+0xe8>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <MX_GPIO_Init+0xe8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <MX_GPIO_Init+0xe8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a21      	ldr	r2, [pc, #132]	; (80016ec <MX_GPIO_Init+0xe8>)
 8001668:	f043 0310 	orr.w	r3, r3, #16
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <MX_GPIO_Init+0xe8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <MX_GPIO_Init+0xe8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a1b      	ldr	r2, [pc, #108]	; (80016ec <MX_GPIO_Init+0xe8>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <MX_GPIO_Init+0xe8>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2101      	movs	r1, #1
 8001696:	4816      	ldr	r0, [pc, #88]	; (80016f0 <MX_GPIO_Init+0xec>)
 8001698:	f001 fba6 	bl	8002de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a2:	4814      	ldr	r0, [pc, #80]	; (80016f4 <MX_GPIO_Init+0xf0>)
 80016a4:	f001 fba0 	bl	8002de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a8:	2301      	movs	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_GPIO_Init+0xec>)
 80016c0:	f001 f9e8 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_GPIO_Init+0xf0>)
 80016de:	f001 f9d9 	bl	8002a94 <HAL_GPIO_Init>

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020c00 	.word	0x40020c00

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016fe:	e7fe      	b.n	80016fe <Error_Handler+0x6>

08001700 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_MspInit+0x44>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_MspInit+0x44>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_MspInit+0x44>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_MspInit+0x44>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_MspInit+0x44>)
 8001724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_MspInit+0x44>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a30      	ldr	r2, [pc, #192]	; (8001828 <HAL_DAC_MspInit+0xe0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d15a      	bne.n	8001820 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <HAL_DAC_MspInit+0xe4>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a2f      	ldr	r2, [pc, #188]	; (800182c <HAL_DAC_MspInit+0xe4>)
 8001770:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <HAL_DAC_MspInit+0xe4>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <HAL_DAC_MspInit+0xe4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a29      	ldr	r2, [pc, #164]	; (800182c <HAL_DAC_MspInit+0xe4>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_DAC_MspInit+0xe4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800179a:	2310      	movs	r3, #16
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179e:	2303      	movs	r3, #3
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4820      	ldr	r0, [pc, #128]	; (8001830 <HAL_DAC_MspInit+0xe8>)
 80017ae:	f001 f971 	bl	8002a94 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_DAC_MspInit+0xec>)
 80017b4:	4a20      	ldr	r2, [pc, #128]	; (8001838 <HAL_DAC_MspInit+0xf0>)
 80017b6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80017b8:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <HAL_DAC_MspInit+0xec>)
 80017ba:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80017be:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <HAL_DAC_MspInit+0xec>)
 80017c2:	2240      	movs	r2, #64	; 0x40
 80017c4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_DAC_MspInit+0xec>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_DAC_MspInit+0xec>)
 80017ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_DAC_MspInit+0xec>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <HAL_DAC_MspInit+0xec>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_DAC_MspInit+0xec>)
 80017e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_DAC_MspInit+0xec>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_DAC_MspInit+0xec>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80017f4:	480f      	ldr	r0, [pc, #60]	; (8001834 <HAL_DAC_MspInit+0xec>)
 80017f6:	f000 fdd7 	bl	80023a8 <HAL_DMA_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_DAC_MspInit+0xbc>
    {
      Error_Handler();
 8001800:	f7ff ff7a 	bl	80016f8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_DAC_MspInit+0xec>)
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_DAC_MspInit+0xec>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	2036      	movs	r0, #54	; 0x36
 8001816:	f000 faf6 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800181a:	2036      	movs	r0, #54	; 0x36
 800181c:	f000 fb0f 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40007400 	.word	0x40007400
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000
 8001834:	20000280 	.word	0x20000280
 8001838:	40026088 	.word	0x40026088

0800183c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a3a      	ldr	r2, [pc, #232]	; (8001944 <HAL_TIM_Base_MspInit+0x108>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d131      	bne.n	80018c2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800185e:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a39      	ldr	r2, [pc, #228]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001876:	4b34      	ldr	r3, [pc, #208]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a33      	ldr	r2, [pc, #204]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800188e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	4828      	ldr	r0, [pc, #160]	; (800194c <HAL_TIM_Base_MspInit+0x110>)
 80018ac:	f001 f8f2 	bl	8002a94 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	201b      	movs	r0, #27
 80018b6:	f000 faa6 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018ba:	201b      	movs	r0, #27
 80018bc:	f000 fabf 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80018c0:	e03c      	b.n	800193c <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ca:	d10c      	bne.n	80018e6 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6413      	str	r3, [r2, #64]	; 0x40
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]
}
 80018e4:	e02a      	b.n	800193c <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM3)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_TIM_Base_MspInit+0x114>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d10c      	bne.n	800190a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	e018      	b.n	800193c <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM6)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HAL_TIM_Base_MspInit+0x118>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d113      	bne.n	800193c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	6413      	str	r3, [r2, #64]	; 0x40
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_TIM_Base_MspInit+0x10c>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	2036      	movs	r0, #54	; 0x36
 8001932:	f000 fa68 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001936:	2036      	movs	r0, #54	; 0x36
 8001938:	f000 fa81 	bl	8001e3e <HAL_NVIC_EnableIRQ>
}
 800193c:	bf00      	nop
 800193e:	3730      	adds	r7, #48	; 0x30
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40010000 	.word	0x40010000
 8001948:	40023800 	.word	0x40023800
 800194c:	40021000 	.word	0x40021000
 8001950:	40000400 	.word	0x40000400
 8001954:	40001000 	.word	0x40001000

08001958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001978:	d11b      	bne.n	80019b2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_TIM_MspPostInit+0x64>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <HAL_TIM_MspPostInit+0x64>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_TIM_MspPostInit+0x64>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001992:	2301      	movs	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	4619      	mov	r1, r3
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <HAL_TIM_MspPostInit+0x68>)
 80019ae:	f001 f871 	bl	8002a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000

080019c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <NMI_Handler+0x4>

080019ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <HardFault_Handler+0x4>

080019d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <MemManage_Handler+0x4>

080019d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <BusFault_Handler+0x4>

080019dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <UsageFault_Handler+0x4>

080019e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a10:	f000 f8dc 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <DMA1_Stream5_IRQHandler+0x10>)
 8001a1e:	f000 fdd1 	bl	80025c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000280 	.word	0x20000280

08001a2c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <TIM1_CC_IRQHandler+0x10>)
 8001a32:	f003 ffd9 	bl	80059e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000340 	.word	0x20000340

08001a40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <TIM6_DAC_IRQHandler+0x14>)
 8001a46:	f000 fb49 	bl	80020dc <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <TIM6_DAC_IRQHandler+0x18>)
 8001a4c:	f003 ffcc 	bl	80059e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200002e0 	.word	0x200002e0
 8001a58:	200002f4 	.word	0x200002f4

08001a5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <OTG_FS_IRQHandler+0x10>)
 8001a62:	f001 fb3a 	bl	80030da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20001a3c 	.word	0x20001a3c

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f008 fe66 	bl	800a770 <__errno>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	230c      	movs	r3, #12
 8001aa8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20050000 	.word	0x20050000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	20000224 	.word	0x20000224
 8001ad8:	20001e48 	.word	0x20001e48

08001adc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <SystemInit+0x20>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <SystemInit+0x20>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b06:	490e      	ldr	r1, [pc, #56]	; (8001b40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b1c:	4c0b      	ldr	r4, [pc, #44]	; (8001b4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b2a:	f7ff ffd7 	bl	8001adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f008 fe25 	bl	800a77c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b32:	f7ff fa89 	bl	8001048 <main>
  bx  lr    
 8001b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001b44:	0800bbf0 	.word	0x0800bbf0
  ldr r2, =_sbss
 8001b48:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001b4c:	20001e44 	.word	0x20001e44

08001b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC_IRQHandler>

08001b52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b56:	2003      	movs	r0, #3
 8001b58:	f000 f94a 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f000 f805 	bl	8001b6c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b62:	f7ff fdcd 	bl	8001700 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_InitTick+0x54>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_InitTick+0x58>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f965 	bl	8001e5a <HAL_SYSTICK_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00e      	b.n	8001bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b0f      	cmp	r3, #15
 8001b9e:	d80a      	bhi.n	8001bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f000 f92d 	bl	8001e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bac:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <HAL_InitTick+0x5c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000004 	.word	0x20000004
 8001bc4:	2000000c 	.word	0x2000000c
 8001bc8:	20000008 	.word	0x20000008

08001bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_IncTick+0x20>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	2000000c 	.word	0x2000000c
 8001bf0:	20000568 	.word	0x20000568

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_GetTick+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000568 	.word	0x20000568

08001c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff ffee 	bl	8001bf4 <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d005      	beq.n	8001c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_Delay+0x40>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c32:	bf00      	nop
 8001c34:	f7ff ffde 	bl	8001bf4 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d8f7      	bhi.n	8001c34 <HAL_Delay+0x28>
  {
  }
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2000000c 	.word	0x2000000c

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <__NVIC_SetPriorityGrouping+0x40>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <__NVIC_SetPriorityGrouping+0x40>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00
 8001c94:	05fa0000 	.word	0x05fa0000

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f7ff ff8e 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff29 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff3e 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff8e 	bl	8001d44 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5d 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff31 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa2 	bl	8001dac <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e014      	b.n	8001eae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	791b      	ldrb	r3, [r3, #4]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff fc57 	bl	8001748 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	795b      	ldrb	r3, [r3, #5]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_DAC_Start+0x16>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e040      	b.n	8001f4e <HAL_DAC_Start+0x98>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10f      	bne.n	8001f16 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001f00:	2b3c      	cmp	r3, #60	; 0x3c
 8001f02:	d11d      	bne.n	8001f40 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	e014      	b.n	8001f40 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	213c      	movs	r1, #60	; 0x3c
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d107      	bne.n	8001f40 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0202 	orr.w	r2, r2, #2
 8001f3e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	795b      	ldrb	r3, [r3, #5]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_DAC_Start_DMA+0x22>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e09e      	b.n	80020bc <HAL_DAC_Start_DMA+0x160>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2202      	movs	r2, #2
 8001f88:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d12a      	bne.n	8001fe6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a4b      	ldr	r2, [pc, #300]	; (80020c4 <HAL_DAC_Start_DMA+0x168>)
 8001f96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a4a      	ldr	r2, [pc, #296]	; (80020c8 <HAL_DAC_Start_DMA+0x16c>)
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a49      	ldr	r2, [pc, #292]	; (80020cc <HAL_DAC_Start_DMA+0x170>)
 8001fa6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fb6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d009      	beq.n	8001fd2 <HAL_DAC_Start_DMA+0x76>
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d00c      	beq.n	8001fdc <HAL_DAC_Start_DMA+0x80>
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d000      	beq.n	8001fc8 <HAL_DAC_Start_DMA+0x6c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001fc6:	e039      	b.n	800203c <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3308      	adds	r3, #8
 8001fce:	613b      	str	r3, [r7, #16]
        break;
 8001fd0:	e034      	b.n	800203c <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	613b      	str	r3, [r7, #16]
        break;
 8001fda:	e02f      	b.n	800203c <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3310      	adds	r3, #16
 8001fe2:	613b      	str	r3, [r7, #16]
        break;
 8001fe4:	e02a      	b.n	800203c <HAL_DAC_Start_DMA+0xe0>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	4a39      	ldr	r2, [pc, #228]	; (80020d0 <HAL_DAC_Start_DMA+0x174>)
 8001fec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	4a38      	ldr	r2, [pc, #224]	; (80020d4 <HAL_DAC_Start_DMA+0x178>)
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	4a37      	ldr	r2, [pc, #220]	; (80020d8 <HAL_DAC_Start_DMA+0x17c>)
 8001ffc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800200c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	2b04      	cmp	r3, #4
 8002012:	d009      	beq.n	8002028 <HAL_DAC_Start_DMA+0xcc>
 8002014:	2b08      	cmp	r3, #8
 8002016:	d00c      	beq.n	8002032 <HAL_DAC_Start_DMA+0xd6>
 8002018:	2b00      	cmp	r3, #0
 800201a:	d000      	beq.n	800201e <HAL_DAC_Start_DMA+0xc2>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800201c:	e00e      	b.n	800203c <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3314      	adds	r3, #20
 8002024:	613b      	str	r3, [r7, #16]
        break;
 8002026:	e009      	b.n	800203c <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3318      	adds	r3, #24
 800202e:	613b      	str	r3, [r7, #16]
        break;
 8002030:	e004      	b.n	800203c <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	331c      	adds	r3, #28
 8002038:	613b      	str	r3, [r7, #16]
        break;
 800203a:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d111      	bne.n	8002066 <HAL_DAC_Start_DMA+0x10a>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002050:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6898      	ldr	r0, [r3, #8]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	f000 fa52 	bl	8002504 <HAL_DMA_Start_IT>
 8002060:	4603      	mov	r3, r0
 8002062:	75fb      	strb	r3, [r7, #23]
 8002064:	e010      	b.n	8002088 <HAL_DAC_Start_DMA+0x12c>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002074:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	68d8      	ldr	r0, [r3, #12]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	f000 fa40 	bl	8002504 <HAL_DMA_Start_IT>
 8002084:	4603      	mov	r3, r0
 8002086:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800208e:	7dfb      	ldrb	r3, [r7, #23]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10c      	bne.n	80020ae <HAL_DAC_Start_DMA+0x152>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6819      	ldr	r1, [r3, #0]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2201      	movs	r2, #1
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e005      	b.n	80020ba <HAL_DAC_Start_DMA+0x15e>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f043 0204 	orr.w	r2, r3, #4
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	0800227f 	.word	0x0800227f
 80020c8:	080022a1 	.word	0x080022a1
 80020cc:	080022bd 	.word	0x080022bd
 80020d0:	0800233b 	.word	0x0800233b
 80020d4:	0800235d 	.word	0x0800235d
 80020d8:	08002379 	.word	0x08002379

080020dc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f2:	d120      	bne.n	8002136 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002102:	d118      	bne.n	8002136 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2204      	movs	r2, #4
 8002108:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800211e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800212e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f84b 	bl	80021cc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002144:	d120      	bne.n	8002188 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002154:	d118      	bne.n	8002188 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2204      	movs	r2, #4
 800215a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	f043 0202 	orr.w	r2, r3, #2
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002170:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002180:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f8cf 	bl	8002326 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	795b      	ldrb	r3, [r3, #5]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_DAC_ConfigChannel+0x18>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e03c      	b.n	8002272 <HAL_DAC_ConfigChannel+0x92>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2202      	movs	r2, #2
 8002202:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4013      	ands	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6819      	ldr	r1, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	22c0      	movs	r2, #192	; 0xc0
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	400a      	ands	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff ff7f 	bl	8002190 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	711a      	strb	r2, [r3, #4]
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ac:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f7ff ff78 	bl	80021a4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f043 0204 	orr.w	r2, r3, #4
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f7ff ff6e 	bl	80021b8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	711a      	strb	r2, [r3, #4]
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f7ff ffce 	bl	80022ea <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	711a      	strb	r2, [r3, #4]
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002368:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff ffc7 	bl	80022fe <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002384:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f043 0204 	orr.w	r2, r3, #4
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f7ff ffbd 	bl	8002312 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	711a      	strb	r2, [r3, #4]
}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff fc1e 	bl	8001bf4 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e099      	b.n	80024f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e4:	e00f      	b.n	8002406 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e6:	f7ff fc05 	bl	8001bf4 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d908      	bls.n	8002406 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2203      	movs	r2, #3
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e078      	b.n	80024f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e8      	bne.n	80023e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4b38      	ldr	r3, [pc, #224]	; (8002500 <HAL_DMA_Init+0x158>)
 8002420:	4013      	ands	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002432:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	2b04      	cmp	r3, #4
 800245e:	d107      	bne.n	8002470 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4313      	orrs	r3, r2
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f023 0307 	bic.w	r3, r3, #7
 8002486:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	2b04      	cmp	r3, #4
 8002498:	d117      	bne.n	80024ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fa77 	bl	80029a0 <DMA_CheckFifoParam>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2240      	movs	r2, #64	; 0x40
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024c6:	2301      	movs	r3, #1
 80024c8:	e016      	b.n	80024f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fa2e 	bl	8002934 <DMA_CalcBaseAndBitshift>
 80024d8:	4603      	mov	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	223f      	movs	r2, #63	; 0x3f
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	f010803f 	.word	0xf010803f

08002504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_DMA_Start_IT+0x26>
 8002526:	2302      	movs	r3, #2
 8002528:	e048      	b.n	80025bc <HAL_DMA_Start_IT+0xb8>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d137      	bne.n	80025ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f9c0 	bl	80028d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	409a      	lsls	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0216 	orr.w	r2, r2, #22
 8002572:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695a      	ldr	r2, [r3, #20]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002582:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0208 	orr.w	r2, r2, #8
 800259a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e005      	b.n	80025ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
 80025b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80025d0:	4b92      	ldr	r3, [pc, #584]	; (800281c <HAL_DMA_IRQHandler+0x258>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a92      	ldr	r2, [pc, #584]	; (8002820 <HAL_DMA_IRQHandler+0x25c>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	0a9b      	lsrs	r3, r3, #10
 80025dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	2208      	movs	r2, #8
 80025f0:	409a      	lsls	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01a      	beq.n	8002630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0204 	bic.w	r2, r2, #4
 8002616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261c:	2208      	movs	r2, #8
 800261e:	409a      	lsls	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	f043 0201 	orr.w	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	2201      	movs	r2, #1
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d012      	beq.n	8002666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002652:	2201      	movs	r2, #1
 8002654:	409a      	lsls	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	f043 0202 	orr.w	r2, r3, #2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	2204      	movs	r2, #4
 800266c:	409a      	lsls	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d012      	beq.n	800269c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002688:	2204      	movs	r2, #4
 800268a:	409a      	lsls	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	f043 0204 	orr.w	r2, r3, #4
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	2210      	movs	r2, #16
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d043      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d03c      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	2210      	movs	r2, #16
 80026c0:	409a      	lsls	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d018      	beq.n	8002706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d108      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d024      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4798      	blx	r3
 80026f2:	e01f      	b.n	8002734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01b      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
 8002704:	e016      	b.n	8002734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0208 	bic.w	r2, r2, #8
 8002722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	2220      	movs	r2, #32
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 808e 	beq.w	8002862 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8086 	beq.w	8002862 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	2220      	movs	r2, #32
 800275c:	409a      	lsls	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b05      	cmp	r3, #5
 800276c:	d136      	bne.n	80027dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0216 	bic.w	r2, r2, #22
 800277c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800278c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <HAL_DMA_IRQHandler+0x1da>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0208 	bic.w	r2, r2, #8
 80027ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	223f      	movs	r2, #63	; 0x3f
 80027b4:	409a      	lsls	r2, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d07d      	beq.n	80028ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
        }
        return;
 80027da:	e078      	b.n	80028ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01c      	beq.n	8002824 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d108      	bne.n	800280a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d030      	beq.n	8002862 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	4798      	blx	r3
 8002808:	e02b      	b.n	8002862 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d027      	beq.n	8002862 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
 800281a:	e022      	b.n	8002862 <HAL_DMA_IRQHandler+0x29e>
 800281c:	20000004 	.word	0x20000004
 8002820:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10f      	bne.n	8002852 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0210 	bic.w	r2, r2, #16
 8002840:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002866:	2b00      	cmp	r3, #0
 8002868:	d032      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d022      	beq.n	80028bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2205      	movs	r2, #5
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3301      	adds	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	429a      	cmp	r2, r3
 8002898:	d307      	bcc.n	80028aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f2      	bne.n	800288e <HAL_DMA_IRQHandler+0x2ca>
 80028a8:	e000      	b.n	80028ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
 80028cc:	e000      	b.n	80028d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028ce:	bf00      	nop
    }
  }
}
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop

080028d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b40      	cmp	r3, #64	; 0x40
 8002904:	d108      	bne.n	8002918 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002916:	e007      	b.n	8002928 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	60da      	str	r2, [r3, #12]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	3b10      	subs	r3, #16
 8002944:	4a13      	ldr	r2, [pc, #76]	; (8002994 <DMA_CalcBaseAndBitshift+0x60>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800294e:	4a12      	ldr	r2, [pc, #72]	; (8002998 <DMA_CalcBaseAndBitshift+0x64>)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d908      	bls.n	8002974 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <DMA_CalcBaseAndBitshift+0x68>)
 800296a:	4013      	ands	r3, r2
 800296c:	1d1a      	adds	r2, r3, #4
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	659a      	str	r2, [r3, #88]	; 0x58
 8002972:	e006      	b.n	8002982 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <DMA_CalcBaseAndBitshift+0x68>)
 800297c:	4013      	ands	r3, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	aaaaaaab 	.word	0xaaaaaaab
 8002998:	0800ba00 	.word	0x0800ba00
 800299c:	fffffc00 	.word	0xfffffc00

080029a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11f      	bne.n	80029fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d855      	bhi.n	8002a6c <DMA_CheckFifoParam+0xcc>
 80029c0:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <DMA_CheckFifoParam+0x28>)
 80029c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c6:	bf00      	nop
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029eb 	.word	0x080029eb
 80029d0:	080029d9 	.word	0x080029d9
 80029d4:	08002a6d 	.word	0x08002a6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d045      	beq.n	8002a70 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e8:	e042      	b.n	8002a70 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029f2:	d13f      	bne.n	8002a74 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f8:	e03c      	b.n	8002a74 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a02:	d121      	bne.n	8002a48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d836      	bhi.n	8002a78 <DMA_CheckFifoParam+0xd8>
 8002a0a:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <DMA_CheckFifoParam+0x70>)
 8002a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a10:	08002a21 	.word	0x08002a21
 8002a14:	08002a27 	.word	0x08002a27
 8002a18:	08002a21 	.word	0x08002a21
 8002a1c:	08002a39 	.word	0x08002a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	e02f      	b.n	8002a86 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d024      	beq.n	8002a7c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a36:	e021      	b.n	8002a7c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a40:	d11e      	bne.n	8002a80 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a46:	e01b      	b.n	8002a80 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d902      	bls.n	8002a54 <DMA_CheckFifoParam+0xb4>
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d003      	beq.n	8002a5a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a52:	e018      	b.n	8002a86 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e015      	b.n	8002a86 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00e      	beq.n	8002a84 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6a:	e00b      	b.n	8002a84 <DMA_CheckFifoParam+0xe4>
      break;
 8002a6c:	bf00      	nop
 8002a6e:	e00a      	b.n	8002a86 <DMA_CheckFifoParam+0xe6>
      break;
 8002a70:	bf00      	nop
 8002a72:	e008      	b.n	8002a86 <DMA_CheckFifoParam+0xe6>
      break;
 8002a74:	bf00      	nop
 8002a76:	e006      	b.n	8002a86 <DMA_CheckFifoParam+0xe6>
      break;
 8002a78:	bf00      	nop
 8002a7a:	e004      	b.n	8002a86 <DMA_CheckFifoParam+0xe6>
      break;
 8002a7c:	bf00      	nop
 8002a7e:	e002      	b.n	8002a86 <DMA_CheckFifoParam+0xe6>
      break;   
 8002a80:	bf00      	nop
 8002a82:	e000      	b.n	8002a86 <DMA_CheckFifoParam+0xe6>
      break;
 8002a84:	bf00      	nop
    }
  } 
  
  return status; 
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	; 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e175      	b.n	8002da0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	f040 8164 	bne.w	8002d9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d00b      	beq.n	8002af2 <HAL_GPIO_Init+0x5e>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d007      	beq.n	8002af2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ae6:	2b11      	cmp	r3, #17
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b12      	cmp	r3, #18
 8002af0:	d130      	bne.n	8002b54 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	2203      	movs	r2, #3
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 0201 	and.w	r2, r3, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x100>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b12      	cmp	r3, #18
 8002b92:	d123      	bne.n	8002bdc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	220f      	movs	r2, #15
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	08da      	lsrs	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3208      	adds	r2, #8
 8002bd6:	69b9      	ldr	r1, [r7, #24]
 8002bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80be 	beq.w	8002d9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	4b65      	ldr	r3, [pc, #404]	; (8002db4 <HAL_GPIO_Init+0x320>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	4a64      	ldr	r2, [pc, #400]	; (8002db4 <HAL_GPIO_Init+0x320>)
 8002c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c28:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2a:	4b62      	ldr	r3, [pc, #392]	; (8002db4 <HAL_GPIO_Init+0x320>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c36:	4a60      	ldr	r2, [pc, #384]	; (8002db8 <HAL_GPIO_Init+0x324>)
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	220f      	movs	r2, #15
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a57      	ldr	r2, [pc, #348]	; (8002dbc <HAL_GPIO_Init+0x328>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d037      	beq.n	8002cd2 <HAL_GPIO_Init+0x23e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a56      	ldr	r2, [pc, #344]	; (8002dc0 <HAL_GPIO_Init+0x32c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d031      	beq.n	8002cce <HAL_GPIO_Init+0x23a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a55      	ldr	r2, [pc, #340]	; (8002dc4 <HAL_GPIO_Init+0x330>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d02b      	beq.n	8002cca <HAL_GPIO_Init+0x236>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a54      	ldr	r2, [pc, #336]	; (8002dc8 <HAL_GPIO_Init+0x334>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d025      	beq.n	8002cc6 <HAL_GPIO_Init+0x232>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a53      	ldr	r2, [pc, #332]	; (8002dcc <HAL_GPIO_Init+0x338>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01f      	beq.n	8002cc2 <HAL_GPIO_Init+0x22e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a52      	ldr	r2, [pc, #328]	; (8002dd0 <HAL_GPIO_Init+0x33c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d019      	beq.n	8002cbe <HAL_GPIO_Init+0x22a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a51      	ldr	r2, [pc, #324]	; (8002dd4 <HAL_GPIO_Init+0x340>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_GPIO_Init+0x226>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a50      	ldr	r2, [pc, #320]	; (8002dd8 <HAL_GPIO_Init+0x344>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00d      	beq.n	8002cb6 <HAL_GPIO_Init+0x222>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4f      	ldr	r2, [pc, #316]	; (8002ddc <HAL_GPIO_Init+0x348>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <HAL_GPIO_Init+0x21e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4e      	ldr	r2, [pc, #312]	; (8002de0 <HAL_GPIO_Init+0x34c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_GPIO_Init+0x21a>
 8002caa:	2309      	movs	r3, #9
 8002cac:	e012      	b.n	8002cd4 <HAL_GPIO_Init+0x240>
 8002cae:	230a      	movs	r3, #10
 8002cb0:	e010      	b.n	8002cd4 <HAL_GPIO_Init+0x240>
 8002cb2:	2308      	movs	r3, #8
 8002cb4:	e00e      	b.n	8002cd4 <HAL_GPIO_Init+0x240>
 8002cb6:	2307      	movs	r3, #7
 8002cb8:	e00c      	b.n	8002cd4 <HAL_GPIO_Init+0x240>
 8002cba:	2306      	movs	r3, #6
 8002cbc:	e00a      	b.n	8002cd4 <HAL_GPIO_Init+0x240>
 8002cbe:	2305      	movs	r3, #5
 8002cc0:	e008      	b.n	8002cd4 <HAL_GPIO_Init+0x240>
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	e006      	b.n	8002cd4 <HAL_GPIO_Init+0x240>
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e004      	b.n	8002cd4 <HAL_GPIO_Init+0x240>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e002      	b.n	8002cd4 <HAL_GPIO_Init+0x240>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_GPIO_Init+0x240>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	f002 0203 	and.w	r2, r2, #3
 8002cda:	0092      	lsls	r2, r2, #2
 8002cdc:	4093      	lsls	r3, r2
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ce4:	4934      	ldr	r1, [pc, #208]	; (8002db8 <HAL_GPIO_Init+0x324>)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	3302      	adds	r3, #2
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf2:	4b3c      	ldr	r3, [pc, #240]	; (8002de4 <HAL_GPIO_Init+0x350>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d16:	4a33      	ldr	r2, [pc, #204]	; (8002de4 <HAL_GPIO_Init+0x350>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d1c:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <HAL_GPIO_Init+0x350>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d40:	4a28      	ldr	r2, [pc, #160]	; (8002de4 <HAL_GPIO_Init+0x350>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d46:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <HAL_GPIO_Init+0x350>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d6a:	4a1e      	ldr	r2, [pc, #120]	; (8002de4 <HAL_GPIO_Init+0x350>)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d70:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <HAL_GPIO_Init+0x350>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d94:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <HAL_GPIO_Init+0x350>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	f67f ae86 	bls.w	8002ab4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002da8:	bf00      	nop
 8002daa:	3724      	adds	r7, #36	; 0x24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40013800 	.word	0x40013800
 8002dbc:	40020000 	.word	0x40020000
 8002dc0:	40020400 	.word	0x40020400
 8002dc4:	40020800 	.word	0x40020800
 8002dc8:	40020c00 	.word	0x40020c00
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40021400 	.word	0x40021400
 8002dd4:	40021800 	.word	0x40021800
 8002dd8:	40021c00 	.word	0x40021c00
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	40022400 	.word	0x40022400
 8002de4:	40013c00 	.word	0x40013c00

08002de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
 8002df4:	4613      	mov	r3, r2
 8002df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df8:	787b      	ldrb	r3, [r7, #1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e04:	e003      	b.n	8002e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e06:	887b      	ldrh	r3, [r7, #2]
 8002e08:	041a      	lsls	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	619a      	str	r2, [r3, #24]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e2c:	887a      	ldrh	r2, [r7, #2]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	041a      	lsls	r2, r3, #16
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	43d9      	mvns	r1, r3
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	400b      	ands	r3, r1
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	619a      	str	r2, [r3, #24]
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e50:	b08f      	sub	sp, #60	; 0x3c
 8002e52:	af0a      	add	r7, sp, #40	; 0x28
 8002e54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e116      	b.n	800308e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f007 f926 	bl	800a0cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2203      	movs	r2, #3
 8002e84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f004 f8f5 	bl	800708e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	687e      	ldr	r6, [r7, #4]
 8002eac:	466d      	mov	r5, sp
 8002eae:	f106 0410 	add.w	r4, r6, #16
 8002eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ebe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ec2:	1d33      	adds	r3, r6, #4
 8002ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec6:	6838      	ldr	r0, [r7, #0]
 8002ec8:	f003 ffd6 	bl	8006e78 <USB_CoreInit>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0d7      	b.n	800308e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f004 f8e3 	bl	80070b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
 8002eee:	e04a      	b.n	8002f86 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	333d      	adds	r3, #61	; 0x3d
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	333c      	adds	r3, #60	; 0x3c
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	b298      	uxth	r0, r3
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	3342      	adds	r3, #66	; 0x42
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f30:	7bfa      	ldrb	r2, [r7, #15]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	333f      	adds	r3, #63	; 0x3f
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f44:	7bfa      	ldrb	r2, [r7, #15]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	3344      	adds	r3, #68	; 0x44
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	3348      	adds	r3, #72	; 0x48
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	3350      	adds	r3, #80	; 0x50
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	3301      	adds	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d3af      	bcc.n	8002ef0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	e044      	b.n	8003020 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	3301      	adds	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	429a      	cmp	r2, r3
 8003028:	d3b5      	bcc.n	8002f96 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	687e      	ldr	r6, [r7, #4]
 8003032:	466d      	mov	r5, sp
 8003034:	f106 0410 	add.w	r4, r6, #16
 8003038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800303a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800303c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800303e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003040:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003044:	e885 0003 	stmia.w	r5, {r0, r1}
 8003048:	1d33      	adds	r3, r6, #4
 800304a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800304c:	6838      	ldr	r0, [r7, #0]
 800304e:	f004 f859 	bl	8007104 <USB_DevInit>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e014      	b.n	800308e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2b01      	cmp	r3, #1
 800307a:	d102      	bne.n	8003082 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f001 f881 	bl	8004184 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f005 f8b1 	bl	80081ee <USB_DevDisconnect>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003096 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_PCD_Start+0x16>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e012      	b.n	80030d2 <HAL_PCD_Start+0x3c>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f003 ffd7 	bl	800706c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f005 f872 	bl	80081ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030da:	b590      	push	{r4, r7, lr}
 80030dc:	b08d      	sub	sp, #52	; 0x34
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f005 f930 	bl	8008356 <USB_GetMode>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f040 83ca 	bne.w	8003892 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f005 f894 	bl	8008230 <USB_ReadInterrupts>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 83c0 	beq.w	8003890 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f005 f88b 	bl	8008230 <USB_ReadInterrupts>
 800311a:	4603      	mov	r3, r0
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b02      	cmp	r3, #2
 8003122:	d107      	bne.n	8003134 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f002 0202 	and.w	r2, r2, #2
 8003132:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f005 f879 	bl	8008230 <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b10      	cmp	r3, #16
 8003146:	d161      	bne.n	800320c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0210 	bic.w	r2, r2, #16
 8003156:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f003 020f 	and.w	r2, r3, #15
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	3304      	adds	r3, #4
 8003176:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	0c5b      	lsrs	r3, r3, #17
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	2b02      	cmp	r3, #2
 8003182:	d124      	bne.n	80031ce <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d035      	beq.n	80031fc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800319a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800319e:	b29b      	uxth	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	6a38      	ldr	r0, [r7, #32]
 80031a4:	f004 fedf 	bl	8007f66 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031b4:	441a      	add	r2, r3
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031c6:	441a      	add	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	619a      	str	r2, [r3, #24]
 80031cc:	e016      	b.n	80031fc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	0c5b      	lsrs	r3, r3, #17
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d110      	bne.n	80031fc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031e0:	2208      	movs	r2, #8
 80031e2:	4619      	mov	r1, r3
 80031e4:	6a38      	ldr	r0, [r7, #32]
 80031e6:	f004 febe 	bl	8007f66 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031f6:	441a      	add	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0210 	orr.w	r2, r2, #16
 800320a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f005 f80d 	bl	8008230 <USB_ReadInterrupts>
 8003216:	4603      	mov	r3, r0
 8003218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003220:	d16e      	bne.n	8003300 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f005 f813 	bl	8008256 <USB_ReadDevAllOutEpInterrupt>
 8003230:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003232:	e062      	b.n	80032fa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d057      	beq.n	80032ee <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f005 f838 	bl	80082be <USB_ReadDevOutEPInterrupt>
 800324e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00c      	beq.n	8003274 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	4413      	add	r3, r2
 8003262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003266:	461a      	mov	r2, r3
 8003268:	2301      	movs	r3, #1
 800326a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800326c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fdde 	bl	8003e30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00c      	beq.n	8003298 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328a:	461a      	mov	r2, r3
 800328c:	2308      	movs	r3, #8
 800328e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fed8 	bl	8004048 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ae:	461a      	mov	r2, r3
 80032b0:	2310      	movs	r3, #16
 80032b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ca:	461a      	mov	r2, r3
 80032cc:	2320      	movs	r3, #32
 80032ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d009      	beq.n	80032ee <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e6:	461a      	mov	r2, r3
 80032e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	3301      	adds	r3, #1
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d199      	bne.n	8003234 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f004 ff93 	bl	8008230 <USB_ReadInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003310:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003314:	f040 80c0 	bne.w	8003498 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f004 ffb4 	bl	800828a <USB_ReadDevAllInEpInterrupt>
 8003322:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003328:	e0b2      	b.n	8003490 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a7 	beq.w	8003484 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f004 ffda 	bl	80082fa <USB_ReadDevInEPInterrupt>
 8003346:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d057      	beq.n	8003402 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	2201      	movs	r2, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	43db      	mvns	r3, r3
 800336c:	69f9      	ldr	r1, [r7, #28]
 800336e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003372:	4013      	ands	r3, r2
 8003374:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003382:	461a      	mov	r2, r3
 8003384:	2301      	movs	r3, #1
 8003386:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d132      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	3348      	adds	r3, #72	; 0x48
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4403      	add	r3, r0
 80033b0:	3344      	adds	r3, #68	; 0x44
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4419      	add	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4403      	add	r3, r0
 80033c4:	3348      	adds	r3, #72	; 0x48
 80033c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d113      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x31c>
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	3350      	adds	r3, #80	; 0x50
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d108      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033ee:	461a      	mov	r2, r3
 80033f0:	2101      	movs	r1, #1
 80033f2:	f004 ffe3 	bl	80083bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f006 fee8 	bl	800a1d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003418:	461a      	mov	r2, r3
 800341a:	2308      	movs	r3, #8
 800341c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003434:	461a      	mov	r2, r3
 8003436:	2310      	movs	r3, #16
 8003438:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003450:	461a      	mov	r2, r3
 8003452:	2340      	movs	r3, #64	; 0x40
 8003454:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346c:	461a      	mov	r2, r3
 800346e:	2302      	movs	r3, #2
 8003470:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800347c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fc48 	bl	8003d14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	3301      	adds	r3, #1
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	2b00      	cmp	r3, #0
 8003494:	f47f af49 	bne.w	800332a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f004 fec7 	bl	8008230 <USB_ReadInterrupts>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034ac:	d122      	bne.n	80034f4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d108      	bne.n	80034de <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034d4:	2100      	movs	r1, #0
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f007 f8ca 	bl	800a670 <HAL_PCDEx_LPM_Callback>
 80034dc:	e002      	b.n	80034e4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f006 feee 	bl	800a2c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f004 fe99 	bl	8008230 <USB_ReadInterrupts>
 80034fe:	4603      	mov	r3, r0
 8003500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003508:	d112      	bne.n	8003530 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b01      	cmp	r3, #1
 8003518:	d102      	bne.n	8003520 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f006 feaa 	bl	800a274 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800352e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f004 fe7b 	bl	8008230 <USB_ReadInterrupts>
 800353a:	4603      	mov	r3, r0
 800353c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003544:	d121      	bne.n	800358a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003554:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d111      	bne.n	8003584 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	f003 020f 	and.w	r2, r3, #15
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800357a:	2101      	movs	r1, #1
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f007 f877 	bl	800a670 <HAL_PCDEx_LPM_Callback>
 8003582:	e002      	b.n	800358a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f006 fe75 	bl	800a274 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f004 fe4e 	bl	8008230 <USB_ReadInterrupts>
 8003594:	4603      	mov	r3, r0
 8003596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800359a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359e:	f040 80c7 	bne.w	8003730 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2110      	movs	r1, #16
 80035bc:	4618      	mov	r0, r3
 80035be:	f003 ff0f 	bl	80073e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c6:	e056      	b.n	8003676 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d4:	461a      	mov	r2, r3
 80035d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ec:	0151      	lsls	r1, r2, #5
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	440a      	add	r2, r1
 80035f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035fa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	440a      	add	r2, r1
 8003612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800361a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003628:	461a      	mov	r2, r3
 800362a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800362e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003640:	0151      	lsls	r1, r2, #5
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	440a      	add	r2, r1
 8003646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800364a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800364e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003660:	0151      	lsls	r1, r2, #5
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	440a      	add	r2, r1
 8003666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800366a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800366e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003672:	3301      	adds	r3, #1
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800367c:	429a      	cmp	r2, r3
 800367e:	d3a3      	bcc.n	80035c8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003692:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	2b00      	cmp	r3, #0
 800369a:	d016      	beq.n	80036ca <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ac:	f043 030b 	orr.w	r3, r3, #11
 80036b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c2:	f043 030b 	orr.w	r3, r3, #11
 80036c6:	6453      	str	r3, [r2, #68]	; 0x44
 80036c8:	e015      	b.n	80036f6 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d8:	4619      	mov	r1, r3
 80036da:	f242 032b 	movw	r3, #8235	; 0x202b
 80036de:	4313      	orrs	r3, r2
 80036e0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f0:	f043 030b 	orr.w	r3, r3, #11
 80036f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003704:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003708:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800371a:	461a      	mov	r2, r3
 800371c:	f004 fe4e 	bl	80083bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800372e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f004 fd7b 	bl	8008230 <USB_ReadInterrupts>
 800373a:	4603      	mov	r3, r0
 800373c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003744:	d124      	bne.n	8003790 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f004 fe12 	bl	8008374 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f003 fea4 	bl	80074a2 <USB_GetDevSpeed>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681c      	ldr	r4, [r3, #0]
 8003766:	f001 f973 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 800376a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	4620      	mov	r0, r4
 8003776:	f003 fbd7 	bl	8006f28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f006 fd51 	bl	800a222 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800378e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f004 fd4b 	bl	8008230 <USB_ReadInterrupts>
 800379a:	4603      	mov	r3, r0
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d10a      	bne.n	80037ba <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f006 fd2e 	bl	800a206 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f002 0208 	and.w	r2, r2, #8
 80037b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f004 fd36 	bl	8008230 <USB_ReadInterrupts>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ce:	d10f      	bne.n	80037f0 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f006 fd90 	bl	800a300 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f004 fd1b 	bl	8008230 <USB_ReadInterrupts>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003800:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003804:	d10f      	bne.n	8003826 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	b2db      	uxtb	r3, r3
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f006 fd63 	bl	800a2dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f004 fd00 	bl	8008230 <USB_ReadInterrupts>
 8003830:	4603      	mov	r3, r0
 8003832:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383a:	d10a      	bne.n	8003852 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f006 fd71 	bl	800a324 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f004 fcea 	bl	8008230 <USB_ReadInterrupts>
 800385c:	4603      	mov	r3, r0
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b04      	cmp	r3, #4
 8003864:	d115      	bne.n	8003892 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f006 fd61 	bl	800a340 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	e000      	b.n	8003892 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003890:	bf00      	nop
    }
  }
}
 8003892:	3734      	adds	r7, #52	; 0x34
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}

08003898 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_PCD_SetAddress+0x1a>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e013      	b.n	80038da <HAL_PCD_SetAddress+0x42>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	4611      	mov	r1, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f004 fc48 	bl	8008160 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	4608      	mov	r0, r1
 80038ec:	4611      	mov	r1, r2
 80038ee:	461a      	mov	r2, r3
 80038f0:	4603      	mov	r3, r0
 80038f2:	70fb      	strb	r3, [r7, #3]
 80038f4:	460b      	mov	r3, r1
 80038f6:	803b      	strh	r3, [r7, #0]
 80038f8:	4613      	mov	r3, r2
 80038fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003904:	2b00      	cmp	r3, #0
 8003906:	da0f      	bge.n	8003928 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	f003 020f 	and.w	r2, r3, #15
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	3338      	adds	r3, #56	; 0x38
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	4413      	add	r3, r2
 800391c:	3304      	adds	r3, #4
 800391e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	705a      	strb	r2, [r3, #1]
 8003926:	e00f      	b.n	8003948 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	f003 020f 	and.w	r2, r3, #15
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	3304      	adds	r3, #4
 8003940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	b2da      	uxtb	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003954:	883a      	ldrh	r2, [r7, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	78ba      	ldrb	r2, [r7, #2]
 800395e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	785b      	ldrb	r3, [r3, #1]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003972:	78bb      	ldrb	r3, [r7, #2]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d102      	bne.n	800397e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_PCD_EP_Open+0xaa>
 8003988:	2302      	movs	r3, #2
 800398a:	e00e      	b.n	80039aa <HAL_PCD_EP_Open+0xc8>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68f9      	ldr	r1, [r7, #12]
 800399a:	4618      	mov	r0, r3
 800399c:	f003 fda6 	bl	80074ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80039a8:	7afb      	ldrb	r3, [r7, #11]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	da0f      	bge.n	80039e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	f003 020f 	and.w	r2, r3, #15
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	3338      	adds	r3, #56	; 0x38
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	3304      	adds	r3, #4
 80039dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	705a      	strb	r2, [r3, #1]
 80039e4:	e00f      	b.n	8003a06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039e6:	78fb      	ldrb	r3, [r7, #3]
 80039e8:	f003 020f 	and.w	r2, r3, #15
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	3304      	adds	r3, #4
 80039fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_PCD_EP_Close+0x6e>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e00e      	b.n	8003a3e <HAL_PCD_EP_Close+0x8c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68f9      	ldr	r1, [r7, #12]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f003 fde4 	bl	80075fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b086      	sub	sp, #24
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	460b      	mov	r3, r1
 8003a54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a56:	7afb      	ldrb	r3, [r7, #11]
 8003a58:	f003 020f 	and.w	r2, r3, #15
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2200      	movs	r2, #0
 8003a86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a88:	7afb      	ldrb	r3, [r7, #11]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d102      	bne.n	8003aa2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aa2:	7afb      	ldrb	r3, [r7, #11]
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	6979      	ldr	r1, [r7, #20]
 8003aba:	f004 f8c7 	bl	8007c4c <USB_EP0StartXfer>
 8003abe:	e008      	b.n	8003ad2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	6979      	ldr	r1, [r7, #20]
 8003ace:	f003 fe71 	bl	80077b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	f003 020f 	and.w	r2, r3, #15
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003afe:	681b      	ldr	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b1c:	7afb      	ldrb	r3, [r7, #11]
 8003b1e:	f003 020f 	and.w	r2, r3, #15
 8003b22:	4613      	mov	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	3338      	adds	r3, #56	; 0x38
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	3304      	adds	r3, #4
 8003b32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2200      	movs	r2, #0
 8003b44:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b4c:	7afb      	ldrb	r3, [r7, #11]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d102      	bne.n	8003b66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b66:	7afb      	ldrb	r3, [r7, #11]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	6979      	ldr	r1, [r7, #20]
 8003b7e:	f004 f865 	bl	8007c4c <USB_EP0StartXfer>
 8003b82:	e008      	b.n	8003b96 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6979      	ldr	r1, [r7, #20]
 8003b92:	f003 fe0f 	bl	80077b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f003 020f 	and.w	r2, r3, #15
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d901      	bls.n	8003bbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e050      	b.n	8003c60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	da0f      	bge.n	8003be6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	f003 020f 	and.w	r2, r3, #15
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	3338      	adds	r3, #56	; 0x38
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3304      	adds	r3, #4
 8003bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	705a      	strb	r2, [r3, #1]
 8003be4:	e00d      	b.n	8003c02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_PCD_EP_SetStall+0x82>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e01e      	b.n	8003c60 <HAL_PCD_EP_SetStall+0xc0>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68f9      	ldr	r1, [r7, #12]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f004 f9c1 	bl	8007fb8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	b2d9      	uxtb	r1, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c50:	461a      	mov	r2, r3
 8003c52:	f004 fbb3 	bl	80083bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	f003 020f 	and.w	r2, r3, #15
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d901      	bls.n	8003c86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e042      	b.n	8003d0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da0f      	bge.n	8003cae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	f003 020f 	and.w	r2, r3, #15
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	3338      	adds	r3, #56	; 0x38
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	705a      	strb	r2, [r3, #1]
 8003cac:	e00f      	b.n	8003cce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	f003 020f 	and.w	r2, r3, #15
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_PCD_EP_ClrStall+0x86>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e00e      	b.n	8003d0c <HAL_PCD_EP_ClrStall+0xa4>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68f9      	ldr	r1, [r7, #12]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f004 f9c9 	bl	8008094 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	; 0x28
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	3338      	adds	r3, #56	; 0x38
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4413      	add	r3, r2
 8003d38:	3304      	adds	r3, #4
 8003d3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d901      	bls.n	8003d4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e06c      	b.n	8003e26 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d902      	bls.n	8003d68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	3303      	adds	r3, #3
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d70:	e02b      	b.n	8003dca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d902      	bls.n	8003d8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3303      	adds	r3, #3
 8003d92:	089b      	lsrs	r3, r3, #2
 8003d94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68d9      	ldr	r1, [r3, #12]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	4603      	mov	r3, r0
 8003dac:	6978      	ldr	r0, [r7, #20]
 8003dae:	f004 f8a5 	bl	8007efc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	441a      	add	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	441a      	add	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d809      	bhi.n	8003df4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	699a      	ldr	r2, [r3, #24]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d203      	bcs.n	8003df4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1be      	bne.n	8003d72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d811      	bhi.n	8003e24 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	2201      	movs	r2, #1
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	6939      	ldr	r1, [r7, #16]
 8003e1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e20:	4013      	ands	r3, r2
 8003e22:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	333c      	adds	r3, #60	; 0x3c
 8003e48:	3304      	adds	r3, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	f040 80a0 	bne.w	8003fa8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d015      	beq.n	8003e9e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4a72      	ldr	r2, [pc, #456]	; (8004040 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	f240 80dd 	bls.w	8004036 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80d7 	beq.w	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	461a      	mov	r2, r3
 8003e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9a:	6093      	str	r3, [r2, #8]
 8003e9c:	e0cb      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	6093      	str	r3, [r2, #8]
 8003eba:	e0bc      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 80b7 	bne.w	8004036 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a5d      	ldr	r2, [pc, #372]	; (8004040 <PCD_EP_OutXfrComplete_int+0x210>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d90f      	bls.n	8003ef0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eec:	6093      	str	r3, [r2, #8]
 8003eee:	e0a2      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f02:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	0159      	lsls	r1, r3, #5
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003f16:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4403      	add	r3, r0
 8003f26:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f2a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f3e:	6819      	ldr	r1, [r3, #0]
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4403      	add	r3, r0
 8003f4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4419      	add	r1, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4403      	add	r3, r0
 8003f64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f68:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d114      	bne.n	8003f9a <PCD_EP_OutXfrComplete_int+0x16a>
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d108      	bne.n	8003f9a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f92:	461a      	mov	r2, r3
 8003f94:	2101      	movs	r1, #1
 8003f96:	f004 fa11 	bl	80083bc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f006 f8fb 	bl	800a19c <HAL_PCD_DataOutStageCallback>
 8003fa6:	e046      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a26      	ldr	r2, [pc, #152]	; (8004044 <PCD_EP_OutXfrComplete_int+0x214>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d124      	bne.n	8003ffa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fcc:	6093      	str	r3, [r2, #8]
 8003fce:	e032      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2320      	movs	r3, #32
 8003fea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f006 f8d2 	bl	800a19c <HAL_PCD_DataOutStageCallback>
 8003ff8:	e01d      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d114      	bne.n	800402a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d108      	bne.n	800402a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004022:	461a      	mov	r2, r3
 8004024:	2100      	movs	r1, #0
 8004026:	f004 f9c9 	bl	80083bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	4619      	mov	r1, r3
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f006 f8b3 	bl	800a19c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	4f54300a 	.word	0x4f54300a
 8004044:	4f54310a 	.word	0x4f54310a

08004048 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	333c      	adds	r3, #60	; 0x3c
 8004060:	3304      	adds	r3, #4
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d90e      	bls.n	800409c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004094:	461a      	mov	r2, r3
 8004096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f006 f86b 	bl	800a178 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d90c      	bls.n	80040c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d108      	bne.n	80040c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040bc:	461a      	mov	r2, r3
 80040be:	2101      	movs	r1, #1
 80040c0:	f004 f97c 	bl	80083bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	4f54300a 	.word	0x4f54300a

080040d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	70fb      	strb	r3, [r7, #3]
 80040e0:	4613      	mov	r3, r2
 80040e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040f2:	883b      	ldrh	r3, [r7, #0]
 80040f4:	0419      	lsls	r1, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004100:	e028      	b.n	8004154 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	4413      	add	r3, r2
 800410e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004110:	2300      	movs	r3, #0
 8004112:	73fb      	strb	r3, [r7, #15]
 8004114:	e00d      	b.n	8004132 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	3340      	adds	r3, #64	; 0x40
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	4413      	add	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	3301      	adds	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
 8004132:	7bfa      	ldrb	r2, [r7, #15]
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	3b01      	subs	r3, #1
 8004138:	429a      	cmp	r2, r3
 800413a:	d3ec      	bcc.n	8004116 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800413c:	883b      	ldrh	r3, [r7, #0]
 800413e:	0418      	lsls	r0, r3, #16
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6819      	ldr	r1, [r3, #0]
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	3b01      	subs	r3, #1
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	4302      	orrs	r2, r0
 800414c:	3340      	adds	r3, #64	; 0x40
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	887a      	ldrh	r2, [r7, #2]
 8004174:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041b2:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	10000003 	.word	0x10000003

080041cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041d4:	2300      	movs	r3, #0
 80041d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e291      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 8087 	beq.w	80042fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041f0:	4b96      	ldr	r3, [pc, #600]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 030c 	and.w	r3, r3, #12
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d00c      	beq.n	8004216 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041fc:	4b93      	ldr	r3, [pc, #588]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 030c 	and.w	r3, r3, #12
 8004204:	2b08      	cmp	r3, #8
 8004206:	d112      	bne.n	800422e <HAL_RCC_OscConfig+0x62>
 8004208:	4b90      	ldr	r3, [pc, #576]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004214:	d10b      	bne.n	800422e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004216:	4b8d      	ldr	r3, [pc, #564]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d06c      	beq.n	80042fc <HAL_RCC_OscConfig+0x130>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d168      	bne.n	80042fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e26b      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004236:	d106      	bne.n	8004246 <HAL_RCC_OscConfig+0x7a>
 8004238:	4b84      	ldr	r3, [pc, #528]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a83      	ldr	r2, [pc, #524]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800423e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	e02e      	b.n	80042a4 <HAL_RCC_OscConfig+0xd8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10c      	bne.n	8004268 <HAL_RCC_OscConfig+0x9c>
 800424e:	4b7f      	ldr	r3, [pc, #508]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a7e      	ldr	r2, [pc, #504]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b7c      	ldr	r3, [pc, #496]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a7b      	ldr	r2, [pc, #492]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	e01d      	b.n	80042a4 <HAL_RCC_OscConfig+0xd8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004270:	d10c      	bne.n	800428c <HAL_RCC_OscConfig+0xc0>
 8004272:	4b76      	ldr	r3, [pc, #472]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a75      	ldr	r2, [pc, #468]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4b73      	ldr	r3, [pc, #460]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a72      	ldr	r2, [pc, #456]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e00b      	b.n	80042a4 <HAL_RCC_OscConfig+0xd8>
 800428c:	4b6f      	ldr	r3, [pc, #444]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a6e      	ldr	r2, [pc, #440]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	4b6c      	ldr	r3, [pc, #432]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a6b      	ldr	r2, [pc, #428]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800429e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d013      	beq.n	80042d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd fca2 	bl	8001bf4 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fd fc9e 	bl	8001bf4 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	; 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e21f      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	4b61      	ldr	r3, [pc, #388]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0xe8>
 80042d2:	e014      	b.n	80042fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fd fc8e 	bl	8001bf4 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042dc:	f7fd fc8a 	bl	8001bf4 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b64      	cmp	r3, #100	; 0x64
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e20b      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ee:	4b57      	ldr	r3, [pc, #348]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x110>
 80042fa:	e000      	b.n	80042fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d069      	beq.n	80043de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800430a:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00b      	beq.n	800432e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004316:	4b4d      	ldr	r3, [pc, #308]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b08      	cmp	r3, #8
 8004320:	d11c      	bne.n	800435c <HAL_RCC_OscConfig+0x190>
 8004322:	4b4a      	ldr	r3, [pc, #296]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d116      	bne.n	800435c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432e:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_RCC_OscConfig+0x17a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d001      	beq.n	8004346 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e1df      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	493d      	ldr	r1, [pc, #244]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004356:	4313      	orrs	r3, r2
 8004358:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435a:	e040      	b.n	80043de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d023      	beq.n	80043ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004364:	4b39      	ldr	r3, [pc, #228]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a38      	ldr	r2, [pc, #224]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fd fc40 	bl	8001bf4 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004378:	f7fd fc3c 	bl	8001bf4 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e1bd      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438a:	4b30      	ldr	r3, [pc, #192]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004396:	4b2d      	ldr	r3, [pc, #180]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4929      	ldr	r1, [pc, #164]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]
 80043aa:	e018      	b.n	80043de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ac:	4b27      	ldr	r3, [pc, #156]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a26      	ldr	r2, [pc, #152]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fd fc1c 	bl	8001bf4 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c0:	f7fd fc18 	bl	8001bf4 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e199      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d2:	4b1e      	ldr	r3, [pc, #120]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d038      	beq.n	800445c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d019      	beq.n	8004426 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80043f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f6:	4a15      	ldr	r2, [pc, #84]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fe:	f7fd fbf9 	bl	8001bf4 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004406:	f7fd fbf5 	bl	8001bf4 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e176      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x23a>
 8004424:	e01a      	b.n	800445c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442a:	4a08      	ldr	r2, [pc, #32]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800442c:	f023 0301 	bic.w	r3, r3, #1
 8004430:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fd fbdf 	bl	8001bf4 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004438:	e00a      	b.n	8004450 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443a:	f7fd fbdb 	bl	8001bf4 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d903      	bls.n	8004450 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e15c      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
 800444c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004450:	4b91      	ldr	r3, [pc, #580]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1ee      	bne.n	800443a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80a4 	beq.w	80045b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446a:	4b8b      	ldr	r3, [pc, #556]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10d      	bne.n	8004492 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004476:	4b88      	ldr	r3, [pc, #544]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	4a87      	ldr	r2, [pc, #540]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 800447c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004480:	6413      	str	r3, [r2, #64]	; 0x40
 8004482:	4b85      	ldr	r3, [pc, #532]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800448e:	2301      	movs	r3, #1
 8004490:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004492:	4b82      	ldr	r3, [pc, #520]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d118      	bne.n	80044d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800449e:	4b7f      	ldr	r3, [pc, #508]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a7e      	ldr	r2, [pc, #504]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80044a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044aa:	f7fd fba3 	bl	8001bf4 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b2:	f7fd fb9f 	bl	8001bf4 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b64      	cmp	r3, #100	; 0x64
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e120      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c4:	4b75      	ldr	r3, [pc, #468]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d106      	bne.n	80044e6 <HAL_RCC_OscConfig+0x31a>
 80044d8:	4b6f      	ldr	r3, [pc, #444]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a6e      	ldr	r2, [pc, #440]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
 80044e4:	e02d      	b.n	8004542 <HAL_RCC_OscConfig+0x376>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10c      	bne.n	8004508 <HAL_RCC_OscConfig+0x33c>
 80044ee:	4b6a      	ldr	r3, [pc, #424]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	4a69      	ldr	r2, [pc, #420]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	6713      	str	r3, [r2, #112]	; 0x70
 80044fa:	4b67      	ldr	r3, [pc, #412]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	4a66      	ldr	r2, [pc, #408]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004500:	f023 0304 	bic.w	r3, r3, #4
 8004504:	6713      	str	r3, [r2, #112]	; 0x70
 8004506:	e01c      	b.n	8004542 <HAL_RCC_OscConfig+0x376>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b05      	cmp	r3, #5
 800450e:	d10c      	bne.n	800452a <HAL_RCC_OscConfig+0x35e>
 8004510:	4b61      	ldr	r3, [pc, #388]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	4a60      	ldr	r2, [pc, #384]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004516:	f043 0304 	orr.w	r3, r3, #4
 800451a:	6713      	str	r3, [r2, #112]	; 0x70
 800451c:	4b5e      	ldr	r3, [pc, #376]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	4a5d      	ldr	r2, [pc, #372]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	6713      	str	r3, [r2, #112]	; 0x70
 8004528:	e00b      	b.n	8004542 <HAL_RCC_OscConfig+0x376>
 800452a:	4b5b      	ldr	r3, [pc, #364]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	4a5a      	ldr	r2, [pc, #360]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	6713      	str	r3, [r2, #112]	; 0x70
 8004536:	4b58      	ldr	r3, [pc, #352]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	4a57      	ldr	r2, [pc, #348]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 800453c:	f023 0304 	bic.w	r3, r3, #4
 8004540:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d015      	beq.n	8004576 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454a:	f7fd fb53 	bl	8001bf4 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004550:	e00a      	b.n	8004568 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004552:	f7fd fb4f 	bl	8001bf4 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004560:	4293      	cmp	r3, r2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e0ce      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	4b4b      	ldr	r3, [pc, #300]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ee      	beq.n	8004552 <HAL_RCC_OscConfig+0x386>
 8004574:	e014      	b.n	80045a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004576:	f7fd fb3d 	bl	8001bf4 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7fd fb39 	bl	8001bf4 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e0b8      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004594:	4b40      	ldr	r3, [pc, #256]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1ee      	bne.n	800457e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d105      	bne.n	80045b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a6:	4b3c      	ldr	r3, [pc, #240]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	4a3b      	ldr	r2, [pc, #236]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 80045ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80a4 	beq.w	8004704 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045bc:	4b36      	ldr	r3, [pc, #216]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 030c 	and.w	r3, r3, #12
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d06b      	beq.n	80046a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d149      	bne.n	8004664 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d0:	4b31      	ldr	r3, [pc, #196]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a30      	ldr	r2, [pc, #192]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 80045d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fd fb0a 	bl	8001bf4 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e4:	f7fd fb06 	bl	8001bf4 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e087      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f6:	4b28      	ldr	r3, [pc, #160]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69da      	ldr	r2, [r3, #28]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	019b      	lsls	r3, r3, #6
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	3b01      	subs	r3, #1
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	4313      	orrs	r3, r2
 8004628:	4a1b      	ldr	r2, [pc, #108]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 800462a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800462e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004630:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a18      	ldr	r2, [pc, #96]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd fada 	bl	8001bf4 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004644:	f7fd fad6 	bl	8001bf4 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e057      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x478>
 8004662:	e04f      	b.n	8004704 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004664:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a0b      	ldr	r2, [pc, #44]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 800466a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800466e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd fac0 	bl	8001bf4 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004678:	f7fd fabc 	bl	8001bf4 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e03d      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468a:	4b03      	ldr	r3, [pc, #12]	; (8004698 <HAL_RCC_OscConfig+0x4cc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x4ac>
 8004696:	e035      	b.n	8004704 <HAL_RCC_OscConfig+0x538>
 8004698:	40023800 	.word	0x40023800
 800469c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046a0:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <HAL_RCC_OscConfig+0x544>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d028      	beq.n	8004700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d121      	bne.n	8004700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d11a      	bne.n	8004700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046d0:	4013      	ands	r3, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046d8:	4293      	cmp	r3, r2
 80046da:	d111      	bne.n	8004700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	3b01      	subs	r3, #1
 80046ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40023800 	.word	0x40023800

08004714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0d0      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800472c:	4b6a      	ldr	r3, [pc, #424]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d910      	bls.n	800475c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b67      	ldr	r3, [pc, #412]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 020f 	bic.w	r2, r3, #15
 8004742:	4965      	ldr	r1, [pc, #404]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b63      	ldr	r3, [pc, #396]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0b8      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a58      	ldr	r2, [pc, #352]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 800477a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800477e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800478c:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a52      	ldr	r2, [pc, #328]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 8004792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004796:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004798:	4b50      	ldr	r3, [pc, #320]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	494d      	ldr	r1, [pc, #308]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d040      	beq.n	8004838 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d115      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e07f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d6:	4b41      	ldr	r3, [pc, #260]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e073      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e6:	4b3d      	ldr	r3, [pc, #244]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e06b      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f6:	4b39      	ldr	r3, [pc, #228]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f023 0203 	bic.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4936      	ldr	r1, [pc, #216]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 8004804:	4313      	orrs	r3, r2
 8004806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004808:	f7fd f9f4 	bl	8001bf4 <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	e00a      	b.n	8004826 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004810:	f7fd f9f0 	bl	8001bf4 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e053      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	4b2d      	ldr	r3, [pc, #180]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 020c 	and.w	r2, r3, #12
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	429a      	cmp	r2, r3
 8004836:	d1eb      	bne.n	8004810 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004838:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d210      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 020f 	bic.w	r2, r3, #15
 800484e:	4922      	ldr	r1, [pc, #136]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e032      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4916      	ldr	r1, [pc, #88]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	490e      	ldr	r1, [pc, #56]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048a6:	f000 f821 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 80048aa:	4601      	mov	r1, r0
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <HAL_RCC_ClockConfig+0x1cc>)
 80048b8:	5cd3      	ldrb	r3, [r2, r3]
 80048ba:	fa21 f303 	lsr.w	r3, r1, r3
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <HAL_RCC_ClockConfig+0x1d0>)
 80048c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1d4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fd f950 	bl	8001b6c <HAL_InitTick>

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023c00 	.word	0x40023c00
 80048dc:	40023800 	.word	0x40023800
 80048e0:	0800b9f0 	.word	0x0800b9f0
 80048e4:	20000004 	.word	0x20000004
 80048e8:	20000008 	.word	0x20000008

080048ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	607b      	str	r3, [r7, #4]
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	2300      	movs	r3, #0
 80048fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004902:	4b50      	ldr	r3, [pc, #320]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x158>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b04      	cmp	r3, #4
 800490c:	d007      	beq.n	800491e <HAL_RCC_GetSysClockFreq+0x32>
 800490e:	2b08      	cmp	r3, #8
 8004910:	d008      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x38>
 8004912:	2b00      	cmp	r3, #0
 8004914:	f040 808d 	bne.w	8004a32 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004918:	4b4b      	ldr	r3, [pc, #300]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x15c>)
 800491a:	60bb      	str	r3, [r7, #8]
      break;
 800491c:	e08c      	b.n	8004a38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800491e:	4b4b      	ldr	r3, [pc, #300]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004920:	60bb      	str	r3, [r7, #8]
      break;
 8004922:	e089      	b.n	8004a38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004924:	4b47      	ldr	r3, [pc, #284]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x158>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800492c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800492e:	4b45      	ldr	r3, [pc, #276]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x158>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d023      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493a:	4b42      	ldr	r3, [pc, #264]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x158>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	099b      	lsrs	r3, r3, #6
 8004940:	f04f 0400 	mov.w	r4, #0
 8004944:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	ea03 0501 	and.w	r5, r3, r1
 8004950:	ea04 0602 	and.w	r6, r4, r2
 8004954:	4a3d      	ldr	r2, [pc, #244]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004956:	fb02 f106 	mul.w	r1, r2, r6
 800495a:	2200      	movs	r2, #0
 800495c:	fb02 f205 	mul.w	r2, r2, r5
 8004960:	440a      	add	r2, r1
 8004962:	493a      	ldr	r1, [pc, #232]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004964:	fba5 0101 	umull	r0, r1, r5, r1
 8004968:	1853      	adds	r3, r2, r1
 800496a:	4619      	mov	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f04f 0400 	mov.w	r4, #0
 8004972:	461a      	mov	r2, r3
 8004974:	4623      	mov	r3, r4
 8004976:	f7fc f8e5 	bl	8000b44 <__aeabi_uldivmod>
 800497a:	4603      	mov	r3, r0
 800497c:	460c      	mov	r4, r1
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e049      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004982:	4b30      	ldr	r3, [pc, #192]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x158>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	f04f 0400 	mov.w	r4, #0
 800498c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	ea03 0501 	and.w	r5, r3, r1
 8004998:	ea04 0602 	and.w	r6, r4, r2
 800499c:	4629      	mov	r1, r5
 800499e:	4632      	mov	r2, r6
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	f04f 0400 	mov.w	r4, #0
 80049a8:	0154      	lsls	r4, r2, #5
 80049aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049ae:	014b      	lsls	r3, r1, #5
 80049b0:	4619      	mov	r1, r3
 80049b2:	4622      	mov	r2, r4
 80049b4:	1b49      	subs	r1, r1, r5
 80049b6:	eb62 0206 	sbc.w	r2, r2, r6
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	f04f 0400 	mov.w	r4, #0
 80049c2:	0194      	lsls	r4, r2, #6
 80049c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049c8:	018b      	lsls	r3, r1, #6
 80049ca:	1a5b      	subs	r3, r3, r1
 80049cc:	eb64 0402 	sbc.w	r4, r4, r2
 80049d0:	f04f 0100 	mov.w	r1, #0
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	00e2      	lsls	r2, r4, #3
 80049da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049de:	00d9      	lsls	r1, r3, #3
 80049e0:	460b      	mov	r3, r1
 80049e2:	4614      	mov	r4, r2
 80049e4:	195b      	adds	r3, r3, r5
 80049e6:	eb44 0406 	adc.w	r4, r4, r6
 80049ea:	f04f 0100 	mov.w	r1, #0
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	02a2      	lsls	r2, r4, #10
 80049f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049f8:	0299      	lsls	r1, r3, #10
 80049fa:	460b      	mov	r3, r1
 80049fc:	4614      	mov	r4, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	4621      	mov	r1, r4
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f04f 0400 	mov.w	r4, #0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	f7fc f89a 	bl	8000b44 <__aeabi_uldivmod>
 8004a10:	4603      	mov	r3, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	0c1b      	lsrs	r3, r3, #16
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	3301      	adds	r3, #1
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2e:	60bb      	str	r3, [r7, #8]
      break;
 8004a30:	e002      	b.n	8004a38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004a34:	60bb      	str	r3, [r7, #8]
      break;
 8004a36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a38:	68bb      	ldr	r3, [r7, #8]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40023800 	.word	0x40023800
 8004a48:	00f42400 	.word	0x00f42400
 8004a4c:	017d7840 	.word	0x017d7840

08004a50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a54:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a56:	681b      	ldr	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000004 	.word	0x20000004

08004a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d012      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a90:	4b69      	ldr	r3, [pc, #420]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4a68      	ldr	r2, [pc, #416]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a9a:	6093      	str	r3, [r2, #8]
 8004a9c:	4b66      	ldr	r3, [pc, #408]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa4:	4964      	ldr	r1, [pc, #400]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d017      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ac2:	4b5d      	ldr	r3, [pc, #372]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	4959      	ldr	r1, [pc, #356]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d017      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004afe:	4b4e      	ldr	r3, [pc, #312]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	494a      	ldr	r1, [pc, #296]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 808b 	beq.w	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b4c:	4b3a      	ldr	r3, [pc, #232]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	4a39      	ldr	r2, [pc, #228]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b56:	6413      	str	r3, [r2, #64]	; 0x40
 8004b58:	4b37      	ldr	r3, [pc, #220]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b64:	4b35      	ldr	r3, [pc, #212]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a34      	ldr	r2, [pc, #208]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b70:	f7fd f840 	bl	8001bf4 <HAL_GetTick>
 8004b74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b78:	f7fd f83c 	bl	8001bf4 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b64      	cmp	r3, #100	; 0x64
 8004b84:	d901      	bls.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e357      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b8a:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b96:	4b28      	ldr	r3, [pc, #160]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d035      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d02e      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bb4:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bbc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bbe:	4b1e      	ldr	r3, [pc, #120]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	4a1d      	ldr	r2, [pc, #116]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bca:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	4a1a      	ldr	r2, [pc, #104]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004bd6:	4a18      	ldr	r2, [pc, #96]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bdc:	4b16      	ldr	r3, [pc, #88]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d114      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fd f804 	bl	8001bf4 <HAL_GetTick>
 8004bec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bee:	e00a      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf0:	f7fd f800 	bl	8001bf4 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e319      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c06:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0ee      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c1e:	d111      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c2e:	400b      	ands	r3, r1
 8004c30:	4901      	ldr	r1, [pc, #4]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
 8004c36:	e00b      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40007000 	.word	0x40007000
 8004c40:	0ffffcff 	.word	0x0ffffcff
 8004c44:	4bb1      	ldr	r3, [pc, #708]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	4ab0      	ldr	r2, [pc, #704]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c4e:	6093      	str	r3, [r2, #8]
 8004c50:	4bae      	ldr	r3, [pc, #696]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c5c:	49ab      	ldr	r1, [pc, #684]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d010      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c6e:	4ba7      	ldr	r3, [pc, #668]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c74:	4aa5      	ldr	r2, [pc, #660]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c7e:	4ba3      	ldr	r3, [pc, #652]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	49a0      	ldr	r1, [pc, #640]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c9c:	4b9b      	ldr	r3, [pc, #620]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004caa:	4998      	ldr	r1, [pc, #608]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cbe:	4b93      	ldr	r3, [pc, #588]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ccc:	498f      	ldr	r1, [pc, #572]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ce0:	4b8a      	ldr	r3, [pc, #552]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cee:	4987      	ldr	r1, [pc, #540]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d02:	4b82      	ldr	r3, [pc, #520]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d10:	497e      	ldr	r1, [pc, #504]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d24:	4b79      	ldr	r3, [pc, #484]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	f023 0203 	bic.w	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	4976      	ldr	r1, [pc, #472]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d46:	4b71      	ldr	r3, [pc, #452]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	f023 020c 	bic.w	r2, r3, #12
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d54:	496d      	ldr	r1, [pc, #436]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d68:	4b68      	ldr	r3, [pc, #416]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d76:	4965      	ldr	r1, [pc, #404]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d8a:	4b60      	ldr	r3, [pc, #384]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d98:	495c      	ldr	r1, [pc, #368]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dac:	4b57      	ldr	r3, [pc, #348]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	4954      	ldr	r1, [pc, #336]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004dce:	4b4f      	ldr	r3, [pc, #316]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ddc:	494b      	ldr	r1, [pc, #300]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004df0:	4b46      	ldr	r3, [pc, #280]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfe:	4943      	ldr	r1, [pc, #268]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e12:	4b3e      	ldr	r3, [pc, #248]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e20:	493a      	ldr	r1, [pc, #232]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e34:	4b35      	ldr	r3, [pc, #212]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e42:	4932      	ldr	r1, [pc, #200]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d011      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e56:	4b2d      	ldr	r3, [pc, #180]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e64:	4929      	ldr	r1, [pc, #164]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e74:	d101      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e76:	2301      	movs	r3, #1
 8004e78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e86:	2301      	movs	r3, #1
 8004e88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e96:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea4:	4919      	ldr	r1, [pc, #100]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00b      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004eb8:	4b14      	ldr	r3, [pc, #80]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ec8:	4910      	ldr	r1, [pc, #64]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d006      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80d9 	beq.w	8005096 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004eea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004eee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef0:	f7fc fe80 	bl	8001bf4 <HAL_GetTick>
 8004ef4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ef6:	e00b      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ef8:	f7fc fe7c 	bl	8001bf4 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	; 0x64
 8004f04:	d904      	bls.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e197      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004f0a:	bf00      	nop
 8004f0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f10:	4b6c      	ldr	r3, [pc, #432]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ed      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d021      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d11d      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f30:	4b64      	ldr	r3, [pc, #400]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f36:	0c1b      	lsrs	r3, r3, #16
 8004f38:	f003 0303 	and.w	r3, r3, #3
 8004f3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f3e:	4b61      	ldr	r3, [pc, #388]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f44:	0e1b      	lsrs	r3, r3, #24
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	019a      	lsls	r2, r3, #6
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	041b      	lsls	r3, r3, #16
 8004f56:	431a      	orrs	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	061b      	lsls	r3, r3, #24
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	071b      	lsls	r3, r3, #28
 8004f64:	4957      	ldr	r1, [pc, #348]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d004      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f80:	d00a      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d02e      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f96:	d129      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f98:	4b4a      	ldr	r3, [pc, #296]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f9e:	0c1b      	lsrs	r3, r3, #16
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fa6:	4b47      	ldr	r3, [pc, #284]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fac:	0f1b      	lsrs	r3, r3, #28
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	019a      	lsls	r2, r3, #6
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	041b      	lsls	r3, r3, #16
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	061b      	lsls	r3, r3, #24
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	071b      	lsls	r3, r3, #28
 8004fcc:	493d      	ldr	r1, [pc, #244]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fd4:	4b3b      	ldr	r3, [pc, #236]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fda:	f023 021f 	bic.w	r2, r3, #31
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	4937      	ldr	r1, [pc, #220]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01d      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ff8:	4b32      	ldr	r3, [pc, #200]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ffe:	0e1b      	lsrs	r3, r3, #24
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005006:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500c:	0f1b      	lsrs	r3, r3, #28
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	019a      	lsls	r2, r3, #6
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	431a      	orrs	r2, r3
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	061b      	lsls	r3, r3, #24
 8005026:	431a      	orrs	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	071b      	lsls	r3, r3, #28
 800502c:	4925      	ldr	r1, [pc, #148]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d011      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	019a      	lsls	r2, r3, #6
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	041b      	lsls	r3, r3, #16
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	061b      	lsls	r3, r3, #24
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	071b      	lsls	r3, r3, #28
 800505c:	4919      	ldr	r1, [pc, #100]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005064:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a16      	ldr	r2, [pc, #88]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800506a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800506e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005070:	f7fc fdc0 	bl	8001bf4 <HAL_GetTick>
 8005074:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005076:	e008      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005078:	f7fc fdbc 	bl	8001bf4 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b64      	cmp	r3, #100	; 0x64
 8005084:	d901      	bls.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e0d7      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800508a:	4b0e      	ldr	r3, [pc, #56]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b01      	cmp	r3, #1
 800509a:	f040 80cd 	bne.w	8005238 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800509e:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a08      	ldr	r2, [pc, #32]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050aa:	f7fc fda3 	bl	8001bf4 <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050b0:	e00a      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050b2:	f7fc fd9f 	bl	8001bf4 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b64      	cmp	r3, #100	; 0x64
 80050be:	d903      	bls.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e0ba      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80050c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050c8:	4b5e      	ldr	r3, [pc, #376]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d4:	d0ed      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x682>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d02e      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d12a      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050fe:	4b51      	ldr	r3, [pc, #324]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005104:	0c1b      	lsrs	r3, r3, #16
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800510c:	4b4d      	ldr	r3, [pc, #308]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005112:	0f1b      	lsrs	r3, r3, #28
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	019a      	lsls	r2, r3, #6
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	041b      	lsls	r3, r3, #16
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	061b      	lsls	r3, r3, #24
 800512c:	431a      	orrs	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	071b      	lsls	r3, r3, #28
 8005132:	4944      	ldr	r1, [pc, #272]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800513a:	4b42      	ldr	r3, [pc, #264]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800513c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005140:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	3b01      	subs	r3, #1
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	493d      	ldr	r1, [pc, #244]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d022      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005168:	d11d      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800516a:	4b36      	ldr	r3, [pc, #216]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800516c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005170:	0e1b      	lsrs	r3, r3, #24
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005178:	4b32      	ldr	r3, [pc, #200]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517e:	0f1b      	lsrs	r3, r3, #28
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	019a      	lsls	r2, r3, #6
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	431a      	orrs	r2, r3
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	061b      	lsls	r3, r3, #24
 8005198:	431a      	orrs	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	071b      	lsls	r3, r3, #28
 800519e:	4929      	ldr	r1, [pc, #164]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d028      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051b2:	4b24      	ldr	r3, [pc, #144]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b8:	0e1b      	lsrs	r3, r3, #24
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051c0:	4b20      	ldr	r3, [pc, #128]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	019a      	lsls	r2, r3, #6
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	431a      	orrs	r2, r3
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	061b      	lsls	r3, r3, #24
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	071b      	lsls	r3, r3, #28
 80051e6:	4917      	ldr	r1, [pc, #92]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051ee:	4b15      	ldr	r3, [pc, #84]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	4911      	ldr	r1, [pc, #68]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005204:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a0e      	ldr	r2, [pc, #56]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800520a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005210:	f7fc fcf0 	bl	8001bf4 <HAL_GetTick>
 8005214:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005216:	e008      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005218:	f7fc fcec 	bl	8001bf4 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b64      	cmp	r3, #100	; 0x64
 8005224:	d901      	bls.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e007      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005236:	d1ef      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3720      	adds	r7, #32
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40023800 	.word	0x40023800

08005248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e049      	b.n	80052ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fc fae4 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f000 ffda 	bl	8006240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d001      	beq.n	8005310 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e04c      	b.n	80053aa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a26      	ldr	r2, [pc, #152]	; (80053b8 <HAL_TIM_Base_Start+0xc0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d022      	beq.n	8005368 <HAL_TIM_Base_Start+0x70>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532a:	d01d      	beq.n	8005368 <HAL_TIM_Base_Start+0x70>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a22      	ldr	r2, [pc, #136]	; (80053bc <HAL_TIM_Base_Start+0xc4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d018      	beq.n	8005368 <HAL_TIM_Base_Start+0x70>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <HAL_TIM_Base_Start+0xc8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d013      	beq.n	8005368 <HAL_TIM_Base_Start+0x70>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1f      	ldr	r2, [pc, #124]	; (80053c4 <HAL_TIM_Base_Start+0xcc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00e      	beq.n	8005368 <HAL_TIM_Base_Start+0x70>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1e      	ldr	r2, [pc, #120]	; (80053c8 <HAL_TIM_Base_Start+0xd0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d009      	beq.n	8005368 <HAL_TIM_Base_Start+0x70>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1c      	ldr	r2, [pc, #112]	; (80053cc <HAL_TIM_Base_Start+0xd4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d004      	beq.n	8005368 <HAL_TIM_Base_Start+0x70>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <HAL_TIM_Base_Start+0xd8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d115      	bne.n	8005394 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	4b19      	ldr	r3, [pc, #100]	; (80053d4 <HAL_TIM_Base_Start+0xdc>)
 8005370:	4013      	ands	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b06      	cmp	r3, #6
 8005378:	d015      	beq.n	80053a6 <HAL_TIM_Base_Start+0xae>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005380:	d011      	beq.n	80053a6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005392:	e008      	b.n	80053a6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0201 	orr.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	e000      	b.n	80053a8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800
 80053c4:	40000c00 	.word	0x40000c00
 80053c8:	40010400 	.word	0x40010400
 80053cc:	40014000 	.word	0x40014000
 80053d0:	40001800 	.word	0x40001800
 80053d4:	00010007 	.word	0x00010007

080053d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e049      	b.n	800547e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f841 	bl	8005486 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3304      	adds	r3, #4
 8005414:	4619      	mov	r1, r3
 8005416:	4610      	mov	r0, r2
 8005418:	f000 ff12 	bl	8006240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <HAL_TIM_PWM_Start+0x24>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	bf14      	ite	ne
 80054b8:	2301      	movne	r3, #1
 80054ba:	2300      	moveq	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e03c      	b.n	800553a <HAL_TIM_PWM_Start+0x9e>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d109      	bne.n	80054da <HAL_TIM_PWM_Start+0x3e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	bf14      	ite	ne
 80054d2:	2301      	movne	r3, #1
 80054d4:	2300      	moveq	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	e02f      	b.n	800553a <HAL_TIM_PWM_Start+0x9e>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d109      	bne.n	80054f4 <HAL_TIM_PWM_Start+0x58>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e022      	b.n	800553a <HAL_TIM_PWM_Start+0x9e>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b0c      	cmp	r3, #12
 80054f8:	d109      	bne.n	800550e <HAL_TIM_PWM_Start+0x72>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b01      	cmp	r3, #1
 8005504:	bf14      	ite	ne
 8005506:	2301      	movne	r3, #1
 8005508:	2300      	moveq	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	e015      	b.n	800553a <HAL_TIM_PWM_Start+0x9e>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b10      	cmp	r3, #16
 8005512:	d109      	bne.n	8005528 <HAL_TIM_PWM_Start+0x8c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	bf14      	ite	ne
 8005520:	2301      	movne	r3, #1
 8005522:	2300      	moveq	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	e008      	b.n	800553a <HAL_TIM_PWM_Start+0x9e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e092      	b.n	8005668 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d104      	bne.n	8005552 <HAL_TIM_PWM_Start+0xb6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005550:	e023      	b.n	800559a <HAL_TIM_PWM_Start+0xfe>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b04      	cmp	r3, #4
 8005556:	d104      	bne.n	8005562 <HAL_TIM_PWM_Start+0xc6>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005560:	e01b      	b.n	800559a <HAL_TIM_PWM_Start+0xfe>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d104      	bne.n	8005572 <HAL_TIM_PWM_Start+0xd6>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005570:	e013      	b.n	800559a <HAL_TIM_PWM_Start+0xfe>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b0c      	cmp	r3, #12
 8005576:	d104      	bne.n	8005582 <HAL_TIM_PWM_Start+0xe6>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005580:	e00b      	b.n	800559a <HAL_TIM_PWM_Start+0xfe>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b10      	cmp	r3, #16
 8005586:	d104      	bne.n	8005592 <HAL_TIM_PWM_Start+0xf6>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005590:	e003      	b.n	800559a <HAL_TIM_PWM_Start+0xfe>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2201      	movs	r2, #1
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 fb96 	bl	8006cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a30      	ldr	r2, [pc, #192]	; (8005670 <HAL_TIM_PWM_Start+0x1d4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_TIM_PWM_Start+0x120>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2f      	ldr	r2, [pc, #188]	; (8005674 <HAL_TIM_PWM_Start+0x1d8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d101      	bne.n	80055c0 <HAL_TIM_PWM_Start+0x124>
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <HAL_TIM_PWM_Start+0x126>
 80055c0:	2300      	movs	r3, #0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a25      	ldr	r2, [pc, #148]	; (8005670 <HAL_TIM_PWM_Start+0x1d4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d022      	beq.n	8005626 <HAL_TIM_PWM_Start+0x18a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d01d      	beq.n	8005626 <HAL_TIM_PWM_Start+0x18a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a22      	ldr	r2, [pc, #136]	; (8005678 <HAL_TIM_PWM_Start+0x1dc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d018      	beq.n	8005626 <HAL_TIM_PWM_Start+0x18a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a20      	ldr	r2, [pc, #128]	; (800567c <HAL_TIM_PWM_Start+0x1e0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_TIM_PWM_Start+0x18a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1f      	ldr	r2, [pc, #124]	; (8005680 <HAL_TIM_PWM_Start+0x1e4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00e      	beq.n	8005626 <HAL_TIM_PWM_Start+0x18a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a19      	ldr	r2, [pc, #100]	; (8005674 <HAL_TIM_PWM_Start+0x1d8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d009      	beq.n	8005626 <HAL_TIM_PWM_Start+0x18a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <HAL_TIM_PWM_Start+0x1e8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <HAL_TIM_PWM_Start+0x18a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a19      	ldr	r2, [pc, #100]	; (8005688 <HAL_TIM_PWM_Start+0x1ec>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d115      	bne.n	8005652 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	4b17      	ldr	r3, [pc, #92]	; (800568c <HAL_TIM_PWM_Start+0x1f0>)
 800562e:	4013      	ands	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b06      	cmp	r3, #6
 8005636:	d015      	beq.n	8005664 <HAL_TIM_PWM_Start+0x1c8>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563e:	d011      	beq.n	8005664 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005650:	e008      	b.n	8005664 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0201 	orr.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	e000      	b.n	8005666 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005664:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40010000 	.word	0x40010000
 8005674:	40010400 	.word	0x40010400
 8005678:	40000400 	.word	0x40000400
 800567c:	40000800 	.word	0x40000800
 8005680:	40000c00 	.word	0x40000c00
 8005684:	40014000 	.word	0x40014000
 8005688:	40001800 	.word	0x40001800
 800568c:	00010007 	.word	0x00010007

08005690 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e049      	b.n	8005736 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f841 	bl	800573e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f000 fdb6 	bl	8006240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <HAL_TIM_IC_Start_IT+0x1a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800576a:	b2db      	uxtb	r3, r3
 800576c:	e023      	b.n	80057b6 <HAL_TIM_IC_Start_IT+0x62>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b04      	cmp	r3, #4
 8005772:	d104      	bne.n	800577e <HAL_TIM_IC_Start_IT+0x2a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800577a:	b2db      	uxtb	r3, r3
 800577c:	e01b      	b.n	80057b6 <HAL_TIM_IC_Start_IT+0x62>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b08      	cmp	r3, #8
 8005782:	d104      	bne.n	800578e <HAL_TIM_IC_Start_IT+0x3a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800578a:	b2db      	uxtb	r3, r3
 800578c:	e013      	b.n	80057b6 <HAL_TIM_IC_Start_IT+0x62>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b0c      	cmp	r3, #12
 8005792:	d104      	bne.n	800579e <HAL_TIM_IC_Start_IT+0x4a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800579a:	b2db      	uxtb	r3, r3
 800579c:	e00b      	b.n	80057b6 <HAL_TIM_IC_Start_IT+0x62>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d104      	bne.n	80057ae <HAL_TIM_IC_Start_IT+0x5a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	e003      	b.n	80057b6 <HAL_TIM_IC_Start_IT+0x62>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d104      	bne.n	80057c8 <HAL_TIM_IC_Start_IT+0x74>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	e013      	b.n	80057f0 <HAL_TIM_IC_Start_IT+0x9c>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d104      	bne.n	80057d8 <HAL_TIM_IC_Start_IT+0x84>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	e00b      	b.n	80057f0 <HAL_TIM_IC_Start_IT+0x9c>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d104      	bne.n	80057e8 <HAL_TIM_IC_Start_IT+0x94>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	e003      	b.n	80057f0 <HAL_TIM_IC_Start_IT+0x9c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d102      	bne.n	80057fe <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80057f8:	7bbb      	ldrb	r3, [r7, #14]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d001      	beq.n	8005802 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e0dd      	b.n	80059be <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <HAL_TIM_IC_Start_IT+0xbe>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005810:	e023      	b.n	800585a <HAL_TIM_IC_Start_IT+0x106>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b04      	cmp	r3, #4
 8005816:	d104      	bne.n	8005822 <HAL_TIM_IC_Start_IT+0xce>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005820:	e01b      	b.n	800585a <HAL_TIM_IC_Start_IT+0x106>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b08      	cmp	r3, #8
 8005826:	d104      	bne.n	8005832 <HAL_TIM_IC_Start_IT+0xde>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005830:	e013      	b.n	800585a <HAL_TIM_IC_Start_IT+0x106>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b0c      	cmp	r3, #12
 8005836:	d104      	bne.n	8005842 <HAL_TIM_IC_Start_IT+0xee>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005840:	e00b      	b.n	800585a <HAL_TIM_IC_Start_IT+0x106>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b10      	cmp	r3, #16
 8005846:	d104      	bne.n	8005852 <HAL_TIM_IC_Start_IT+0xfe>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005850:	e003      	b.n	800585a <HAL_TIM_IC_Start_IT+0x106>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <HAL_TIM_IC_Start_IT+0x116>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005868:	e013      	b.n	8005892 <HAL_TIM_IC_Start_IT+0x13e>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b04      	cmp	r3, #4
 800586e:	d104      	bne.n	800587a <HAL_TIM_IC_Start_IT+0x126>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005878:	e00b      	b.n	8005892 <HAL_TIM_IC_Start_IT+0x13e>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b08      	cmp	r3, #8
 800587e:	d104      	bne.n	800588a <HAL_TIM_IC_Start_IT+0x136>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005888:	e003      	b.n	8005892 <HAL_TIM_IC_Start_IT+0x13e>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2202      	movs	r2, #2
 800588e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b0c      	cmp	r3, #12
 8005896:	d841      	bhi.n	800591c <HAL_TIM_IC_Start_IT+0x1c8>
 8005898:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <HAL_TIM_IC_Start_IT+0x14c>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	080058d5 	.word	0x080058d5
 80058a4:	0800591d 	.word	0x0800591d
 80058a8:	0800591d 	.word	0x0800591d
 80058ac:	0800591d 	.word	0x0800591d
 80058b0:	080058e7 	.word	0x080058e7
 80058b4:	0800591d 	.word	0x0800591d
 80058b8:	0800591d 	.word	0x0800591d
 80058bc:	0800591d 	.word	0x0800591d
 80058c0:	080058f9 	.word	0x080058f9
 80058c4:	0800591d 	.word	0x0800591d
 80058c8:	0800591d 	.word	0x0800591d
 80058cc:	0800591d 	.word	0x0800591d
 80058d0:	0800590b 	.word	0x0800590b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0202 	orr.w	r2, r2, #2
 80058e2:	60da      	str	r2, [r3, #12]
      break;
 80058e4:	e01b      	b.n	800591e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0204 	orr.w	r2, r2, #4
 80058f4:	60da      	str	r2, [r3, #12]
      break;
 80058f6:	e012      	b.n	800591e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0208 	orr.w	r2, r2, #8
 8005906:	60da      	str	r2, [r3, #12]
      break;
 8005908:	e009      	b.n	800591e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0210 	orr.w	r2, r2, #16
 8005918:	60da      	str	r2, [r3, #12]
      break;
 800591a:	e000      	b.n	800591e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800591c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2201      	movs	r2, #1
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f001 f9d4 	bl	8006cd4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a25      	ldr	r2, [pc, #148]	; (80059c8 <HAL_TIM_IC_Start_IT+0x274>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d022      	beq.n	800597c <HAL_TIM_IC_Start_IT+0x228>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593e:	d01d      	beq.n	800597c <HAL_TIM_IC_Start_IT+0x228>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a21      	ldr	r2, [pc, #132]	; (80059cc <HAL_TIM_IC_Start_IT+0x278>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d018      	beq.n	800597c <HAL_TIM_IC_Start_IT+0x228>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a20      	ldr	r2, [pc, #128]	; (80059d0 <HAL_TIM_IC_Start_IT+0x27c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d013      	beq.n	800597c <HAL_TIM_IC_Start_IT+0x228>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1e      	ldr	r2, [pc, #120]	; (80059d4 <HAL_TIM_IC_Start_IT+0x280>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00e      	beq.n	800597c <HAL_TIM_IC_Start_IT+0x228>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1d      	ldr	r2, [pc, #116]	; (80059d8 <HAL_TIM_IC_Start_IT+0x284>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d009      	beq.n	800597c <HAL_TIM_IC_Start_IT+0x228>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1b      	ldr	r2, [pc, #108]	; (80059dc <HAL_TIM_IC_Start_IT+0x288>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_TIM_IC_Start_IT+0x228>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1a      	ldr	r2, [pc, #104]	; (80059e0 <HAL_TIM_IC_Start_IT+0x28c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d115      	bne.n	80059a8 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <HAL_TIM_IC_Start_IT+0x290>)
 8005984:	4013      	ands	r3, r2
 8005986:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b06      	cmp	r3, #6
 800598c:	d015      	beq.n	80059ba <HAL_TIM_IC_Start_IT+0x266>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005994:	d011      	beq.n	80059ba <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a6:	e008      	b.n	80059ba <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0201 	orr.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e000      	b.n	80059bc <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40010000 	.word	0x40010000
 80059cc:	40000400 	.word	0x40000400
 80059d0:	40000800 	.word	0x40000800
 80059d4:	40000c00 	.word	0x40000c00
 80059d8:	40010400 	.word	0x40010400
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40001800 	.word	0x40001800
 80059e4:	00010007 	.word	0x00010007

080059e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d122      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d11b      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0202 	mvn.w	r2, #2
 8005a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fb fa22 	bl	8000e74 <HAL_TIM_IC_CaptureCallback>
 8005a30:	e005      	b.n	8005a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fbe6 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fbed 	bl	8006218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d122      	bne.n	8005a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d11b      	bne.n	8005a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0204 	mvn.w	r2, #4
 8005a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fb f9f8 	bl	8000e74 <HAL_TIM_IC_CaptureCallback>
 8005a84:	e005      	b.n	8005a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fbbc 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fbc3 	bl	8006218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d122      	bne.n	8005aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d11b      	bne.n	8005aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0208 	mvn.w	r2, #8
 8005abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fb f9ce 	bl	8000e74 <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fb92 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fb99 	bl	8006218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b10      	cmp	r3, #16
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0210 	mvn.w	r2, #16
 8005b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2208      	movs	r2, #8
 8005b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fb f9a4 	bl	8000e74 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fb68 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fb6f 	bl	8006218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d10e      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d107      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0201 	mvn.w	r2, #1
 8005b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fb42 	bl	80061f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b76:	2b80      	cmp	r3, #128	; 0x80
 8005b78:	d10e      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b84:	2b80      	cmp	r3, #128	; 0x80
 8005b86:	d107      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 f95c 	bl	8006e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba6:	d10e      	bne.n	8005bc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb2:	2b80      	cmp	r3, #128	; 0x80
 8005bb4:	d107      	bne.n	8005bc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 f94f 	bl	8006e64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d10e      	bne.n	8005bf2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bde:	2b40      	cmp	r3, #64	; 0x40
 8005be0:	d107      	bne.n	8005bf2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fb1d 	bl	800622c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	d10e      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d107      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f06f 0220 	mvn.w	r2, #32
 8005c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 f90f 	bl	8006e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e082      	b.n	8005d46 <HAL_TIM_IC_ConfigChannel+0x120>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d11b      	bne.n	8005c86 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	6819      	ldr	r1, [r3, #0]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f000 fe75 	bl	800694c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699a      	ldr	r2, [r3, #24]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 020c 	bic.w	r2, r2, #12
 8005c70:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6999      	ldr	r1, [r3, #24]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	619a      	str	r2, [r3, #24]
 8005c84:	e05a      	b.n	8005d3c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d11c      	bne.n	8005cc6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f000 fef9 	bl	8006a92 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005cae:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6999      	ldr	r1, [r3, #24]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	021a      	lsls	r2, r3, #8
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	619a      	str	r2, [r3, #24]
 8005cc4:	e03a      	b.n	8005d3c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d11b      	bne.n	8005d04 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6818      	ldr	r0, [r3, #0]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6819      	ldr	r1, [r3, #0]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f000 ff46 	bl	8006b6c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69da      	ldr	r2, [r3, #28]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 020c 	bic.w	r2, r2, #12
 8005cee:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69d9      	ldr	r1, [r3, #28]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	61da      	str	r2, [r3, #28]
 8005d02:	e01b      	b.n	8005d3c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	6819      	ldr	r1, [r3, #0]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f000 ff66 	bl	8006be4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69da      	ldr	r2, [r3, #28]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d26:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69d9      	ldr	r1, [r3, #28]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	021a      	lsls	r2, r3, #8
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e0fd      	b.n	8005f66 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b14      	cmp	r3, #20
 8005d76:	f200 80f0 	bhi.w	8005f5a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005dd5 	.word	0x08005dd5
 8005d84:	08005f5b 	.word	0x08005f5b
 8005d88:	08005f5b 	.word	0x08005f5b
 8005d8c:	08005f5b 	.word	0x08005f5b
 8005d90:	08005e15 	.word	0x08005e15
 8005d94:	08005f5b 	.word	0x08005f5b
 8005d98:	08005f5b 	.word	0x08005f5b
 8005d9c:	08005f5b 	.word	0x08005f5b
 8005da0:	08005e57 	.word	0x08005e57
 8005da4:	08005f5b 	.word	0x08005f5b
 8005da8:	08005f5b 	.word	0x08005f5b
 8005dac:	08005f5b 	.word	0x08005f5b
 8005db0:	08005e97 	.word	0x08005e97
 8005db4:	08005f5b 	.word	0x08005f5b
 8005db8:	08005f5b 	.word	0x08005f5b
 8005dbc:	08005f5b 	.word	0x08005f5b
 8005dc0:	08005ed9 	.word	0x08005ed9
 8005dc4:	08005f5b 	.word	0x08005f5b
 8005dc8:	08005f5b 	.word	0x08005f5b
 8005dcc:	08005f5b 	.word	0x08005f5b
 8005dd0:	08005f19 	.word	0x08005f19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fad0 	bl	8006380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0208 	orr.w	r2, r2, #8
 8005dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0204 	bic.w	r2, r2, #4
 8005dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6999      	ldr	r1, [r3, #24]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	619a      	str	r2, [r3, #24]
      break;
 8005e12:	e0a3      	b.n	8005f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fb22 	bl	8006464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6999      	ldr	r1, [r3, #24]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	021a      	lsls	r2, r3, #8
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	619a      	str	r2, [r3, #24]
      break;
 8005e54:	e082      	b.n	8005f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fb79 	bl	8006554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0208 	orr.w	r2, r2, #8
 8005e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0204 	bic.w	r2, r2, #4
 8005e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69d9      	ldr	r1, [r3, #28]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	61da      	str	r2, [r3, #28]
      break;
 8005e94:	e062      	b.n	8005f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fbcf 	bl	8006640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69d9      	ldr	r1, [r3, #28]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	021a      	lsls	r2, r3, #8
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	61da      	str	r2, [r3, #28]
      break;
 8005ed6:	e041      	b.n	8005f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fc06 	bl	80066f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0208 	orr.w	r2, r2, #8
 8005ef2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0204 	bic.w	r2, r2, #4
 8005f02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f16:	e021      	b.n	8005f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fc38 	bl	8006794 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	021a      	lsls	r2, r3, #8
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f58:	e000      	b.n	8005f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005f5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop

08005f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_TIM_ConfigClockSource+0x18>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e0a6      	b.n	80060d6 <HAL_TIM_ConfigClockSource+0x166>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4b4f      	ldr	r3, [pc, #316]	; (80060e0 <HAL_TIM_ConfigClockSource+0x170>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b40      	cmp	r3, #64	; 0x40
 8005fbe:	d067      	beq.n	8006090 <HAL_TIM_ConfigClockSource+0x120>
 8005fc0:	2b40      	cmp	r3, #64	; 0x40
 8005fc2:	d80b      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x6c>
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d073      	beq.n	80060b0 <HAL_TIM_ConfigClockSource+0x140>
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d802      	bhi.n	8005fd2 <HAL_TIM_ConfigClockSource+0x62>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d06f      	beq.n	80060b0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005fd0:	e078      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	d06c      	beq.n	80060b0 <HAL_TIM_ConfigClockSource+0x140>
 8005fd6:	2b30      	cmp	r3, #48	; 0x30
 8005fd8:	d06a      	beq.n	80060b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005fda:	e073      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005fdc:	2b70      	cmp	r3, #112	; 0x70
 8005fde:	d00d      	beq.n	8005ffc <HAL_TIM_ConfigClockSource+0x8c>
 8005fe0:	2b70      	cmp	r3, #112	; 0x70
 8005fe2:	d804      	bhi.n	8005fee <HAL_TIM_ConfigClockSource+0x7e>
 8005fe4:	2b50      	cmp	r3, #80	; 0x50
 8005fe6:	d033      	beq.n	8006050 <HAL_TIM_ConfigClockSource+0xe0>
 8005fe8:	2b60      	cmp	r3, #96	; 0x60
 8005fea:	d041      	beq.n	8006070 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005fec:	e06a      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff2:	d066      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x152>
 8005ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff8:	d017      	beq.n	800602a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005ffa:	e063      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6899      	ldr	r1, [r3, #8]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f000 fe42 	bl	8006c94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800601e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	609a      	str	r2, [r3, #8]
      break;
 8006028:	e04c      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6899      	ldr	r1, [r3, #8]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f000 fe2b 	bl	8006c94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800604c:	609a      	str	r2, [r3, #8]
      break;
 800604e:	e039      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	6859      	ldr	r1, [r3, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	461a      	mov	r2, r3
 800605e:	f000 fce9 	bl	8006a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2150      	movs	r1, #80	; 0x50
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fdf8 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 800606e:	e029      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	6859      	ldr	r1, [r3, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	461a      	mov	r2, r3
 800607e:	f000 fd45 	bl	8006b0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2160      	movs	r1, #96	; 0x60
 8006088:	4618      	mov	r0, r3
 800608a:	f000 fde8 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 800608e:	e019      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	6859      	ldr	r1, [r3, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	461a      	mov	r2, r3
 800609e:	f000 fcc9 	bl	8006a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2140      	movs	r1, #64	; 0x40
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fdd8 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 80060ae:	e009      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f000 fdcf 	bl	8006c5e <TIM_ITRx_SetConfig>
        break;
 80060c0:	e000      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80060c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	fffeff88 	.word	0xfffeff88

080060e4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_TIM_SlaveConfigSynchro+0x18>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e031      	b.n	8006160 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fb94 	bl	800683c <TIM_SlaveTimer_SetConfig>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e018      	b.n	8006160 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800613c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800614c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b0c      	cmp	r3, #12
 800617a:	d831      	bhi.n	80061e0 <HAL_TIM_ReadCapturedValue+0x78>
 800617c:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <HAL_TIM_ReadCapturedValue+0x1c>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	080061b9 	.word	0x080061b9
 8006188:	080061e1 	.word	0x080061e1
 800618c:	080061e1 	.word	0x080061e1
 8006190:	080061e1 	.word	0x080061e1
 8006194:	080061c3 	.word	0x080061c3
 8006198:	080061e1 	.word	0x080061e1
 800619c:	080061e1 	.word	0x080061e1
 80061a0:	080061e1 	.word	0x080061e1
 80061a4:	080061cd 	.word	0x080061cd
 80061a8:	080061e1 	.word	0x080061e1
 80061ac:	080061e1 	.word	0x080061e1
 80061b0:	080061e1 	.word	0x080061e1
 80061b4:	080061d7 	.word	0x080061d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061be:	60fb      	str	r3, [r7, #12]

      break;
 80061c0:	e00f      	b.n	80061e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	60fb      	str	r3, [r7, #12]

      break;
 80061ca:	e00a      	b.n	80061e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d2:	60fb      	str	r3, [r7, #12]

      break;
 80061d4:	e005      	b.n	80061e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	60fb      	str	r3, [r7, #12]

      break;
 80061de:	e000      	b.n	80061e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80061e0:	bf00      	nop
  }

  return tmpreg;
 80061e2:	68fb      	ldr	r3, [r7, #12]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a40      	ldr	r2, [pc, #256]	; (8006354 <TIM_Base_SetConfig+0x114>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d013      	beq.n	8006280 <TIM_Base_SetConfig+0x40>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625e:	d00f      	beq.n	8006280 <TIM_Base_SetConfig+0x40>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a3d      	ldr	r2, [pc, #244]	; (8006358 <TIM_Base_SetConfig+0x118>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00b      	beq.n	8006280 <TIM_Base_SetConfig+0x40>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a3c      	ldr	r2, [pc, #240]	; (800635c <TIM_Base_SetConfig+0x11c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d007      	beq.n	8006280 <TIM_Base_SetConfig+0x40>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a3b      	ldr	r2, [pc, #236]	; (8006360 <TIM_Base_SetConfig+0x120>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_Base_SetConfig+0x40>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a3a      	ldr	r2, [pc, #232]	; (8006364 <TIM_Base_SetConfig+0x124>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d108      	bne.n	8006292 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a2f      	ldr	r2, [pc, #188]	; (8006354 <TIM_Base_SetConfig+0x114>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d02b      	beq.n	80062f2 <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a0:	d027      	beq.n	80062f2 <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a2c      	ldr	r2, [pc, #176]	; (8006358 <TIM_Base_SetConfig+0x118>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d023      	beq.n	80062f2 <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a2b      	ldr	r2, [pc, #172]	; (800635c <TIM_Base_SetConfig+0x11c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d01f      	beq.n	80062f2 <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a2a      	ldr	r2, [pc, #168]	; (8006360 <TIM_Base_SetConfig+0x120>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d01b      	beq.n	80062f2 <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a29      	ldr	r2, [pc, #164]	; (8006364 <TIM_Base_SetConfig+0x124>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d017      	beq.n	80062f2 <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a28      	ldr	r2, [pc, #160]	; (8006368 <TIM_Base_SetConfig+0x128>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d013      	beq.n	80062f2 <TIM_Base_SetConfig+0xb2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a27      	ldr	r2, [pc, #156]	; (800636c <TIM_Base_SetConfig+0x12c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00f      	beq.n	80062f2 <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a26      	ldr	r2, [pc, #152]	; (8006370 <TIM_Base_SetConfig+0x130>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00b      	beq.n	80062f2 <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a25      	ldr	r2, [pc, #148]	; (8006374 <TIM_Base_SetConfig+0x134>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d007      	beq.n	80062f2 <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a24      	ldr	r2, [pc, #144]	; (8006378 <TIM_Base_SetConfig+0x138>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d003      	beq.n	80062f2 <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a23      	ldr	r2, [pc, #140]	; (800637c <TIM_Base_SetConfig+0x13c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d108      	bne.n	8006304 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a0a      	ldr	r2, [pc, #40]	; (8006354 <TIM_Base_SetConfig+0x114>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d003      	beq.n	8006338 <TIM_Base_SetConfig+0xf8>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a0c      	ldr	r2, [pc, #48]	; (8006364 <TIM_Base_SetConfig+0x124>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d103      	bne.n	8006340 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	615a      	str	r2, [r3, #20]
}
 8006346:	bf00      	nop
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40010000 	.word	0x40010000
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800
 8006360:	40000c00 	.word	0x40000c00
 8006364:	40010400 	.word	0x40010400
 8006368:	40014000 	.word	0x40014000
 800636c:	40014400 	.word	0x40014400
 8006370:	40014800 	.word	0x40014800
 8006374:	40001800 	.word	0x40001800
 8006378:	40001c00 	.word	0x40001c00
 800637c:	40002000 	.word	0x40002000

08006380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	f023 0201 	bic.w	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4b2b      	ldr	r3, [pc, #172]	; (8006458 <TIM_OC1_SetConfig+0xd8>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0303 	bic.w	r3, r3, #3
 80063b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f023 0302 	bic.w	r3, r3, #2
 80063c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a21      	ldr	r2, [pc, #132]	; (800645c <TIM_OC1_SetConfig+0xdc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <TIM_OC1_SetConfig+0x64>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a20      	ldr	r2, [pc, #128]	; (8006460 <TIM_OC1_SetConfig+0xe0>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d10c      	bne.n	80063fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f023 0308 	bic.w	r3, r3, #8
 80063ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 0304 	bic.w	r3, r3, #4
 80063fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a16      	ldr	r2, [pc, #88]	; (800645c <TIM_OC1_SetConfig+0xdc>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d003      	beq.n	800640e <TIM_OC1_SetConfig+0x8e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a15      	ldr	r2, [pc, #84]	; (8006460 <TIM_OC1_SetConfig+0xe0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d111      	bne.n	8006432 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800641c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	621a      	str	r2, [r3, #32]
}
 800644c:	bf00      	nop
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	fffeff8f 	.word	0xfffeff8f
 800645c:	40010000 	.word	0x40010000
 8006460:	40010400 	.word	0x40010400

08006464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	f023 0210 	bic.w	r2, r3, #16
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4b2e      	ldr	r3, [pc, #184]	; (8006548 <TIM_OC2_SetConfig+0xe4>)
 8006490:	4013      	ands	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800649a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	021b      	lsls	r3, r3, #8
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0320 	bic.w	r3, r3, #32
 80064ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a23      	ldr	r2, [pc, #140]	; (800654c <TIM_OC2_SetConfig+0xe8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_OC2_SetConfig+0x68>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a22      	ldr	r2, [pc, #136]	; (8006550 <TIM_OC2_SetConfig+0xec>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d10d      	bne.n	80064e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a18      	ldr	r2, [pc, #96]	; (800654c <TIM_OC2_SetConfig+0xe8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d003      	beq.n	80064f8 <TIM_OC2_SetConfig+0x94>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a17      	ldr	r2, [pc, #92]	; (8006550 <TIM_OC2_SetConfig+0xec>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d113      	bne.n	8006520 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	4313      	orrs	r3, r2
 800651e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	621a      	str	r2, [r3, #32]
}
 800653a:	bf00      	nop
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	feff8fff 	.word	0xfeff8fff
 800654c:	40010000 	.word	0x40010000
 8006550:	40010400 	.word	0x40010400

08006554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4b2d      	ldr	r3, [pc, #180]	; (8006634 <TIM_OC3_SetConfig+0xe0>)
 8006580:	4013      	ands	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800659c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a22      	ldr	r2, [pc, #136]	; (8006638 <TIM_OC3_SetConfig+0xe4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d003      	beq.n	80065ba <TIM_OC3_SetConfig+0x66>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a21      	ldr	r2, [pc, #132]	; (800663c <TIM_OC3_SetConfig+0xe8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d10d      	bne.n	80065d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a17      	ldr	r2, [pc, #92]	; (8006638 <TIM_OC3_SetConfig+0xe4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d003      	beq.n	80065e6 <TIM_OC3_SetConfig+0x92>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a16      	ldr	r2, [pc, #88]	; (800663c <TIM_OC3_SetConfig+0xe8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d113      	bne.n	800660e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	621a      	str	r2, [r3, #32]
}
 8006628:	bf00      	nop
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	fffeff8f 	.word	0xfffeff8f
 8006638:	40010000 	.word	0x40010000
 800663c:	40010400 	.word	0x40010400

08006640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4b1e      	ldr	r3, [pc, #120]	; (80066e4 <TIM_OC4_SetConfig+0xa4>)
 800666c:	4013      	ands	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800668a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	031b      	lsls	r3, r3, #12
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a13      	ldr	r2, [pc, #76]	; (80066e8 <TIM_OC4_SetConfig+0xa8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d003      	beq.n	80066a8 <TIM_OC4_SetConfig+0x68>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a12      	ldr	r2, [pc, #72]	; (80066ec <TIM_OC4_SetConfig+0xac>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d109      	bne.n	80066bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	019b      	lsls	r3, r3, #6
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	feff8fff 	.word	0xfeff8fff
 80066e8:	40010000 	.word	0x40010000
 80066ec:	40010400 	.word	0x40010400

080066f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4b1b      	ldr	r3, [pc, #108]	; (8006788 <TIM_OC5_SetConfig+0x98>)
 800671c:	4013      	ands	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006730:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	041b      	lsls	r3, r3, #16
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a12      	ldr	r2, [pc, #72]	; (800678c <TIM_OC5_SetConfig+0x9c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d003      	beq.n	800674e <TIM_OC5_SetConfig+0x5e>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a11      	ldr	r2, [pc, #68]	; (8006790 <TIM_OC5_SetConfig+0xa0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d109      	bne.n	8006762 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006754:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	621a      	str	r2, [r3, #32]
}
 800677c:	bf00      	nop
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	fffeff8f 	.word	0xfffeff8f
 800678c:	40010000 	.word	0x40010000
 8006790:	40010400 	.word	0x40010400

08006794 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4b1c      	ldr	r3, [pc, #112]	; (8006830 <TIM_OC6_SetConfig+0x9c>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	051b      	lsls	r3, r3, #20
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a13      	ldr	r2, [pc, #76]	; (8006834 <TIM_OC6_SetConfig+0xa0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d003      	beq.n	80067f4 <TIM_OC6_SetConfig+0x60>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a12      	ldr	r2, [pc, #72]	; (8006838 <TIM_OC6_SetConfig+0xa4>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d109      	bne.n	8006808 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	029b      	lsls	r3, r3, #10
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	621a      	str	r2, [r3, #32]
}
 8006822:	bf00      	nop
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	feff8fff 	.word	0xfeff8fff
 8006834:	40010000 	.word	0x40010000
 8006838:	40010400 	.word	0x40010400

0800683c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006854:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	4b39      	ldr	r3, [pc, #228]	; (8006948 <TIM_SlaveTimer_SetConfig+0x10c>)
 8006864:	4013      	ands	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b30      	cmp	r3, #48	; 0x30
 8006880:	d05c      	beq.n	800693c <TIM_SlaveTimer_SetConfig+0x100>
 8006882:	2b30      	cmp	r3, #48	; 0x30
 8006884:	d806      	bhi.n	8006894 <TIM_SlaveTimer_SetConfig+0x58>
 8006886:	2b10      	cmp	r3, #16
 8006888:	d058      	beq.n	800693c <TIM_SlaveTimer_SetConfig+0x100>
 800688a:	2b20      	cmp	r3, #32
 800688c:	d056      	beq.n	800693c <TIM_SlaveTimer_SetConfig+0x100>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d054      	beq.n	800693c <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8006892:	e054      	b.n	800693e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006894:	2b50      	cmp	r3, #80	; 0x50
 8006896:	d03d      	beq.n	8006914 <TIM_SlaveTimer_SetConfig+0xd8>
 8006898:	2b50      	cmp	r3, #80	; 0x50
 800689a:	d802      	bhi.n	80068a2 <TIM_SlaveTimer_SetConfig+0x66>
 800689c:	2b40      	cmp	r3, #64	; 0x40
 800689e:	d010      	beq.n	80068c2 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80068a0:	e04d      	b.n	800693e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80068a2:	2b60      	cmp	r3, #96	; 0x60
 80068a4:	d040      	beq.n	8006928 <TIM_SlaveTimer_SetConfig+0xec>
 80068a6:	2b70      	cmp	r3, #112	; 0x70
 80068a8:	d000      	beq.n	80068ac <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80068aa:	e048      	b.n	800693e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	68d9      	ldr	r1, [r3, #12]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f000 f9ea 	bl	8006c94 <TIM_ETR_SetConfig>
      break;
 80068c0:	e03d      	b.n	800693e <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b05      	cmp	r3, #5
 80068c8:	d101      	bne.n	80068ce <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e038      	b.n	8006940 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6a1a      	ldr	r2, [r3, #32]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0201 	bic.w	r2, r2, #1
 80068e4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068f4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	621a      	str	r2, [r3, #32]
      break;
 8006912:	e014      	b.n	800693e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	6899      	ldr	r1, [r3, #8]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	461a      	mov	r2, r3
 8006922:	f000 f887 	bl	8006a34 <TIM_TI1_ConfigInputStage>
      break;
 8006926:	e00a      	b.n	800693e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	6899      	ldr	r1, [r3, #8]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	461a      	mov	r2, r3
 8006936:	f000 f8e9 	bl	8006b0c <TIM_TI2_ConfigInputStage>
      break;
 800693a:	e000      	b.n	800693e <TIM_SlaveTimer_SetConfig+0x102>
        break;
 800693c:	bf00      	nop
  }
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	fffefff8 	.word	0xfffefff8

0800694c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	f023 0201 	bic.w	r2, r3, #1
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4a28      	ldr	r2, [pc, #160]	; (8006a18 <TIM_TI1_SetConfig+0xcc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d01b      	beq.n	80069b2 <TIM_TI1_SetConfig+0x66>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006980:	d017      	beq.n	80069b2 <TIM_TI1_SetConfig+0x66>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4a25      	ldr	r2, [pc, #148]	; (8006a1c <TIM_TI1_SetConfig+0xd0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <TIM_TI1_SetConfig+0x66>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4a24      	ldr	r2, [pc, #144]	; (8006a20 <TIM_TI1_SetConfig+0xd4>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00f      	beq.n	80069b2 <TIM_TI1_SetConfig+0x66>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4a23      	ldr	r2, [pc, #140]	; (8006a24 <TIM_TI1_SetConfig+0xd8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00b      	beq.n	80069b2 <TIM_TI1_SetConfig+0x66>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4a22      	ldr	r2, [pc, #136]	; (8006a28 <TIM_TI1_SetConfig+0xdc>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d007      	beq.n	80069b2 <TIM_TI1_SetConfig+0x66>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4a21      	ldr	r2, [pc, #132]	; (8006a2c <TIM_TI1_SetConfig+0xe0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d003      	beq.n	80069b2 <TIM_TI1_SetConfig+0x66>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4a20      	ldr	r2, [pc, #128]	; (8006a30 <TIM_TI1_SetConfig+0xe4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d101      	bne.n	80069b6 <TIM_TI1_SetConfig+0x6a>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <TIM_TI1_SetConfig+0x6c>
 80069b6:	2300      	movs	r3, #0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d008      	beq.n	80069ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	e003      	b.n	80069d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f043 0301 	orr.w	r3, r3, #1
 80069d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f023 030a 	bic.w	r3, r3, #10
 80069f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f003 030a 	and.w	r3, r3, #10
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40010000 	.word	0x40010000
 8006a1c:	40000400 	.word	0x40000400
 8006a20:	40000800 	.word	0x40000800
 8006a24:	40000c00 	.word	0x40000c00
 8006a28:	40010400 	.word	0x40010400
 8006a2c:	40014000 	.word	0x40014000
 8006a30:	40001800 	.word	0x40001800

08006a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f023 0201 	bic.w	r2, r3, #1
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f023 030a 	bic.w	r3, r3, #10
 8006a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b087      	sub	sp, #28
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
 8006a9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	f023 0210 	bic.w	r2, r3, #16
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006abe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	031b      	lsls	r3, r3, #12
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ae4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	621a      	str	r2, [r3, #32]
}
 8006b00:	bf00      	nop
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	f023 0210 	bic.w	r2, r3, #16
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	031b      	lsls	r3, r3, #12
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	011b      	lsls	r3, r3, #4
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	621a      	str	r2, [r3, #32]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f023 0303 	bic.w	r3, r3, #3
 8006b98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ba8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006bbc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	621a      	str	r2, [r3, #32]
}
 8006bd8:	bf00      	nop
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	031b      	lsls	r3, r3, #12
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006c36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	031b      	lsls	r3, r3, #12
 8006c3c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	621a      	str	r2, [r3, #32]
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f043 0307 	orr.w	r3, r3, #7
 8006c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	609a      	str	r2, [r3, #8]
}
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	021a      	lsls	r2, r3, #8
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	609a      	str	r2, [r3, #8]
}
 8006cc8:	bf00      	nop
 8006cca:	371c      	adds	r7, #28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f003 031f 	and.w	r3, r3, #31
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a1a      	ldr	r2, [r3, #32]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	43db      	mvns	r3, r3
 8006cf6:	401a      	ands	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1a      	ldr	r2, [r3, #32]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	621a      	str	r2, [r3, #32]
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
	...

08006d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d34:	2302      	movs	r3, #2
 8006d36:	e06d      	b.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a30      	ldr	r2, [pc, #192]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d004      	beq.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a2f      	ldr	r2, [pc, #188]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d108      	bne.n	8006d7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a20      	ldr	r2, [pc, #128]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d022      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006daa:	d01d      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1d      	ldr	r2, [pc, #116]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d018      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1c      	ldr	r2, [pc, #112]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d013      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a1a      	ldr	r2, [pc, #104]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00e      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a15      	ldr	r2, [pc, #84]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d009      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a16      	ldr	r2, [pc, #88]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d004      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a15      	ldr	r2, [pc, #84]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d10c      	bne.n	8006e02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	40010000 	.word	0x40010000
 8006e24:	40010400 	.word	0x40010400
 8006e28:	40000400 	.word	0x40000400
 8006e2c:	40000800 	.word	0x40000800
 8006e30:	40000c00 	.word	0x40000c00
 8006e34:	40014000 	.word	0x40014000
 8006e38:	40001800 	.word	0x40001800

08006e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e78:	b084      	sub	sp, #16
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	f107 001c 	add.w	r0, r7, #28
 8006e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d120      	bne.n	8006ed2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	4b20      	ldr	r3, [pc, #128]	; (8006f24 <USB_CoreInit+0xac>)
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d105      	bne.n	8006ec6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 fad6 	bl	8008478 <USB_CoreReset>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	73fb      	strb	r3, [r7, #15]
 8006ed0:	e010      	b.n	8006ef4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 faca 	bl	8008478 <USB_CoreReset>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d10b      	bne.n	8006f12 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f043 0206 	orr.w	r2, r3, #6
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f043 0220 	orr.w	r2, r3, #32
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f1e:	b004      	add	sp, #16
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	ffbdffbf 	.word	0xffbdffbf

08006f28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	4613      	mov	r3, r2
 8006f34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d165      	bne.n	8007008 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4a41      	ldr	r2, [pc, #260]	; (8007044 <USB_SetTurnaroundTime+0x11c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d906      	bls.n	8006f52 <USB_SetTurnaroundTime+0x2a>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	4a40      	ldr	r2, [pc, #256]	; (8007048 <USB_SetTurnaroundTime+0x120>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d802      	bhi.n	8006f52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f4c:	230f      	movs	r3, #15
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	e062      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4a3c      	ldr	r2, [pc, #240]	; (8007048 <USB_SetTurnaroundTime+0x120>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d906      	bls.n	8006f68 <USB_SetTurnaroundTime+0x40>
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4a3b      	ldr	r2, [pc, #236]	; (800704c <USB_SetTurnaroundTime+0x124>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d802      	bhi.n	8006f68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f62:	230e      	movs	r3, #14
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	e057      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4a38      	ldr	r2, [pc, #224]	; (800704c <USB_SetTurnaroundTime+0x124>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d906      	bls.n	8006f7e <USB_SetTurnaroundTime+0x56>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4a37      	ldr	r2, [pc, #220]	; (8007050 <USB_SetTurnaroundTime+0x128>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d802      	bhi.n	8006f7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f78:	230d      	movs	r3, #13
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	e04c      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	4a33      	ldr	r2, [pc, #204]	; (8007050 <USB_SetTurnaroundTime+0x128>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d906      	bls.n	8006f94 <USB_SetTurnaroundTime+0x6c>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4a32      	ldr	r2, [pc, #200]	; (8007054 <USB_SetTurnaroundTime+0x12c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d802      	bhi.n	8006f94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f8e:	230c      	movs	r3, #12
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	e041      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4a2f      	ldr	r2, [pc, #188]	; (8007054 <USB_SetTurnaroundTime+0x12c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d906      	bls.n	8006faa <USB_SetTurnaroundTime+0x82>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4a2e      	ldr	r2, [pc, #184]	; (8007058 <USB_SetTurnaroundTime+0x130>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d802      	bhi.n	8006faa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fa4:	230b      	movs	r3, #11
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	e036      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4a2a      	ldr	r2, [pc, #168]	; (8007058 <USB_SetTurnaroundTime+0x130>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d906      	bls.n	8006fc0 <USB_SetTurnaroundTime+0x98>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4a29      	ldr	r2, [pc, #164]	; (800705c <USB_SetTurnaroundTime+0x134>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d802      	bhi.n	8006fc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fba:	230a      	movs	r3, #10
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	e02b      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4a26      	ldr	r2, [pc, #152]	; (800705c <USB_SetTurnaroundTime+0x134>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d906      	bls.n	8006fd6 <USB_SetTurnaroundTime+0xae>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4a25      	ldr	r2, [pc, #148]	; (8007060 <USB_SetTurnaroundTime+0x138>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d802      	bhi.n	8006fd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006fd0:	2309      	movs	r3, #9
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	e020      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	4a21      	ldr	r2, [pc, #132]	; (8007060 <USB_SetTurnaroundTime+0x138>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d906      	bls.n	8006fec <USB_SetTurnaroundTime+0xc4>
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4a20      	ldr	r2, [pc, #128]	; (8007064 <USB_SetTurnaroundTime+0x13c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d802      	bhi.n	8006fec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	e015      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	4a1d      	ldr	r2, [pc, #116]	; (8007064 <USB_SetTurnaroundTime+0x13c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d906      	bls.n	8007002 <USB_SetTurnaroundTime+0xda>
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4a1c      	ldr	r2, [pc, #112]	; (8007068 <USB_SetTurnaroundTime+0x140>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d802      	bhi.n	8007002 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ffc:	2307      	movs	r3, #7
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	e00a      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007002:	2306      	movs	r3, #6
 8007004:	617b      	str	r3, [r7, #20]
 8007006:	e007      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d102      	bne.n	8007014 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800700e:	2309      	movs	r3, #9
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	e001      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007014:	2309      	movs	r3, #9
 8007016:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	029b      	lsls	r3, r3, #10
 800702c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007030:	431a      	orrs	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	00d8acbf 	.word	0x00d8acbf
 8007048:	00e4e1bf 	.word	0x00e4e1bf
 800704c:	00f423ff 	.word	0x00f423ff
 8007050:	0106737f 	.word	0x0106737f
 8007054:	011a499f 	.word	0x011a499f
 8007058:	01312cff 	.word	0x01312cff
 800705c:	014ca43f 	.word	0x014ca43f
 8007060:	016e35ff 	.word	0x016e35ff
 8007064:	01a6ab1f 	.word	0x01a6ab1f
 8007068:	01e847ff 	.word	0x01e847ff

0800706c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f043 0201 	orr.w	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f023 0201 	bic.w	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070c8:	78fb      	ldrb	r3, [r7, #3]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d106      	bne.n	80070dc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	60da      	str	r2, [r3, #12]
 80070da:	e00b      	b.n	80070f4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80070dc:	78fb      	ldrb	r3, [r7, #3]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d106      	bne.n	80070f0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60da      	str	r2, [r3, #12]
 80070ee:	e001      	b.n	80070f4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e003      	b.n	80070fc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80070f4:	2032      	movs	r0, #50	; 0x32
 80070f6:	f7fa fd89 	bl	8001c0c <HAL_Delay>

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007104:	b084      	sub	sp, #16
 8007106:	b580      	push	{r7, lr}
 8007108:	b086      	sub	sp, #24
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800711e:	2300      	movs	r3, #0
 8007120:	613b      	str	r3, [r7, #16]
 8007122:	e009      	b.n	8007138 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	3340      	adds	r3, #64	; 0x40
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	2200      	movs	r2, #0
 8007130:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	3301      	adds	r3, #1
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2b0e      	cmp	r3, #14
 800713c:	d9f2      	bls.n	8007124 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800713e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d11c      	bne.n	800717e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007152:	f043 0302 	orr.w	r3, r3, #2
 8007156:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	e005      	b.n	800718a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007190:	461a      	mov	r2, r3
 8007192:	2300      	movs	r3, #0
 8007194:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719c:	4619      	mov	r1, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a4:	461a      	mov	r2, r3
 80071a6:	680b      	ldr	r3, [r1, #0]
 80071a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d10c      	bne.n	80071ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071b6:	2100      	movs	r1, #0
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f959 	bl	8007470 <USB_SetDevSpeed>
 80071be:	e018      	b.n	80071f2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071c0:	2101      	movs	r1, #1
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f954 	bl	8007470 <USB_SetDevSpeed>
 80071c8:	e013      	b.n	80071f2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d10c      	bne.n	80071ea <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d104      	bne.n	80071e0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071d6:	2100      	movs	r1, #0
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f949 	bl	8007470 <USB_SetDevSpeed>
 80071de:	e008      	b.n	80071f2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071e0:	2101      	movs	r1, #1
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f944 	bl	8007470 <USB_SetDevSpeed>
 80071e8:	e003      	b.n	80071f2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071ea:	2103      	movs	r1, #3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f93f 	bl	8007470 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071f2:	2110      	movs	r1, #16
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f8f3 	bl	80073e0 <USB_FlushTxFifo>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f911 	bl	800742c <USB_FlushRxFifo>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721a:	461a      	mov	r2, r3
 800721c:	2300      	movs	r3, #0
 800721e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007226:	461a      	mov	r2, r3
 8007228:	2300      	movs	r3, #0
 800722a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007232:	461a      	mov	r2, r3
 8007234:	2300      	movs	r3, #0
 8007236:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007238:	2300      	movs	r3, #0
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	e043      	b.n	80072c6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007254:	d118      	bne.n	8007288 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10a      	bne.n	8007272 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	461a      	mov	r2, r3
 800726a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	e013      	b.n	800729a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727e:	461a      	mov	r2, r3
 8007280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	e008      	b.n	800729a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007294:	461a      	mov	r2, r3
 8007296:	2300      	movs	r3, #0
 8007298:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a6:	461a      	mov	r2, r3
 80072a8:	2300      	movs	r3, #0
 80072aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b8:	461a      	mov	r2, r3
 80072ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	3301      	adds	r3, #1
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d3b7      	bcc.n	800723e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072ce:	2300      	movs	r3, #0
 80072d0:	613b      	str	r3, [r7, #16]
 80072d2:	e043      	b.n	800735c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ea:	d118      	bne.n	800731e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fe:	461a      	mov	r2, r3
 8007300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	e013      	b.n	8007330 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007314:	461a      	mov	r2, r3
 8007316:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	e008      	b.n	8007330 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732a:	461a      	mov	r2, r3
 800732c:	2300      	movs	r3, #0
 800732e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733c:	461a      	mov	r2, r3
 800733e:	2300      	movs	r3, #0
 8007340:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734e:	461a      	mov	r2, r3
 8007350:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007354:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	3301      	adds	r3, #1
 800735a:	613b      	str	r3, [r7, #16]
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	429a      	cmp	r2, r3
 8007362:	d3b7      	bcc.n	80072d4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007376:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007384:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	2b00      	cmp	r3, #0
 800738a:	d105      	bne.n	8007398 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	f043 0210 	orr.w	r2, r3, #16
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	699a      	ldr	r2, [r3, #24]
 800739c:	4b0e      	ldr	r3, [pc, #56]	; (80073d8 <USB_DevInit+0x2d4>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d005      	beq.n	80073b6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	f043 0208 	orr.w	r2, r3, #8
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d105      	bne.n	80073c8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699a      	ldr	r2, [r3, #24]
 80073c0:	4b06      	ldr	r3, [pc, #24]	; (80073dc <USB_DevInit+0x2d8>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073d4:	b004      	add	sp, #16
 80073d6:	4770      	bx	lr
 80073d8:	803c3800 	.word	0x803c3800
 80073dc:	40000004 	.word	0x40000004

080073e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	019b      	lsls	r3, r3, #6
 80073f2:	f043 0220 	orr.w	r2, r3, #32
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3301      	adds	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4a09      	ldr	r2, [pc, #36]	; (8007428 <USB_FlushTxFifo+0x48>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d901      	bls.n	800740c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e006      	b.n	800741a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b20      	cmp	r3, #32
 8007416:	d0f0      	beq.n	80073fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	00030d40 	.word	0x00030d40

0800742c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2210      	movs	r2, #16
 800743c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4a09      	ldr	r2, [pc, #36]	; (800746c <USB_FlushRxFifo+0x40>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d901      	bls.n	8007450 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e006      	b.n	800745e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b10      	cmp	r3, #16
 800745a:	d0f0      	beq.n	800743e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	00030d40 	.word	0x00030d40

08007470 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	68f9      	ldr	r1, [r7, #12]
 800748c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007490:	4313      	orrs	r3, r2
 8007492:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b087      	sub	sp, #28
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f003 0306 	and.w	r3, r3, #6
 80074ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d102      	bne.n	80074c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80074c2:	2300      	movs	r3, #0
 80074c4:	75fb      	strb	r3, [r7, #23]
 80074c6:	e00a      	b.n	80074de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d002      	beq.n	80074d4 <USB_GetDevSpeed+0x32>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b06      	cmp	r3, #6
 80074d2:	d102      	bne.n	80074da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80074d4:	2302      	movs	r3, #2
 80074d6:	75fb      	strb	r3, [r7, #23]
 80074d8:	e001      	b.n	80074de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80074da:	230f      	movs	r3, #15
 80074dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80074de:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	371c      	adds	r7, #28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	785b      	ldrb	r3, [r3, #1]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d139      	bne.n	800757c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750e:	69da      	ldr	r2, [r3, #28]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	2101      	movs	r1, #1
 800751a:	fa01 f303 	lsl.w	r3, r1, r3
 800751e:	b29b      	uxth	r3, r3
 8007520:	68f9      	ldr	r1, [r7, #12]
 8007522:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007526:	4313      	orrs	r3, r2
 8007528:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d153      	bne.n	80075e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	78db      	ldrb	r3, [r3, #3]
 800755a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800755c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	059b      	lsls	r3, r3, #22
 8007562:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007564:	431a      	orrs	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	0159      	lsls	r1, r3, #5
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	440b      	add	r3, r1
 800756e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007572:	4619      	mov	r1, r3
 8007574:	4b20      	ldr	r3, [pc, #128]	; (80075f8 <USB_ActivateEndpoint+0x10c>)
 8007576:	4313      	orrs	r3, r2
 8007578:	600b      	str	r3, [r1, #0]
 800757a:	e035      	b.n	80075e8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007582:	69da      	ldr	r2, [r3, #28]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	2101      	movs	r1, #1
 800758e:	fa01 f303 	lsl.w	r3, r1, r3
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	68f9      	ldr	r1, [r7, #12]
 8007596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800759a:	4313      	orrs	r3, r2
 800759c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d119      	bne.n	80075e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	78db      	ldrb	r3, [r3, #3]
 80075ce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075d0:	430b      	orrs	r3, r1
 80075d2:	431a      	orrs	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	0159      	lsls	r1, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	440b      	add	r3, r1
 80075dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e0:	4619      	mov	r1, r3
 80075e2:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <USB_ActivateEndpoint+0x10c>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	10008000 	.word	0x10008000

080075fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	785b      	ldrb	r3, [r3, #1]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d161      	bne.n	80076dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800762a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800762e:	d11f      	bne.n	8007670 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	440a      	add	r2, r1
 8007646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800764a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800764e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	440a      	add	r2, r1
 8007666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800766a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800766e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	f003 030f 	and.w	r3, r3, #15
 8007680:	2101      	movs	r1, #1
 8007682:	fa01 f303 	lsl.w	r3, r1, r3
 8007686:	b29b      	uxth	r3, r3
 8007688:	43db      	mvns	r3, r3
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007690:	4013      	ands	r3, r2
 8007692:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769a:	69da      	ldr	r2, [r3, #28]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	f003 030f 	and.w	r3, r3, #15
 80076a4:	2101      	movs	r1, #1
 80076a6:	fa01 f303 	lsl.w	r3, r1, r3
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	43db      	mvns	r3, r3
 80076ae:	68f9      	ldr	r1, [r7, #12]
 80076b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076b4:	4013      	ands	r3, r2
 80076b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	0159      	lsls	r1, r3, #5
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	440b      	add	r3, r1
 80076ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d2:	4619      	mov	r1, r3
 80076d4:	4b35      	ldr	r3, [pc, #212]	; (80077ac <USB_DeactivateEndpoint+0x1b0>)
 80076d6:	4013      	ands	r3, r2
 80076d8:	600b      	str	r3, [r1, #0]
 80076da:	e060      	b.n	800779e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076f2:	d11f      	bne.n	8007734 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	0151      	lsls	r1, r2, #5
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	440a      	add	r2, r1
 800770a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800770e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007712:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	440a      	add	r2, r1
 800772a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800772e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007732:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	f003 030f 	and.w	r3, r3, #15
 8007744:	2101      	movs	r1, #1
 8007746:	fa01 f303 	lsl.w	r3, r1, r3
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	43db      	mvns	r3, r3
 800774e:	68f9      	ldr	r1, [r7, #12]
 8007750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007754:	4013      	ands	r3, r2
 8007756:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775e:	69da      	ldr	r2, [r3, #28]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	2101      	movs	r1, #1
 800776a:	fa01 f303 	lsl.w	r3, r1, r3
 800776e:	041b      	lsls	r3, r3, #16
 8007770:	43db      	mvns	r3, r3
 8007772:	68f9      	ldr	r1, [r7, #12]
 8007774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007778:	4013      	ands	r3, r2
 800777a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	0159      	lsls	r1, r3, #5
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	440b      	add	r3, r1
 8007792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007796:	4619      	mov	r1, r3
 8007798:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <USB_DeactivateEndpoint+0x1b4>)
 800779a:	4013      	ands	r3, r2
 800779c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	ec337800 	.word	0xec337800
 80077b0:	eff37800 	.word	0xeff37800

080077b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08a      	sub	sp, #40	; 0x28
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	4613      	mov	r3, r2
 80077c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	785b      	ldrb	r3, [r3, #1]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	f040 8163 	bne.w	8007a9c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d132      	bne.n	8007844 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	0159      	lsls	r1, r3, #5
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	440b      	add	r3, r1
 80077f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f8:	4619      	mov	r1, r3
 80077fa:	4ba5      	ldr	r3, [pc, #660]	; (8007a90 <USB_EPStartXfer+0x2dc>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	0151      	lsls	r1, r2, #5
 8007812:	69fa      	ldr	r2, [r7, #28]
 8007814:	440a      	add	r2, r1
 8007816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800781a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800781e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782c:	691a      	ldr	r2, [r3, #16]
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	0159      	lsls	r1, r3, #5
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	440b      	add	r3, r1
 8007836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783a:	4619      	mov	r1, r3
 800783c:	4b95      	ldr	r3, [pc, #596]	; (8007a94 <USB_EPStartXfer+0x2e0>)
 800783e:	4013      	ands	r3, r2
 8007840:	610b      	str	r3, [r1, #16]
 8007842:	e074      	b.n	800792e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007850:	691a      	ldr	r2, [r3, #16]
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	0159      	lsls	r1, r3, #5
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	440b      	add	r3, r1
 800785a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785e:	4619      	mov	r1, r3
 8007860:	4b8c      	ldr	r3, [pc, #560]	; (8007a94 <USB_EPStartXfer+0x2e0>)
 8007862:	4013      	ands	r3, r2
 8007864:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	0159      	lsls	r1, r3, #5
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	440b      	add	r3, r1
 800787c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007880:	4619      	mov	r1, r3
 8007882:	4b83      	ldr	r3, [pc, #524]	; (8007a90 <USB_EPStartXfer+0x2dc>)
 8007884:	4013      	ands	r3, r2
 8007886:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007894:	691a      	ldr	r2, [r3, #16]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6959      	ldr	r1, [r3, #20]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	440b      	add	r3, r1
 80078a0:	1e59      	subs	r1, r3, #1
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80078aa:	04d9      	lsls	r1, r3, #19
 80078ac:	4b7a      	ldr	r3, [pc, #488]	; (8007a98 <USB_EPStartXfer+0x2e4>)
 80078ae:	400b      	ands	r3, r1
 80078b0:	69b9      	ldr	r1, [r7, #24]
 80078b2:	0148      	lsls	r0, r1, #5
 80078b4:	69f9      	ldr	r1, [r7, #28]
 80078b6:	4401      	add	r1, r0
 80078b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078bc:	4313      	orrs	r3, r2
 80078be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078cc:	691a      	ldr	r2, [r3, #16]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078d6:	69b9      	ldr	r1, [r7, #24]
 80078d8:	0148      	lsls	r0, r1, #5
 80078da:	69f9      	ldr	r1, [r7, #28]
 80078dc:	4401      	add	r1, r0
 80078de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078e2:	4313      	orrs	r3, r2
 80078e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	78db      	ldrb	r3, [r3, #3]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d11f      	bne.n	800792e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	0151      	lsls	r1, r2, #5
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	440a      	add	r2, r1
 8007904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007908:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800790c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	0151      	lsls	r1, r2, #5
 8007920:	69fa      	ldr	r2, [r7, #28]
 8007922:	440a      	add	r2, r1
 8007924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007928:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800792c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d14b      	bne.n	80079cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d009      	beq.n	8007950 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007948:	461a      	mov	r2, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	78db      	ldrb	r3, [r3, #3]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d128      	bne.n	80079aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007964:	2b00      	cmp	r3, #0
 8007966:	d110      	bne.n	800798a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	69fa      	ldr	r2, [r7, #28]
 800797c:	440a      	add	r2, r1
 800797e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007982:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	e00f      	b.n	80079aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	0151      	lsls	r1, r2, #5
 800799c:	69fa      	ldr	r2, [r7, #28]
 800799e:	440a      	add	r2, r1
 80079a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	0151      	lsls	r1, r2, #5
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	440a      	add	r2, r1
 80079c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	e133      	b.n	8007c34 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	0151      	lsls	r1, r2, #5
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	440a      	add	r2, r1
 80079e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	78db      	ldrb	r3, [r3, #3]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d015      	beq.n	8007a20 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 811b 	beq.w	8007c34 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	f003 030f 	and.w	r3, r3, #15
 8007a0e:	2101      	movs	r1, #1
 8007a10:	fa01 f303 	lsl.w	r3, r1, r3
 8007a14:	69f9      	ldr	r1, [r7, #28]
 8007a16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	634b      	str	r3, [r1, #52]	; 0x34
 8007a1e:	e109      	b.n	8007c34 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d110      	bne.n	8007a52 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	e00f      	b.n	8007a72 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	0151      	lsls	r1, r2, #5
 8007a64:	69fa      	ldr	r2, [r7, #28]
 8007a66:	440a      	add	r2, r1
 8007a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	68d9      	ldr	r1, [r3, #12]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	781a      	ldrb	r2, [r3, #0]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	b298      	uxth	r0, r3
 8007a80:	79fb      	ldrb	r3, [r7, #7]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4603      	mov	r3, r0
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fa38 	bl	8007efc <USB_WritePacket>
 8007a8c:	e0d2      	b.n	8007c34 <USB_EPStartXfer+0x480>
 8007a8e:	bf00      	nop
 8007a90:	e007ffff 	.word	0xe007ffff
 8007a94:	fff80000 	.word	0xfff80000
 8007a98:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa8:	691a      	ldr	r2, [r3, #16]
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	0159      	lsls	r1, r3, #5
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	440b      	add	r3, r1
 8007ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4b61      	ldr	r3, [pc, #388]	; (8007c40 <USB_EPStartXfer+0x48c>)
 8007aba:	4013      	ands	r3, r2
 8007abc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	0159      	lsls	r1, r3, #5
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	440b      	add	r3, r1
 8007ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4b5a      	ldr	r3, [pc, #360]	; (8007c44 <USB_EPStartXfer+0x490>)
 8007adc:	4013      	ands	r3, r2
 8007ade:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d123      	bne.n	8007b30 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af4:	691a      	ldr	r2, [r3, #16]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007afe:	69b9      	ldr	r1, [r7, #24]
 8007b00:	0148      	lsls	r0, r1, #5
 8007b02:	69f9      	ldr	r1, [r7, #28]
 8007b04:	4401      	add	r1, r0
 8007b06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	0151      	lsls	r1, r2, #5
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	440a      	add	r2, r1
 8007b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b2c:	6113      	str	r3, [r2, #16]
 8007b2e:	e033      	b.n	8007b98 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	695a      	ldr	r2, [r3, #20]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	4413      	add	r3, r2
 8007b3a:	1e5a      	subs	r2, r3, #1
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b44:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b52:	691a      	ldr	r2, [r3, #16]
 8007b54:	8afb      	ldrh	r3, [r7, #22]
 8007b56:	04d9      	lsls	r1, r3, #19
 8007b58:	4b3b      	ldr	r3, [pc, #236]	; (8007c48 <USB_EPStartXfer+0x494>)
 8007b5a:	400b      	ands	r3, r1
 8007b5c:	69b9      	ldr	r1, [r7, #24]
 8007b5e:	0148      	lsls	r0, r1, #5
 8007b60:	69f9      	ldr	r1, [r7, #28]
 8007b62:	4401      	add	r1, r0
 8007b64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b78:	691a      	ldr	r2, [r3, #16]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	8af9      	ldrh	r1, [r7, #22]
 8007b80:	fb01 f303 	mul.w	r3, r1, r3
 8007b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b88:	69b9      	ldr	r1, [r7, #24]
 8007b8a:	0148      	lsls	r0, r1, #5
 8007b8c:	69f9      	ldr	r1, [r7, #28]
 8007b8e:	4401      	add	r1, r0
 8007b90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b94:	4313      	orrs	r3, r2
 8007b96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d10d      	bne.n	8007bba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d009      	beq.n	8007bba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	68d9      	ldr	r1, [r3, #12]
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb6:	460a      	mov	r2, r1
 8007bb8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	78db      	ldrb	r3, [r3, #3]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d128      	bne.n	8007c14 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d110      	bne.n	8007bf4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	0151      	lsls	r1, r2, #5
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	440a      	add	r2, r1
 8007be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	e00f      	b.n	8007c14 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	0151      	lsls	r1, r2, #5
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	440a      	add	r2, r1
 8007c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	0151      	lsls	r1, r2, #5
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	440a      	add	r2, r1
 8007c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3720      	adds	r7, #32
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	fff80000 	.word	0xfff80000
 8007c44:	e007ffff 	.word	0xe007ffff
 8007c48:	1ff80000 	.word	0x1ff80000

08007c4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	4613      	mov	r3, r2
 8007c58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	785b      	ldrb	r3, [r3, #1]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	f040 80cd 	bne.w	8007e08 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d132      	bne.n	8007cdc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c82:	691a      	ldr	r2, [r3, #16]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	0159      	lsls	r1, r3, #5
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	440b      	add	r3, r1
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c90:	4619      	mov	r1, r3
 8007c92:	4b98      	ldr	r3, [pc, #608]	; (8007ef4 <USB_EP0StartXfer+0x2a8>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	0151      	lsls	r1, r2, #5
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	440a      	add	r2, r1
 8007cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	0159      	lsls	r1, r3, #5
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	440b      	add	r3, r1
 8007cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4b88      	ldr	r3, [pc, #544]	; (8007ef8 <USB_EP0StartXfer+0x2ac>)
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	610b      	str	r3, [r1, #16]
 8007cda:	e04e      	b.n	8007d7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce8:	691a      	ldr	r2, [r3, #16]
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	0159      	lsls	r1, r3, #5
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	440b      	add	r3, r1
 8007cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4b7f      	ldr	r3, [pc, #508]	; (8007ef8 <USB_EP0StartXfer+0x2ac>)
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0a:	691a      	ldr	r2, [r3, #16]
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	0159      	lsls	r1, r3, #5
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	440b      	add	r3, r1
 8007d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4b76      	ldr	r3, [pc, #472]	; (8007ef4 <USB_EP0StartXfer+0x2a8>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	695a      	ldr	r2, [r3, #20]
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d903      	bls.n	8007d34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	0151      	lsls	r1, r2, #5
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	440a      	add	r2, r1
 8007d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d60:	691a      	ldr	r2, [r3, #16]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d6a:	6939      	ldr	r1, [r7, #16]
 8007d6c:	0148      	lsls	r0, r1, #5
 8007d6e:	6979      	ldr	r1, [r7, #20]
 8007d70:	4401      	add	r1, r0
 8007d72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d76:	4313      	orrs	r3, r2
 8007d78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d11e      	bne.n	8007dbe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d009      	beq.n	8007d9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d94:	461a      	mov	r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	0151      	lsls	r1, r2, #5
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	440a      	add	r2, r1
 8007db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007db6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	e092      	b.n	8007ee4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	0151      	lsls	r1, r2, #5
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	440a      	add	r2, r1
 8007dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ddc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d07e      	beq.n	8007ee4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	f003 030f 	and.w	r3, r3, #15
 8007df6:	2101      	movs	r1, #1
 8007df8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dfc:	6979      	ldr	r1, [r7, #20]
 8007dfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e02:	4313      	orrs	r3, r2
 8007e04:	634b      	str	r3, [r1, #52]	; 0x34
 8007e06:	e06d      	b.n	8007ee4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e14:	691a      	ldr	r2, [r3, #16]
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	0159      	lsls	r1, r3, #5
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	440b      	add	r3, r1
 8007e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e22:	4619      	mov	r1, r3
 8007e24:	4b34      	ldr	r3, [pc, #208]	; (8007ef8 <USB_EP0StartXfer+0x2ac>)
 8007e26:	4013      	ands	r3, r2
 8007e28:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e36:	691a      	ldr	r2, [r3, #16]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	0159      	lsls	r1, r3, #5
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	440b      	add	r3, r1
 8007e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e44:	4619      	mov	r1, r3
 8007e46:	4b2b      	ldr	r3, [pc, #172]	; (8007ef4 <USB_EP0StartXfer+0x2a8>)
 8007e48:	4013      	ands	r3, r2
 8007e4a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d003      	beq.n	8007e5c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	0151      	lsls	r1, r2, #5
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	440a      	add	r2, r1
 8007e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e88:	691a      	ldr	r2, [r3, #16]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e92:	6939      	ldr	r1, [r7, #16]
 8007e94:	0148      	lsls	r0, r1, #5
 8007e96:	6979      	ldr	r1, [r7, #20]
 8007e98:	4401      	add	r1, r0
 8007e9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d10d      	bne.n	8007ec4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d009      	beq.n	8007ec4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	68d9      	ldr	r1, [r3, #12]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec0:	460a      	mov	r2, r1
 8007ec2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	0151      	lsls	r1, r2, #5
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	440a      	add	r2, r1
 8007eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ede:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ee2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	e007ffff 	.word	0xe007ffff
 8007ef8:	fff80000 	.word	0xfff80000

08007efc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b089      	sub	sp, #36	; 0x24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4611      	mov	r1, r2
 8007f08:	461a      	mov	r2, r3
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	71fb      	strb	r3, [r7, #7]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007f1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d11a      	bne.n	8007f58 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f22:	88bb      	ldrh	r3, [r7, #4]
 8007f24:	3303      	adds	r3, #3
 8007f26:	089b      	lsrs	r3, r3, #2
 8007f28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61bb      	str	r3, [r7, #24]
 8007f2e:	e00f      	b.n	8007f50 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	031a      	lsls	r2, r3, #12
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	3304      	adds	r3, #4
 8007f48:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	61bb      	str	r3, [r7, #24]
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d3eb      	bcc.n	8007f30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3724      	adds	r7, #36	; 0x24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b089      	sub	sp, #36	; 0x24
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	4613      	mov	r3, r2
 8007f72:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007f7c:	88fb      	ldrh	r3, [r7, #6]
 8007f7e:	3303      	adds	r3, #3
 8007f80:	089b      	lsrs	r3, r3, #2
 8007f82:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007f84:	2300      	movs	r3, #0
 8007f86:	61bb      	str	r3, [r7, #24]
 8007f88:	e00b      	b.n	8007fa2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d3ef      	bcc.n	8007f8a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007faa:	69fb      	ldr	r3, [r7, #28]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3724      	adds	r7, #36	; 0x24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	785b      	ldrb	r3, [r3, #1]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d12c      	bne.n	800802e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	db12      	blt.n	800800c <USB_EPSetStall+0x54>
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00f      	beq.n	800800c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	0151      	lsls	r1, r2, #5
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	440a      	add	r2, r1
 8008002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008006:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800800a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	4413      	add	r3, r2
 8008014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	0151      	lsls	r1, r2, #5
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	440a      	add	r2, r1
 8008022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008026:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	e02b      	b.n	8008086 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	db12      	blt.n	8008066 <USB_EPSetStall+0xae>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00f      	beq.n	8008066 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4413      	add	r3, r2
 800804e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	0151      	lsls	r1, r2, #5
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	440a      	add	r2, r1
 800805c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008060:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008064:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	0151      	lsls	r1, r2, #5
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	440a      	add	r2, r1
 800807c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008080:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008084:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	785b      	ldrb	r3, [r3, #1]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d128      	bne.n	8008102 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	015a      	lsls	r2, r3, #5
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	4413      	add	r3, r2
 80080b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	0151      	lsls	r1, r2, #5
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	440a      	add	r2, r1
 80080c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	78db      	ldrb	r3, [r3, #3]
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d003      	beq.n	80080e0 <USB_EPClearStall+0x4c>
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	78db      	ldrb	r3, [r3, #3]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d138      	bne.n	8008152 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	0151      	lsls	r1, r2, #5
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	440a      	add	r2, r1
 80080f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	e027      	b.n	8008152 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	0151      	lsls	r1, r2, #5
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	440a      	add	r2, r1
 8008118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800811c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008120:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	78db      	ldrb	r3, [r3, #3]
 8008126:	2b03      	cmp	r3, #3
 8008128:	d003      	beq.n	8008132 <USB_EPClearStall+0x9e>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	78db      	ldrb	r3, [r3, #3]
 800812e:	2b02      	cmp	r3, #2
 8008130:	d10f      	bne.n	8008152 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	0151      	lsls	r1, r2, #5
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	440a      	add	r2, r1
 8008148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800814c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008150:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800817e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008182:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	78fb      	ldrb	r3, [r7, #3]
 800818e:	011b      	lsls	r3, r3, #4
 8008190:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008194:	68f9      	ldr	r1, [r7, #12]
 8008196:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800819a:	4313      	orrs	r3, r2
 800819c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081c6:	f023 0303 	bic.w	r3, r3, #3
 80081ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081da:	f023 0302 	bic.w	r3, r3, #2
 80081de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008208:	f023 0303 	bic.w	r3, r3, #3
 800820c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800821c:	f043 0302 	orr.w	r3, r3, #2
 8008220:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	4013      	ands	r3, r2
 8008246:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008248:	68fb      	ldr	r3, [r7, #12]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	4013      	ands	r3, r2
 8008278:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	0c1b      	lsrs	r3, r3, #16
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	4013      	ands	r3, r2
 80082ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	b29b      	uxth	r3, r3
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082be:	b480      	push	{r7}
 80082c0:	b085      	sub	sp, #20
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	460b      	mov	r3, r1
 80082c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80082ce:	78fb      	ldrb	r3, [r7, #3]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	4013      	ands	r3, r2
 80082ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082ec:	68bb      	ldr	r3, [r7, #8]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b087      	sub	sp, #28
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	460b      	mov	r3, r1
 8008304:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800831a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800831e:	78fb      	ldrb	r3, [r7, #3]
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	fa22 f303 	lsr.w	r3, r2, r3
 800832a:	01db      	lsls	r3, r3, #7
 800832c:	b2db      	uxtb	r3, r3
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	4313      	orrs	r3, r2
 8008332:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008334:	78fb      	ldrb	r3, [r7, #3]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4013      	ands	r3, r2
 8008346:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008348:	68bb      	ldr	r3, [r7, #8]
}
 800834a:	4618      	mov	r0, r3
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	f003 0301 	and.w	r3, r3, #1
}
 8008366:	4618      	mov	r0, r3
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
	...

08008374 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800838e:	4619      	mov	r1, r3
 8008390:	4b09      	ldr	r3, [pc, #36]	; (80083b8 <USB_ActivateSetup+0x44>)
 8008392:	4013      	ands	r3, r2
 8008394:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	fffff800 	.word	0xfffff800

080083bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	460b      	mov	r3, r1
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	333c      	adds	r3, #60	; 0x3c
 80083d2:	3304      	adds	r3, #4
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	4a26      	ldr	r2, [pc, #152]	; (8008474 <USB_EP0_OutStart+0xb8>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d90a      	bls.n	80083f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083f0:	d101      	bne.n	80083f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	e037      	b.n	8008466 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fc:	461a      	mov	r2, r3
 80083fe:	2300      	movs	r3, #0
 8008400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008410:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008424:	f043 0318 	orr.w	r3, r3, #24
 8008428:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008438:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800843c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800843e:	7afb      	ldrb	r3, [r7, #11]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d10f      	bne.n	8008464 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844a:	461a      	mov	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800845e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008462:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	371c      	adds	r7, #28
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	4f54300a 	.word	0x4f54300a

08008478 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3301      	adds	r3, #1
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4a13      	ldr	r2, [pc, #76]	; (80084dc <USB_CoreReset+0x64>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d901      	bls.n	8008496 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e01b      	b.n	80084ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	daf2      	bge.n	8008484 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	f043 0201 	orr.w	r2, r3, #1
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3301      	adds	r3, #1
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4a09      	ldr	r2, [pc, #36]	; (80084dc <USB_CoreReset+0x64>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d901      	bls.n	80084c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e006      	b.n	80084ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d0f0      	beq.n	80084ae <USB_CoreReset+0x36>

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	00030d40 	.word	0x00030d40

080084e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80084f0:	f002 f968 	bl	800a7c4 <malloc>
 80084f4:	4603      	mov	r3, r0
 80084f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d105      	bne.n	800850a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008506:	2302      	movs	r3, #2
 8008508:	e066      	b.n	80085d8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	7c1b      	ldrb	r3, [r3, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d119      	bne.n	800854e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800851a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800851e:	2202      	movs	r2, #2
 8008520:	2181      	movs	r1, #129	; 0x81
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 ff81 	bl	800a42a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800852e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008532:	2202      	movs	r2, #2
 8008534:	2101      	movs	r1, #1
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f001 ff77 	bl	800a42a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2210      	movs	r2, #16
 8008548:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800854c:	e016      	b.n	800857c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800854e:	2340      	movs	r3, #64	; 0x40
 8008550:	2202      	movs	r2, #2
 8008552:	2181      	movs	r1, #129	; 0x81
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f001 ff68 	bl	800a42a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008560:	2340      	movs	r3, #64	; 0x40
 8008562:	2202      	movs	r2, #2
 8008564:	2101      	movs	r1, #1
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f001 ff5f 	bl	800a42a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2210      	movs	r2, #16
 8008578:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800857c:	2308      	movs	r3, #8
 800857e:	2203      	movs	r2, #3
 8008580:	2182      	movs	r1, #130	; 0x82
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 ff51 	bl	800a42a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	7c1b      	ldrb	r3, [r3, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d109      	bne.n	80085c6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085bc:	2101      	movs	r1, #1
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f002 f822 	bl	800a608 <USBD_LL_PrepareReceive>
 80085c4:	e007      	b.n	80085d6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085cc:	2340      	movs	r3, #64	; 0x40
 80085ce:	2101      	movs	r1, #1
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f002 f819 	bl	800a608 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80085f0:	2181      	movs	r1, #129	; 0x81
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f001 ff3f 	bl	800a476 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80085fe:	2101      	movs	r1, #1
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f001 ff38 	bl	800a476 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800860e:	2182      	movs	r1, #130	; 0x82
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 ff30 	bl	800a476 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00e      	beq.n	800864e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008640:	4618      	mov	r0, r3
 8008642:	f002 f8c7 	bl	800a7d4 <free>
    pdev->pClassData = NULL;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800864e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008668:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800867e:	2b00      	cmp	r3, #0
 8008680:	d03a      	beq.n	80086f8 <USBD_CDC_Setup+0xa0>
 8008682:	2b20      	cmp	r3, #32
 8008684:	f040 8097 	bne.w	80087b6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	88db      	ldrh	r3, [r3, #6]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d029      	beq.n	80086e4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	b25b      	sxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	da11      	bge.n	80086be <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80086a6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	88d2      	ldrh	r2, [r2, #6]
 80086ac:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80086ae:	6939      	ldr	r1, [r7, #16]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	88db      	ldrh	r3, [r3, #6]
 80086b4:	461a      	mov	r2, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 fa97 	bl	8009bea <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80086bc:	e082      	b.n	80087c4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	785a      	ldrb	r2, [r3, #1]
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	88db      	ldrh	r3, [r3, #6]
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80086d4:	6939      	ldr	r1, [r7, #16]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	88db      	ldrh	r3, [r3, #6]
 80086da:	461a      	mov	r2, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f001 fab0 	bl	8009c42 <USBD_CtlPrepareRx>
    break;
 80086e2:	e06f      	b.n	80087c4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	7850      	ldrb	r0, [r2, #1]
 80086f0:	2200      	movs	r2, #0
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	4798      	blx	r3
    break;
 80086f6:	e065      	b.n	80087c4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	785b      	ldrb	r3, [r3, #1]
 80086fc:	2b0b      	cmp	r3, #11
 80086fe:	d84f      	bhi.n	80087a0 <USBD_CDC_Setup+0x148>
 8008700:	a201      	add	r2, pc, #4	; (adr r2, 8008708 <USBD_CDC_Setup+0xb0>)
 8008702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008706:	bf00      	nop
 8008708:	08008739 	.word	0x08008739
 800870c:	080087af 	.word	0x080087af
 8008710:	080087a1 	.word	0x080087a1
 8008714:	080087a1 	.word	0x080087a1
 8008718:	080087a1 	.word	0x080087a1
 800871c:	080087a1 	.word	0x080087a1
 8008720:	080087a1 	.word	0x080087a1
 8008724:	080087a1 	.word	0x080087a1
 8008728:	080087a1 	.word	0x080087a1
 800872c:	080087a1 	.word	0x080087a1
 8008730:	08008761 	.word	0x08008761
 8008734:	08008789 	.word	0x08008789
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800873e:	2b03      	cmp	r3, #3
 8008740:	d107      	bne.n	8008752 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008742:	f107 030c 	add.w	r3, r7, #12
 8008746:	2202      	movs	r2, #2
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f001 fa4d 	bl	8009bea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008750:	e030      	b.n	80087b4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f001 f9d7 	bl	8009b08 <USBD_CtlError>
        ret = USBD_FAIL;
 800875a:	2303      	movs	r3, #3
 800875c:	75fb      	strb	r3, [r7, #23]
      break;
 800875e:	e029      	b.n	80087b4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008766:	2b03      	cmp	r3, #3
 8008768:	d107      	bne.n	800877a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800876a:	f107 030f 	add.w	r3, r7, #15
 800876e:	2201      	movs	r2, #1
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 fa39 	bl	8009bea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008778:	e01c      	b.n	80087b4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 f9c3 	bl	8009b08 <USBD_CtlError>
        ret = USBD_FAIL;
 8008782:	2303      	movs	r3, #3
 8008784:	75fb      	strb	r3, [r7, #23]
      break;
 8008786:	e015      	b.n	80087b4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800878e:	2b03      	cmp	r3, #3
 8008790:	d00f      	beq.n	80087b2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f001 f9b7 	bl	8009b08 <USBD_CtlError>
        ret = USBD_FAIL;
 800879a:	2303      	movs	r3, #3
 800879c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800879e:	e008      	b.n	80087b2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 f9b0 	bl	8009b08 <USBD_CtlError>
      ret = USBD_FAIL;
 80087a8:	2303      	movs	r3, #3
 80087aa:	75fb      	strb	r3, [r7, #23]
      break;
 80087ac:	e002      	b.n	80087b4 <USBD_CDC_Setup+0x15c>
      break;
 80087ae:	bf00      	nop
 80087b0:	e008      	b.n	80087c4 <USBD_CDC_Setup+0x16c>
      break;
 80087b2:	bf00      	nop
    }
    break;
 80087b4:	e006      	b.n	80087c4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f001 f9a5 	bl	8009b08 <USBD_CtlError>
    ret = USBD_FAIL;
 80087be:	2303      	movs	r3, #3
 80087c0:	75fb      	strb	r3, [r7, #23]
    break;
 80087c2:	bf00      	nop
  }

  return (uint8_t)ret;
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop

080087d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e049      	b.n	8008886 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80087fa:	78fa      	ldrb	r2, [r7, #3]
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	440b      	add	r3, r1
 8008808:	3318      	adds	r3, #24
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d029      	beq.n	8008864 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008810:	78fa      	ldrb	r2, [r7, #3]
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	4613      	mov	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	440b      	add	r3, r1
 800881e:	3318      	adds	r3, #24
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	78f9      	ldrb	r1, [r7, #3]
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	460b      	mov	r3, r1
 8008828:	00db      	lsls	r3, r3, #3
 800882a:	1a5b      	subs	r3, r3, r1
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4403      	add	r3, r0
 8008830:	3344      	adds	r3, #68	; 0x44
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	fbb2 f1f3 	udiv	r1, r2, r3
 8008838:	fb03 f301 	mul.w	r3, r3, r1
 800883c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800883e:	2b00      	cmp	r3, #0
 8008840:	d110      	bne.n	8008864 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	6879      	ldr	r1, [r7, #4]
 8008846:	4613      	mov	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	440b      	add	r3, r1
 8008850:	3318      	adds	r3, #24
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008856:	78f9      	ldrb	r1, [r7, #3]
 8008858:	2300      	movs	r3, #0
 800885a:	2200      	movs	r2, #0
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 feb2 	bl	800a5c6 <USBD_LL_Transmit>
 8008862:	e00f      	b.n	8008884 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2200      	movs	r2, #0
 8008868:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	460b      	mov	r3, r1
 8008898:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e015      	b.n	80088dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 fec8 	bl	800a64a <USBD_LL_GetRxDataSize>
 80088ba:	4602      	mov	r2, r0
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80088d6:	4611      	mov	r1, r2
 80088d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088f2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d015      	beq.n	800892a <USBD_CDC_EP0_RxReady+0x46>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008904:	2bff      	cmp	r3, #255	; 0xff
 8008906:	d010      	beq.n	800892a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008916:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800891e:	b292      	uxth	r2, r2
 8008920:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	22ff      	movs	r2, #255	; 0xff
 8008926:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2243      	movs	r2, #67	; 0x43
 8008940:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008942:	4b03      	ldr	r3, [pc, #12]	; (8008950 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008944:	4618      	mov	r0, r3
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	20000098 	.word	0x20000098

08008954 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2243      	movs	r2, #67	; 0x43
 8008960:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008962:	4b03      	ldr	r3, [pc, #12]	; (8008970 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	20000054 	.word	0x20000054

08008974 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2243      	movs	r2, #67	; 0x43
 8008980:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008982:	4b03      	ldr	r3, [pc, #12]	; (8008990 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008984:	4618      	mov	r0, r3
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	200000dc 	.word	0x200000dc

08008994 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	220a      	movs	r2, #10
 80089a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80089a2:	4b03      	ldr	r3, [pc, #12]	; (80089b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	20000010 	.word	0x20000010

080089b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e004      	b.n	80089d2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80089de:	b480      	push	{r7}
 80089e0:	b087      	sub	sp, #28
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	371c      	adds	r7, #28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a20:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e016      	b.n	8008a84 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	7c1b      	ldrb	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d109      	bne.n	8008a72 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a68:	2101      	movs	r1, #1
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 fdcc 	bl	800a608 <USBD_LL_PrepareReceive>
 8008a70:	e007      	b.n	8008a82 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a78:	2340      	movs	r3, #64	; 0x40
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f001 fdc3 	bl	800a608 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b086      	sub	sp, #24
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e025      	b.n	8008af0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d003      	beq.n	8008ac8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	79fa      	ldrb	r2, [r7, #7]
 8008ae2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f001 fc39 	bl	800a35c <USBD_LL_Init>
 8008aea:	4603      	mov	r3, r0
 8008aec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e010      	b.n	8008b32 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b20:	f107 020e 	add.w	r2, r7, #14
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
 8008b28:	4602      	mov	r2, r0
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f001 fc56 	bl	800a3f4 <USBD_LL_Start>
 8008b48:	4603      	mov	r3, r0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008b74:	2303      	movs	r3, #3
 8008b76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d009      	beq.n	8008b96 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	78fa      	ldrb	r2, [r7, #3]
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	4798      	blx	r3
 8008b92:	4603      	mov	r3, r0
 8008b94:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d007      	beq.n	8008bc6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	78fa      	ldrb	r2, [r7, #3]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	4798      	blx	r3
  }

  return USBD_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 ff56 	bl	8009a94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c04:	f003 031f 	and.w	r3, r3, #31
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d00e      	beq.n	8008c2a <USBD_LL_SetupStage+0x5a>
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d302      	bcc.n	8008c16 <USBD_LL_SetupStage+0x46>
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d014      	beq.n	8008c3e <USBD_LL_SetupStage+0x6e>
 8008c14:	e01d      	b.n	8008c52 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa18 	bl	8009054 <USBD_StdDevReq>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]
      break;
 8008c28:	e020      	b.n	8008c6c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fa7c 	bl	8009130 <USBD_StdItfReq>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c3c:	e016      	b.n	8008c6c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fab8 	bl	80091bc <USBD_StdEPReq>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c50:	e00c      	b.n	8008c6c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 fc27 	bl	800a4b4 <USBD_LL_StallEP>
 8008c66:	4603      	mov	r3, r0
 8008c68:	73fb      	strb	r3, [r7, #15]
      break;
 8008c6a:	bf00      	nop
  }

  return ret;
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b086      	sub	sp, #24
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	607a      	str	r2, [r7, #4]
 8008c82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008c84:	7afb      	ldrb	r3, [r7, #11]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d137      	bne.n	8008cfa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c90:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d14a      	bne.n	8008d32 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d913      	bls.n	8008cd0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	1ad2      	subs	r2, r2, r3
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	bf28      	it	cs
 8008cc2:	4613      	movcs	r3, r2
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	6879      	ldr	r1, [r7, #4]
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f000 ffd7 	bl	8009c7c <USBD_CtlContinueRx>
 8008cce:	e030      	b.n	8008d32 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00a      	beq.n	8008cf2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d105      	bne.n	8008cf2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 ffd3 	bl	8009c9e <USBD_CtlSendStatus>
 8008cf8:	e01b      	b.n	8008d32 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d013      	beq.n	8008d2e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d10e      	bne.n	8008d2e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	7afa      	ldrb	r2, [r7, #11]
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	4798      	blx	r3
 8008d20:	4603      	mov	r3, r0
 8008d22:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008d2a:	7dfb      	ldrb	r3, [r7, #23]
 8008d2c:	e002      	b.n	8008d34 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e000      	b.n	8008d34 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3718      	adds	r7, #24
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	460b      	mov	r3, r1
 8008d46:	607a      	str	r2, [r7, #4]
 8008d48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008d4a:	7afb      	ldrb	r3, [r7, #11]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d16a      	bne.n	8008e26 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	3314      	adds	r3, #20
 8008d54:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d155      	bne.n	8008e0c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d914      	bls.n	8008d96 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	1ad2      	subs	r2, r2, r3
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 ff4c 	bl	8009c20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d88:	2300      	movs	r3, #0
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f001 fc3a 	bl	800a608 <USBD_LL_PrepareReceive>
 8008d94:	e03a      	b.n	8008e0c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d11c      	bne.n	8008ddc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d316      	bcc.n	8008ddc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d20f      	bcs.n	8008ddc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 ff2d 	bl	8009c20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f001 fc17 	bl	800a608 <USBD_LL_PrepareReceive>
 8008dda:	e017      	b.n	8008e0c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00a      	beq.n	8008dfe <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d105      	bne.n	8008dfe <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dfe:	2180      	movs	r1, #128	; 0x80
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f001 fb57 	bl	800a4b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 ff5c 	bl	8009cc4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d123      	bne.n	8008e5e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f7ff fe9b 	bl	8008b52 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e24:	e01b      	b.n	8008e5e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d013      	beq.n	8008e5a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	d10e      	bne.n	8008e5a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	7afa      	ldrb	r2, [r7, #11]
 8008e46:	4611      	mov	r1, r2
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	4798      	blx	r3
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	e002      	b.n	8008e60 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e000      	b.n	8008e60 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d009      	beq.n	8008eac <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	6852      	ldr	r2, [r2, #4]
 8008ea4:	b2d2      	uxtb	r2, r2
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008eac:	2340      	movs	r3, #64	; 0x40
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 fab9 	bl	800a42a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2240      	movs	r2, #64	; 0x40
 8008ec4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ec8:	2340      	movs	r3, #64	; 0x40
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2180      	movs	r1, #128	; 0x80
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f001 faab 	bl	800a42a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2240      	movs	r2, #64	; 0x40
 8008ede:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b083      	sub	sp, #12
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	78fa      	ldrb	r2, [r7, #3]
 8008efa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2204      	movs	r2, #4
 8008f22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f42:	2b04      	cmp	r3, #4
 8008f44:	d105      	bne.n	8008f52 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d10b      	bne.n	8008f8a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d009      	beq.n	800900c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	6852      	ldr	r2, [r2, #4]
 8009004:	b2d2      	uxtb	r2, r2
 8009006:	4611      	mov	r1, r2
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	4798      	blx	r3
  }

  return USBD_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009016:	b480      	push	{r7}
 8009018:	b087      	sub	sp, #28
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	3301      	adds	r3, #1
 800902c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009034:	8a3b      	ldrh	r3, [r7, #16]
 8009036:	021b      	lsls	r3, r3, #8
 8009038:	b21a      	sxth	r2, r3
 800903a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800903e:	4313      	orrs	r3, r2
 8009040:	b21b      	sxth	r3, r3
 8009042:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009044:	89fb      	ldrh	r3, [r7, #14]
}
 8009046:	4618      	mov	r0, r3
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
	...

08009054 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800906a:	2b20      	cmp	r3, #32
 800906c:	d004      	beq.n	8009078 <USBD_StdDevReq+0x24>
 800906e:	2b40      	cmp	r3, #64	; 0x40
 8009070:	d002      	beq.n	8009078 <USBD_StdDevReq+0x24>
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00a      	beq.n	800908c <USBD_StdDevReq+0x38>
 8009076:	e050      	b.n	800911a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	4798      	blx	r3
 8009086:	4603      	mov	r3, r0
 8009088:	73fb      	strb	r3, [r7, #15]
    break;
 800908a:	e04b      	b.n	8009124 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	785b      	ldrb	r3, [r3, #1]
 8009090:	2b09      	cmp	r3, #9
 8009092:	d83c      	bhi.n	800910e <USBD_StdDevReq+0xba>
 8009094:	a201      	add	r2, pc, #4	; (adr r2, 800909c <USBD_StdDevReq+0x48>)
 8009096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909a:	bf00      	nop
 800909c:	080090f1 	.word	0x080090f1
 80090a0:	08009105 	.word	0x08009105
 80090a4:	0800910f 	.word	0x0800910f
 80090a8:	080090fb 	.word	0x080090fb
 80090ac:	0800910f 	.word	0x0800910f
 80090b0:	080090cf 	.word	0x080090cf
 80090b4:	080090c5 	.word	0x080090c5
 80090b8:	0800910f 	.word	0x0800910f
 80090bc:	080090e7 	.word	0x080090e7
 80090c0:	080090d9 	.word	0x080090d9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f9ce 	bl	8009468 <USBD_GetDescriptor>
      break;
 80090cc:	e024      	b.n	8009118 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fb5d 	bl	8009790 <USBD_SetAddress>
      break;
 80090d6:	e01f      	b.n	8009118 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fb9a 	bl	8009814 <USBD_SetConfig>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73fb      	strb	r3, [r7, #15]
      break;
 80090e4:	e018      	b.n	8009118 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fc37 	bl	800995c <USBD_GetConfig>
      break;
 80090ee:	e013      	b.n	8009118 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fc66 	bl	80099c4 <USBD_GetStatus>
      break;
 80090f8:	e00e      	b.n	8009118 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fc94 	bl	8009a2a <USBD_SetFeature>
      break;
 8009102:	e009      	b.n	8009118 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fca3 	bl	8009a52 <USBD_ClrFeature>
      break;
 800910c:	e004      	b.n	8009118 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fcf9 	bl	8009b08 <USBD_CtlError>
      break;
 8009116:	bf00      	nop
    }
    break;
 8009118:	e004      	b.n	8009124 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fcf3 	bl	8009b08 <USBD_CtlError>
    break;
 8009122:	bf00      	nop
  }

  return ret;
 8009124:	7bfb      	ldrb	r3, [r7, #15]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop

08009130 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009146:	2b20      	cmp	r3, #32
 8009148:	d003      	beq.n	8009152 <USBD_StdItfReq+0x22>
 800914a:	2b40      	cmp	r3, #64	; 0x40
 800914c:	d001      	beq.n	8009152 <USBD_StdItfReq+0x22>
 800914e:	2b00      	cmp	r3, #0
 8009150:	d12a      	bne.n	80091a8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009158:	3b01      	subs	r3, #1
 800915a:	2b02      	cmp	r3, #2
 800915c:	d81d      	bhi.n	800919a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	889b      	ldrh	r3, [r3, #4]
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b01      	cmp	r3, #1
 8009166:	d813      	bhi.n	8009190 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	4798      	blx	r3
 8009176:	4603      	mov	r3, r0
 8009178:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	88db      	ldrh	r3, [r3, #6]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d110      	bne.n	80091a4 <USBD_StdItfReq+0x74>
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10d      	bne.n	80091a4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fd88 	bl	8009c9e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800918e:	e009      	b.n	80091a4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fcb8 	bl	8009b08 <USBD_CtlError>
      break;
 8009198:	e004      	b.n	80091a4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fcb3 	bl	8009b08 <USBD_CtlError>
      break;
 80091a2:	e000      	b.n	80091a6 <USBD_StdItfReq+0x76>
      break;
 80091a4:	bf00      	nop
    }
    break;
 80091a6:	e004      	b.n	80091b2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fcac 	bl	8009b08 <USBD_CtlError>
    break;
 80091b0:	bf00      	nop
  }

  return ret;
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	889b      	ldrh	r3, [r3, #4]
 80091ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091d8:	2b20      	cmp	r3, #32
 80091da:	d004      	beq.n	80091e6 <USBD_StdEPReq+0x2a>
 80091dc:	2b40      	cmp	r3, #64	; 0x40
 80091de:	d002      	beq.n	80091e6 <USBD_StdEPReq+0x2a>
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00a      	beq.n	80091fa <USBD_StdEPReq+0x3e>
 80091e4:	e135      	b.n	8009452 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	4798      	blx	r3
 80091f4:	4603      	mov	r3, r0
 80091f6:	73fb      	strb	r3, [r7, #15]
    break;
 80091f8:	e130      	b.n	800945c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	785b      	ldrb	r3, [r3, #1]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d03e      	beq.n	8009280 <USBD_StdEPReq+0xc4>
 8009202:	2b03      	cmp	r3, #3
 8009204:	d002      	beq.n	800920c <USBD_StdEPReq+0x50>
 8009206:	2b00      	cmp	r3, #0
 8009208:	d077      	beq.n	80092fa <USBD_StdEPReq+0x13e>
 800920a:	e11c      	b.n	8009446 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009212:	2b02      	cmp	r3, #2
 8009214:	d002      	beq.n	800921c <USBD_StdEPReq+0x60>
 8009216:	2b03      	cmp	r3, #3
 8009218:	d015      	beq.n	8009246 <USBD_StdEPReq+0x8a>
 800921a:	e02b      	b.n	8009274 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800921c:	7bbb      	ldrb	r3, [r7, #14]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00c      	beq.n	800923c <USBD_StdEPReq+0x80>
 8009222:	7bbb      	ldrb	r3, [r7, #14]
 8009224:	2b80      	cmp	r3, #128	; 0x80
 8009226:	d009      	beq.n	800923c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 f941 	bl	800a4b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009232:	2180      	movs	r1, #128	; 0x80
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f001 f93d 	bl	800a4b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800923a:	e020      	b.n	800927e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fc62 	bl	8009b08 <USBD_CtlError>
        break;
 8009244:	e01b      	b.n	800927e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	885b      	ldrh	r3, [r3, #2]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10e      	bne.n	800926c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800924e:	7bbb      	ldrb	r3, [r7, #14]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00b      	beq.n	800926c <USBD_StdEPReq+0xb0>
 8009254:	7bbb      	ldrb	r3, [r7, #14]
 8009256:	2b80      	cmp	r3, #128	; 0x80
 8009258:	d008      	beq.n	800926c <USBD_StdEPReq+0xb0>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	88db      	ldrh	r3, [r3, #6]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d104      	bne.n	800926c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009262:	7bbb      	ldrb	r3, [r7, #14]
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f001 f924 	bl	800a4b4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fd16 	bl	8009c9e <USBD_CtlSendStatus>

        break;
 8009272:	e004      	b.n	800927e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fc46 	bl	8009b08 <USBD_CtlError>
        break;
 800927c:	bf00      	nop
      }
      break;
 800927e:	e0e7      	b.n	8009450 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009286:	2b02      	cmp	r3, #2
 8009288:	d002      	beq.n	8009290 <USBD_StdEPReq+0xd4>
 800928a:	2b03      	cmp	r3, #3
 800928c:	d015      	beq.n	80092ba <USBD_StdEPReq+0xfe>
 800928e:	e02d      	b.n	80092ec <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00c      	beq.n	80092b0 <USBD_StdEPReq+0xf4>
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	2b80      	cmp	r3, #128	; 0x80
 800929a:	d009      	beq.n	80092b0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800929c:	7bbb      	ldrb	r3, [r7, #14]
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 f907 	bl	800a4b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092a6:	2180      	movs	r1, #128	; 0x80
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 f903 	bl	800a4b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80092ae:	e023      	b.n	80092f8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fc28 	bl	8009b08 <USBD_CtlError>
        break;
 80092b8:	e01e      	b.n	80092f8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	885b      	ldrh	r3, [r3, #2]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d119      	bne.n	80092f6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
 80092c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d004      	beq.n	80092d6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 f90e 	bl	800a4f2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fce1 	bl	8009c9e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	4798      	blx	r3
        }
        break;
 80092ea:	e004      	b.n	80092f6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fc0a 	bl	8009b08 <USBD_CtlError>
        break;
 80092f4:	e000      	b.n	80092f8 <USBD_StdEPReq+0x13c>
        break;
 80092f6:	bf00      	nop
      }
      break;
 80092f8:	e0aa      	b.n	8009450 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009300:	2b02      	cmp	r3, #2
 8009302:	d002      	beq.n	800930a <USBD_StdEPReq+0x14e>
 8009304:	2b03      	cmp	r3, #3
 8009306:	d032      	beq.n	800936e <USBD_StdEPReq+0x1b2>
 8009308:	e097      	b.n	800943a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d007      	beq.n	8009320 <USBD_StdEPReq+0x164>
 8009310:	7bbb      	ldrb	r3, [r7, #14]
 8009312:	2b80      	cmp	r3, #128	; 0x80
 8009314:	d004      	beq.n	8009320 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fbf5 	bl	8009b08 <USBD_CtlError>
          break;
 800931e:	e091      	b.n	8009444 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009324:	2b00      	cmp	r3, #0
 8009326:	da0b      	bge.n	8009340 <USBD_StdEPReq+0x184>
 8009328:	7bbb      	ldrb	r3, [r7, #14]
 800932a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800932e:	4613      	mov	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	3310      	adds	r3, #16
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	4413      	add	r3, r2
 800933c:	3304      	adds	r3, #4
 800933e:	e00b      	b.n	8009358 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	4413      	add	r3, r2
 8009356:	3304      	adds	r3, #4
 8009358:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2202      	movs	r2, #2
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fc3f 	bl	8009bea <USBD_CtlSendData>
        break;
 800936c:	e06a      	b.n	8009444 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800936e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009372:	2b00      	cmp	r3, #0
 8009374:	da11      	bge.n	800939a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009376:	7bbb      	ldrb	r3, [r7, #14]
 8009378:	f003 020f 	and.w	r2, r3, #15
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	4613      	mov	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	440b      	add	r3, r1
 8009388:	3324      	adds	r3, #36	; 0x24
 800938a:	881b      	ldrh	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d117      	bne.n	80093c0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fbb8 	bl	8009b08 <USBD_CtlError>
            break;
 8009398:	e054      	b.n	8009444 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	f003 020f 	and.w	r2, r3, #15
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	4613      	mov	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	440b      	add	r3, r1
 80093ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d104      	bne.n	80093c0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fba5 	bl	8009b08 <USBD_CtlError>
            break;
 80093be:	e041      	b.n	8009444 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	da0b      	bge.n	80093e0 <USBD_StdEPReq+0x224>
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ce:	4613      	mov	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	3310      	adds	r3, #16
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	4413      	add	r3, r2
 80093dc:	3304      	adds	r3, #4
 80093de:	e00b      	b.n	80093f8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
 80093e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093e6:	4613      	mov	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	4413      	add	r3, r2
 80093f6:	3304      	adds	r3, #4
 80093f8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <USBD_StdEPReq+0x24a>
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	2b80      	cmp	r3, #128	; 0x80
 8009404:	d103      	bne.n	800940e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2200      	movs	r2, #0
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	e00e      	b.n	800942c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f001 f88c 	bl	800a530 <USBD_LL_IsStallEP>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2201      	movs	r2, #1
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	e002      	b.n	800942c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2200      	movs	r2, #0
 800942a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2202      	movs	r2, #2
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fbd9 	bl	8009bea <USBD_CtlSendData>
          break;
 8009438:	e004      	b.n	8009444 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fb63 	bl	8009b08 <USBD_CtlError>
        break;
 8009442:	bf00      	nop
      }
      break;
 8009444:	e004      	b.n	8009450 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fb5d 	bl	8009b08 <USBD_CtlError>
      break;
 800944e:	bf00      	nop
    }
    break;
 8009450:	e004      	b.n	800945c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fb57 	bl	8009b08 <USBD_CtlError>
    break;
 800945a:	bf00      	nop
  }

  return ret;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009476:	2300      	movs	r3, #0
 8009478:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800947a:	2300      	movs	r3, #0
 800947c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	885b      	ldrh	r3, [r3, #2]
 8009482:	0a1b      	lsrs	r3, r3, #8
 8009484:	b29b      	uxth	r3, r3
 8009486:	3b01      	subs	r3, #1
 8009488:	2b0e      	cmp	r3, #14
 800948a:	f200 8152 	bhi.w	8009732 <USBD_GetDescriptor+0x2ca>
 800948e:	a201      	add	r2, pc, #4	; (adr r2, 8009494 <USBD_GetDescriptor+0x2c>)
 8009490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009494:	08009505 	.word	0x08009505
 8009498:	0800951d 	.word	0x0800951d
 800949c:	0800955d 	.word	0x0800955d
 80094a0:	08009733 	.word	0x08009733
 80094a4:	08009733 	.word	0x08009733
 80094a8:	080096d3 	.word	0x080096d3
 80094ac:	080096ff 	.word	0x080096ff
 80094b0:	08009733 	.word	0x08009733
 80094b4:	08009733 	.word	0x08009733
 80094b8:	08009733 	.word	0x08009733
 80094bc:	08009733 	.word	0x08009733
 80094c0:	08009733 	.word	0x08009733
 80094c4:	08009733 	.word	0x08009733
 80094c8:	08009733 	.word	0x08009733
 80094cc:	080094d1 	.word	0x080094d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094d6:	69db      	ldr	r3, [r3, #28]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00b      	beq.n	80094f4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	7c12      	ldrb	r2, [r2, #16]
 80094e8:	f107 0108 	add.w	r1, r7, #8
 80094ec:	4610      	mov	r0, r2
 80094ee:	4798      	blx	r3
 80094f0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80094f2:	e126      	b.n	8009742 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fb06 	bl	8009b08 <USBD_CtlError>
      err++;
 80094fc:	7afb      	ldrb	r3, [r7, #11]
 80094fe:	3301      	adds	r3, #1
 8009500:	72fb      	strb	r3, [r7, #11]
    break;
 8009502:	e11e      	b.n	8009742 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	7c12      	ldrb	r2, [r2, #16]
 8009510:	f107 0108 	add.w	r1, r7, #8
 8009514:	4610      	mov	r0, r2
 8009516:	4798      	blx	r3
 8009518:	60f8      	str	r0, [r7, #12]
    break;
 800951a:	e112      	b.n	8009742 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	7c1b      	ldrb	r3, [r3, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10d      	bne.n	8009540 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952c:	f107 0208 	add.w	r2, r7, #8
 8009530:	4610      	mov	r0, r2
 8009532:	4798      	blx	r3
 8009534:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3301      	adds	r3, #1
 800953a:	2202      	movs	r2, #2
 800953c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800953e:	e100      	b.n	8009742 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	f107 0208 	add.w	r2, r7, #8
 800954c:	4610      	mov	r0, r2
 800954e:	4798      	blx	r3
 8009550:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	3301      	adds	r3, #1
 8009556:	2202      	movs	r2, #2
 8009558:	701a      	strb	r2, [r3, #0]
    break;
 800955a:	e0f2      	b.n	8009742 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	885b      	ldrh	r3, [r3, #2]
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b05      	cmp	r3, #5
 8009564:	f200 80ac 	bhi.w	80096c0 <USBD_GetDescriptor+0x258>
 8009568:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <USBD_GetDescriptor+0x108>)
 800956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956e:	bf00      	nop
 8009570:	08009589 	.word	0x08009589
 8009574:	080095bd 	.word	0x080095bd
 8009578:	080095f1 	.word	0x080095f1
 800957c:	08009625 	.word	0x08009625
 8009580:	08009659 	.word	0x08009659
 8009584:	0800968d 	.word	0x0800968d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00b      	beq.n	80095ac <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	7c12      	ldrb	r2, [r2, #16]
 80095a0:	f107 0108 	add.w	r1, r7, #8
 80095a4:	4610      	mov	r0, r2
 80095a6:	4798      	blx	r3
 80095a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095aa:	e091      	b.n	80096d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 faaa 	bl	8009b08 <USBD_CtlError>
        err++;
 80095b4:	7afb      	ldrb	r3, [r7, #11]
 80095b6:	3301      	adds	r3, #1
 80095b8:	72fb      	strb	r3, [r7, #11]
      break;
 80095ba:	e089      	b.n	80096d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00b      	beq.n	80095e0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	7c12      	ldrb	r2, [r2, #16]
 80095d4:	f107 0108 	add.w	r1, r7, #8
 80095d8:	4610      	mov	r0, r2
 80095da:	4798      	blx	r3
 80095dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095de:	e077      	b.n	80096d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fa90 	bl	8009b08 <USBD_CtlError>
        err++;
 80095e8:	7afb      	ldrb	r3, [r7, #11]
 80095ea:	3301      	adds	r3, #1
 80095ec:	72fb      	strb	r3, [r7, #11]
      break;
 80095ee:	e06f      	b.n	80096d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00b      	beq.n	8009614 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	7c12      	ldrb	r2, [r2, #16]
 8009608:	f107 0108 	add.w	r1, r7, #8
 800960c:	4610      	mov	r0, r2
 800960e:	4798      	blx	r3
 8009610:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009612:	e05d      	b.n	80096d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fa76 	bl	8009b08 <USBD_CtlError>
        err++;
 800961c:	7afb      	ldrb	r3, [r7, #11]
 800961e:	3301      	adds	r3, #1
 8009620:	72fb      	strb	r3, [r7, #11]
      break;
 8009622:	e055      	b.n	80096d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00b      	beq.n	8009648 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	7c12      	ldrb	r2, [r2, #16]
 800963c:	f107 0108 	add.w	r1, r7, #8
 8009640:	4610      	mov	r0, r2
 8009642:	4798      	blx	r3
 8009644:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009646:	e043      	b.n	80096d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fa5c 	bl	8009b08 <USBD_CtlError>
        err++;
 8009650:	7afb      	ldrb	r3, [r7, #11]
 8009652:	3301      	adds	r3, #1
 8009654:	72fb      	strb	r3, [r7, #11]
      break;
 8009656:	e03b      	b.n	80096d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800965e:	695b      	ldr	r3, [r3, #20]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00b      	beq.n	800967c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	7c12      	ldrb	r2, [r2, #16]
 8009670:	f107 0108 	add.w	r1, r7, #8
 8009674:	4610      	mov	r0, r2
 8009676:	4798      	blx	r3
 8009678:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800967a:	e029      	b.n	80096d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fa42 	bl	8009b08 <USBD_CtlError>
        err++;
 8009684:	7afb      	ldrb	r3, [r7, #11]
 8009686:	3301      	adds	r3, #1
 8009688:	72fb      	strb	r3, [r7, #11]
      break;
 800968a:	e021      	b.n	80096d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00b      	beq.n	80096b0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	7c12      	ldrb	r2, [r2, #16]
 80096a4:	f107 0108 	add.w	r1, r7, #8
 80096a8:	4610      	mov	r0, r2
 80096aa:	4798      	blx	r3
 80096ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096ae:	e00f      	b.n	80096d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fa28 	bl	8009b08 <USBD_CtlError>
        err++;
 80096b8:	7afb      	ldrb	r3, [r7, #11]
 80096ba:	3301      	adds	r3, #1
 80096bc:	72fb      	strb	r3, [r7, #11]
      break;
 80096be:	e007      	b.n	80096d0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fa20 	bl	8009b08 <USBD_CtlError>
      err++;
 80096c8:	7afb      	ldrb	r3, [r7, #11]
 80096ca:	3301      	adds	r3, #1
 80096cc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80096ce:	bf00      	nop
    }
    break;
 80096d0:	e037      	b.n	8009742 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	7c1b      	ldrb	r3, [r3, #16]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d109      	bne.n	80096ee <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e2:	f107 0208 	add.w	r2, r7, #8
 80096e6:	4610      	mov	r0, r2
 80096e8:	4798      	blx	r3
 80096ea:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80096ec:	e029      	b.n	8009742 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fa09 	bl	8009b08 <USBD_CtlError>
      err++;
 80096f6:	7afb      	ldrb	r3, [r7, #11]
 80096f8:	3301      	adds	r3, #1
 80096fa:	72fb      	strb	r3, [r7, #11]
    break;
 80096fc:	e021      	b.n	8009742 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	7c1b      	ldrb	r3, [r3, #16]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10d      	bne.n	8009722 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800970c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970e:	f107 0208 	add.w	r2, r7, #8
 8009712:	4610      	mov	r0, r2
 8009714:	4798      	blx	r3
 8009716:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3301      	adds	r3, #1
 800971c:	2207      	movs	r2, #7
 800971e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009720:	e00f      	b.n	8009742 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f9ef 	bl	8009b08 <USBD_CtlError>
      err++;
 800972a:	7afb      	ldrb	r3, [r7, #11]
 800972c:	3301      	adds	r3, #1
 800972e:	72fb      	strb	r3, [r7, #11]
    break;
 8009730:	e007      	b.n	8009742 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f9e7 	bl	8009b08 <USBD_CtlError>
    err++;
 800973a:	7afb      	ldrb	r3, [r7, #11]
 800973c:	3301      	adds	r3, #1
 800973e:	72fb      	strb	r3, [r7, #11]
    break;
 8009740:	bf00      	nop
  }

  if (err != 0U)
 8009742:	7afb      	ldrb	r3, [r7, #11]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d11e      	bne.n	8009786 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	88db      	ldrh	r3, [r3, #6]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d016      	beq.n	800977e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8009750:	893b      	ldrh	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00e      	beq.n	8009774 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	88da      	ldrh	r2, [r3, #6]
 800975a:	893b      	ldrh	r3, [r7, #8]
 800975c:	4293      	cmp	r3, r2
 800975e:	bf28      	it	cs
 8009760:	4613      	movcs	r3, r2
 8009762:	b29b      	uxth	r3, r3
 8009764:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009766:	893b      	ldrh	r3, [r7, #8]
 8009768:	461a      	mov	r2, r3
 800976a:	68f9      	ldr	r1, [r7, #12]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fa3c 	bl	8009bea <USBD_CtlSendData>
 8009772:	e009      	b.n	8009788 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f9c6 	bl	8009b08 <USBD_CtlError>
 800977c:	e004      	b.n	8009788 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa8d 	bl	8009c9e <USBD_CtlSendStatus>
 8009784:	e000      	b.n	8009788 <USBD_GetDescriptor+0x320>
    return;
 8009786:	bf00      	nop
    }
  }
}
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop

08009790 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	889b      	ldrh	r3, [r3, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d130      	bne.n	8009804 <USBD_SetAddress+0x74>
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	88db      	ldrh	r3, [r3, #6]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d12c      	bne.n	8009804 <USBD_SetAddress+0x74>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	885b      	ldrh	r3, [r3, #2]
 80097ae:	2b7f      	cmp	r3, #127	; 0x7f
 80097b0:	d828      	bhi.n	8009804 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	885b      	ldrh	r3, [r3, #2]
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d104      	bne.n	80097d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f99c 	bl	8009b08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d0:	e01c      	b.n	800980c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	7bfa      	ldrb	r2, [r7, #15]
 80097d6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	4619      	mov	r1, r3
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fed2 	bl	800a588 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fa5a 	bl	8009c9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d004      	beq.n	80097fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2202      	movs	r2, #2
 80097f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097f8:	e008      	b.n	800980c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009802:	e003      	b.n	800980c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f97e 	bl	8009b08 <USBD_CtlError>
  }
}
 800980c:	bf00      	nop
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	885b      	ldrh	r3, [r3, #2]
 8009826:	b2da      	uxtb	r2, r3
 8009828:	4b4b      	ldr	r3, [pc, #300]	; (8009958 <USBD_SetConfig+0x144>)
 800982a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800982c:	4b4a      	ldr	r3, [pc, #296]	; (8009958 <USBD_SetConfig+0x144>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d905      	bls.n	8009840 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f966 	bl	8009b08 <USBD_CtlError>
    return USBD_FAIL;
 800983c:	2303      	movs	r3, #3
 800983e:	e087      	b.n	8009950 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009846:	2b02      	cmp	r3, #2
 8009848:	d002      	beq.n	8009850 <USBD_SetConfig+0x3c>
 800984a:	2b03      	cmp	r3, #3
 800984c:	d025      	beq.n	800989a <USBD_SetConfig+0x86>
 800984e:	e071      	b.n	8009934 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009850:	4b41      	ldr	r3, [pc, #260]	; (8009958 <USBD_SetConfig+0x144>)
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01c      	beq.n	8009892 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009858:	4b3f      	ldr	r3, [pc, #252]	; (8009958 <USBD_SetConfig+0x144>)
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	461a      	mov	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009862:	4b3d      	ldr	r3, [pc, #244]	; (8009958 <USBD_SetConfig+0x144>)
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7ff f97d 	bl	8008b68 <USBD_SetClassConfig>
 800986e:	4603      	mov	r3, r0
 8009870:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d004      	beq.n	8009882 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f944 	bl	8009b08 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009880:	e065      	b.n	800994e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fa0b 	bl	8009c9e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2203      	movs	r2, #3
 800988c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009890:	e05d      	b.n	800994e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fa03 	bl	8009c9e <USBD_CtlSendStatus>
    break;
 8009898:	e059      	b.n	800994e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800989a:	4b2f      	ldr	r3, [pc, #188]	; (8009958 <USBD_SetConfig+0x144>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d112      	bne.n	80098c8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2202      	movs	r2, #2
 80098a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80098aa:	4b2b      	ldr	r3, [pc, #172]	; (8009958 <USBD_SetConfig+0x144>)
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	461a      	mov	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098b4:	4b28      	ldr	r3, [pc, #160]	; (8009958 <USBD_SetConfig+0x144>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	4619      	mov	r1, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff f970 	bl	8008ba0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f9ec 	bl	8009c9e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80098c6:	e042      	b.n	800994e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80098c8:	4b23      	ldr	r3, [pc, #140]	; (8009958 <USBD_SetConfig+0x144>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	461a      	mov	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d02a      	beq.n	800992c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff f95e 	bl	8008ba0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80098e4:	4b1c      	ldr	r3, [pc, #112]	; (8009958 <USBD_SetConfig+0x144>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	461a      	mov	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80098ee:	4b1a      	ldr	r3, [pc, #104]	; (8009958 <USBD_SetConfig+0x144>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7ff f937 	bl	8008b68 <USBD_SetClassConfig>
 80098fa:	4603      	mov	r3, r0
 80098fc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00f      	beq.n	8009924 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f8fe 	bl	8009b08 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	b2db      	uxtb	r3, r3
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff f943 	bl	8008ba0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2202      	movs	r2, #2
 800991e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009922:	e014      	b.n	800994e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f9ba 	bl	8009c9e <USBD_CtlSendStatus>
    break;
 800992a:	e010      	b.n	800994e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f9b6 	bl	8009c9e <USBD_CtlSendStatus>
    break;
 8009932:	e00c      	b.n	800994e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f8e6 	bl	8009b08 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800993c:	4b06      	ldr	r3, [pc, #24]	; (8009958 <USBD_SetConfig+0x144>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	4619      	mov	r1, r3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7ff f92c 	bl	8008ba0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009948:	2303      	movs	r3, #3
 800994a:	73fb      	strb	r3, [r7, #15]
    break;
 800994c:	bf00      	nop
  }

  return ret;
 800994e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	20000228 	.word	0x20000228

0800995c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	88db      	ldrh	r3, [r3, #6]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d004      	beq.n	8009978 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f8c9 	bl	8009b08 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009976:	e021      	b.n	80099bc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800997e:	2b01      	cmp	r3, #1
 8009980:	db17      	blt.n	80099b2 <USBD_GetConfig+0x56>
 8009982:	2b02      	cmp	r3, #2
 8009984:	dd02      	ble.n	800998c <USBD_GetConfig+0x30>
 8009986:	2b03      	cmp	r3, #3
 8009988:	d00b      	beq.n	80099a2 <USBD_GetConfig+0x46>
 800998a:	e012      	b.n	80099b2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	3308      	adds	r3, #8
 8009996:	2201      	movs	r2, #1
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f925 	bl	8009bea <USBD_CtlSendData>
      break;
 80099a0:	e00c      	b.n	80099bc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	3304      	adds	r3, #4
 80099a6:	2201      	movs	r2, #1
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f91d 	bl	8009bea <USBD_CtlSendData>
      break;
 80099b0:	e004      	b.n	80099bc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f8a7 	bl	8009b08 <USBD_CtlError>
      break;
 80099ba:	bf00      	nop
}
 80099bc:	bf00      	nop
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d4:	3b01      	subs	r3, #1
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d81e      	bhi.n	8009a18 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	88db      	ldrh	r3, [r3, #6]
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d004      	beq.n	80099ec <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f88f 	bl	8009b08 <USBD_CtlError>
      break;
 80099ea:	e01a      	b.n	8009a22 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d005      	beq.n	8009a08 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	f043 0202 	orr.w	r2, r3, #2
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	330c      	adds	r3, #12
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f8ea 	bl	8009bea <USBD_CtlSendData>
    break;
 8009a16:	e004      	b.n	8009a22 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f874 	bl	8009b08 <USBD_CtlError>
    break;
 8009a20:	bf00      	nop
  }
}
 8009a22:	bf00      	nop
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b082      	sub	sp, #8
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	885b      	ldrh	r3, [r3, #2]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d106      	bne.n	8009a4a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f92a 	bl	8009c9e <USBD_CtlSendStatus>
  }
}
 8009a4a:	bf00      	nop
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a62:	3b01      	subs	r3, #1
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d80b      	bhi.n	8009a80 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	885b      	ldrh	r3, [r3, #2]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d10c      	bne.n	8009a8a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f910 	bl	8009c9e <USBD_CtlSendStatus>
      }
      break;
 8009a7e:	e004      	b.n	8009a8a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f840 	bl	8009b08 <USBD_CtlError>
      break;
 8009a88:	e000      	b.n	8009a8c <USBD_ClrFeature+0x3a>
      break;
 8009a8a:	bf00      	nop
  }
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	781a      	ldrb	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3301      	adds	r3, #1
 8009aae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	781a      	ldrb	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3301      	adds	r3, #1
 8009abc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7ff faa9 	bl	8009016 <SWAPBYTE>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f7ff fa9c 	bl	8009016 <SWAPBYTE>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3301      	adds	r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f7ff fa8f 	bl	8009016 <SWAPBYTE>
 8009af8:	4603      	mov	r3, r0
 8009afa:	461a      	mov	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	80da      	strh	r2, [r3, #6]
}
 8009b00:	bf00      	nop
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b12:	2180      	movs	r1, #128	; 0x80
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fccd 	bl	800a4b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fcc9 	bl	800a4b4 <USBD_LL_StallEP>
}
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b086      	sub	sp, #24
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	60f8      	str	r0, [r7, #12]
 8009b32:	60b9      	str	r1, [r7, #8]
 8009b34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d036      	beq.n	8009bae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009b44:	6938      	ldr	r0, [r7, #16]
 8009b46:	f000 f836 	bl	8009bb6 <USBD_GetLen>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009b58:	7dfb      	ldrb	r3, [r7, #23]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	7812      	ldrb	r2, [r2, #0]
 8009b62:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
 8009b66:	3301      	adds	r3, #1
 8009b68:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009b6a:	7dfb      	ldrb	r3, [r7, #23]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	4413      	add	r3, r2
 8009b70:	2203      	movs	r2, #3
 8009b72:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
 8009b76:	3301      	adds	r3, #1
 8009b78:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009b7a:	e013      	b.n	8009ba4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	4413      	add	r3, r2
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	7812      	ldrb	r2, [r2, #0]
 8009b86:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	613b      	str	r3, [r7, #16]
    idx++;
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
 8009b90:	3301      	adds	r3, #1
 8009b92:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009b94:	7dfb      	ldrb	r3, [r7, #23]
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	4413      	add	r3, r2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	701a      	strb	r2, [r3, #0]
    idx++;
 8009b9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e7      	bne.n	8009b7c <USBD_GetString+0x52>
 8009bac:	e000      	b.n	8009bb0 <USBD_GetString+0x86>
    return;
 8009bae:	bf00      	nop
  }
}
 8009bb0:	3718      	adds	r7, #24
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b085      	sub	sp, #20
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009bc6:	e005      	b.n	8009bd4 <USBD_GetLen+0x1e>
  {
    len++;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1f5      	bne.n	8009bc8 <USBD_GetLen+0x12>
  }

  return len;
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	60f8      	str	r0, [r7, #12]
 8009bf2:	60b9      	str	r1, [r7, #8]
 8009bf4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2202      	movs	r2, #2
 8009bfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	2100      	movs	r1, #0
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 fcd8 	bl	800a5c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	2100      	movs	r1, #0
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 fcc7 	bl	800a5c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	60f8      	str	r0, [r7, #12]
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2203      	movs	r2, #3
 8009c52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f000 fccb 	bl	800a608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f000 fcba 	bl	800a608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2204      	movs	r2, #4
 8009caa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cae:	2300      	movs	r3, #0
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fc86 	bl	800a5c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2205      	movs	r2, #5
 8009cd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2100      	movs	r1, #0
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fc94 	bl	800a608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	4912      	ldr	r1, [pc, #72]	; (8009d3c <MX_USB_DEVICE_Init+0x50>)
 8009cf4:	4812      	ldr	r0, [pc, #72]	; (8009d40 <MX_USB_DEVICE_Init+0x54>)
 8009cf6:	f7fe fec9 	bl	8008a8c <USBD_Init>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d00:	f7f7 fcfa 	bl	80016f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d04:	490f      	ldr	r1, [pc, #60]	; (8009d44 <MX_USB_DEVICE_Init+0x58>)
 8009d06:	480e      	ldr	r0, [pc, #56]	; (8009d40 <MX_USB_DEVICE_Init+0x54>)
 8009d08:	f7fe fef6 	bl	8008af8 <USBD_RegisterClass>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d12:	f7f7 fcf1 	bl	80016f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d16:	490c      	ldr	r1, [pc, #48]	; (8009d48 <MX_USB_DEVICE_Init+0x5c>)
 8009d18:	4809      	ldr	r0, [pc, #36]	; (8009d40 <MX_USB_DEVICE_Init+0x54>)
 8009d1a:	f7fe fe4b 	bl	80089b4 <USBD_CDC_RegisterInterface>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d24:	f7f7 fce8 	bl	80016f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d28:	4805      	ldr	r0, [pc, #20]	; (8009d40 <MX_USB_DEVICE_Init+0x54>)
 8009d2a:	f7fe ff06 	bl	8008b3a <USBD_Start>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d34:	f7f7 fce0 	bl	80016f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d38:	bf00      	nop
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	20000134 	.word	0x20000134
 8009d40:	2000056c 	.word	0x2000056c
 8009d44:	2000001c 	.word	0x2000001c
 8009d48:	20000120 	.word	0x20000120

08009d4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d50:	2200      	movs	r2, #0
 8009d52:	4905      	ldr	r1, [pc, #20]	; (8009d68 <CDC_Init_FS+0x1c>)
 8009d54:	4805      	ldr	r0, [pc, #20]	; (8009d6c <CDC_Init_FS+0x20>)
 8009d56:	f7fe fe42 	bl	80089de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d5a:	4905      	ldr	r1, [pc, #20]	; (8009d70 <CDC_Init_FS+0x24>)
 8009d5c:	4803      	ldr	r0, [pc, #12]	; (8009d6c <CDC_Init_FS+0x20>)
 8009d5e:	f7fe fe57 	bl	8008a10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009d62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	2000103c 	.word	0x2000103c
 8009d6c:	2000056c 	.word	0x2000056c
 8009d70:	2000083c 	.word	0x2000083c

08009d74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009d74:	b480      	push	{r7}
 8009d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009d78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	6039      	str	r1, [r7, #0]
 8009d8e:	71fb      	strb	r3, [r7, #7]
 8009d90:	4613      	mov	r3, r2
 8009d92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009d94:	79fb      	ldrb	r3, [r7, #7]
 8009d96:	2b23      	cmp	r3, #35	; 0x23
 8009d98:	d84a      	bhi.n	8009e30 <CDC_Control_FS+0xac>
 8009d9a:	a201      	add	r2, pc, #4	; (adr r2, 8009da0 <CDC_Control_FS+0x1c>)
 8009d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da0:	08009e31 	.word	0x08009e31
 8009da4:	08009e31 	.word	0x08009e31
 8009da8:	08009e31 	.word	0x08009e31
 8009dac:	08009e31 	.word	0x08009e31
 8009db0:	08009e31 	.word	0x08009e31
 8009db4:	08009e31 	.word	0x08009e31
 8009db8:	08009e31 	.word	0x08009e31
 8009dbc:	08009e31 	.word	0x08009e31
 8009dc0:	08009e31 	.word	0x08009e31
 8009dc4:	08009e31 	.word	0x08009e31
 8009dc8:	08009e31 	.word	0x08009e31
 8009dcc:	08009e31 	.word	0x08009e31
 8009dd0:	08009e31 	.word	0x08009e31
 8009dd4:	08009e31 	.word	0x08009e31
 8009dd8:	08009e31 	.word	0x08009e31
 8009ddc:	08009e31 	.word	0x08009e31
 8009de0:	08009e31 	.word	0x08009e31
 8009de4:	08009e31 	.word	0x08009e31
 8009de8:	08009e31 	.word	0x08009e31
 8009dec:	08009e31 	.word	0x08009e31
 8009df0:	08009e31 	.word	0x08009e31
 8009df4:	08009e31 	.word	0x08009e31
 8009df8:	08009e31 	.word	0x08009e31
 8009dfc:	08009e31 	.word	0x08009e31
 8009e00:	08009e31 	.word	0x08009e31
 8009e04:	08009e31 	.word	0x08009e31
 8009e08:	08009e31 	.word	0x08009e31
 8009e0c:	08009e31 	.word	0x08009e31
 8009e10:	08009e31 	.word	0x08009e31
 8009e14:	08009e31 	.word	0x08009e31
 8009e18:	08009e31 	.word	0x08009e31
 8009e1c:	08009e31 	.word	0x08009e31
 8009e20:	08009e31 	.word	0x08009e31
 8009e24:	08009e31 	.word	0x08009e31
 8009e28:	08009e31 	.word	0x08009e31
 8009e2c:	08009e31 	.word	0x08009e31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e30:	bf00      	nop
  }

  return (USBD_OK);
 8009e32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009e4a:	6879      	ldr	r1, [r7, #4]
 8009e4c:	4805      	ldr	r0, [pc, #20]	; (8009e64 <CDC_Receive_FS+0x24>)
 8009e4e:	f7fe fddf 	bl	8008a10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009e52:	4804      	ldr	r0, [pc, #16]	; (8009e64 <CDC_Receive_FS+0x24>)
 8009e54:	f7fe fdf0 	bl	8008a38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009e58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	2000056c 	.word	0x2000056c

08009e68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b087      	sub	sp, #28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	4613      	mov	r3, r2
 8009e74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
	...

08009e8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	6039      	str	r1, [r7, #0]
 8009e96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	2212      	movs	r2, #18
 8009e9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e9e:	4b03      	ldr	r3, [pc, #12]	; (8009eac <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	20000154 	.word	0x20000154

08009eb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	6039      	str	r1, [r7, #0]
 8009eba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2204      	movs	r2, #4
 8009ec0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009ec2:	4b03      	ldr	r3, [pc, #12]	; (8009ed0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	20000174 	.word	0x20000174

08009ed4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	6039      	str	r1, [r7, #0]
 8009ede:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d105      	bne.n	8009ef2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	4907      	ldr	r1, [pc, #28]	; (8009f08 <USBD_FS_ProductStrDescriptor+0x34>)
 8009eea:	4808      	ldr	r0, [pc, #32]	; (8009f0c <USBD_FS_ProductStrDescriptor+0x38>)
 8009eec:	f7ff fe1d 	bl	8009b2a <USBD_GetString>
 8009ef0:	e004      	b.n	8009efc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	4904      	ldr	r1, [pc, #16]	; (8009f08 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ef6:	4805      	ldr	r0, [pc, #20]	; (8009f0c <USBD_FS_ProductStrDescriptor+0x38>)
 8009ef8:	f7ff fe17 	bl	8009b2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009efc:	4b02      	ldr	r3, [pc, #8]	; (8009f08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	2000183c 	.word	0x2000183c
 8009f0c:	0800b9a8 	.word	0x0800b9a8

08009f10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	6039      	str	r1, [r7, #0]
 8009f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	4904      	ldr	r1, [pc, #16]	; (8009f30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009f20:	4804      	ldr	r0, [pc, #16]	; (8009f34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009f22:	f7ff fe02 	bl	8009b2a <USBD_GetString>
  return USBD_StrDesc;
 8009f26:	4b02      	ldr	r3, [pc, #8]	; (8009f30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	2000183c 	.word	0x2000183c
 8009f34:	0800b9c0 	.word	0x0800b9c0

08009f38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	6039      	str	r1, [r7, #0]
 8009f42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	221a      	movs	r2, #26
 8009f48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f4a:	f000 f855 	bl	8009ff8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009f4e:	4b02      	ldr	r3, [pc, #8]	; (8009f58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	20000178 	.word	0x20000178

08009f5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	4603      	mov	r3, r0
 8009f64:	6039      	str	r1, [r7, #0]
 8009f66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f68:	79fb      	ldrb	r3, [r7, #7]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d105      	bne.n	8009f7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	4907      	ldr	r1, [pc, #28]	; (8009f90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f72:	4808      	ldr	r0, [pc, #32]	; (8009f94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f74:	f7ff fdd9 	bl	8009b2a <USBD_GetString>
 8009f78:	e004      	b.n	8009f84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	4904      	ldr	r1, [pc, #16]	; (8009f90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f7e:	4805      	ldr	r0, [pc, #20]	; (8009f94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f80:	f7ff fdd3 	bl	8009b2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f84:	4b02      	ldr	r3, [pc, #8]	; (8009f90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	2000183c 	.word	0x2000183c
 8009f94:	0800b9d4 	.word	0x0800b9d4

08009f98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	6039      	str	r1, [r7, #0]
 8009fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fa4:	79fb      	ldrb	r3, [r7, #7]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d105      	bne.n	8009fb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	4907      	ldr	r1, [pc, #28]	; (8009fcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009fae:	4808      	ldr	r0, [pc, #32]	; (8009fd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009fb0:	f7ff fdbb 	bl	8009b2a <USBD_GetString>
 8009fb4:	e004      	b.n	8009fc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	4904      	ldr	r1, [pc, #16]	; (8009fcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009fba:	4805      	ldr	r0, [pc, #20]	; (8009fd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009fbc:	f7ff fdb5 	bl	8009b2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fc0:	4b02      	ldr	r3, [pc, #8]	; (8009fcc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	2000183c 	.word	0x2000183c
 8009fd0:	0800b9e0 	.word	0x0800b9e0

08009fd4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	6039      	str	r1, [r7, #0]
 8009fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	220c      	movs	r2, #12
 8009fe4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009fe6:	4b03      	ldr	r3, [pc, #12]	; (8009ff4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	20000168 	.word	0x20000168

08009ff8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ffe:	4b0f      	ldr	r3, [pc, #60]	; (800a03c <Get_SerialNum+0x44>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a004:	4b0e      	ldr	r3, [pc, #56]	; (800a040 <Get_SerialNum+0x48>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a00a:	4b0e      	ldr	r3, [pc, #56]	; (800a044 <Get_SerialNum+0x4c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4413      	add	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d009      	beq.n	800a032 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a01e:	2208      	movs	r2, #8
 800a020:	4909      	ldr	r1, [pc, #36]	; (800a048 <Get_SerialNum+0x50>)
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 f814 	bl	800a050 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a028:	2204      	movs	r2, #4
 800a02a:	4908      	ldr	r1, [pc, #32]	; (800a04c <Get_SerialNum+0x54>)
 800a02c:	68b8      	ldr	r0, [r7, #8]
 800a02e:	f000 f80f 	bl	800a050 <IntToUnicode>
  }
}
 800a032:	bf00      	nop
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	1ff0f420 	.word	0x1ff0f420
 800a040:	1ff0f424 	.word	0x1ff0f424
 800a044:	1ff0f428 	.word	0x1ff0f428
 800a048:	2000017a 	.word	0x2000017a
 800a04c:	2000018a 	.word	0x2000018a

0800a050 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a050:	b480      	push	{r7}
 800a052:	b087      	sub	sp, #28
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	4613      	mov	r3, r2
 800a05c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a062:	2300      	movs	r3, #0
 800a064:	75fb      	strb	r3, [r7, #23]
 800a066:	e027      	b.n	800a0b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	0f1b      	lsrs	r3, r3, #28
 800a06c:	2b09      	cmp	r3, #9
 800a06e:	d80b      	bhi.n	800a088 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	0f1b      	lsrs	r3, r3, #28
 800a074:	b2da      	uxtb	r2, r3
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	4619      	mov	r1, r3
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	440b      	add	r3, r1
 800a080:	3230      	adds	r2, #48	; 0x30
 800a082:	b2d2      	uxtb	r2, r2
 800a084:	701a      	strb	r2, [r3, #0]
 800a086:	e00a      	b.n	800a09e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	0f1b      	lsrs	r3, r3, #28
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
 800a090:	005b      	lsls	r3, r3, #1
 800a092:	4619      	mov	r1, r3
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	440b      	add	r3, r1
 800a098:	3237      	adds	r2, #55	; 0x37
 800a09a:	b2d2      	uxtb	r2, r2
 800a09c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	011b      	lsls	r3, r3, #4
 800a0a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a0b2:	7dfb      	ldrb	r3, [r7, #23]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	75fb      	strb	r3, [r7, #23]
 800a0b8:	7dfa      	ldrb	r2, [r7, #23]
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d3d3      	bcc.n	800a068 <IntToUnicode+0x18>
  }
}
 800a0c0:	bf00      	nop
 800a0c2:	371c      	adds	r7, #28
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b08a      	sub	sp, #40	; 0x28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0d4:	f107 0314 	add.w	r3, r7, #20
 800a0d8:	2200      	movs	r2, #0
 800a0da:	601a      	str	r2, [r3, #0]
 800a0dc:	605a      	str	r2, [r3, #4]
 800a0de:	609a      	str	r2, [r3, #8]
 800a0e0:	60da      	str	r2, [r3, #12]
 800a0e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0ec:	d13c      	bne.n	800a168 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0ee:	4b20      	ldr	r3, [pc, #128]	; (800a170 <HAL_PCD_MspInit+0xa4>)
 800a0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f2:	4a1f      	ldr	r2, [pc, #124]	; (800a170 <HAL_PCD_MspInit+0xa4>)
 800a0f4:	f043 0301 	orr.w	r3, r3, #1
 800a0f8:	6313      	str	r3, [r2, #48]	; 0x30
 800a0fa:	4b1d      	ldr	r3, [pc, #116]	; (800a170 <HAL_PCD_MspInit+0xa4>)
 800a0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	613b      	str	r3, [r7, #16]
 800a104:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a106:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a10a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a10c:	2302      	movs	r3, #2
 800a10e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a110:	2300      	movs	r3, #0
 800a112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a114:	2303      	movs	r3, #3
 800a116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a118:	230a      	movs	r3, #10
 800a11a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a11c:	f107 0314 	add.w	r3, r7, #20
 800a120:	4619      	mov	r1, r3
 800a122:	4814      	ldr	r0, [pc, #80]	; (800a174 <HAL_PCD_MspInit+0xa8>)
 800a124:	f7f8 fcb6 	bl	8002a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a128:	4b11      	ldr	r3, [pc, #68]	; (800a170 <HAL_PCD_MspInit+0xa4>)
 800a12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a12c:	4a10      	ldr	r2, [pc, #64]	; (800a170 <HAL_PCD_MspInit+0xa4>)
 800a12e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a132:	6353      	str	r3, [r2, #52]	; 0x34
 800a134:	4b0e      	ldr	r3, [pc, #56]	; (800a170 <HAL_PCD_MspInit+0xa4>)
 800a136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	4b0b      	ldr	r3, [pc, #44]	; (800a170 <HAL_PCD_MspInit+0xa4>)
 800a142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a144:	4a0a      	ldr	r2, [pc, #40]	; (800a170 <HAL_PCD_MspInit+0xa4>)
 800a146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a14a:	6453      	str	r3, [r2, #68]	; 0x44
 800a14c:	4b08      	ldr	r3, [pc, #32]	; (800a170 <HAL_PCD_MspInit+0xa4>)
 800a14e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a154:	60bb      	str	r3, [r7, #8]
 800a156:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a158:	2200      	movs	r2, #0
 800a15a:	2100      	movs	r1, #0
 800a15c:	2043      	movs	r0, #67	; 0x43
 800a15e:	f7f7 fe52 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a162:	2043      	movs	r0, #67	; 0x43
 800a164:	f7f7 fe6b 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a168:	bf00      	nop
 800a16a:	3728      	adds	r7, #40	; 0x28
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	40023800 	.word	0x40023800
 800a174:	40020000 	.word	0x40020000

0800a178 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a18c:	4619      	mov	r1, r3
 800a18e:	4610      	mov	r0, r2
 800a190:	f7fe fd1e 	bl	8008bd0 <USBD_LL_SetupStage>
}
 800a194:	bf00      	nop
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800a1ae:	78fa      	ldrb	r2, [r7, #3]
 800a1b0:	6879      	ldr	r1, [r7, #4]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	00db      	lsls	r3, r3, #3
 800a1b6:	1a9b      	subs	r3, r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	440b      	add	r3, r1
 800a1bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	78fb      	ldrb	r3, [r7, #3]
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	f7fe fd56 	bl	8008c76 <USBD_LL_DataOutStage>
}
 800a1ca:	bf00      	nop
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b082      	sub	sp, #8
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	460b      	mov	r3, r1
 800a1dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800a1e4:	78fa      	ldrb	r2, [r7, #3]
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	00db      	lsls	r3, r3, #3
 800a1ec:	1a9b      	subs	r3, r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	440b      	add	r3, r1
 800a1f2:	3348      	adds	r3, #72	; 0x48
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	78fb      	ldrb	r3, [r7, #3]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	f7fe fd9f 	bl	8008d3c <USBD_LL_DataInStage>
}
 800a1fe:	bf00      	nop
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b082      	sub	sp, #8
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a214:	4618      	mov	r0, r3
 800a216:	f7fe fea3 	bl	8008f60 <USBD_LL_SOF>
}
 800a21a:	bf00      	nop
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a22a:	2301      	movs	r3, #1
 800a22c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d102      	bne.n	800a23c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a236:	2300      	movs	r3, #0
 800a238:	73fb      	strb	r3, [r7, #15]
 800a23a:	e008      	b.n	800a24e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	2b02      	cmp	r3, #2
 800a242:	d102      	bne.n	800a24a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a244:	2301      	movs	r3, #1
 800a246:	73fb      	strb	r3, [r7, #15]
 800a248:	e001      	b.n	800a24e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a24a:	f7f7 fa55 	bl	80016f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a254:	7bfa      	ldrb	r2, [r7, #15]
 800a256:	4611      	mov	r1, r2
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fe fe46 	bl	8008eea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a264:	4618      	mov	r0, r3
 800a266:	f7fe fdff 	bl	8008e68 <USBD_LL_Reset>
}
 800a26a:	bf00      	nop
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a282:	4618      	mov	r0, r3
 800a284:	f7fe fe41 	bl	8008f0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	6812      	ldr	r2, [r2, #0]
 800a296:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a29a:	f043 0301 	orr.w	r3, r3, #1
 800a29e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a1b      	ldr	r3, [r3, #32]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d005      	beq.n	800a2b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2a8:	4b04      	ldr	r3, [pc, #16]	; (800a2bc <HAL_PCD_SuspendCallback+0x48>)
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	4a03      	ldr	r2, [pc, #12]	; (800a2bc <HAL_PCD_SuspendCallback+0x48>)
 800a2ae:	f043 0306 	orr.w	r3, r3, #6
 800a2b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a2b4:	bf00      	nop
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	e000ed00 	.word	0xe000ed00

0800a2c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe fe30 	bl	8008f34 <USBD_LL_Resume>
}
 800a2d4:	bf00      	nop
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a2ee:	78fa      	ldrb	r2, [r7, #3]
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe fe5b 	bl	8008fae <USBD_LL_IsoOUTIncomplete>
}
 800a2f8:	bf00      	nop
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	460b      	mov	r3, r1
 800a30a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a312:	78fa      	ldrb	r2, [r7, #3]
 800a314:	4611      	mov	r1, r2
 800a316:	4618      	mov	r0, r3
 800a318:	f7fe fe3c 	bl	8008f94 <USBD_LL_IsoINIncomplete>
}
 800a31c:	bf00      	nop
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a332:	4618      	mov	r0, r3
 800a334:	f7fe fe48 	bl	8008fc8 <USBD_LL_DevConnected>
}
 800a338:	bf00      	nop
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fe fe45 	bl	8008fde <USBD_LL_DevDisconnected>
}
 800a354:	bf00      	nop
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d13c      	bne.n	800a3e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a36c:	4a20      	ldr	r2, [pc, #128]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a1e      	ldr	r2, [pc, #120]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a378:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a37c:	4b1c      	ldr	r3, [pc, #112]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a37e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a382:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a384:	4b1a      	ldr	r3, [pc, #104]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a386:	2206      	movs	r2, #6
 800a388:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a38a:	4b19      	ldr	r3, [pc, #100]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a38c:	2202      	movs	r2, #2
 800a38e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a390:	4b17      	ldr	r3, [pc, #92]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a392:	2200      	movs	r2, #0
 800a394:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a396:	4b16      	ldr	r3, [pc, #88]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a398:	2202      	movs	r2, #2
 800a39a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a39c:	4b14      	ldr	r3, [pc, #80]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a3a2:	4b13      	ldr	r3, [pc, #76]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a3a8:	4b11      	ldr	r3, [pc, #68]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a3ae:	4b10      	ldr	r3, [pc, #64]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a3b4:	4b0e      	ldr	r3, [pc, #56]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a3ba:	480d      	ldr	r0, [pc, #52]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a3bc:	f7f8 fd47 	bl	8002e4e <HAL_PCD_Init>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a3c6:	f7f7 f997 	bl	80016f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a3ca:	2180      	movs	r1, #128	; 0x80
 800a3cc:	4808      	ldr	r0, [pc, #32]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a3ce:	f7f9 fec8 	bl	8004162 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a3d2:	2240      	movs	r2, #64	; 0x40
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	4806      	ldr	r0, [pc, #24]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a3d8:	f7f9 fe7c 	bl	80040d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a3dc:	2280      	movs	r2, #128	; 0x80
 800a3de:	2101      	movs	r1, #1
 800a3e0:	4803      	ldr	r0, [pc, #12]	; (800a3f0 <USBD_LL_Init+0x94>)
 800a3e2:	f7f9 fe77 	bl	80040d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	20001a3c 	.word	0x20001a3c

0800a3f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7f8 fe43 	bl	8003096 <HAL_PCD_Start>
 800a410:	4603      	mov	r3, r0
 800a412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a414:	7bfb      	ldrb	r3, [r7, #15]
 800a416:	4618      	mov	r0, r3
 800a418:	f000 f97e 	bl	800a718 <USBD_Get_USB_Status>
 800a41c:	4603      	mov	r3, r0
 800a41e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a420:	7bbb      	ldrb	r3, [r7, #14]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b084      	sub	sp, #16
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	4608      	mov	r0, r1
 800a434:	4611      	mov	r1, r2
 800a436:	461a      	mov	r2, r3
 800a438:	4603      	mov	r3, r0
 800a43a:	70fb      	strb	r3, [r7, #3]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70bb      	strb	r3, [r7, #2]
 800a440:	4613      	mov	r3, r2
 800a442:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a452:	78bb      	ldrb	r3, [r7, #2]
 800a454:	883a      	ldrh	r2, [r7, #0]
 800a456:	78f9      	ldrb	r1, [r7, #3]
 800a458:	f7f9 fa43 	bl	80038e2 <HAL_PCD_EP_Open>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a460:	7bfb      	ldrb	r3, [r7, #15]
 800a462:	4618      	mov	r0, r3
 800a464:	f000 f958 	bl	800a718 <USBD_Get_USB_Status>
 800a468:	4603      	mov	r3, r0
 800a46a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a46c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	460b      	mov	r3, r1
 800a480:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a490:	78fa      	ldrb	r2, [r7, #3]
 800a492:	4611      	mov	r1, r2
 800a494:	4618      	mov	r0, r3
 800a496:	f7f9 fa8c 	bl	80039b2 <HAL_PCD_EP_Close>
 800a49a:	4603      	mov	r3, r0
 800a49c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 f939 	bl	800a718 <USBD_Get_USB_Status>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4ce:	78fa      	ldrb	r2, [r7, #3]
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7f9 fb64 	bl	8003ba0 <HAL_PCD_EP_SetStall>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 f91a 	bl	800a718 <USBD_Get_USB_Status>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a50c:	78fa      	ldrb	r2, [r7, #3]
 800a50e:	4611      	mov	r1, r2
 800a510:	4618      	mov	r0, r3
 800a512:	f7f9 fba9 	bl	8003c68 <HAL_PCD_EP_ClrStall>
 800a516:	4603      	mov	r3, r0
 800a518:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f000 f8fb 	bl	800a718 <USBD_Get_USB_Status>
 800a522:	4603      	mov	r3, r0
 800a524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a526:	7bbb      	ldrb	r3, [r7, #14]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	460b      	mov	r3, r1
 800a53a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a542:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	da0b      	bge.n	800a564 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a54c:	78fb      	ldrb	r3, [r7, #3]
 800a54e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a552:	68f9      	ldr	r1, [r7, #12]
 800a554:	4613      	mov	r3, r2
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	1a9b      	subs	r3, r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	440b      	add	r3, r1
 800a55e:	333e      	adds	r3, #62	; 0x3e
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	e00b      	b.n	800a57c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a56a:	68f9      	ldr	r1, [r7, #12]
 800a56c:	4613      	mov	r3, r2
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	1a9b      	subs	r3, r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	440b      	add	r3, r1
 800a576:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a57a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	460b      	mov	r3, r1
 800a592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a598:	2300      	movs	r3, #0
 800a59a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a5a2:	78fa      	ldrb	r2, [r7, #3]
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7f9 f976 	bl	8003898 <HAL_PCD_SetAddress>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 f8b0 	bl	800a718 <USBD_Get_USB_Status>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b086      	sub	sp, #24
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	60f8      	str	r0, [r7, #12]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	603b      	str	r3, [r7, #0]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a5e4:	7af9      	ldrb	r1, [r7, #11]
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	f7f9 fa8f 	bl	8003b0c <HAL_PCD_EP_Transmit>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5f2:	7dfb      	ldrb	r3, [r7, #23]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 f88f 	bl	800a718 <USBD_Get_USB_Status>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3718      	adds	r7, #24
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	607a      	str	r2, [r7, #4]
 800a612:	603b      	str	r3, [r7, #0]
 800a614:	460b      	mov	r3, r1
 800a616:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a626:	7af9      	ldrb	r1, [r7, #11]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	f7f9 fa0b 	bl	8003a46 <HAL_PCD_EP_Receive>
 800a630:	4603      	mov	r3, r0
 800a632:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a634:	7dfb      	ldrb	r3, [r7, #23]
 800a636:	4618      	mov	r0, r3
 800a638:	f000 f86e 	bl	800a718 <USBD_Get_USB_Status>
 800a63c:	4603      	mov	r3, r0
 800a63e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a640:	7dbb      	ldrb	r3, [r7, #22]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3718      	adds	r7, #24
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b082      	sub	sp, #8
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	460b      	mov	r3, r1
 800a654:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a65c:	78fa      	ldrb	r2, [r7, #3]
 800a65e:	4611      	mov	r1, r2
 800a660:	4618      	mov	r0, r3
 800a662:	f7f9 fa3b 	bl	8003adc <HAL_PCD_EP_GetRxCount>
 800a666:	4603      	mov	r3, r0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a67c:	78fb      	ldrb	r3, [r7, #3]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d002      	beq.n	800a688 <HAL_PCDEx_LPM_Callback+0x18>
 800a682:	2b01      	cmp	r3, #1
 800a684:	d01f      	beq.n	800a6c6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a686:	e03b      	b.n	800a700 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a1b      	ldr	r3, [r3, #32]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d007      	beq.n	800a6a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a690:	f000 f83c 	bl	800a70c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a694:	4b1c      	ldr	r3, [pc, #112]	; (800a708 <HAL_PCDEx_LPM_Callback+0x98>)
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	4a1b      	ldr	r2, [pc, #108]	; (800a708 <HAL_PCDEx_LPM_Callback+0x98>)
 800a69a:	f023 0306 	bic.w	r3, r3, #6
 800a69e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	6812      	ldr	r2, [r2, #0]
 800a6ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a6b2:	f023 0301 	bic.w	r3, r3, #1
 800a6b6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fe fc38 	bl	8008f34 <USBD_LL_Resume>
    break;
 800a6c4:	e01c      	b.n	800a700 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	6812      	ldr	r2, [r2, #0]
 800a6d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a6d8:	f043 0301 	orr.w	r3, r3, #1
 800a6dc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fe fc10 	bl	8008f0a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d005      	beq.n	800a6fe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6f2:	4b05      	ldr	r3, [pc, #20]	; (800a708 <HAL_PCDEx_LPM_Callback+0x98>)
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	4a04      	ldr	r2, [pc, #16]	; (800a708 <HAL_PCDEx_LPM_Callback+0x98>)
 800a6f8:	f043 0306 	orr.w	r3, r3, #6
 800a6fc:	6113      	str	r3, [r2, #16]
    break;
 800a6fe:	bf00      	nop
}
 800a700:	bf00      	nop
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	e000ed00 	.word	0xe000ed00

0800a70c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a710:	f7f6 fd04 	bl	800111c <SystemClock_Config>
}
 800a714:	bf00      	nop
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	4603      	mov	r3, r0
 800a720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a726:	79fb      	ldrb	r3, [r7, #7]
 800a728:	2b03      	cmp	r3, #3
 800a72a:	d817      	bhi.n	800a75c <USBD_Get_USB_Status+0x44>
 800a72c:	a201      	add	r2, pc, #4	; (adr r2, 800a734 <USBD_Get_USB_Status+0x1c>)
 800a72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a732:	bf00      	nop
 800a734:	0800a745 	.word	0x0800a745
 800a738:	0800a74b 	.word	0x0800a74b
 800a73c:	0800a751 	.word	0x0800a751
 800a740:	0800a757 	.word	0x0800a757
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	73fb      	strb	r3, [r7, #15]
    break;
 800a748:	e00b      	b.n	800a762 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a74a:	2303      	movs	r3, #3
 800a74c:	73fb      	strb	r3, [r7, #15]
    break;
 800a74e:	e008      	b.n	800a762 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a750:	2301      	movs	r3, #1
 800a752:	73fb      	strb	r3, [r7, #15]
    break;
 800a754:	e005      	b.n	800a762 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a756:	2303      	movs	r3, #3
 800a758:	73fb      	strb	r3, [r7, #15]
    break;
 800a75a:	e002      	b.n	800a762 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a75c:	2303      	movs	r3, #3
 800a75e:	73fb      	strb	r3, [r7, #15]
    break;
 800a760:	bf00      	nop
  }
  return usb_status;
 800a762:	7bfb      	ldrb	r3, [r7, #15]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <__errno>:
 800a770:	4b01      	ldr	r3, [pc, #4]	; (800a778 <__errno+0x8>)
 800a772:	6818      	ldr	r0, [r3, #0]
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	20000194 	.word	0x20000194

0800a77c <__libc_init_array>:
 800a77c:	b570      	push	{r4, r5, r6, lr}
 800a77e:	4e0d      	ldr	r6, [pc, #52]	; (800a7b4 <__libc_init_array+0x38>)
 800a780:	4c0d      	ldr	r4, [pc, #52]	; (800a7b8 <__libc_init_array+0x3c>)
 800a782:	1ba4      	subs	r4, r4, r6
 800a784:	10a4      	asrs	r4, r4, #2
 800a786:	2500      	movs	r5, #0
 800a788:	42a5      	cmp	r5, r4
 800a78a:	d109      	bne.n	800a7a0 <__libc_init_array+0x24>
 800a78c:	4e0b      	ldr	r6, [pc, #44]	; (800a7bc <__libc_init_array+0x40>)
 800a78e:	4c0c      	ldr	r4, [pc, #48]	; (800a7c0 <__libc_init_array+0x44>)
 800a790:	f001 f8fc 	bl	800b98c <_init>
 800a794:	1ba4      	subs	r4, r4, r6
 800a796:	10a4      	asrs	r4, r4, #2
 800a798:	2500      	movs	r5, #0
 800a79a:	42a5      	cmp	r5, r4
 800a79c:	d105      	bne.n	800a7aa <__libc_init_array+0x2e>
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a7a4:	4798      	blx	r3
 800a7a6:	3501      	adds	r5, #1
 800a7a8:	e7ee      	b.n	800a788 <__libc_init_array+0xc>
 800a7aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a7ae:	4798      	blx	r3
 800a7b0:	3501      	adds	r5, #1
 800a7b2:	e7f2      	b.n	800a79a <__libc_init_array+0x1e>
 800a7b4:	0800bbe8 	.word	0x0800bbe8
 800a7b8:	0800bbe8 	.word	0x0800bbe8
 800a7bc:	0800bbe8 	.word	0x0800bbe8
 800a7c0:	0800bbec 	.word	0x0800bbec

0800a7c4 <malloc>:
 800a7c4:	4b02      	ldr	r3, [pc, #8]	; (800a7d0 <malloc+0xc>)
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	f000 b861 	b.w	800a890 <_malloc_r>
 800a7ce:	bf00      	nop
 800a7d0:	20000194 	.word	0x20000194

0800a7d4 <free>:
 800a7d4:	4b02      	ldr	r3, [pc, #8]	; (800a7e0 <free+0xc>)
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	6818      	ldr	r0, [r3, #0]
 800a7da:	f000 b80b 	b.w	800a7f4 <_free_r>
 800a7de:	bf00      	nop
 800a7e0:	20000194 	.word	0x20000194

0800a7e4 <memset>:
 800a7e4:	4402      	add	r2, r0
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d100      	bne.n	800a7ee <memset+0xa>
 800a7ec:	4770      	bx	lr
 800a7ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a7f2:	e7f9      	b.n	800a7e8 <memset+0x4>

0800a7f4 <_free_r>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	4605      	mov	r5, r0
 800a7f8:	2900      	cmp	r1, #0
 800a7fa:	d045      	beq.n	800a888 <_free_r+0x94>
 800a7fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a800:	1f0c      	subs	r4, r1, #4
 800a802:	2b00      	cmp	r3, #0
 800a804:	bfb8      	it	lt
 800a806:	18e4      	addlt	r4, r4, r3
 800a808:	f000 f8ac 	bl	800a964 <__malloc_lock>
 800a80c:	4a1f      	ldr	r2, [pc, #124]	; (800a88c <_free_r+0x98>)
 800a80e:	6813      	ldr	r3, [r2, #0]
 800a810:	4610      	mov	r0, r2
 800a812:	b933      	cbnz	r3, 800a822 <_free_r+0x2e>
 800a814:	6063      	str	r3, [r4, #4]
 800a816:	6014      	str	r4, [r2, #0]
 800a818:	4628      	mov	r0, r5
 800a81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a81e:	f000 b8a2 	b.w	800a966 <__malloc_unlock>
 800a822:	42a3      	cmp	r3, r4
 800a824:	d90c      	bls.n	800a840 <_free_r+0x4c>
 800a826:	6821      	ldr	r1, [r4, #0]
 800a828:	1862      	adds	r2, r4, r1
 800a82a:	4293      	cmp	r3, r2
 800a82c:	bf04      	itt	eq
 800a82e:	681a      	ldreq	r2, [r3, #0]
 800a830:	685b      	ldreq	r3, [r3, #4]
 800a832:	6063      	str	r3, [r4, #4]
 800a834:	bf04      	itt	eq
 800a836:	1852      	addeq	r2, r2, r1
 800a838:	6022      	streq	r2, [r4, #0]
 800a83a:	6004      	str	r4, [r0, #0]
 800a83c:	e7ec      	b.n	800a818 <_free_r+0x24>
 800a83e:	4613      	mov	r3, r2
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	b10a      	cbz	r2, 800a848 <_free_r+0x54>
 800a844:	42a2      	cmp	r2, r4
 800a846:	d9fa      	bls.n	800a83e <_free_r+0x4a>
 800a848:	6819      	ldr	r1, [r3, #0]
 800a84a:	1858      	adds	r0, r3, r1
 800a84c:	42a0      	cmp	r0, r4
 800a84e:	d10b      	bne.n	800a868 <_free_r+0x74>
 800a850:	6820      	ldr	r0, [r4, #0]
 800a852:	4401      	add	r1, r0
 800a854:	1858      	adds	r0, r3, r1
 800a856:	4282      	cmp	r2, r0
 800a858:	6019      	str	r1, [r3, #0]
 800a85a:	d1dd      	bne.n	800a818 <_free_r+0x24>
 800a85c:	6810      	ldr	r0, [r2, #0]
 800a85e:	6852      	ldr	r2, [r2, #4]
 800a860:	605a      	str	r2, [r3, #4]
 800a862:	4401      	add	r1, r0
 800a864:	6019      	str	r1, [r3, #0]
 800a866:	e7d7      	b.n	800a818 <_free_r+0x24>
 800a868:	d902      	bls.n	800a870 <_free_r+0x7c>
 800a86a:	230c      	movs	r3, #12
 800a86c:	602b      	str	r3, [r5, #0]
 800a86e:	e7d3      	b.n	800a818 <_free_r+0x24>
 800a870:	6820      	ldr	r0, [r4, #0]
 800a872:	1821      	adds	r1, r4, r0
 800a874:	428a      	cmp	r2, r1
 800a876:	bf04      	itt	eq
 800a878:	6811      	ldreq	r1, [r2, #0]
 800a87a:	6852      	ldreq	r2, [r2, #4]
 800a87c:	6062      	str	r2, [r4, #4]
 800a87e:	bf04      	itt	eq
 800a880:	1809      	addeq	r1, r1, r0
 800a882:	6021      	streq	r1, [r4, #0]
 800a884:	605c      	str	r4, [r3, #4]
 800a886:	e7c7      	b.n	800a818 <_free_r+0x24>
 800a888:	bd38      	pop	{r3, r4, r5, pc}
 800a88a:	bf00      	nop
 800a88c:	2000022c 	.word	0x2000022c

0800a890 <_malloc_r>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	1ccd      	adds	r5, r1, #3
 800a894:	f025 0503 	bic.w	r5, r5, #3
 800a898:	3508      	adds	r5, #8
 800a89a:	2d0c      	cmp	r5, #12
 800a89c:	bf38      	it	cc
 800a89e:	250c      	movcc	r5, #12
 800a8a0:	2d00      	cmp	r5, #0
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	db01      	blt.n	800a8aa <_malloc_r+0x1a>
 800a8a6:	42a9      	cmp	r1, r5
 800a8a8:	d903      	bls.n	800a8b2 <_malloc_r+0x22>
 800a8aa:	230c      	movs	r3, #12
 800a8ac:	6033      	str	r3, [r6, #0]
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	bd70      	pop	{r4, r5, r6, pc}
 800a8b2:	f000 f857 	bl	800a964 <__malloc_lock>
 800a8b6:	4a21      	ldr	r2, [pc, #132]	; (800a93c <_malloc_r+0xac>)
 800a8b8:	6814      	ldr	r4, [r2, #0]
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	b991      	cbnz	r1, 800a8e4 <_malloc_r+0x54>
 800a8be:	4c20      	ldr	r4, [pc, #128]	; (800a940 <_malloc_r+0xb0>)
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	b91b      	cbnz	r3, 800a8cc <_malloc_r+0x3c>
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	f000 f83d 	bl	800a944 <_sbrk_r>
 800a8ca:	6020      	str	r0, [r4, #0]
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f000 f838 	bl	800a944 <_sbrk_r>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d124      	bne.n	800a922 <_malloc_r+0x92>
 800a8d8:	230c      	movs	r3, #12
 800a8da:	6033      	str	r3, [r6, #0]
 800a8dc:	4630      	mov	r0, r6
 800a8de:	f000 f842 	bl	800a966 <__malloc_unlock>
 800a8e2:	e7e4      	b.n	800a8ae <_malloc_r+0x1e>
 800a8e4:	680b      	ldr	r3, [r1, #0]
 800a8e6:	1b5b      	subs	r3, r3, r5
 800a8e8:	d418      	bmi.n	800a91c <_malloc_r+0x8c>
 800a8ea:	2b0b      	cmp	r3, #11
 800a8ec:	d90f      	bls.n	800a90e <_malloc_r+0x7e>
 800a8ee:	600b      	str	r3, [r1, #0]
 800a8f0:	50cd      	str	r5, [r1, r3]
 800a8f2:	18cc      	adds	r4, r1, r3
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f000 f836 	bl	800a966 <__malloc_unlock>
 800a8fa:	f104 000b 	add.w	r0, r4, #11
 800a8fe:	1d23      	adds	r3, r4, #4
 800a900:	f020 0007 	bic.w	r0, r0, #7
 800a904:	1ac3      	subs	r3, r0, r3
 800a906:	d0d3      	beq.n	800a8b0 <_malloc_r+0x20>
 800a908:	425a      	negs	r2, r3
 800a90a:	50e2      	str	r2, [r4, r3]
 800a90c:	e7d0      	b.n	800a8b0 <_malloc_r+0x20>
 800a90e:	428c      	cmp	r4, r1
 800a910:	684b      	ldr	r3, [r1, #4]
 800a912:	bf16      	itet	ne
 800a914:	6063      	strne	r3, [r4, #4]
 800a916:	6013      	streq	r3, [r2, #0]
 800a918:	460c      	movne	r4, r1
 800a91a:	e7eb      	b.n	800a8f4 <_malloc_r+0x64>
 800a91c:	460c      	mov	r4, r1
 800a91e:	6849      	ldr	r1, [r1, #4]
 800a920:	e7cc      	b.n	800a8bc <_malloc_r+0x2c>
 800a922:	1cc4      	adds	r4, r0, #3
 800a924:	f024 0403 	bic.w	r4, r4, #3
 800a928:	42a0      	cmp	r0, r4
 800a92a:	d005      	beq.n	800a938 <_malloc_r+0xa8>
 800a92c:	1a21      	subs	r1, r4, r0
 800a92e:	4630      	mov	r0, r6
 800a930:	f000 f808 	bl	800a944 <_sbrk_r>
 800a934:	3001      	adds	r0, #1
 800a936:	d0cf      	beq.n	800a8d8 <_malloc_r+0x48>
 800a938:	6025      	str	r5, [r4, #0]
 800a93a:	e7db      	b.n	800a8f4 <_malloc_r+0x64>
 800a93c:	2000022c 	.word	0x2000022c
 800a940:	20000230 	.word	0x20000230

0800a944 <_sbrk_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	4c06      	ldr	r4, [pc, #24]	; (800a960 <_sbrk_r+0x1c>)
 800a948:	2300      	movs	r3, #0
 800a94a:	4605      	mov	r5, r0
 800a94c:	4608      	mov	r0, r1
 800a94e:	6023      	str	r3, [r4, #0]
 800a950:	f7f7 f88e 	bl	8001a70 <_sbrk>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_sbrk_r+0x1a>
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_sbrk_r+0x1a>
 800a95c:	602b      	str	r3, [r5, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	20001e40 	.word	0x20001e40

0800a964 <__malloc_lock>:
 800a964:	4770      	bx	lr

0800a966 <__malloc_unlock>:
 800a966:	4770      	bx	lr

0800a968 <sin>:
 800a968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a96a:	ec51 0b10 	vmov	r0, r1, d0
 800a96e:	4a20      	ldr	r2, [pc, #128]	; (800a9f0 <sin+0x88>)
 800a970:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a974:	4293      	cmp	r3, r2
 800a976:	dc07      	bgt.n	800a988 <sin+0x20>
 800a978:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800a9e8 <sin+0x80>
 800a97c:	2000      	movs	r0, #0
 800a97e:	f000 fe37 	bl	800b5f0 <__kernel_sin>
 800a982:	ec51 0b10 	vmov	r0, r1, d0
 800a986:	e007      	b.n	800a998 <sin+0x30>
 800a988:	4a1a      	ldr	r2, [pc, #104]	; (800a9f4 <sin+0x8c>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	dd09      	ble.n	800a9a2 <sin+0x3a>
 800a98e:	ee10 2a10 	vmov	r2, s0
 800a992:	460b      	mov	r3, r1
 800a994:	f7f5 fc3c 	bl	8000210 <__aeabi_dsub>
 800a998:	ec41 0b10 	vmov	d0, r0, r1
 800a99c:	b005      	add	sp, #20
 800a99e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9a2:	4668      	mov	r0, sp
 800a9a4:	f000 f828 	bl	800a9f8 <__ieee754_rem_pio2>
 800a9a8:	f000 0003 	and.w	r0, r0, #3
 800a9ac:	2801      	cmp	r0, #1
 800a9ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a9b2:	ed9d 0b00 	vldr	d0, [sp]
 800a9b6:	d004      	beq.n	800a9c2 <sin+0x5a>
 800a9b8:	2802      	cmp	r0, #2
 800a9ba:	d005      	beq.n	800a9c8 <sin+0x60>
 800a9bc:	b970      	cbnz	r0, 800a9dc <sin+0x74>
 800a9be:	2001      	movs	r0, #1
 800a9c0:	e7dd      	b.n	800a97e <sin+0x16>
 800a9c2:	f000 fa0d 	bl	800ade0 <__kernel_cos>
 800a9c6:	e7dc      	b.n	800a982 <sin+0x1a>
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	f000 fe11 	bl	800b5f0 <__kernel_sin>
 800a9ce:	ec53 2b10 	vmov	r2, r3, d0
 800a9d2:	ee10 0a10 	vmov	r0, s0
 800a9d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a9da:	e7dd      	b.n	800a998 <sin+0x30>
 800a9dc:	f000 fa00 	bl	800ade0 <__kernel_cos>
 800a9e0:	e7f5      	b.n	800a9ce <sin+0x66>
 800a9e2:	bf00      	nop
 800a9e4:	f3af 8000 	nop.w
	...
 800a9f0:	3fe921fb 	.word	0x3fe921fb
 800a9f4:	7fefffff 	.word	0x7fefffff

0800a9f8 <__ieee754_rem_pio2>:
 800a9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fc:	ec57 6b10 	vmov	r6, r7, d0
 800aa00:	4bc3      	ldr	r3, [pc, #780]	; (800ad10 <__ieee754_rem_pio2+0x318>)
 800aa02:	b08d      	sub	sp, #52	; 0x34
 800aa04:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800aa08:	4598      	cmp	r8, r3
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	9704      	str	r7, [sp, #16]
 800aa0e:	dc07      	bgt.n	800aa20 <__ieee754_rem_pio2+0x28>
 800aa10:	2200      	movs	r2, #0
 800aa12:	2300      	movs	r3, #0
 800aa14:	ed84 0b00 	vstr	d0, [r4]
 800aa18:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800aa1c:	2500      	movs	r5, #0
 800aa1e:	e027      	b.n	800aa70 <__ieee754_rem_pio2+0x78>
 800aa20:	4bbc      	ldr	r3, [pc, #752]	; (800ad14 <__ieee754_rem_pio2+0x31c>)
 800aa22:	4598      	cmp	r8, r3
 800aa24:	dc75      	bgt.n	800ab12 <__ieee754_rem_pio2+0x11a>
 800aa26:	9b04      	ldr	r3, [sp, #16]
 800aa28:	4dbb      	ldr	r5, [pc, #748]	; (800ad18 <__ieee754_rem_pio2+0x320>)
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	ee10 0a10 	vmov	r0, s0
 800aa30:	a3a9      	add	r3, pc, #676	; (adr r3, 800acd8 <__ieee754_rem_pio2+0x2e0>)
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	4639      	mov	r1, r7
 800aa38:	dd36      	ble.n	800aaa8 <__ieee754_rem_pio2+0xb0>
 800aa3a:	f7f5 fbe9 	bl	8000210 <__aeabi_dsub>
 800aa3e:	45a8      	cmp	r8, r5
 800aa40:	4606      	mov	r6, r0
 800aa42:	460f      	mov	r7, r1
 800aa44:	d018      	beq.n	800aa78 <__ieee754_rem_pio2+0x80>
 800aa46:	a3a6      	add	r3, pc, #664	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x2e8>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f5 fbe0 	bl	8000210 <__aeabi_dsub>
 800aa50:	4602      	mov	r2, r0
 800aa52:	460b      	mov	r3, r1
 800aa54:	e9c4 2300 	strd	r2, r3, [r4]
 800aa58:	4630      	mov	r0, r6
 800aa5a:	4639      	mov	r1, r7
 800aa5c:	f7f5 fbd8 	bl	8000210 <__aeabi_dsub>
 800aa60:	a39f      	add	r3, pc, #636	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x2e8>)
 800aa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa66:	f7f5 fbd3 	bl	8000210 <__aeabi_dsub>
 800aa6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa6e:	2501      	movs	r5, #1
 800aa70:	4628      	mov	r0, r5
 800aa72:	b00d      	add	sp, #52	; 0x34
 800aa74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa78:	a39b      	add	r3, pc, #620	; (adr r3, 800ace8 <__ieee754_rem_pio2+0x2f0>)
 800aa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7e:	f7f5 fbc7 	bl	8000210 <__aeabi_dsub>
 800aa82:	a39b      	add	r3, pc, #620	; (adr r3, 800acf0 <__ieee754_rem_pio2+0x2f8>)
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	4606      	mov	r6, r0
 800aa8a:	460f      	mov	r7, r1
 800aa8c:	f7f5 fbc0 	bl	8000210 <__aeabi_dsub>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	e9c4 2300 	strd	r2, r3, [r4]
 800aa98:	4630      	mov	r0, r6
 800aa9a:	4639      	mov	r1, r7
 800aa9c:	f7f5 fbb8 	bl	8000210 <__aeabi_dsub>
 800aaa0:	a393      	add	r3, pc, #588	; (adr r3, 800acf0 <__ieee754_rem_pio2+0x2f8>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	e7de      	b.n	800aa66 <__ieee754_rem_pio2+0x6e>
 800aaa8:	f7f5 fbb4 	bl	8000214 <__adddf3>
 800aaac:	45a8      	cmp	r8, r5
 800aaae:	4606      	mov	r6, r0
 800aab0:	460f      	mov	r7, r1
 800aab2:	d016      	beq.n	800aae2 <__ieee754_rem_pio2+0xea>
 800aab4:	a38a      	add	r3, pc, #552	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x2e8>)
 800aab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaba:	f7f5 fbab 	bl	8000214 <__adddf3>
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	e9c4 2300 	strd	r2, r3, [r4]
 800aac6:	4630      	mov	r0, r6
 800aac8:	4639      	mov	r1, r7
 800aaca:	f7f5 fba1 	bl	8000210 <__aeabi_dsub>
 800aace:	a384      	add	r3, pc, #528	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x2e8>)
 800aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad4:	f7f5 fb9e 	bl	8000214 <__adddf3>
 800aad8:	f04f 35ff 	mov.w	r5, #4294967295
 800aadc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aae0:	e7c6      	b.n	800aa70 <__ieee754_rem_pio2+0x78>
 800aae2:	a381      	add	r3, pc, #516	; (adr r3, 800ace8 <__ieee754_rem_pio2+0x2f0>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f7f5 fb94 	bl	8000214 <__adddf3>
 800aaec:	a380      	add	r3, pc, #512	; (adr r3, 800acf0 <__ieee754_rem_pio2+0x2f8>)
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	460f      	mov	r7, r1
 800aaf6:	f7f5 fb8d 	bl	8000214 <__adddf3>
 800aafa:	4602      	mov	r2, r0
 800aafc:	460b      	mov	r3, r1
 800aafe:	e9c4 2300 	strd	r2, r3, [r4]
 800ab02:	4630      	mov	r0, r6
 800ab04:	4639      	mov	r1, r7
 800ab06:	f7f5 fb83 	bl	8000210 <__aeabi_dsub>
 800ab0a:	a379      	add	r3, pc, #484	; (adr r3, 800acf0 <__ieee754_rem_pio2+0x2f8>)
 800ab0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab10:	e7e0      	b.n	800aad4 <__ieee754_rem_pio2+0xdc>
 800ab12:	4b82      	ldr	r3, [pc, #520]	; (800ad1c <__ieee754_rem_pio2+0x324>)
 800ab14:	4598      	cmp	r8, r3
 800ab16:	f300 80d0 	bgt.w	800acba <__ieee754_rem_pio2+0x2c2>
 800ab1a:	f000 fe23 	bl	800b764 <fabs>
 800ab1e:	ec57 6b10 	vmov	r6, r7, d0
 800ab22:	ee10 0a10 	vmov	r0, s0
 800ab26:	a374      	add	r3, pc, #464	; (adr r3, 800acf8 <__ieee754_rem_pio2+0x300>)
 800ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2c:	4639      	mov	r1, r7
 800ab2e:	f7f5 fd27 	bl	8000580 <__aeabi_dmul>
 800ab32:	2200      	movs	r2, #0
 800ab34:	4b7a      	ldr	r3, [pc, #488]	; (800ad20 <__ieee754_rem_pio2+0x328>)
 800ab36:	f7f5 fb6d 	bl	8000214 <__adddf3>
 800ab3a:	f7f5 ffbb 	bl	8000ab4 <__aeabi_d2iz>
 800ab3e:	4605      	mov	r5, r0
 800ab40:	f7f5 fcb4 	bl	80004ac <__aeabi_i2d>
 800ab44:	a364      	add	r3, pc, #400	; (adr r3, 800acd8 <__ieee754_rem_pio2+0x2e0>)
 800ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab4e:	f7f5 fd17 	bl	8000580 <__aeabi_dmul>
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	4630      	mov	r0, r6
 800ab58:	4639      	mov	r1, r7
 800ab5a:	f7f5 fb59 	bl	8000210 <__aeabi_dsub>
 800ab5e:	a360      	add	r3, pc, #384	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x2e8>)
 800ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab64:	4682      	mov	sl, r0
 800ab66:	468b      	mov	fp, r1
 800ab68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab6c:	f7f5 fd08 	bl	8000580 <__aeabi_dmul>
 800ab70:	2d1f      	cmp	r5, #31
 800ab72:	4606      	mov	r6, r0
 800ab74:	460f      	mov	r7, r1
 800ab76:	dc0c      	bgt.n	800ab92 <__ieee754_rem_pio2+0x19a>
 800ab78:	1e6a      	subs	r2, r5, #1
 800ab7a:	4b6a      	ldr	r3, [pc, #424]	; (800ad24 <__ieee754_rem_pio2+0x32c>)
 800ab7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab80:	4543      	cmp	r3, r8
 800ab82:	d006      	beq.n	800ab92 <__ieee754_rem_pio2+0x19a>
 800ab84:	4632      	mov	r2, r6
 800ab86:	463b      	mov	r3, r7
 800ab88:	4650      	mov	r0, sl
 800ab8a:	4659      	mov	r1, fp
 800ab8c:	f7f5 fb40 	bl	8000210 <__aeabi_dsub>
 800ab90:	e00e      	b.n	800abb0 <__ieee754_rem_pio2+0x1b8>
 800ab92:	4632      	mov	r2, r6
 800ab94:	463b      	mov	r3, r7
 800ab96:	4650      	mov	r0, sl
 800ab98:	4659      	mov	r1, fp
 800ab9a:	f7f5 fb39 	bl	8000210 <__aeabi_dsub>
 800ab9e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aba2:	9305      	str	r3, [sp, #20]
 800aba4:	9a05      	ldr	r2, [sp, #20]
 800aba6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	2b10      	cmp	r3, #16
 800abae:	dc02      	bgt.n	800abb6 <__ieee754_rem_pio2+0x1be>
 800abb0:	e9c4 0100 	strd	r0, r1, [r4]
 800abb4:	e039      	b.n	800ac2a <__ieee754_rem_pio2+0x232>
 800abb6:	a34c      	add	r3, pc, #304	; (adr r3, 800ace8 <__ieee754_rem_pio2+0x2f0>)
 800abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abc0:	f7f5 fcde 	bl	8000580 <__aeabi_dmul>
 800abc4:	4606      	mov	r6, r0
 800abc6:	460f      	mov	r7, r1
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4650      	mov	r0, sl
 800abce:	4659      	mov	r1, fp
 800abd0:	f7f5 fb1e 	bl	8000210 <__aeabi_dsub>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	4680      	mov	r8, r0
 800abda:	4689      	mov	r9, r1
 800abdc:	4650      	mov	r0, sl
 800abde:	4659      	mov	r1, fp
 800abe0:	f7f5 fb16 	bl	8000210 <__aeabi_dsub>
 800abe4:	4632      	mov	r2, r6
 800abe6:	463b      	mov	r3, r7
 800abe8:	f7f5 fb12 	bl	8000210 <__aeabi_dsub>
 800abec:	a340      	add	r3, pc, #256	; (adr r3, 800acf0 <__ieee754_rem_pio2+0x2f8>)
 800abee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf2:	4606      	mov	r6, r0
 800abf4:	460f      	mov	r7, r1
 800abf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abfa:	f7f5 fcc1 	bl	8000580 <__aeabi_dmul>
 800abfe:	4632      	mov	r2, r6
 800ac00:	463b      	mov	r3, r7
 800ac02:	f7f5 fb05 	bl	8000210 <__aeabi_dsub>
 800ac06:	4602      	mov	r2, r0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4606      	mov	r6, r0
 800ac0c:	460f      	mov	r7, r1
 800ac0e:	4640      	mov	r0, r8
 800ac10:	4649      	mov	r1, r9
 800ac12:	f7f5 fafd 	bl	8000210 <__aeabi_dsub>
 800ac16:	9a05      	ldr	r2, [sp, #20]
 800ac18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	2b31      	cmp	r3, #49	; 0x31
 800ac20:	dc20      	bgt.n	800ac64 <__ieee754_rem_pio2+0x26c>
 800ac22:	e9c4 0100 	strd	r0, r1, [r4]
 800ac26:	46c2      	mov	sl, r8
 800ac28:	46cb      	mov	fp, r9
 800ac2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ac2e:	4650      	mov	r0, sl
 800ac30:	4642      	mov	r2, r8
 800ac32:	464b      	mov	r3, r9
 800ac34:	4659      	mov	r1, fp
 800ac36:	f7f5 faeb 	bl	8000210 <__aeabi_dsub>
 800ac3a:	463b      	mov	r3, r7
 800ac3c:	4632      	mov	r2, r6
 800ac3e:	f7f5 fae7 	bl	8000210 <__aeabi_dsub>
 800ac42:	9b04      	ldr	r3, [sp, #16]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac4a:	f6bf af11 	bge.w	800aa70 <__ieee754_rem_pio2+0x78>
 800ac4e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ac52:	6063      	str	r3, [r4, #4]
 800ac54:	f8c4 8000 	str.w	r8, [r4]
 800ac58:	60a0      	str	r0, [r4, #8]
 800ac5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac5e:	60e3      	str	r3, [r4, #12]
 800ac60:	426d      	negs	r5, r5
 800ac62:	e705      	b.n	800aa70 <__ieee754_rem_pio2+0x78>
 800ac64:	a326      	add	r3, pc, #152	; (adr r3, 800ad00 <__ieee754_rem_pio2+0x308>)
 800ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac6e:	f7f5 fc87 	bl	8000580 <__aeabi_dmul>
 800ac72:	4606      	mov	r6, r0
 800ac74:	460f      	mov	r7, r1
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4640      	mov	r0, r8
 800ac7c:	4649      	mov	r1, r9
 800ac7e:	f7f5 fac7 	bl	8000210 <__aeabi_dsub>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	4682      	mov	sl, r0
 800ac88:	468b      	mov	fp, r1
 800ac8a:	4640      	mov	r0, r8
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	f7f5 fabf 	bl	8000210 <__aeabi_dsub>
 800ac92:	4632      	mov	r2, r6
 800ac94:	463b      	mov	r3, r7
 800ac96:	f7f5 fabb 	bl	8000210 <__aeabi_dsub>
 800ac9a:	a31b      	add	r3, pc, #108	; (adr r3, 800ad08 <__ieee754_rem_pio2+0x310>)
 800ac9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca0:	4606      	mov	r6, r0
 800aca2:	460f      	mov	r7, r1
 800aca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca8:	f7f5 fc6a 	bl	8000580 <__aeabi_dmul>
 800acac:	4632      	mov	r2, r6
 800acae:	463b      	mov	r3, r7
 800acb0:	f7f5 faae 	bl	8000210 <__aeabi_dsub>
 800acb4:	4606      	mov	r6, r0
 800acb6:	460f      	mov	r7, r1
 800acb8:	e764      	b.n	800ab84 <__ieee754_rem_pio2+0x18c>
 800acba:	4b1b      	ldr	r3, [pc, #108]	; (800ad28 <__ieee754_rem_pio2+0x330>)
 800acbc:	4598      	cmp	r8, r3
 800acbe:	dd35      	ble.n	800ad2c <__ieee754_rem_pio2+0x334>
 800acc0:	ee10 2a10 	vmov	r2, s0
 800acc4:	463b      	mov	r3, r7
 800acc6:	4630      	mov	r0, r6
 800acc8:	4639      	mov	r1, r7
 800acca:	f7f5 faa1 	bl	8000210 <__aeabi_dsub>
 800acce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800acd2:	e9c4 0100 	strd	r0, r1, [r4]
 800acd6:	e6a1      	b.n	800aa1c <__ieee754_rem_pio2+0x24>
 800acd8:	54400000 	.word	0x54400000
 800acdc:	3ff921fb 	.word	0x3ff921fb
 800ace0:	1a626331 	.word	0x1a626331
 800ace4:	3dd0b461 	.word	0x3dd0b461
 800ace8:	1a600000 	.word	0x1a600000
 800acec:	3dd0b461 	.word	0x3dd0b461
 800acf0:	2e037073 	.word	0x2e037073
 800acf4:	3ba3198a 	.word	0x3ba3198a
 800acf8:	6dc9c883 	.word	0x6dc9c883
 800acfc:	3fe45f30 	.word	0x3fe45f30
 800ad00:	2e000000 	.word	0x2e000000
 800ad04:	3ba3198a 	.word	0x3ba3198a
 800ad08:	252049c1 	.word	0x252049c1
 800ad0c:	397b839a 	.word	0x397b839a
 800ad10:	3fe921fb 	.word	0x3fe921fb
 800ad14:	4002d97b 	.word	0x4002d97b
 800ad18:	3ff921fb 	.word	0x3ff921fb
 800ad1c:	413921fb 	.word	0x413921fb
 800ad20:	3fe00000 	.word	0x3fe00000
 800ad24:	0800ba08 	.word	0x0800ba08
 800ad28:	7fefffff 	.word	0x7fefffff
 800ad2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ad30:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800ad34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ad38:	4630      	mov	r0, r6
 800ad3a:	460f      	mov	r7, r1
 800ad3c:	f7f5 feba 	bl	8000ab4 <__aeabi_d2iz>
 800ad40:	f7f5 fbb4 	bl	80004ac <__aeabi_i2d>
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	4630      	mov	r0, r6
 800ad4a:	4639      	mov	r1, r7
 800ad4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad50:	f7f5 fa5e 	bl	8000210 <__aeabi_dsub>
 800ad54:	2200      	movs	r2, #0
 800ad56:	4b1f      	ldr	r3, [pc, #124]	; (800add4 <__ieee754_rem_pio2+0x3dc>)
 800ad58:	f7f5 fc12 	bl	8000580 <__aeabi_dmul>
 800ad5c:	460f      	mov	r7, r1
 800ad5e:	4606      	mov	r6, r0
 800ad60:	f7f5 fea8 	bl	8000ab4 <__aeabi_d2iz>
 800ad64:	f7f5 fba2 	bl	80004ac <__aeabi_i2d>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	4639      	mov	r1, r7
 800ad70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ad74:	f7f5 fa4c 	bl	8000210 <__aeabi_dsub>
 800ad78:	2200      	movs	r2, #0
 800ad7a:	4b16      	ldr	r3, [pc, #88]	; (800add4 <__ieee754_rem_pio2+0x3dc>)
 800ad7c:	f7f5 fc00 	bl	8000580 <__aeabi_dmul>
 800ad80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ad84:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ad88:	f04f 0803 	mov.w	r8, #3
 800ad8c:	2600      	movs	r6, #0
 800ad8e:	2700      	movs	r7, #0
 800ad90:	4632      	mov	r2, r6
 800ad92:	463b      	mov	r3, r7
 800ad94:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ad98:	f108 3aff 	add.w	sl, r8, #4294967295
 800ad9c:	f7f5 fe58 	bl	8000a50 <__aeabi_dcmpeq>
 800ada0:	b9b0      	cbnz	r0, 800add0 <__ieee754_rem_pio2+0x3d8>
 800ada2:	4b0d      	ldr	r3, [pc, #52]	; (800add8 <__ieee754_rem_pio2+0x3e0>)
 800ada4:	9301      	str	r3, [sp, #4]
 800ada6:	2302      	movs	r3, #2
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	462a      	mov	r2, r5
 800adac:	4643      	mov	r3, r8
 800adae:	4621      	mov	r1, r4
 800adb0:	a806      	add	r0, sp, #24
 800adb2:	f000 f8dd 	bl	800af70 <__kernel_rem_pio2>
 800adb6:	9b04      	ldr	r3, [sp, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	4605      	mov	r5, r0
 800adbc:	f6bf ae58 	bge.w	800aa70 <__ieee754_rem_pio2+0x78>
 800adc0:	6863      	ldr	r3, [r4, #4]
 800adc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800adc6:	6063      	str	r3, [r4, #4]
 800adc8:	68e3      	ldr	r3, [r4, #12]
 800adca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800adce:	e746      	b.n	800ac5e <__ieee754_rem_pio2+0x266>
 800add0:	46d0      	mov	r8, sl
 800add2:	e7dd      	b.n	800ad90 <__ieee754_rem_pio2+0x398>
 800add4:	41700000 	.word	0x41700000
 800add8:	0800ba88 	.word	0x0800ba88
 800addc:	00000000 	.word	0x00000000

0800ade0 <__kernel_cos>:
 800ade0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade4:	ec59 8b10 	vmov	r8, r9, d0
 800ade8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800adec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800adf0:	ed2d 8b02 	vpush	{d8}
 800adf4:	eeb0 8a41 	vmov.f32	s16, s2
 800adf8:	eef0 8a61 	vmov.f32	s17, s3
 800adfc:	da07      	bge.n	800ae0e <__kernel_cos+0x2e>
 800adfe:	ee10 0a10 	vmov	r0, s0
 800ae02:	4649      	mov	r1, r9
 800ae04:	f7f5 fe56 	bl	8000ab4 <__aeabi_d2iz>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	f000 8089 	beq.w	800af20 <__kernel_cos+0x140>
 800ae0e:	4642      	mov	r2, r8
 800ae10:	464b      	mov	r3, r9
 800ae12:	4640      	mov	r0, r8
 800ae14:	4649      	mov	r1, r9
 800ae16:	f7f5 fbb3 	bl	8000580 <__aeabi_dmul>
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	4b4e      	ldr	r3, [pc, #312]	; (800af58 <__kernel_cos+0x178>)
 800ae1e:	4604      	mov	r4, r0
 800ae20:	460d      	mov	r5, r1
 800ae22:	f7f5 fbad 	bl	8000580 <__aeabi_dmul>
 800ae26:	a340      	add	r3, pc, #256	; (adr r3, 800af28 <__kernel_cos+0x148>)
 800ae28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2c:	4682      	mov	sl, r0
 800ae2e:	468b      	mov	fp, r1
 800ae30:	4620      	mov	r0, r4
 800ae32:	4629      	mov	r1, r5
 800ae34:	f7f5 fba4 	bl	8000580 <__aeabi_dmul>
 800ae38:	a33d      	add	r3, pc, #244	; (adr r3, 800af30 <__kernel_cos+0x150>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	f7f5 f9e9 	bl	8000214 <__adddf3>
 800ae42:	4622      	mov	r2, r4
 800ae44:	462b      	mov	r3, r5
 800ae46:	f7f5 fb9b 	bl	8000580 <__aeabi_dmul>
 800ae4a:	a33b      	add	r3, pc, #236	; (adr r3, 800af38 <__kernel_cos+0x158>)
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	f7f5 f9de 	bl	8000210 <__aeabi_dsub>
 800ae54:	4622      	mov	r2, r4
 800ae56:	462b      	mov	r3, r5
 800ae58:	f7f5 fb92 	bl	8000580 <__aeabi_dmul>
 800ae5c:	a338      	add	r3, pc, #224	; (adr r3, 800af40 <__kernel_cos+0x160>)
 800ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae62:	f7f5 f9d7 	bl	8000214 <__adddf3>
 800ae66:	4622      	mov	r2, r4
 800ae68:	462b      	mov	r3, r5
 800ae6a:	f7f5 fb89 	bl	8000580 <__aeabi_dmul>
 800ae6e:	a336      	add	r3, pc, #216	; (adr r3, 800af48 <__kernel_cos+0x168>)
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	f7f5 f9cc 	bl	8000210 <__aeabi_dsub>
 800ae78:	4622      	mov	r2, r4
 800ae7a:	462b      	mov	r3, r5
 800ae7c:	f7f5 fb80 	bl	8000580 <__aeabi_dmul>
 800ae80:	a333      	add	r3, pc, #204	; (adr r3, 800af50 <__kernel_cos+0x170>)
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	f7f5 f9c5 	bl	8000214 <__adddf3>
 800ae8a:	4622      	mov	r2, r4
 800ae8c:	462b      	mov	r3, r5
 800ae8e:	f7f5 fb77 	bl	8000580 <__aeabi_dmul>
 800ae92:	4622      	mov	r2, r4
 800ae94:	462b      	mov	r3, r5
 800ae96:	f7f5 fb73 	bl	8000580 <__aeabi_dmul>
 800ae9a:	ec53 2b18 	vmov	r2, r3, d8
 800ae9e:	4604      	mov	r4, r0
 800aea0:	460d      	mov	r5, r1
 800aea2:	4640      	mov	r0, r8
 800aea4:	4649      	mov	r1, r9
 800aea6:	f7f5 fb6b 	bl	8000580 <__aeabi_dmul>
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4602      	mov	r2, r0
 800aeae:	4629      	mov	r1, r5
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f7f5 f9ad 	bl	8000210 <__aeabi_dsub>
 800aeb6:	4b29      	ldr	r3, [pc, #164]	; (800af5c <__kernel_cos+0x17c>)
 800aeb8:	429e      	cmp	r6, r3
 800aeba:	4680      	mov	r8, r0
 800aebc:	4689      	mov	r9, r1
 800aebe:	dc11      	bgt.n	800aee4 <__kernel_cos+0x104>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	4650      	mov	r0, sl
 800aec6:	4659      	mov	r1, fp
 800aec8:	f7f5 f9a2 	bl	8000210 <__aeabi_dsub>
 800aecc:	460b      	mov	r3, r1
 800aece:	4924      	ldr	r1, [pc, #144]	; (800af60 <__kernel_cos+0x180>)
 800aed0:	4602      	mov	r2, r0
 800aed2:	2000      	movs	r0, #0
 800aed4:	f7f5 f99c 	bl	8000210 <__aeabi_dsub>
 800aed8:	ecbd 8b02 	vpop	{d8}
 800aedc:	ec41 0b10 	vmov	d0, r0, r1
 800aee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee4:	4b1f      	ldr	r3, [pc, #124]	; (800af64 <__kernel_cos+0x184>)
 800aee6:	491e      	ldr	r1, [pc, #120]	; (800af60 <__kernel_cos+0x180>)
 800aee8:	429e      	cmp	r6, r3
 800aeea:	bfcc      	ite	gt
 800aeec:	4d1e      	ldrgt	r5, [pc, #120]	; (800af68 <__kernel_cos+0x188>)
 800aeee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800aef2:	2400      	movs	r4, #0
 800aef4:	4622      	mov	r2, r4
 800aef6:	462b      	mov	r3, r5
 800aef8:	2000      	movs	r0, #0
 800aefa:	f7f5 f989 	bl	8000210 <__aeabi_dsub>
 800aefe:	4622      	mov	r2, r4
 800af00:	4606      	mov	r6, r0
 800af02:	460f      	mov	r7, r1
 800af04:	462b      	mov	r3, r5
 800af06:	4650      	mov	r0, sl
 800af08:	4659      	mov	r1, fp
 800af0a:	f7f5 f981 	bl	8000210 <__aeabi_dsub>
 800af0e:	4642      	mov	r2, r8
 800af10:	464b      	mov	r3, r9
 800af12:	f7f5 f97d 	bl	8000210 <__aeabi_dsub>
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	4630      	mov	r0, r6
 800af1c:	4639      	mov	r1, r7
 800af1e:	e7d9      	b.n	800aed4 <__kernel_cos+0xf4>
 800af20:	2000      	movs	r0, #0
 800af22:	490f      	ldr	r1, [pc, #60]	; (800af60 <__kernel_cos+0x180>)
 800af24:	e7d8      	b.n	800aed8 <__kernel_cos+0xf8>
 800af26:	bf00      	nop
 800af28:	be8838d4 	.word	0xbe8838d4
 800af2c:	bda8fae9 	.word	0xbda8fae9
 800af30:	bdb4b1c4 	.word	0xbdb4b1c4
 800af34:	3e21ee9e 	.word	0x3e21ee9e
 800af38:	809c52ad 	.word	0x809c52ad
 800af3c:	3e927e4f 	.word	0x3e927e4f
 800af40:	19cb1590 	.word	0x19cb1590
 800af44:	3efa01a0 	.word	0x3efa01a0
 800af48:	16c15177 	.word	0x16c15177
 800af4c:	3f56c16c 	.word	0x3f56c16c
 800af50:	5555554c 	.word	0x5555554c
 800af54:	3fa55555 	.word	0x3fa55555
 800af58:	3fe00000 	.word	0x3fe00000
 800af5c:	3fd33332 	.word	0x3fd33332
 800af60:	3ff00000 	.word	0x3ff00000
 800af64:	3fe90000 	.word	0x3fe90000
 800af68:	3fd20000 	.word	0x3fd20000
 800af6c:	00000000 	.word	0x00000000

0800af70 <__kernel_rem_pio2>:
 800af70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af74:	ed2d 8b02 	vpush	{d8}
 800af78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800af7c:	1ed4      	subs	r4, r2, #3
 800af7e:	9308      	str	r3, [sp, #32]
 800af80:	9101      	str	r1, [sp, #4]
 800af82:	4bc5      	ldr	r3, [pc, #788]	; (800b298 <__kernel_rem_pio2+0x328>)
 800af84:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800af86:	9009      	str	r0, [sp, #36]	; 0x24
 800af88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af8c:	9304      	str	r3, [sp, #16]
 800af8e:	9b08      	ldr	r3, [sp, #32]
 800af90:	3b01      	subs	r3, #1
 800af92:	9307      	str	r3, [sp, #28]
 800af94:	2318      	movs	r3, #24
 800af96:	fb94 f4f3 	sdiv	r4, r4, r3
 800af9a:	f06f 0317 	mvn.w	r3, #23
 800af9e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800afa2:	fb04 3303 	mla	r3, r4, r3, r3
 800afa6:	eb03 0a02 	add.w	sl, r3, r2
 800afaa:	9b04      	ldr	r3, [sp, #16]
 800afac:	9a07      	ldr	r2, [sp, #28]
 800afae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b288 <__kernel_rem_pio2+0x318>
 800afb2:	eb03 0802 	add.w	r8, r3, r2
 800afb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800afb8:	1aa7      	subs	r7, r4, r2
 800afba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800afbe:	ae22      	add	r6, sp, #136	; 0x88
 800afc0:	2500      	movs	r5, #0
 800afc2:	4545      	cmp	r5, r8
 800afc4:	dd13      	ble.n	800afee <__kernel_rem_pio2+0x7e>
 800afc6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b288 <__kernel_rem_pio2+0x318>
 800afca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800afce:	2600      	movs	r6, #0
 800afd0:	9b04      	ldr	r3, [sp, #16]
 800afd2:	429e      	cmp	r6, r3
 800afd4:	dc32      	bgt.n	800b03c <__kernel_rem_pio2+0xcc>
 800afd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd8:	9302      	str	r3, [sp, #8]
 800afda:	9b08      	ldr	r3, [sp, #32]
 800afdc:	199d      	adds	r5, r3, r6
 800afde:	ab22      	add	r3, sp, #136	; 0x88
 800afe0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800afe4:	9306      	str	r3, [sp, #24]
 800afe6:	ec59 8b18 	vmov	r8, r9, d8
 800afea:	2700      	movs	r7, #0
 800afec:	e01f      	b.n	800b02e <__kernel_rem_pio2+0xbe>
 800afee:	42ef      	cmn	r7, r5
 800aff0:	d407      	bmi.n	800b002 <__kernel_rem_pio2+0x92>
 800aff2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aff6:	f7f5 fa59 	bl	80004ac <__aeabi_i2d>
 800affa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800affe:	3501      	adds	r5, #1
 800b000:	e7df      	b.n	800afc2 <__kernel_rem_pio2+0x52>
 800b002:	ec51 0b18 	vmov	r0, r1, d8
 800b006:	e7f8      	b.n	800affa <__kernel_rem_pio2+0x8a>
 800b008:	9906      	ldr	r1, [sp, #24]
 800b00a:	9d02      	ldr	r5, [sp, #8]
 800b00c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b010:	9106      	str	r1, [sp, #24]
 800b012:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b016:	9502      	str	r5, [sp, #8]
 800b018:	f7f5 fab2 	bl	8000580 <__aeabi_dmul>
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	4640      	mov	r0, r8
 800b022:	4649      	mov	r1, r9
 800b024:	f7f5 f8f6 	bl	8000214 <__adddf3>
 800b028:	3701      	adds	r7, #1
 800b02a:	4680      	mov	r8, r0
 800b02c:	4689      	mov	r9, r1
 800b02e:	9b07      	ldr	r3, [sp, #28]
 800b030:	429f      	cmp	r7, r3
 800b032:	dde9      	ble.n	800b008 <__kernel_rem_pio2+0x98>
 800b034:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b038:	3601      	adds	r6, #1
 800b03a:	e7c9      	b.n	800afd0 <__kernel_rem_pio2+0x60>
 800b03c:	9b04      	ldr	r3, [sp, #16]
 800b03e:	aa0e      	add	r2, sp, #56	; 0x38
 800b040:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b044:	930c      	str	r3, [sp, #48]	; 0x30
 800b046:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b048:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b04c:	9c04      	ldr	r4, [sp, #16]
 800b04e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b050:	ab9a      	add	r3, sp, #616	; 0x268
 800b052:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b056:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b05a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b05e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b062:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b066:	ab9a      	add	r3, sp, #616	; 0x268
 800b068:	445b      	add	r3, fp
 800b06a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b06e:	2500      	movs	r5, #0
 800b070:	1b63      	subs	r3, r4, r5
 800b072:	2b00      	cmp	r3, #0
 800b074:	dc78      	bgt.n	800b168 <__kernel_rem_pio2+0x1f8>
 800b076:	4650      	mov	r0, sl
 800b078:	ec49 8b10 	vmov	d0, r8, r9
 800b07c:	f000 fc00 	bl	800b880 <scalbn>
 800b080:	ec57 6b10 	vmov	r6, r7, d0
 800b084:	2200      	movs	r2, #0
 800b086:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b08a:	ee10 0a10 	vmov	r0, s0
 800b08e:	4639      	mov	r1, r7
 800b090:	f7f5 fa76 	bl	8000580 <__aeabi_dmul>
 800b094:	ec41 0b10 	vmov	d0, r0, r1
 800b098:	f000 fb6e 	bl	800b778 <floor>
 800b09c:	2200      	movs	r2, #0
 800b09e:	ec51 0b10 	vmov	r0, r1, d0
 800b0a2:	4b7e      	ldr	r3, [pc, #504]	; (800b29c <__kernel_rem_pio2+0x32c>)
 800b0a4:	f7f5 fa6c 	bl	8000580 <__aeabi_dmul>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	4639      	mov	r1, r7
 800b0b0:	f7f5 f8ae 	bl	8000210 <__aeabi_dsub>
 800b0b4:	460f      	mov	r7, r1
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	f7f5 fcfc 	bl	8000ab4 <__aeabi_d2iz>
 800b0bc:	9006      	str	r0, [sp, #24]
 800b0be:	f7f5 f9f5 	bl	80004ac <__aeabi_i2d>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	f7f5 f8a1 	bl	8000210 <__aeabi_dsub>
 800b0ce:	f1ba 0f00 	cmp.w	sl, #0
 800b0d2:	4606      	mov	r6, r0
 800b0d4:	460f      	mov	r7, r1
 800b0d6:	dd6c      	ble.n	800b1b2 <__kernel_rem_pio2+0x242>
 800b0d8:	1e62      	subs	r2, r4, #1
 800b0da:	ab0e      	add	r3, sp, #56	; 0x38
 800b0dc:	f1ca 0118 	rsb	r1, sl, #24
 800b0e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b0e4:	9d06      	ldr	r5, [sp, #24]
 800b0e6:	fa40 f301 	asr.w	r3, r0, r1
 800b0ea:	441d      	add	r5, r3
 800b0ec:	408b      	lsls	r3, r1
 800b0ee:	1ac0      	subs	r0, r0, r3
 800b0f0:	ab0e      	add	r3, sp, #56	; 0x38
 800b0f2:	9506      	str	r5, [sp, #24]
 800b0f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b0f8:	f1ca 0317 	rsb	r3, sl, #23
 800b0fc:	fa40 f303 	asr.w	r3, r0, r3
 800b100:	9302      	str	r3, [sp, #8]
 800b102:	9b02      	ldr	r3, [sp, #8]
 800b104:	2b00      	cmp	r3, #0
 800b106:	dd62      	ble.n	800b1ce <__kernel_rem_pio2+0x25e>
 800b108:	9b06      	ldr	r3, [sp, #24]
 800b10a:	2200      	movs	r2, #0
 800b10c:	3301      	adds	r3, #1
 800b10e:	9306      	str	r3, [sp, #24]
 800b110:	4615      	mov	r5, r2
 800b112:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b116:	4294      	cmp	r4, r2
 800b118:	f300 8095 	bgt.w	800b246 <__kernel_rem_pio2+0x2d6>
 800b11c:	f1ba 0f00 	cmp.w	sl, #0
 800b120:	dd07      	ble.n	800b132 <__kernel_rem_pio2+0x1c2>
 800b122:	f1ba 0f01 	cmp.w	sl, #1
 800b126:	f000 80a2 	beq.w	800b26e <__kernel_rem_pio2+0x2fe>
 800b12a:	f1ba 0f02 	cmp.w	sl, #2
 800b12e:	f000 80c1 	beq.w	800b2b4 <__kernel_rem_pio2+0x344>
 800b132:	9b02      	ldr	r3, [sp, #8]
 800b134:	2b02      	cmp	r3, #2
 800b136:	d14a      	bne.n	800b1ce <__kernel_rem_pio2+0x25e>
 800b138:	4632      	mov	r2, r6
 800b13a:	463b      	mov	r3, r7
 800b13c:	2000      	movs	r0, #0
 800b13e:	4958      	ldr	r1, [pc, #352]	; (800b2a0 <__kernel_rem_pio2+0x330>)
 800b140:	f7f5 f866 	bl	8000210 <__aeabi_dsub>
 800b144:	4606      	mov	r6, r0
 800b146:	460f      	mov	r7, r1
 800b148:	2d00      	cmp	r5, #0
 800b14a:	d040      	beq.n	800b1ce <__kernel_rem_pio2+0x25e>
 800b14c:	4650      	mov	r0, sl
 800b14e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b290 <__kernel_rem_pio2+0x320>
 800b152:	f000 fb95 	bl	800b880 <scalbn>
 800b156:	4630      	mov	r0, r6
 800b158:	4639      	mov	r1, r7
 800b15a:	ec53 2b10 	vmov	r2, r3, d0
 800b15e:	f7f5 f857 	bl	8000210 <__aeabi_dsub>
 800b162:	4606      	mov	r6, r0
 800b164:	460f      	mov	r7, r1
 800b166:	e032      	b.n	800b1ce <__kernel_rem_pio2+0x25e>
 800b168:	2200      	movs	r2, #0
 800b16a:	4b4e      	ldr	r3, [pc, #312]	; (800b2a4 <__kernel_rem_pio2+0x334>)
 800b16c:	4640      	mov	r0, r8
 800b16e:	4649      	mov	r1, r9
 800b170:	f7f5 fa06 	bl	8000580 <__aeabi_dmul>
 800b174:	f7f5 fc9e 	bl	8000ab4 <__aeabi_d2iz>
 800b178:	f7f5 f998 	bl	80004ac <__aeabi_i2d>
 800b17c:	2200      	movs	r2, #0
 800b17e:	4b4a      	ldr	r3, [pc, #296]	; (800b2a8 <__kernel_rem_pio2+0x338>)
 800b180:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b184:	f7f5 f9fc 	bl	8000580 <__aeabi_dmul>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	4640      	mov	r0, r8
 800b18e:	4649      	mov	r1, r9
 800b190:	f7f5 f83e 	bl	8000210 <__aeabi_dsub>
 800b194:	f7f5 fc8e 	bl	8000ab4 <__aeabi_d2iz>
 800b198:	ab0e      	add	r3, sp, #56	; 0x38
 800b19a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b19e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b1a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1a6:	f7f5 f835 	bl	8000214 <__adddf3>
 800b1aa:	3501      	adds	r5, #1
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	4689      	mov	r9, r1
 800b1b0:	e75e      	b.n	800b070 <__kernel_rem_pio2+0x100>
 800b1b2:	d105      	bne.n	800b1c0 <__kernel_rem_pio2+0x250>
 800b1b4:	1e63      	subs	r3, r4, #1
 800b1b6:	aa0e      	add	r2, sp, #56	; 0x38
 800b1b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b1bc:	15c3      	asrs	r3, r0, #23
 800b1be:	e79f      	b.n	800b100 <__kernel_rem_pio2+0x190>
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	4b3a      	ldr	r3, [pc, #232]	; (800b2ac <__kernel_rem_pio2+0x33c>)
 800b1c4:	f7f5 fc62 	bl	8000a8c <__aeabi_dcmpge>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d139      	bne.n	800b240 <__kernel_rem_pio2+0x2d0>
 800b1cc:	9002      	str	r0, [sp, #8]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	f7f5 fc3b 	bl	8000a50 <__aeabi_dcmpeq>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	f000 80c7 	beq.w	800b36e <__kernel_rem_pio2+0x3fe>
 800b1e0:	1e65      	subs	r5, r4, #1
 800b1e2:	462b      	mov	r3, r5
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	9904      	ldr	r1, [sp, #16]
 800b1e8:	428b      	cmp	r3, r1
 800b1ea:	da6a      	bge.n	800b2c2 <__kernel_rem_pio2+0x352>
 800b1ec:	2a00      	cmp	r2, #0
 800b1ee:	f000 8088 	beq.w	800b302 <__kernel_rem_pio2+0x392>
 800b1f2:	ab0e      	add	r3, sp, #56	; 0x38
 800b1f4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b1f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 80b4 	beq.w	800b36a <__kernel_rem_pio2+0x3fa>
 800b202:	4650      	mov	r0, sl
 800b204:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b290 <__kernel_rem_pio2+0x320>
 800b208:	f000 fb3a 	bl	800b880 <scalbn>
 800b20c:	00ec      	lsls	r4, r5, #3
 800b20e:	ab72      	add	r3, sp, #456	; 0x1c8
 800b210:	191e      	adds	r6, r3, r4
 800b212:	ec59 8b10 	vmov	r8, r9, d0
 800b216:	f106 0a08 	add.w	sl, r6, #8
 800b21a:	462f      	mov	r7, r5
 800b21c:	2f00      	cmp	r7, #0
 800b21e:	f280 80df 	bge.w	800b3e0 <__kernel_rem_pio2+0x470>
 800b222:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b288 <__kernel_rem_pio2+0x318>
 800b226:	f04f 0a00 	mov.w	sl, #0
 800b22a:	eba5 030a 	sub.w	r3, r5, sl
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f2c0 810a 	blt.w	800b448 <__kernel_rem_pio2+0x4d8>
 800b234:	f8df b078 	ldr.w	fp, [pc, #120]	; 800b2b0 <__kernel_rem_pio2+0x340>
 800b238:	ec59 8b18 	vmov	r8, r9, d8
 800b23c:	2700      	movs	r7, #0
 800b23e:	e0f5      	b.n	800b42c <__kernel_rem_pio2+0x4bc>
 800b240:	2302      	movs	r3, #2
 800b242:	9302      	str	r3, [sp, #8]
 800b244:	e760      	b.n	800b108 <__kernel_rem_pio2+0x198>
 800b246:	ab0e      	add	r3, sp, #56	; 0x38
 800b248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b24c:	b94d      	cbnz	r5, 800b262 <__kernel_rem_pio2+0x2f2>
 800b24e:	b12b      	cbz	r3, 800b25c <__kernel_rem_pio2+0x2ec>
 800b250:	a80e      	add	r0, sp, #56	; 0x38
 800b252:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b256:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b25a:	2301      	movs	r3, #1
 800b25c:	3201      	adds	r2, #1
 800b25e:	461d      	mov	r5, r3
 800b260:	e759      	b.n	800b116 <__kernel_rem_pio2+0x1a6>
 800b262:	a80e      	add	r0, sp, #56	; 0x38
 800b264:	1acb      	subs	r3, r1, r3
 800b266:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b26a:	462b      	mov	r3, r5
 800b26c:	e7f6      	b.n	800b25c <__kernel_rem_pio2+0x2ec>
 800b26e:	1e62      	subs	r2, r4, #1
 800b270:	ab0e      	add	r3, sp, #56	; 0x38
 800b272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b276:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b27a:	a90e      	add	r1, sp, #56	; 0x38
 800b27c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b280:	e757      	b.n	800b132 <__kernel_rem_pio2+0x1c2>
 800b282:	bf00      	nop
 800b284:	f3af 8000 	nop.w
	...
 800b294:	3ff00000 	.word	0x3ff00000
 800b298:	0800bbd0 	.word	0x0800bbd0
 800b29c:	40200000 	.word	0x40200000
 800b2a0:	3ff00000 	.word	0x3ff00000
 800b2a4:	3e700000 	.word	0x3e700000
 800b2a8:	41700000 	.word	0x41700000
 800b2ac:	3fe00000 	.word	0x3fe00000
 800b2b0:	0800bb90 	.word	0x0800bb90
 800b2b4:	1e62      	subs	r2, r4, #1
 800b2b6:	ab0e      	add	r3, sp, #56	; 0x38
 800b2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b2c0:	e7db      	b.n	800b27a <__kernel_rem_pio2+0x30a>
 800b2c2:	a90e      	add	r1, sp, #56	; 0x38
 800b2c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b2c8:	3b01      	subs	r3, #1
 800b2ca:	430a      	orrs	r2, r1
 800b2cc:	e78b      	b.n	800b1e6 <__kernel_rem_pio2+0x276>
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b2d4:	2900      	cmp	r1, #0
 800b2d6:	d0fa      	beq.n	800b2ce <__kernel_rem_pio2+0x35e>
 800b2d8:	9a08      	ldr	r2, [sp, #32]
 800b2da:	4422      	add	r2, r4
 800b2dc:	00d2      	lsls	r2, r2, #3
 800b2de:	a922      	add	r1, sp, #136	; 0x88
 800b2e0:	18e3      	adds	r3, r4, r3
 800b2e2:	9206      	str	r2, [sp, #24]
 800b2e4:	440a      	add	r2, r1
 800b2e6:	9302      	str	r3, [sp, #8]
 800b2e8:	f10b 0108 	add.w	r1, fp, #8
 800b2ec:	f102 0308 	add.w	r3, r2, #8
 800b2f0:	1c66      	adds	r6, r4, #1
 800b2f2:	910a      	str	r1, [sp, #40]	; 0x28
 800b2f4:	2500      	movs	r5, #0
 800b2f6:	930d      	str	r3, [sp, #52]	; 0x34
 800b2f8:	9b02      	ldr	r3, [sp, #8]
 800b2fa:	42b3      	cmp	r3, r6
 800b2fc:	da04      	bge.n	800b308 <__kernel_rem_pio2+0x398>
 800b2fe:	461c      	mov	r4, r3
 800b300:	e6a6      	b.n	800b050 <__kernel_rem_pio2+0xe0>
 800b302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b304:	2301      	movs	r3, #1
 800b306:	e7e3      	b.n	800b2d0 <__kernel_rem_pio2+0x360>
 800b308:	9b06      	ldr	r3, [sp, #24]
 800b30a:	18ef      	adds	r7, r5, r3
 800b30c:	ab22      	add	r3, sp, #136	; 0x88
 800b30e:	441f      	add	r7, r3
 800b310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b312:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b316:	f7f5 f8c9 	bl	80004ac <__aeabi_i2d>
 800b31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31c:	461c      	mov	r4, r3
 800b31e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b320:	e9c7 0100 	strd	r0, r1, [r7]
 800b324:	eb03 0b05 	add.w	fp, r3, r5
 800b328:	2700      	movs	r7, #0
 800b32a:	f04f 0800 	mov.w	r8, #0
 800b32e:	f04f 0900 	mov.w	r9, #0
 800b332:	9b07      	ldr	r3, [sp, #28]
 800b334:	429f      	cmp	r7, r3
 800b336:	dd08      	ble.n	800b34a <__kernel_rem_pio2+0x3da>
 800b338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b33a:	aa72      	add	r2, sp, #456	; 0x1c8
 800b33c:	18eb      	adds	r3, r5, r3
 800b33e:	4413      	add	r3, r2
 800b340:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800b344:	3601      	adds	r6, #1
 800b346:	3508      	adds	r5, #8
 800b348:	e7d6      	b.n	800b2f8 <__kernel_rem_pio2+0x388>
 800b34a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b34e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b352:	f7f5 f915 	bl	8000580 <__aeabi_dmul>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4640      	mov	r0, r8
 800b35c:	4649      	mov	r1, r9
 800b35e:	f7f4 ff59 	bl	8000214 <__adddf3>
 800b362:	3701      	adds	r7, #1
 800b364:	4680      	mov	r8, r0
 800b366:	4689      	mov	r9, r1
 800b368:	e7e3      	b.n	800b332 <__kernel_rem_pio2+0x3c2>
 800b36a:	3d01      	subs	r5, #1
 800b36c:	e741      	b.n	800b1f2 <__kernel_rem_pio2+0x282>
 800b36e:	f1ca 0000 	rsb	r0, sl, #0
 800b372:	ec47 6b10 	vmov	d0, r6, r7
 800b376:	f000 fa83 	bl	800b880 <scalbn>
 800b37a:	ec57 6b10 	vmov	r6, r7, d0
 800b37e:	2200      	movs	r2, #0
 800b380:	4b99      	ldr	r3, [pc, #612]	; (800b5e8 <__kernel_rem_pio2+0x678>)
 800b382:	ee10 0a10 	vmov	r0, s0
 800b386:	4639      	mov	r1, r7
 800b388:	f7f5 fb80 	bl	8000a8c <__aeabi_dcmpge>
 800b38c:	b1f8      	cbz	r0, 800b3ce <__kernel_rem_pio2+0x45e>
 800b38e:	2200      	movs	r2, #0
 800b390:	4b96      	ldr	r3, [pc, #600]	; (800b5ec <__kernel_rem_pio2+0x67c>)
 800b392:	4630      	mov	r0, r6
 800b394:	4639      	mov	r1, r7
 800b396:	f7f5 f8f3 	bl	8000580 <__aeabi_dmul>
 800b39a:	f7f5 fb8b 	bl	8000ab4 <__aeabi_d2iz>
 800b39e:	4680      	mov	r8, r0
 800b3a0:	f7f5 f884 	bl	80004ac <__aeabi_i2d>
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	4b90      	ldr	r3, [pc, #576]	; (800b5e8 <__kernel_rem_pio2+0x678>)
 800b3a8:	f7f5 f8ea 	bl	8000580 <__aeabi_dmul>
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	4639      	mov	r1, r7
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f7f4 ff2c 	bl	8000210 <__aeabi_dsub>
 800b3b8:	f7f5 fb7c 	bl	8000ab4 <__aeabi_d2iz>
 800b3bc:	1c65      	adds	r5, r4, #1
 800b3be:	ab0e      	add	r3, sp, #56	; 0x38
 800b3c0:	f10a 0a18 	add.w	sl, sl, #24
 800b3c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b3c8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b3cc:	e719      	b.n	800b202 <__kernel_rem_pio2+0x292>
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	4639      	mov	r1, r7
 800b3d2:	f7f5 fb6f 	bl	8000ab4 <__aeabi_d2iz>
 800b3d6:	ab0e      	add	r3, sp, #56	; 0x38
 800b3d8:	4625      	mov	r5, r4
 800b3da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b3de:	e710      	b.n	800b202 <__kernel_rem_pio2+0x292>
 800b3e0:	ab0e      	add	r3, sp, #56	; 0x38
 800b3e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b3e6:	f7f5 f861 	bl	80004ac <__aeabi_i2d>
 800b3ea:	4642      	mov	r2, r8
 800b3ec:	464b      	mov	r3, r9
 800b3ee:	f7f5 f8c7 	bl	8000580 <__aeabi_dmul>
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b3f8:	4b7c      	ldr	r3, [pc, #496]	; (800b5ec <__kernel_rem_pio2+0x67c>)
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	4649      	mov	r1, r9
 800b3fe:	f7f5 f8bf 	bl	8000580 <__aeabi_dmul>
 800b402:	3f01      	subs	r7, #1
 800b404:	4680      	mov	r8, r0
 800b406:	4689      	mov	r9, r1
 800b408:	e708      	b.n	800b21c <__kernel_rem_pio2+0x2ac>
 800b40a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800b416:	f7f5 f8b3 	bl	8000580 <__aeabi_dmul>
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	4640      	mov	r0, r8
 800b420:	4649      	mov	r1, r9
 800b422:	f7f4 fef7 	bl	8000214 <__adddf3>
 800b426:	3701      	adds	r7, #1
 800b428:	4680      	mov	r8, r0
 800b42a:	4689      	mov	r9, r1
 800b42c:	9b04      	ldr	r3, [sp, #16]
 800b42e:	429f      	cmp	r7, r3
 800b430:	dc01      	bgt.n	800b436 <__kernel_rem_pio2+0x4c6>
 800b432:	45ba      	cmp	sl, r7
 800b434:	dae9      	bge.n	800b40a <__kernel_rem_pio2+0x49a>
 800b436:	ab4a      	add	r3, sp, #296	; 0x128
 800b438:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b43c:	e9c3 8900 	strd	r8, r9, [r3]
 800b440:	f10a 0a01 	add.w	sl, sl, #1
 800b444:	3e08      	subs	r6, #8
 800b446:	e6f0      	b.n	800b22a <__kernel_rem_pio2+0x2ba>
 800b448:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	d85b      	bhi.n	800b506 <__kernel_rem_pio2+0x596>
 800b44e:	e8df f003 	tbb	[pc, r3]
 800b452:	264a      	.short	0x264a
 800b454:	0226      	.short	0x0226
 800b456:	ab9a      	add	r3, sp, #616	; 0x268
 800b458:	441c      	add	r4, r3
 800b45a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b45e:	46a2      	mov	sl, r4
 800b460:	46ab      	mov	fp, r5
 800b462:	f1bb 0f00 	cmp.w	fp, #0
 800b466:	dc6c      	bgt.n	800b542 <__kernel_rem_pio2+0x5d2>
 800b468:	46a2      	mov	sl, r4
 800b46a:	46ab      	mov	fp, r5
 800b46c:	f1bb 0f01 	cmp.w	fp, #1
 800b470:	f300 8086 	bgt.w	800b580 <__kernel_rem_pio2+0x610>
 800b474:	2000      	movs	r0, #0
 800b476:	2100      	movs	r1, #0
 800b478:	2d01      	cmp	r5, #1
 800b47a:	f300 80a0 	bgt.w	800b5be <__kernel_rem_pio2+0x64e>
 800b47e:	9b02      	ldr	r3, [sp, #8]
 800b480:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b484:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f040 809e 	bne.w	800b5ca <__kernel_rem_pio2+0x65a>
 800b48e:	9b01      	ldr	r3, [sp, #4]
 800b490:	e9c3 7800 	strd	r7, r8, [r3]
 800b494:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b498:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b49c:	e033      	b.n	800b506 <__kernel_rem_pio2+0x596>
 800b49e:	3408      	adds	r4, #8
 800b4a0:	ab4a      	add	r3, sp, #296	; 0x128
 800b4a2:	441c      	add	r4, r3
 800b4a4:	462e      	mov	r6, r5
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	2e00      	cmp	r6, #0
 800b4ac:	da3a      	bge.n	800b524 <__kernel_rem_pio2+0x5b4>
 800b4ae:	9b02      	ldr	r3, [sp, #8]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d03d      	beq.n	800b530 <__kernel_rem_pio2+0x5c0>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4ba:	9c01      	ldr	r4, [sp, #4]
 800b4bc:	e9c4 2300 	strd	r2, r3, [r4]
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b4c8:	f7f4 fea2 	bl	8000210 <__aeabi_dsub>
 800b4cc:	ae4c      	add	r6, sp, #304	; 0x130
 800b4ce:	2401      	movs	r4, #1
 800b4d0:	42a5      	cmp	r5, r4
 800b4d2:	da30      	bge.n	800b536 <__kernel_rem_pio2+0x5c6>
 800b4d4:	9b02      	ldr	r3, [sp, #8]
 800b4d6:	b113      	cbz	r3, 800b4de <__kernel_rem_pio2+0x56e>
 800b4d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4dc:	4619      	mov	r1, r3
 800b4de:	9b01      	ldr	r3, [sp, #4]
 800b4e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b4e4:	e00f      	b.n	800b506 <__kernel_rem_pio2+0x596>
 800b4e6:	ab9a      	add	r3, sp, #616	; 0x268
 800b4e8:	441c      	add	r4, r3
 800b4ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	2d00      	cmp	r5, #0
 800b4f4:	da10      	bge.n	800b518 <__kernel_rem_pio2+0x5a8>
 800b4f6:	9b02      	ldr	r3, [sp, #8]
 800b4f8:	b113      	cbz	r3, 800b500 <__kernel_rem_pio2+0x590>
 800b4fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4fe:	4619      	mov	r1, r3
 800b500:	9b01      	ldr	r3, [sp, #4]
 800b502:	e9c3 0100 	strd	r0, r1, [r3]
 800b506:	9b06      	ldr	r3, [sp, #24]
 800b508:	f003 0007 	and.w	r0, r3, #7
 800b50c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b510:	ecbd 8b02 	vpop	{d8}
 800b514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b518:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b51c:	f7f4 fe7a 	bl	8000214 <__adddf3>
 800b520:	3d01      	subs	r5, #1
 800b522:	e7e6      	b.n	800b4f2 <__kernel_rem_pio2+0x582>
 800b524:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b528:	f7f4 fe74 	bl	8000214 <__adddf3>
 800b52c:	3e01      	subs	r6, #1
 800b52e:	e7bc      	b.n	800b4aa <__kernel_rem_pio2+0x53a>
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	e7c1      	b.n	800b4ba <__kernel_rem_pio2+0x54a>
 800b536:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b53a:	f7f4 fe6b 	bl	8000214 <__adddf3>
 800b53e:	3401      	adds	r4, #1
 800b540:	e7c6      	b.n	800b4d0 <__kernel_rem_pio2+0x560>
 800b542:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800b546:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b54a:	4640      	mov	r0, r8
 800b54c:	ec53 2b17 	vmov	r2, r3, d7
 800b550:	4649      	mov	r1, r9
 800b552:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b556:	f7f4 fe5d 	bl	8000214 <__adddf3>
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	4606      	mov	r6, r0
 800b560:	460f      	mov	r7, r1
 800b562:	4640      	mov	r0, r8
 800b564:	4649      	mov	r1, r9
 800b566:	f7f4 fe53 	bl	8000210 <__aeabi_dsub>
 800b56a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b56e:	f7f4 fe51 	bl	8000214 <__adddf3>
 800b572:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b576:	e9ca 0100 	strd	r0, r1, [sl]
 800b57a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800b57e:	e770      	b.n	800b462 <__kernel_rem_pio2+0x4f2>
 800b580:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800b584:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b588:	4630      	mov	r0, r6
 800b58a:	ec53 2b17 	vmov	r2, r3, d7
 800b58e:	4639      	mov	r1, r7
 800b590:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b594:	f7f4 fe3e 	bl	8000214 <__adddf3>
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	4680      	mov	r8, r0
 800b59e:	4689      	mov	r9, r1
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	4639      	mov	r1, r7
 800b5a4:	f7f4 fe34 	bl	8000210 <__aeabi_dsub>
 800b5a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5ac:	f7f4 fe32 	bl	8000214 <__adddf3>
 800b5b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b5b4:	e9ca 0100 	strd	r0, r1, [sl]
 800b5b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800b5bc:	e756      	b.n	800b46c <__kernel_rem_pio2+0x4fc>
 800b5be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b5c2:	f7f4 fe27 	bl	8000214 <__adddf3>
 800b5c6:	3d01      	subs	r5, #1
 800b5c8:	e756      	b.n	800b478 <__kernel_rem_pio2+0x508>
 800b5ca:	9b01      	ldr	r3, [sp, #4]
 800b5cc:	9a01      	ldr	r2, [sp, #4]
 800b5ce:	601f      	str	r7, [r3, #0]
 800b5d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b5d4:	605c      	str	r4, [r3, #4]
 800b5d6:	609d      	str	r5, [r3, #8]
 800b5d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b5dc:	60d3      	str	r3, [r2, #12]
 800b5de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5e2:	6110      	str	r0, [r2, #16]
 800b5e4:	6153      	str	r3, [r2, #20]
 800b5e6:	e78e      	b.n	800b506 <__kernel_rem_pio2+0x596>
 800b5e8:	41700000 	.word	0x41700000
 800b5ec:	3e700000 	.word	0x3e700000

0800b5f0 <__kernel_sin>:
 800b5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f4:	ec55 4b10 	vmov	r4, r5, d0
 800b5f8:	b085      	sub	sp, #20
 800b5fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b5fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b602:	ed8d 1b00 	vstr	d1, [sp]
 800b606:	9002      	str	r0, [sp, #8]
 800b608:	da06      	bge.n	800b618 <__kernel_sin+0x28>
 800b60a:	ee10 0a10 	vmov	r0, s0
 800b60e:	4629      	mov	r1, r5
 800b610:	f7f5 fa50 	bl	8000ab4 <__aeabi_d2iz>
 800b614:	2800      	cmp	r0, #0
 800b616:	d051      	beq.n	800b6bc <__kernel_sin+0xcc>
 800b618:	4622      	mov	r2, r4
 800b61a:	462b      	mov	r3, r5
 800b61c:	4620      	mov	r0, r4
 800b61e:	4629      	mov	r1, r5
 800b620:	f7f4 ffae 	bl	8000580 <__aeabi_dmul>
 800b624:	4682      	mov	sl, r0
 800b626:	468b      	mov	fp, r1
 800b628:	4602      	mov	r2, r0
 800b62a:	460b      	mov	r3, r1
 800b62c:	4620      	mov	r0, r4
 800b62e:	4629      	mov	r1, r5
 800b630:	f7f4 ffa6 	bl	8000580 <__aeabi_dmul>
 800b634:	a341      	add	r3, pc, #260	; (adr r3, 800b73c <__kernel_sin+0x14c>)
 800b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63a:	4680      	mov	r8, r0
 800b63c:	4689      	mov	r9, r1
 800b63e:	4650      	mov	r0, sl
 800b640:	4659      	mov	r1, fp
 800b642:	f7f4 ff9d 	bl	8000580 <__aeabi_dmul>
 800b646:	a33f      	add	r3, pc, #252	; (adr r3, 800b744 <__kernel_sin+0x154>)
 800b648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64c:	f7f4 fde0 	bl	8000210 <__aeabi_dsub>
 800b650:	4652      	mov	r2, sl
 800b652:	465b      	mov	r3, fp
 800b654:	f7f4 ff94 	bl	8000580 <__aeabi_dmul>
 800b658:	a33c      	add	r3, pc, #240	; (adr r3, 800b74c <__kernel_sin+0x15c>)
 800b65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65e:	f7f4 fdd9 	bl	8000214 <__adddf3>
 800b662:	4652      	mov	r2, sl
 800b664:	465b      	mov	r3, fp
 800b666:	f7f4 ff8b 	bl	8000580 <__aeabi_dmul>
 800b66a:	a33a      	add	r3, pc, #232	; (adr r3, 800b754 <__kernel_sin+0x164>)
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	f7f4 fdce 	bl	8000210 <__aeabi_dsub>
 800b674:	4652      	mov	r2, sl
 800b676:	465b      	mov	r3, fp
 800b678:	f7f4 ff82 	bl	8000580 <__aeabi_dmul>
 800b67c:	a337      	add	r3, pc, #220	; (adr r3, 800b75c <__kernel_sin+0x16c>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	f7f4 fdc7 	bl	8000214 <__adddf3>
 800b686:	9b02      	ldr	r3, [sp, #8]
 800b688:	4606      	mov	r6, r0
 800b68a:	460f      	mov	r7, r1
 800b68c:	b9db      	cbnz	r3, 800b6c6 <__kernel_sin+0xd6>
 800b68e:	4602      	mov	r2, r0
 800b690:	460b      	mov	r3, r1
 800b692:	4650      	mov	r0, sl
 800b694:	4659      	mov	r1, fp
 800b696:	f7f4 ff73 	bl	8000580 <__aeabi_dmul>
 800b69a:	a325      	add	r3, pc, #148	; (adr r3, 800b730 <__kernel_sin+0x140>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f7f4 fdb6 	bl	8000210 <__aeabi_dsub>
 800b6a4:	4642      	mov	r2, r8
 800b6a6:	464b      	mov	r3, r9
 800b6a8:	f7f4 ff6a 	bl	8000580 <__aeabi_dmul>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	f7f4 fdae 	bl	8000214 <__adddf3>
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	460d      	mov	r5, r1
 800b6bc:	ec45 4b10 	vmov	d0, r4, r5
 800b6c0:	b005      	add	sp, #20
 800b6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	4b1b      	ldr	r3, [pc, #108]	; (800b738 <__kernel_sin+0x148>)
 800b6ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6ce:	f7f4 ff57 	bl	8000580 <__aeabi_dmul>
 800b6d2:	4632      	mov	r2, r6
 800b6d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6d8:	463b      	mov	r3, r7
 800b6da:	4640      	mov	r0, r8
 800b6dc:	4649      	mov	r1, r9
 800b6de:	f7f4 ff4f 	bl	8000580 <__aeabi_dmul>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6ea:	f7f4 fd91 	bl	8000210 <__aeabi_dsub>
 800b6ee:	4652      	mov	r2, sl
 800b6f0:	465b      	mov	r3, fp
 800b6f2:	f7f4 ff45 	bl	8000580 <__aeabi_dmul>
 800b6f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6fa:	f7f4 fd89 	bl	8000210 <__aeabi_dsub>
 800b6fe:	a30c      	add	r3, pc, #48	; (adr r3, 800b730 <__kernel_sin+0x140>)
 800b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b704:	4606      	mov	r6, r0
 800b706:	460f      	mov	r7, r1
 800b708:	4640      	mov	r0, r8
 800b70a:	4649      	mov	r1, r9
 800b70c:	f7f4 ff38 	bl	8000580 <__aeabi_dmul>
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	4630      	mov	r0, r6
 800b716:	4639      	mov	r1, r7
 800b718:	f7f4 fd7c 	bl	8000214 <__adddf3>
 800b71c:	4602      	mov	r2, r0
 800b71e:	460b      	mov	r3, r1
 800b720:	4620      	mov	r0, r4
 800b722:	4629      	mov	r1, r5
 800b724:	f7f4 fd74 	bl	8000210 <__aeabi_dsub>
 800b728:	e7c6      	b.n	800b6b8 <__kernel_sin+0xc8>
 800b72a:	bf00      	nop
 800b72c:	f3af 8000 	nop.w
 800b730:	55555549 	.word	0x55555549
 800b734:	3fc55555 	.word	0x3fc55555
 800b738:	3fe00000 	.word	0x3fe00000
 800b73c:	5acfd57c 	.word	0x5acfd57c
 800b740:	3de5d93a 	.word	0x3de5d93a
 800b744:	8a2b9ceb 	.word	0x8a2b9ceb
 800b748:	3e5ae5e6 	.word	0x3e5ae5e6
 800b74c:	57b1fe7d 	.word	0x57b1fe7d
 800b750:	3ec71de3 	.word	0x3ec71de3
 800b754:	19c161d5 	.word	0x19c161d5
 800b758:	3f2a01a0 	.word	0x3f2a01a0
 800b75c:	1110f8a6 	.word	0x1110f8a6
 800b760:	3f811111 	.word	0x3f811111

0800b764 <fabs>:
 800b764:	ec51 0b10 	vmov	r0, r1, d0
 800b768:	ee10 2a10 	vmov	r2, s0
 800b76c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b770:	ec43 2b10 	vmov	d0, r2, r3
 800b774:	4770      	bx	lr
	...

0800b778 <floor>:
 800b778:	ec51 0b10 	vmov	r0, r1, d0
 800b77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b780:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b784:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b788:	2e13      	cmp	r6, #19
 800b78a:	460c      	mov	r4, r1
 800b78c:	ee10 5a10 	vmov	r5, s0
 800b790:	4680      	mov	r8, r0
 800b792:	dc34      	bgt.n	800b7fe <floor+0x86>
 800b794:	2e00      	cmp	r6, #0
 800b796:	da16      	bge.n	800b7c6 <floor+0x4e>
 800b798:	a335      	add	r3, pc, #212	; (adr r3, 800b870 <floor+0xf8>)
 800b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79e:	f7f4 fd39 	bl	8000214 <__adddf3>
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f7f5 f97b 	bl	8000aa0 <__aeabi_dcmpgt>
 800b7aa:	b148      	cbz	r0, 800b7c0 <floor+0x48>
 800b7ac:	2c00      	cmp	r4, #0
 800b7ae:	da59      	bge.n	800b864 <floor+0xec>
 800b7b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b7b4:	4a30      	ldr	r2, [pc, #192]	; (800b878 <floor+0x100>)
 800b7b6:	432b      	orrs	r3, r5
 800b7b8:	2500      	movs	r5, #0
 800b7ba:	42ab      	cmp	r3, r5
 800b7bc:	bf18      	it	ne
 800b7be:	4614      	movne	r4, r2
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	e025      	b.n	800b812 <floor+0x9a>
 800b7c6:	4f2d      	ldr	r7, [pc, #180]	; (800b87c <floor+0x104>)
 800b7c8:	4137      	asrs	r7, r6
 800b7ca:	ea01 0307 	and.w	r3, r1, r7
 800b7ce:	4303      	orrs	r3, r0
 800b7d0:	d01f      	beq.n	800b812 <floor+0x9a>
 800b7d2:	a327      	add	r3, pc, #156	; (adr r3, 800b870 <floor+0xf8>)
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	f7f4 fd1c 	bl	8000214 <__adddf3>
 800b7dc:	2200      	movs	r2, #0
 800b7de:	2300      	movs	r3, #0
 800b7e0:	f7f5 f95e 	bl	8000aa0 <__aeabi_dcmpgt>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d0eb      	beq.n	800b7c0 <floor+0x48>
 800b7e8:	2c00      	cmp	r4, #0
 800b7ea:	bfbe      	ittt	lt
 800b7ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b7f0:	fa43 f606 	asrlt.w	r6, r3, r6
 800b7f4:	19a4      	addlt	r4, r4, r6
 800b7f6:	ea24 0407 	bic.w	r4, r4, r7
 800b7fa:	2500      	movs	r5, #0
 800b7fc:	e7e0      	b.n	800b7c0 <floor+0x48>
 800b7fe:	2e33      	cmp	r6, #51	; 0x33
 800b800:	dd0b      	ble.n	800b81a <floor+0xa2>
 800b802:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b806:	d104      	bne.n	800b812 <floor+0x9a>
 800b808:	ee10 2a10 	vmov	r2, s0
 800b80c:	460b      	mov	r3, r1
 800b80e:	f7f4 fd01 	bl	8000214 <__adddf3>
 800b812:	ec41 0b10 	vmov	d0, r0, r1
 800b816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b81a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b81e:	f04f 33ff 	mov.w	r3, #4294967295
 800b822:	fa23 f707 	lsr.w	r7, r3, r7
 800b826:	4207      	tst	r7, r0
 800b828:	d0f3      	beq.n	800b812 <floor+0x9a>
 800b82a:	a311      	add	r3, pc, #68	; (adr r3, 800b870 <floor+0xf8>)
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	f7f4 fcf0 	bl	8000214 <__adddf3>
 800b834:	2200      	movs	r2, #0
 800b836:	2300      	movs	r3, #0
 800b838:	f7f5 f932 	bl	8000aa0 <__aeabi_dcmpgt>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	d0bf      	beq.n	800b7c0 <floor+0x48>
 800b840:	2c00      	cmp	r4, #0
 800b842:	da02      	bge.n	800b84a <floor+0xd2>
 800b844:	2e14      	cmp	r6, #20
 800b846:	d103      	bne.n	800b850 <floor+0xd8>
 800b848:	3401      	adds	r4, #1
 800b84a:	ea25 0507 	bic.w	r5, r5, r7
 800b84e:	e7b7      	b.n	800b7c0 <floor+0x48>
 800b850:	2301      	movs	r3, #1
 800b852:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b856:	fa03 f606 	lsl.w	r6, r3, r6
 800b85a:	4435      	add	r5, r6
 800b85c:	4545      	cmp	r5, r8
 800b85e:	bf38      	it	cc
 800b860:	18e4      	addcc	r4, r4, r3
 800b862:	e7f2      	b.n	800b84a <floor+0xd2>
 800b864:	2500      	movs	r5, #0
 800b866:	462c      	mov	r4, r5
 800b868:	e7aa      	b.n	800b7c0 <floor+0x48>
 800b86a:	bf00      	nop
 800b86c:	f3af 8000 	nop.w
 800b870:	8800759c 	.word	0x8800759c
 800b874:	7e37e43c 	.word	0x7e37e43c
 800b878:	bff00000 	.word	0xbff00000
 800b87c:	000fffff 	.word	0x000fffff

0800b880 <scalbn>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	ec55 4b10 	vmov	r4, r5, d0
 800b886:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b88a:	4606      	mov	r6, r0
 800b88c:	462b      	mov	r3, r5
 800b88e:	b9aa      	cbnz	r2, 800b8bc <scalbn+0x3c>
 800b890:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b894:	4323      	orrs	r3, r4
 800b896:	d03b      	beq.n	800b910 <scalbn+0x90>
 800b898:	4b31      	ldr	r3, [pc, #196]	; (800b960 <scalbn+0xe0>)
 800b89a:	4629      	mov	r1, r5
 800b89c:	2200      	movs	r2, #0
 800b89e:	ee10 0a10 	vmov	r0, s0
 800b8a2:	f7f4 fe6d 	bl	8000580 <__aeabi_dmul>
 800b8a6:	4b2f      	ldr	r3, [pc, #188]	; (800b964 <scalbn+0xe4>)
 800b8a8:	429e      	cmp	r6, r3
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	460d      	mov	r5, r1
 800b8ae:	da12      	bge.n	800b8d6 <scalbn+0x56>
 800b8b0:	a327      	add	r3, pc, #156	; (adr r3, 800b950 <scalbn+0xd0>)
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	f7f4 fe63 	bl	8000580 <__aeabi_dmul>
 800b8ba:	e009      	b.n	800b8d0 <scalbn+0x50>
 800b8bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b8c0:	428a      	cmp	r2, r1
 800b8c2:	d10c      	bne.n	800b8de <scalbn+0x5e>
 800b8c4:	ee10 2a10 	vmov	r2, s0
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	f7f4 fca2 	bl	8000214 <__adddf3>
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	460d      	mov	r5, r1
 800b8d4:	e01c      	b.n	800b910 <scalbn+0x90>
 800b8d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b8da:	460b      	mov	r3, r1
 800b8dc:	3a36      	subs	r2, #54	; 0x36
 800b8de:	4432      	add	r2, r6
 800b8e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b8e4:	428a      	cmp	r2, r1
 800b8e6:	dd0b      	ble.n	800b900 <scalbn+0x80>
 800b8e8:	ec45 4b11 	vmov	d1, r4, r5
 800b8ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b958 <scalbn+0xd8>
 800b8f0:	f000 f83c 	bl	800b96c <copysign>
 800b8f4:	a318      	add	r3, pc, #96	; (adr r3, 800b958 <scalbn+0xd8>)
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	ec51 0b10 	vmov	r0, r1, d0
 800b8fe:	e7da      	b.n	800b8b6 <scalbn+0x36>
 800b900:	2a00      	cmp	r2, #0
 800b902:	dd08      	ble.n	800b916 <scalbn+0x96>
 800b904:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b908:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b90c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b910:	ec45 4b10 	vmov	d0, r4, r5
 800b914:	bd70      	pop	{r4, r5, r6, pc}
 800b916:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b91a:	da0d      	bge.n	800b938 <scalbn+0xb8>
 800b91c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b920:	429e      	cmp	r6, r3
 800b922:	ec45 4b11 	vmov	d1, r4, r5
 800b926:	dce1      	bgt.n	800b8ec <scalbn+0x6c>
 800b928:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b950 <scalbn+0xd0>
 800b92c:	f000 f81e 	bl	800b96c <copysign>
 800b930:	a307      	add	r3, pc, #28	; (adr r3, 800b950 <scalbn+0xd0>)
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	e7e0      	b.n	800b8fa <scalbn+0x7a>
 800b938:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b93c:	3236      	adds	r2, #54	; 0x36
 800b93e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b942:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b946:	4620      	mov	r0, r4
 800b948:	4629      	mov	r1, r5
 800b94a:	2200      	movs	r2, #0
 800b94c:	4b06      	ldr	r3, [pc, #24]	; (800b968 <scalbn+0xe8>)
 800b94e:	e7b2      	b.n	800b8b6 <scalbn+0x36>
 800b950:	c2f8f359 	.word	0xc2f8f359
 800b954:	01a56e1f 	.word	0x01a56e1f
 800b958:	8800759c 	.word	0x8800759c
 800b95c:	7e37e43c 	.word	0x7e37e43c
 800b960:	43500000 	.word	0x43500000
 800b964:	ffff3cb0 	.word	0xffff3cb0
 800b968:	3c900000 	.word	0x3c900000

0800b96c <copysign>:
 800b96c:	ec51 0b10 	vmov	r0, r1, d0
 800b970:	ee11 0a90 	vmov	r0, s3
 800b974:	ee10 2a10 	vmov	r2, s0
 800b978:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b97c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b980:	ea41 0300 	orr.w	r3, r1, r0
 800b984:	ec43 2b10 	vmov	d0, r2, r3
 800b988:	4770      	bx	lr
	...

0800b98c <_init>:
 800b98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98e:	bf00      	nop
 800b990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b992:	bc08      	pop	{r3}
 800b994:	469e      	mov	lr, r3
 800b996:	4770      	bx	lr

0800b998 <_fini>:
 800b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99a:	bf00      	nop
 800b99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99e:	bc08      	pop	{r3}
 800b9a0:	469e      	mov	lr, r3
 800b9a2:	4770      	bx	lr
