
sentryTF2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008094  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08008260  08008260  00018260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008460  08008460  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08008460  08008460  00018460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008468  08008468  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008468  08008468  00018468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800846c  0800846c  0001846c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000014  08008484  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08008484  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fb1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ce  00000000  00000000  00031ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  000343c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  00035450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026682  00000000  00000000  00036400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122ef  00000000  00000000  0005ca82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2ca1  00000000  00000000  0006ed71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161a12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a7c  00000000  00000000  00161a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008244 	.word	0x08008244

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	08008244 	.word	0x08008244

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <__aeabi_drsub>:
 800021c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000220:	e002      	b.n	8000228 <__adddf3>
 8000222:	bf00      	nop

08000224 <__aeabi_dsub>:
 8000224:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000228 <__adddf3>:
 8000228:	b530      	push	{r4, r5, lr}
 800022a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000232:	ea94 0f05 	teq	r4, r5
 8000236:	bf08      	it	eq
 8000238:	ea90 0f02 	teqeq	r0, r2
 800023c:	bf1f      	itttt	ne
 800023e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000242:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000246:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024e:	f000 80e2 	beq.w	8000416 <__adddf3+0x1ee>
 8000252:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000256:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025a:	bfb8      	it	lt
 800025c:	426d      	neglt	r5, r5
 800025e:	dd0c      	ble.n	800027a <__adddf3+0x52>
 8000260:	442c      	add	r4, r5
 8000262:	ea80 0202 	eor.w	r2, r0, r2
 8000266:	ea81 0303 	eor.w	r3, r1, r3
 800026a:	ea82 0000 	eor.w	r0, r2, r0
 800026e:	ea83 0101 	eor.w	r1, r3, r1
 8000272:	ea80 0202 	eor.w	r2, r0, r2
 8000276:	ea81 0303 	eor.w	r3, r1, r3
 800027a:	2d36      	cmp	r5, #54	; 0x36
 800027c:	bf88      	it	hi
 800027e:	bd30      	pophi	{r4, r5, pc}
 8000280:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000284:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000288:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800028c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x70>
 8000292:	4240      	negs	r0, r0
 8000294:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000298:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800029c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x84>
 80002a6:	4252      	negs	r2, r2
 80002a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ac:	ea94 0f05 	teq	r4, r5
 80002b0:	f000 80a7 	beq.w	8000402 <__adddf3+0x1da>
 80002b4:	f1a4 0401 	sub.w	r4, r4, #1
 80002b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002bc:	db0d      	blt.n	80002da <__adddf3+0xb2>
 80002be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c2:	fa22 f205 	lsr.w	r2, r2, r5
 80002c6:	1880      	adds	r0, r0, r2
 80002c8:	f141 0100 	adc.w	r1, r1, #0
 80002cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d0:	1880      	adds	r0, r0, r2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	4159      	adcs	r1, r3
 80002d8:	e00e      	b.n	80002f8 <__adddf3+0xd0>
 80002da:	f1a5 0520 	sub.w	r5, r5, #32
 80002de:	f10e 0e20 	add.w	lr, lr, #32
 80002e2:	2a01      	cmp	r2, #1
 80002e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e8:	bf28      	it	cs
 80002ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	18c0      	adds	r0, r0, r3
 80002f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002fc:	d507      	bpl.n	800030e <__adddf3+0xe6>
 80002fe:	f04f 0e00 	mov.w	lr, #0
 8000302:	f1dc 0c00 	rsbs	ip, ip, #0
 8000306:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030a:	eb6e 0101 	sbc.w	r1, lr, r1
 800030e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000312:	d31b      	bcc.n	800034c <__adddf3+0x124>
 8000314:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000318:	d30c      	bcc.n	8000334 <__adddf3+0x10c>
 800031a:	0849      	lsrs	r1, r1, #1
 800031c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000320:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000324:	f104 0401 	add.w	r4, r4, #1
 8000328:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800032c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000330:	f080 809a 	bcs.w	8000468 <__adddf3+0x240>
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	bf08      	it	eq
 800033a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033e:	f150 0000 	adcs.w	r0, r0, #0
 8000342:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000346:	ea41 0105 	orr.w	r1, r1, r5
 800034a:	bd30      	pop	{r4, r5, pc}
 800034c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000350:	4140      	adcs	r0, r0
 8000352:	eb41 0101 	adc.w	r1, r1, r1
 8000356:	3c01      	subs	r4, #1
 8000358:	bf28      	it	cs
 800035a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035e:	d2e9      	bcs.n	8000334 <__adddf3+0x10c>
 8000360:	f091 0f00 	teq	r1, #0
 8000364:	bf04      	itt	eq
 8000366:	4601      	moveq	r1, r0
 8000368:	2000      	moveq	r0, #0
 800036a:	fab1 f381 	clz	r3, r1
 800036e:	bf08      	it	eq
 8000370:	3320      	addeq	r3, #32
 8000372:	f1a3 030b 	sub.w	r3, r3, #11
 8000376:	f1b3 0220 	subs.w	r2, r3, #32
 800037a:	da0c      	bge.n	8000396 <__adddf3+0x16e>
 800037c:	320c      	adds	r2, #12
 800037e:	dd08      	ble.n	8000392 <__adddf3+0x16a>
 8000380:	f102 0c14 	add.w	ip, r2, #20
 8000384:	f1c2 020c 	rsb	r2, r2, #12
 8000388:	fa01 f00c 	lsl.w	r0, r1, ip
 800038c:	fa21 f102 	lsr.w	r1, r1, r2
 8000390:	e00c      	b.n	80003ac <__adddf3+0x184>
 8000392:	f102 0214 	add.w	r2, r2, #20
 8000396:	bfd8      	it	le
 8000398:	f1c2 0c20 	rsble	ip, r2, #32
 800039c:	fa01 f102 	lsl.w	r1, r1, r2
 80003a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a4:	bfdc      	itt	le
 80003a6:	ea41 010c 	orrle.w	r1, r1, ip
 80003aa:	4090      	lslle	r0, r2
 80003ac:	1ae4      	subs	r4, r4, r3
 80003ae:	bfa2      	ittt	ge
 80003b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b4:	4329      	orrge	r1, r5
 80003b6:	bd30      	popge	{r4, r5, pc}
 80003b8:	ea6f 0404 	mvn.w	r4, r4
 80003bc:	3c1f      	subs	r4, #31
 80003be:	da1c      	bge.n	80003fa <__adddf3+0x1d2>
 80003c0:	340c      	adds	r4, #12
 80003c2:	dc0e      	bgt.n	80003e2 <__adddf3+0x1ba>
 80003c4:	f104 0414 	add.w	r4, r4, #20
 80003c8:	f1c4 0220 	rsb	r2, r4, #32
 80003cc:	fa20 f004 	lsr.w	r0, r0, r4
 80003d0:	fa01 f302 	lsl.w	r3, r1, r2
 80003d4:	ea40 0003 	orr.w	r0, r0, r3
 80003d8:	fa21 f304 	lsr.w	r3, r1, r4
 80003dc:	ea45 0103 	orr.w	r1, r5, r3
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f1c4 040c 	rsb	r4, r4, #12
 80003e6:	f1c4 0220 	rsb	r2, r4, #32
 80003ea:	fa20 f002 	lsr.w	r0, r0, r2
 80003ee:	fa01 f304 	lsl.w	r3, r1, r4
 80003f2:	ea40 0003 	orr.w	r0, r0, r3
 80003f6:	4629      	mov	r1, r5
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	fa21 f004 	lsr.w	r0, r1, r4
 80003fe:	4629      	mov	r1, r5
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	f094 0f00 	teq	r4, #0
 8000406:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040a:	bf06      	itte	eq
 800040c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000410:	3401      	addeq	r4, #1
 8000412:	3d01      	subne	r5, #1
 8000414:	e74e      	b.n	80002b4 <__adddf3+0x8c>
 8000416:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041a:	bf18      	it	ne
 800041c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000420:	d029      	beq.n	8000476 <__adddf3+0x24e>
 8000422:	ea94 0f05 	teq	r4, r5
 8000426:	bf08      	it	eq
 8000428:	ea90 0f02 	teqeq	r0, r2
 800042c:	d005      	beq.n	800043a <__adddf3+0x212>
 800042e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000432:	bf04      	itt	eq
 8000434:	4619      	moveq	r1, r3
 8000436:	4610      	moveq	r0, r2
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea91 0f03 	teq	r1, r3
 800043e:	bf1e      	ittt	ne
 8000440:	2100      	movne	r1, #0
 8000442:	2000      	movne	r0, #0
 8000444:	bd30      	popne	{r4, r5, pc}
 8000446:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044a:	d105      	bne.n	8000458 <__adddf3+0x230>
 800044c:	0040      	lsls	r0, r0, #1
 800044e:	4149      	adcs	r1, r1
 8000450:	bf28      	it	cs
 8000452:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000456:	bd30      	pop	{r4, r5, pc}
 8000458:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800045c:	bf3c      	itt	cc
 800045e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000462:	bd30      	popcc	{r4, r5, pc}
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800046c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047a:	bf1a      	itte	ne
 800047c:	4619      	movne	r1, r3
 800047e:	4610      	movne	r0, r2
 8000480:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000484:	bf1c      	itt	ne
 8000486:	460b      	movne	r3, r1
 8000488:	4602      	movne	r2, r0
 800048a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048e:	bf06      	itte	eq
 8000490:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000494:	ea91 0f03 	teqeq	r1, r3
 8000498:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	bf00      	nop

080004a0 <__aeabi_ui2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f04f 0500 	mov.w	r5, #0
 80004b8:	f04f 0100 	mov.w	r1, #0
 80004bc:	e750      	b.n	8000360 <__adddf3+0x138>
 80004be:	bf00      	nop

080004c0 <__aeabi_i2d>:
 80004c0:	f090 0f00 	teq	r0, #0
 80004c4:	bf04      	itt	eq
 80004c6:	2100      	moveq	r1, #0
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d8:	bf48      	it	mi
 80004da:	4240      	negmi	r0, r0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e73e      	b.n	8000360 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_f2d>:
 80004e4:	0042      	lsls	r2, r0, #1
 80004e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f2:	bf1f      	itttt	ne
 80004f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000500:	4770      	bxne	lr
 8000502:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000506:	bf08      	it	eq
 8000508:	4770      	bxeq	lr
 800050a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050e:	bf04      	itt	eq
 8000510:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 7460 	mov.w	r4, #896	; 0x380
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000524:	e71c      	b.n	8000360 <__adddf3+0x138>
 8000526:	bf00      	nop

08000528 <__aeabi_ul2d>:
 8000528:	ea50 0201 	orrs.w	r2, r0, r1
 800052c:	bf08      	it	eq
 800052e:	4770      	bxeq	lr
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	e00a      	b.n	800054e <__aeabi_l2d+0x16>

08000538 <__aeabi_l2d>:
 8000538:	ea50 0201 	orrs.w	r2, r0, r1
 800053c:	bf08      	it	eq
 800053e:	4770      	bxeq	lr
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000546:	d502      	bpl.n	800054e <__aeabi_l2d+0x16>
 8000548:	4240      	negs	r0, r0
 800054a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000552:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000556:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055a:	f43f aed8 	beq.w	800030e <__adddf3+0xe6>
 800055e:	f04f 0203 	mov.w	r2, #3
 8000562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000566:	bf18      	it	ne
 8000568:	3203      	addne	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000576:	f1c2 0320 	rsb	r3, r2, #32
 800057a:	fa00 fc03 	lsl.w	ip, r0, r3
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 fe03 	lsl.w	lr, r1, r3
 8000586:	ea40 000e 	orr.w	r0, r0, lr
 800058a:	fa21 f102 	lsr.w	r1, r1, r2
 800058e:	4414      	add	r4, r2
 8000590:	e6bd      	b.n	800030e <__adddf3+0xe6>
 8000592:	bf00      	nop

08000594 <__aeabi_dmul>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a2:	bf1d      	ittte	ne
 80005a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a8:	ea94 0f0c 	teqne	r4, ip
 80005ac:	ea95 0f0c 	teqne	r5, ip
 80005b0:	f000 f8de 	bleq	8000770 <__aeabi_dmul+0x1dc>
 80005b4:	442c      	add	r4, r5
 80005b6:	ea81 0603 	eor.w	r6, r1, r3
 80005ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c6:	bf18      	it	ne
 80005c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d4:	d038      	beq.n	8000648 <__aeabi_dmul+0xb4>
 80005d6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ea:	f04f 0600 	mov.w	r6, #0
 80005ee:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f2:	f09c 0f00 	teq	ip, #0
 80005f6:	bf18      	it	ne
 80005f8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000600:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000604:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000608:	d204      	bcs.n	8000614 <__aeabi_dmul+0x80>
 800060a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060e:	416d      	adcs	r5, r5
 8000610:	eb46 0606 	adc.w	r6, r6, r6
 8000614:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000618:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800061c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000620:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000624:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000628:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800062c:	bf88      	it	hi
 800062e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000632:	d81e      	bhi.n	8000672 <__aeabi_dmul+0xde>
 8000634:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063e:	f150 0000 	adcs.w	r0, r0, #0
 8000642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800064c:	ea46 0101 	orr.w	r1, r6, r1
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	ea81 0103 	eor.w	r1, r1, r3
 8000658:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800065c:	bfc2      	ittt	gt
 800065e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000662:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000666:	bd70      	popgt	{r4, r5, r6, pc}
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f04f 0e00 	mov.w	lr, #0
 8000670:	3c01      	subs	r4, #1
 8000672:	f300 80ab 	bgt.w	80007cc <__aeabi_dmul+0x238>
 8000676:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067a:	bfde      	ittt	le
 800067c:	2000      	movle	r0, #0
 800067e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000682:	bd70      	pople	{r4, r5, r6, pc}
 8000684:	f1c4 0400 	rsb	r4, r4, #0
 8000688:	3c20      	subs	r4, #32
 800068a:	da35      	bge.n	80006f8 <__aeabi_dmul+0x164>
 800068c:	340c      	adds	r4, #12
 800068e:	dc1b      	bgt.n	80006c8 <__aeabi_dmul+0x134>
 8000690:	f104 0414 	add.w	r4, r4, #20
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f305 	lsl.w	r3, r0, r5
 800069c:	fa20 f004 	lsr.w	r0, r0, r4
 80006a0:	fa01 f205 	lsl.w	r2, r1, r5
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	fa21 f604 	lsr.w	r6, r1, r4
 80006b8:	eb42 0106 	adc.w	r1, r2, r6
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 040c 	rsb	r4, r4, #12
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f304 	lsl.w	r3, r0, r4
 80006d4:	fa20 f005 	lsr.w	r0, r0, r5
 80006d8:	fa01 f204 	lsl.w	r2, r1, r4
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	f141 0100 	adc.w	r1, r1, #0
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f205 	lsl.w	r2, r0, r5
 8000700:	ea4e 0e02 	orr.w	lr, lr, r2
 8000704:	fa20 f304 	lsr.w	r3, r0, r4
 8000708:	fa01 f205 	lsl.w	r2, r1, r5
 800070c:	ea43 0302 	orr.w	r3, r3, r2
 8000710:	fa21 f004 	lsr.w	r0, r1, r4
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	fa21 f204 	lsr.w	r2, r1, r4
 800071c:	ea20 0002 	bic.w	r0, r0, r2
 8000720:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f094 0f00 	teq	r4, #0
 8000734:	d10f      	bne.n	8000756 <__aeabi_dmul+0x1c2>
 8000736:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073a:	0040      	lsls	r0, r0, #1
 800073c:	eb41 0101 	adc.w	r1, r1, r1
 8000740:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3c01      	subeq	r4, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1a6>
 800074a:	ea41 0106 	orr.w	r1, r1, r6
 800074e:	f095 0f00 	teq	r5, #0
 8000752:	bf18      	it	ne
 8000754:	4770      	bxne	lr
 8000756:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075a:	0052      	lsls	r2, r2, #1
 800075c:	eb43 0303 	adc.w	r3, r3, r3
 8000760:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000764:	bf08      	it	eq
 8000766:	3d01      	subeq	r5, #1
 8000768:	d0f7      	beq.n	800075a <__aeabi_dmul+0x1c6>
 800076a:	ea43 0306 	orr.w	r3, r3, r6
 800076e:	4770      	bx	lr
 8000770:	ea94 0f0c 	teq	r4, ip
 8000774:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000778:	bf18      	it	ne
 800077a:	ea95 0f0c 	teqne	r5, ip
 800077e:	d00c      	beq.n	800079a <__aeabi_dmul+0x206>
 8000780:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000784:	bf18      	it	ne
 8000786:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078a:	d1d1      	bne.n	8000730 <__aeabi_dmul+0x19c>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079e:	bf06      	itte	eq
 80007a0:	4610      	moveq	r0, r2
 80007a2:	4619      	moveq	r1, r3
 80007a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a8:	d019      	beq.n	80007de <__aeabi_dmul+0x24a>
 80007aa:	ea94 0f0c 	teq	r4, ip
 80007ae:	d102      	bne.n	80007b6 <__aeabi_dmul+0x222>
 80007b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b4:	d113      	bne.n	80007de <__aeabi_dmul+0x24a>
 80007b6:	ea95 0f0c 	teq	r5, ip
 80007ba:	d105      	bne.n	80007c8 <__aeabi_dmul+0x234>
 80007bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c0:	bf1c      	itt	ne
 80007c2:	4610      	movne	r0, r2
 80007c4:	4619      	movne	r1, r3
 80007c6:	d10a      	bne.n	80007de <__aeabi_dmul+0x24a>
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d8:	f04f 0000 	mov.w	r0, #0
 80007dc:	bd70      	pop	{r4, r5, r6, pc}
 80007de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e6:	bd70      	pop	{r4, r5, r6, pc}

080007e8 <__aeabi_ddiv>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f6:	bf1d      	ittte	ne
 80007f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007fc:	ea94 0f0c 	teqne	r4, ip
 8000800:	ea95 0f0c 	teqne	r5, ip
 8000804:	f000 f8a7 	bleq	8000956 <__aeabi_ddiv+0x16e>
 8000808:	eba4 0405 	sub.w	r4, r4, r5
 800080c:	ea81 0e03 	eor.w	lr, r1, r3
 8000810:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000814:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000818:	f000 8088 	beq.w	800092c <__aeabi_ddiv+0x144>
 800081c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000820:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000824:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000828:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800082c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000830:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000834:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000838:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800083c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000840:	429d      	cmp	r5, r3
 8000842:	bf08      	it	eq
 8000844:	4296      	cmpeq	r6, r2
 8000846:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084e:	d202      	bcs.n	8000856 <__aeabi_ddiv+0x6e>
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	1ab6      	subs	r6, r6, r2
 8000858:	eb65 0503 	sbc.w	r5, r5, r3
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000866:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 000c 	orrcs.w	r0, r0, ip
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c8:	d018      	beq.n	80008fc <__aeabi_ddiv+0x114>
 80008ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e6:	d1c0      	bne.n	800086a <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	d10b      	bne.n	8000906 <__aeabi_ddiv+0x11e>
 80008ee:	ea41 0100 	orr.w	r1, r1, r0
 80008f2:	f04f 0000 	mov.w	r0, #0
 80008f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fa:	e7b6      	b.n	800086a <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	bf04      	itt	eq
 8000902:	4301      	orreq	r1, r0
 8000904:	2000      	moveq	r0, #0
 8000906:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090a:	bf88      	it	hi
 800090c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000910:	f63f aeaf 	bhi.w	8000672 <__aeabi_dmul+0xde>
 8000914:	ebb5 0c03 	subs.w	ip, r5, r3
 8000918:	bf04      	itt	eq
 800091a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000922:	f150 0000 	adcs.w	r0, r0, #0
 8000926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092a:	bd70      	pop	{r4, r5, r6, pc}
 800092c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000930:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000934:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000938:	bfc2      	ittt	gt
 800093a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000942:	bd70      	popgt	{r4, r5, r6, pc}
 8000944:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000948:	f04f 0e00 	mov.w	lr, #0
 800094c:	3c01      	subs	r4, #1
 800094e:	e690      	b.n	8000672 <__aeabi_dmul+0xde>
 8000950:	ea45 0e06 	orr.w	lr, r5, r6
 8000954:	e68d      	b.n	8000672 <__aeabi_dmul+0xde>
 8000956:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095a:	ea94 0f0c 	teq	r4, ip
 800095e:	bf08      	it	eq
 8000960:	ea95 0f0c 	teqeq	r5, ip
 8000964:	f43f af3b 	beq.w	80007de <__aeabi_dmul+0x24a>
 8000968:	ea94 0f0c 	teq	r4, ip
 800096c:	d10a      	bne.n	8000984 <__aeabi_ddiv+0x19c>
 800096e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000972:	f47f af34 	bne.w	80007de <__aeabi_dmul+0x24a>
 8000976:	ea95 0f0c 	teq	r5, ip
 800097a:	f47f af25 	bne.w	80007c8 <__aeabi_dmul+0x234>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e72c      	b.n	80007de <__aeabi_dmul+0x24a>
 8000984:	ea95 0f0c 	teq	r5, ip
 8000988:	d106      	bne.n	8000998 <__aeabi_ddiv+0x1b0>
 800098a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098e:	f43f aefd 	beq.w	800078c <__aeabi_dmul+0x1f8>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e722      	b.n	80007de <__aeabi_dmul+0x24a>
 8000998:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800099c:	bf18      	it	ne
 800099e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a2:	f47f aec5 	bne.w	8000730 <__aeabi_dmul+0x19c>
 80009a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009aa:	f47f af0d 	bne.w	80007c8 <__aeabi_dmul+0x234>
 80009ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b2:	f47f aeeb 	bne.w	800078c <__aeabi_dmul+0x1f8>
 80009b6:	e712      	b.n	80007de <__aeabi_dmul+0x24a>

080009b8 <__gedf2>:
 80009b8:	f04f 3cff 	mov.w	ip, #4294967295
 80009bc:	e006      	b.n	80009cc <__cmpdf2+0x4>
 80009be:	bf00      	nop

080009c0 <__ledf2>:
 80009c0:	f04f 0c01 	mov.w	ip, #1
 80009c4:	e002      	b.n	80009cc <__cmpdf2+0x4>
 80009c6:	bf00      	nop

080009c8 <__cmpdf2>:
 80009c8:	f04f 0c01 	mov.w	ip, #1
 80009cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	bf18      	it	ne
 80009de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e2:	d01b      	beq.n	8000a1c <__cmpdf2+0x54>
 80009e4:	b001      	add	sp, #4
 80009e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ea:	bf0c      	ite	eq
 80009ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f0:	ea91 0f03 	teqne	r1, r3
 80009f4:	bf02      	ittt	eq
 80009f6:	ea90 0f02 	teqeq	r0, r2
 80009fa:	2000      	moveq	r0, #0
 80009fc:	4770      	bxeq	lr
 80009fe:	f110 0f00 	cmn.w	r0, #0
 8000a02:	ea91 0f03 	teq	r1, r3
 8000a06:	bf58      	it	pl
 8000a08:	4299      	cmppl	r1, r3
 8000a0a:	bf08      	it	eq
 8000a0c:	4290      	cmpeq	r0, r2
 8000a0e:	bf2c      	ite	cs
 8000a10:	17d8      	asrcs	r0, r3, #31
 8000a12:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a16:	f040 0001 	orr.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__cmpdf2+0x64>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d107      	bne.n	8000a3c <__cmpdf2+0x74>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d1d6      	bne.n	80009e4 <__cmpdf2+0x1c>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d0d3      	beq.n	80009e4 <__cmpdf2+0x1c>
 8000a3c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_cdrcmple>:
 8000a44:	4684      	mov	ip, r0
 8000a46:	4610      	mov	r0, r2
 8000a48:	4662      	mov	r2, ip
 8000a4a:	468c      	mov	ip, r1
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4663      	mov	r3, ip
 8000a50:	e000      	b.n	8000a54 <__aeabi_cdcmpeq>
 8000a52:	bf00      	nop

08000a54 <__aeabi_cdcmpeq>:
 8000a54:	b501      	push	{r0, lr}
 8000a56:	f7ff ffb7 	bl	80009c8 <__cmpdf2>
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	bf48      	it	mi
 8000a5e:	f110 0f00 	cmnmi.w	r0, #0
 8000a62:	bd01      	pop	{r0, pc}

08000a64 <__aeabi_dcmpeq>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff fff4 	bl	8000a54 <__aeabi_cdcmpeq>
 8000a6c:	bf0c      	ite	eq
 8000a6e:	2001      	moveq	r0, #1
 8000a70:	2000      	movne	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmplt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffea 	bl	8000a54 <__aeabi_cdcmpeq>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmple>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffe0 	bl	8000a54 <__aeabi_cdcmpeq>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpge>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffce 	bl	8000a44 <__aeabi_cdrcmple>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpgt>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffc4 	bl	8000a44 <__aeabi_cdrcmple>
 8000abc:	bf34      	ite	cc
 8000abe:	2001      	movcc	r0, #1
 8000ac0:	2000      	movcs	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96e 	b.w	8000e4c <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468c      	mov	ip, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 8083 	bne.w	8000c9e <__udivmoddi4+0x116>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d947      	bls.n	8000c2e <__udivmoddi4+0xa6>
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	b142      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba4:	f1c2 0020 	rsb	r0, r2, #32
 8000ba8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bac:	4091      	lsls	r1, r2
 8000bae:	4097      	lsls	r7, r2
 8000bb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000bc0:	fa1f fe87 	uxth.w	lr, r7
 8000bc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bcc:	fb06 f10e 	mul.w	r1, r6, lr
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bda:	f080 8119 	bcs.w	8000e10 <__udivmoddi4+0x288>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8116 	bls.w	8000e10 <__udivmoddi4+0x288>
 8000be4:	3e02      	subs	r6, #2
 8000be6:	443b      	add	r3, r7
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	f080 8105 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8102 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c18:	eba4 040e 	sub.w	r4, r4, lr
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	b11d      	cbz	r5, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c5 4300 	strd	r4, r3, [r5]
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	b902      	cbnz	r2, 8000c32 <__udivmoddi4+0xaa>
 8000c30:	deff      	udf	#255	; 0xff
 8000c32:	fab2 f282 	clz	r2, r2
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d150      	bne.n	8000cdc <__udivmoddi4+0x154>
 8000c3a:	1bcb      	subs	r3, r1, r7
 8000c3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c40:	fa1f f887 	uxth.w	r8, r7
 8000c44:	2601      	movs	r6, #1
 8000c46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4a:	0c21      	lsrs	r1, r4, #16
 8000c4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb08 f30c 	mul.w	r3, r8, ip
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000c5c:	1879      	adds	r1, r7, r1
 8000c5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0xe2>
 8000c64:	428b      	cmp	r3, r1
 8000c66:	f200 80e9 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000c6a:	4684      	mov	ip, r0
 8000c6c:	1ac9      	subs	r1, r1, r3
 8000c6e:	b2a3      	uxth	r3, r4
 8000c70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c7c:	fb08 f800 	mul.w	r8, r8, r0
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x10c>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x10a>
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	f200 80d9 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000c92:	4618      	mov	r0, r3
 8000c94:	eba4 0408 	sub.w	r4, r4, r8
 8000c98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c9c:	e7bf      	b.n	8000c1e <__udivmoddi4+0x96>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x12e>
 8000ca2:	2d00      	cmp	r5, #0
 8000ca4:	f000 80b1 	beq.w	8000e0a <__udivmoddi4+0x282>
 8000ca8:	2600      	movs	r6, #0
 8000caa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cae:	4630      	mov	r0, r6
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f683 	clz	r6, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d14a      	bne.n	8000d54 <__udivmoddi4+0x1cc>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0x140>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80b8 	bhi.w	8000e38 <__udivmoddi4+0x2b0>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0103 	sbc.w	r1, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	d0a8      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000cd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cda:	e7a5      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ce4:	4097      	lsls	r7, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cee:	40d9      	lsrs	r1, r3
 8000cf0:	4330      	orrs	r0, r6
 8000cf2:	0c03      	lsrs	r3, r0, #16
 8000cf4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cf8:	fa1f f887 	uxth.w	r8, r7
 8000cfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb06 f108 	mul.w	r1, r6, r8
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x19c>
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d16:	f080 808d 	bcs.w	8000e34 <__udivmoddi4+0x2ac>
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	f240 808a 	bls.w	8000e34 <__udivmoddi4+0x2ac>
 8000d20:	3e02      	subs	r6, #2
 8000d22:	443b      	add	r3, r7
 8000d24:	1a5b      	subs	r3, r3, r1
 8000d26:	b281      	uxth	r1, r0
 8000d28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb00 f308 	mul.w	r3, r0, r8
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x1c4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d42:	d273      	bcs.n	8000e2c <__udivmoddi4+0x2a4>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d971      	bls.n	8000e2c <__udivmoddi4+0x2a4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4439      	add	r1, r7
 8000d4c:	1acb      	subs	r3, r1, r3
 8000d4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d52:	e778      	b.n	8000c46 <__udivmoddi4+0xbe>
 8000d54:	f1c6 0c20 	rsb	ip, r6, #32
 8000d58:	fa03 f406 	lsl.w	r4, r3, r6
 8000d5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d60:	431c      	orrs	r4, r3
 8000d62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d66:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d72:	431f      	orrs	r7, r3
 8000d74:	0c3b      	lsrs	r3, r7, #16
 8000d76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7a:	fa1f f884 	uxth.w	r8, r4
 8000d7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d86:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d90:	fa00 f306 	lsl.w	r3, r0, r6
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x220>
 8000d96:	1861      	adds	r1, r4, r1
 8000d98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9c:	d248      	bcs.n	8000e30 <__udivmoddi4+0x2a8>
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	d946      	bls.n	8000e30 <__udivmoddi4+0x2a8>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4421      	add	r1, r4
 8000da8:	eba1 010a 	sub.w	r1, r1, sl
 8000dac:	b2bf      	uxth	r7, r7
 8000dae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dba:	fb00 f808 	mul.w	r8, r0, r8
 8000dbe:	45b8      	cmp	r8, r7
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x24a>
 8000dc2:	19e7      	adds	r7, r4, r7
 8000dc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc8:	d22e      	bcs.n	8000e28 <__udivmoddi4+0x2a0>
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d92c      	bls.n	8000e28 <__udivmoddi4+0x2a0>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4427      	add	r7, r4
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	eba7 0708 	sub.w	r7, r7, r8
 8000dda:	fba0 8902 	umull	r8, r9, r0, r2
 8000dde:	454f      	cmp	r7, r9
 8000de0:	46c6      	mov	lr, r8
 8000de2:	4649      	mov	r1, r9
 8000de4:	d31a      	bcc.n	8000e1c <__udivmoddi4+0x294>
 8000de6:	d017      	beq.n	8000e18 <__udivmoddi4+0x290>
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x27a>
 8000dea:	ebb3 020e 	subs.w	r2, r3, lr
 8000dee:	eb67 0701 	sbc.w	r7, r7, r1
 8000df2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000df6:	40f2      	lsrs	r2, r6
 8000df8:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfc:	40f7      	lsrs	r7, r6
 8000dfe:	e9c5 2700 	strd	r2, r7, [r5]
 8000e02:	2600      	movs	r6, #0
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	462e      	mov	r6, r5
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	e70b      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e10:	4606      	mov	r6, r0
 8000e12:	e6e9      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e6fd      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e5      	bcs.n	8000de8 <__udivmoddi4+0x260>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0104 	sbc.w	r1, r9, r4
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7df      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	e7d2      	b.n	8000dd2 <__udivmoddi4+0x24a>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78d      	b.n	8000d4c <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7b9      	b.n	8000da8 <__udivmoddi4+0x220>
 8000e34:	4666      	mov	r6, ip
 8000e36:	e775      	b.n	8000d24 <__udivmoddi4+0x19c>
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e74a      	b.n	8000cd2 <__udivmoddi4+0x14a>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	4439      	add	r1, r7
 8000e42:	e713      	b.n	8000c6c <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e724      	b.n	8000c94 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <delay_us>:
uint16_t samples = 16;
uint32_t sineVal[16];

uint8_t bufRec[256];

void delay_us(uint16_t us){
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0); // Set counter start to 0
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <delay_us+0x30>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < us);
 8000e62:	bf00      	nop
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <delay_us+0x30>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d3f9      	bcc.n	8000e64 <delay_us+0x14>
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	2000016c 	.word	0x2000016c

08000e84 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	/* Left Sensor */
	if(htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a40      	ldr	r2, [pc, #256]	; (8000f90 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d125      	bne.n	8000ee0 <HAL_TIM_IC_CaptureCallback+0x5c>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7f1b      	ldrb	r3, [r3, #28]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d121      	bne.n	8000ee0 <HAL_TIM_IC_CaptureCallback+0x5c>
		if(leftSensorFirstCapt == 0) leftSensorFirstCapt++;
 8000e9c:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d106      	bne.n	8000eb2 <HAL_TIM_IC_CaptureCallback+0x2e>
 8000ea4:	4b3b      	ldr	r3, [pc, #236]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e016      	b.n	8000ee0 <HAL_TIM_IC_CaptureCallback+0x5c>
		else if(leftSensorFirstCapt == 1){
 8000eb2:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d112      	bne.n	8000ee0 <HAL_TIM_IC_CaptureCallback+0x5c>
			totalTimeLeft = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //Retrieves pulse width value from ultrasonic
 8000eba:	2104      	movs	r1, #4
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f004 fc63 	bl	8005788 <HAL_TIM_ReadCapturedValue>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4a34      	ldr	r2, [pc, #208]	; (8000f98 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000ec6:	6013      	str	r3, [r2, #0]
			calcObjDist(totalTimeLeft,0);
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f86e 	bl	8000fb0 <calcObjDist>
			leftSensorFirstCapt--;
 8000ed4:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000ede:	701a      	strb	r2, [r3, #0]
		}
	}
	/* Center Sensor */
	if(htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a2b      	ldr	r2, [pc, #172]	; (8000f90 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d125      	bne.n	8000f34 <HAL_TIM_IC_CaptureCallback+0xb0>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7f1b      	ldrb	r3, [r3, #28]
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d121      	bne.n	8000f34 <HAL_TIM_IC_CaptureCallback+0xb0>
		if(centerSensorFirstCapt == 0) centerSensorFirstCapt++;
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_TIM_IC_CaptureCallback+0x118>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d106      	bne.n	8000f06 <HAL_TIM_IC_CaptureCallback+0x82>
 8000ef8:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_TIM_IC_CaptureCallback+0x118>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e016      	b.n	8000f34 <HAL_TIM_IC_CaptureCallback+0xb0>
		else if(centerSensorFirstCapt == 1){
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d112      	bne.n	8000f34 <HAL_TIM_IC_CaptureCallback+0xb0>
			totalTimeCenter = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); //Retrieves pulse width value from ultrasonic
 8000f0e:	210c      	movs	r1, #12
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f004 fc39 	bl	8005788 <HAL_TIM_ReadCapturedValue>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f1a:	6013      	str	r3, [r2, #0]
			calcObjDist(totalTimeCenter,1);
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f844 	bl	8000fb0 <calcObjDist>
			centerSensorFirstCapt--;
 8000f28:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f32:	701a      	strb	r2, [r3, #0]
		}
	}
	/* Right Sensor */
	if(htim == &htim8 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a1b      	ldr	r2, [pc, #108]	; (8000fa4 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d125      	bne.n	8000f88 <HAL_TIM_IC_CaptureCallback+0x104>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7f1b      	ldrb	r3, [r3, #28]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d121      	bne.n	8000f88 <HAL_TIM_IC_CaptureCallback+0x104>
		if(rightSensorFirstCapt == 0) rightSensorFirstCapt++;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d106      	bne.n	8000f5a <HAL_TIM_IC_CaptureCallback+0xd6>
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f56:	701a      	strb	r2, [r3, #0]
			totalTimeRight = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //Retrieves pulse width value from ultrasonic
			calcObjDist(totalTimeRight,2);
			rightSensorFirstCapt--;
		}
	}
}
 8000f58:	e016      	b.n	8000f88 <HAL_TIM_IC_CaptureCallback+0x104>
		else if(rightSensorFirstCapt == 1){
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d112      	bne.n	8000f88 <HAL_TIM_IC_CaptureCallback+0x104>
			totalTimeRight = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //Retrieves pulse width value from ultrasonic
 8000f62:	2104      	movs	r1, #4
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f004 fc0f 	bl	8005788 <HAL_TIM_ReadCapturedValue>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f6e:	6013      	str	r3, [r2, #0]
			calcObjDist(totalTimeRight,2);
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2102      	movs	r1, #2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f81a 	bl	8000fb0 <calcObjDist>
			rightSensorFirstCapt--;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f86:	701a      	strb	r2, [r3, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000032c 	.word	0x2000032c
 8000f94:	20000030 	.word	0x20000030
 8000f98:	20000034 	.word	0x20000034
 8000f9c:	20000031 	.word	0x20000031
 8000fa0:	20000038 	.word	0x20000038
 8000fa4:	20000050 	.word	0x20000050
 8000fa8:	20000032 	.word	0x20000032
 8000fac:	2000003c 	.word	0x2000003c

08000fb0 <calcObjDist>:
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
	  }
	}
}

void calcObjDist(uint32_t totalTime, uint8_t sensorNumber){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	70fb      	strb	r3, [r7, #3]
	totalFinal = totalTime/2;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	085b      	lsrs	r3, r3, #1
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <calcObjDist+0xd0>)
 8000fc4:	601a      	str	r2, [r3, #0]
	switch(sensorNumber){
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d036      	beq.n	800103a <calcObjDist+0x8a>
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	dc4c      	bgt.n	800106a <calcObjDist+0xba>
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d002      	beq.n	8000fda <calcObjDist+0x2a>
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d018      	beq.n	800100a <calcObjDist+0x5a>
		case 2: // Right sensor
			distanceRight = totalFinal * velSound * pow(10,-6);
			break;
	}

}
 8000fd8:	e047      	b.n	800106a <calcObjDist+0xba>
			distanceLeft = totalFinal * velSound * pow(10,-6);
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <calcObjDist+0xd0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a29      	ldr	r2, [pc, #164]	; (8001084 <calcObjDist+0xd4>)
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	fb02 f303 	mul.w	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa6a 	bl	80004c0 <__aeabi_i2d>
 8000fec:	a322      	add	r3, pc, #136	; (adr r3, 8001078 <calcObjDist+0xc8>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff facf 	bl	8000594 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f7ff fd63 	bl	8000ac8 <__aeabi_d2iz>
 8001002:	4603      	mov	r3, r0
 8001004:	4a20      	ldr	r2, [pc, #128]	; (8001088 <calcObjDist+0xd8>)
 8001006:	6013      	str	r3, [r2, #0]
			break;
 8001008:	e02f      	b.n	800106a <calcObjDist+0xba>
			distanceCenter = totalFinal * velSound * pow(10,-6);
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <calcObjDist+0xd0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <calcObjDist+0xd4>)
 8001010:	6812      	ldr	r2, [r2, #0]
 8001012:	fb02 f303 	mul.w	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fa52 	bl	80004c0 <__aeabi_i2d>
 800101c:	a316      	add	r3, pc, #88	; (adr r3, 8001078 <calcObjDist+0xc8>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fab7 	bl	8000594 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	f7ff fd4b 	bl	8000ac8 <__aeabi_d2iz>
 8001032:	4603      	mov	r3, r0
 8001034:	4a15      	ldr	r2, [pc, #84]	; (800108c <calcObjDist+0xdc>)
 8001036:	6013      	str	r3, [r2, #0]
			break;
 8001038:	e017      	b.n	800106a <calcObjDist+0xba>
			distanceRight = totalFinal * velSound * pow(10,-6);
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <calcObjDist+0xd0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a11      	ldr	r2, [pc, #68]	; (8001084 <calcObjDist+0xd4>)
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa3a 	bl	80004c0 <__aeabi_i2d>
 800104c:	a30a      	add	r3, pc, #40	; (adr r3, 8001078 <calcObjDist+0xc8>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fa9f 	bl	8000594 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fd33 	bl	8000ac8 <__aeabi_d2iz>
 8001062:	4603      	mov	r3, r0
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <calcObjDist+0xe0>)
 8001066:	6013      	str	r3, [r2, #0]
			break;
 8001068:	bf00      	nop
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	f3af 8000 	nop.w
 8001078:	a0b5ed8d 	.word	0xa0b5ed8d
 800107c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001080:	20000040 	.word	0x20000040
 8001084:	20000000 	.word	0x20000000
 8001088:	20000044 	.word	0x20000044
 800108c:	20000048 	.word	0x20000048
 8001090:	2000004c 	.word	0x2000004c

08001094 <sensorRoutine>:

void sensorRoutine(){
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET); // Left sensor
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109e:	4814      	ldr	r0, [pc, #80]	; (80010f0 <sensorRoutine+0x5c>)
 80010a0:	f002 fb1c 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET); // Center sensor
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010aa:	4811      	ldr	r0, [pc, #68]	; (80010f0 <sensorRoutine+0x5c>)
 80010ac:	f002 fb16 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET); // Right sensor
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <sensorRoutine+0x5c>)
 80010b8:	f002 fb10 	bl	80036dc <HAL_GPIO_WritePin>
	delay_us(10);
 80010bc:	200a      	movs	r0, #10
 80010be:	f7ff fec7 	bl	8000e50 <delay_us>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET); // Left sensor
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <sensorRoutine+0x5c>)
 80010ca:	f002 fb07 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET); // Center sensor
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <sensorRoutine+0x5c>)
 80010d6:	f002 fb01 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET); // Right sensor
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <sensorRoutine+0x5c>)
 80010e2:	f002 fafb 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80010e6:	2064      	movs	r0, #100	; 0x64
 80010e8:	f001 f964 	bl	80023b4 <HAL_Delay>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	00000000 	.word	0x00000000

080010f8 <getSineVal>:
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
	  HAL_Delay(240);
  }
}

void getSineVal(){
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
	for(int i = 0; i < samples; i++){
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	e040      	b.n	8001186 <getSineVal+0x8e>
		sineVal[i] = (sin(2*i*PI/samples)+1)*((0xFFF+1)/2);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f9d9 	bl	80004c0 <__aeabi_i2d>
 800110e:	a328      	add	r3, pc, #160	; (adr r3, 80011b0 <getSineVal+0xb8>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	f7ff fa3e 	bl	8000594 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4614      	mov	r4, r2
 800111e:	461d      	mov	r5, r3
 8001120:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <getSineVal+0xa8>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f9cb 	bl	80004c0 <__aeabi_i2d>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4620      	mov	r0, r4
 8001130:	4629      	mov	r1, r5
 8001132:	f7ff fb59 	bl	80007e8 <__aeabi_ddiv>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	ec43 2b17 	vmov	d7, r2, r3
 800113e:	eeb0 0a47 	vmov.f32	s0, s14
 8001142:	eef0 0a67 	vmov.f32	s1, s15
 8001146:	f006 f847 	bl	80071d8 <sin>
 800114a:	ec51 0b10 	vmov	r0, r1, d0
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <getSineVal+0xac>)
 8001154:	f7ff f868 	bl	8000228 <__adddf3>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <getSineVal+0xb0>)
 8001166:	f7ff fa15 	bl	8000594 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fcd1 	bl	8000b18 <__aeabi_d2uiz>
 8001176:	4602      	mov	r2, r0
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <getSineVal+0xb4>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < samples; i++){
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3301      	adds	r3, #1
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <getSineVal+0xa8>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4293      	cmp	r3, r2
 8001190:	dbb8      	blt.n	8001104 <getSineVal+0xc>
	}
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bdb0      	pop	{r4, r5, r7, pc}
 800119c:	f3af 8000 	nop.w
 80011a0:	20000004 	.word	0x20000004
 80011a4:	3ff00000 	.word	0x3ff00000
 80011a8:	40a00000 	.word	0x40a00000
 80011ac:	20000428 	.word	0x20000428
 80011b0:	4d12d84a 	.word	0x4d12d84a
 80011b4:	400921fb 	.word	0x400921fb

080011b8 <stepper_set_rpm>:

#define stepsPerRev (200*4) // quarter step

void stepper_set_rpm(float rpm){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	ed87 0a01 	vstr	s0, [r7, #4]
	delay_us(60000000/stepsPerRev/rpm);
 80011c2:	eddf 6a09 	vldr	s13, [pc, #36]	; 80011e8 <stepper_set_rpm+0x30>
 80011c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d2:	ee17 3a90 	vmov	r3, s15
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fe39 	bl	8000e50 <delay_us>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	47927c00 	.word	0x47927c00

080011ec <step>:

void step(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <step+0x28>)
 80011f8:	f002 fa70 	bl	80036dc <HAL_GPIO_WritePin>
	delay_us(1);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff fe27 	bl	8000e50 <delay_us>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <step+0x28>)
 800120a:	f002 fa67 	bl	80036dc <HAL_GPIO_WritePin>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40020800 	.word	0x40020800

08001218 <stepper_step_angle>:

void stepper_step_angle(float angle, float rpm, uint8_t direction){
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001222:	edc7 0a02 	vstr	s1, [r7, #8]
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	float anglePerStep = 1.8/4; // Quarter step
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <stepper_step_angle+0x88>)
 800122c:	61bb      	str	r3, [r7, #24]
	int numOfSteps = (int) (angle/anglePerStep);
 800122e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001232:	ed97 7a06 	vldr	s14, [r7, #24]
 8001236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800123a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123e:	ee17 3a90 	vmov	r3, s15
 8001242:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < numOfSteps; i++){
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	e020      	b.n	800128c <stepper_step_angle+0x74>
		if(direction == 0) {// Clockwise
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10b      	bne.n	8001268 <stepper_step_angle+0x50>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001256:	4813      	ldr	r0, [pc, #76]	; (80012a4 <stepper_step_angle+0x8c>)
 8001258:	f002 fa40 	bl	80036dc <HAL_GPIO_WritePin>
			step();
 800125c:	f7ff ffc6 	bl	80011ec <step>
			stepper_set_rpm(rpm);
 8001260:	ed97 0a02 	vldr	s0, [r7, #8]
 8001264:	f7ff ffa8 	bl	80011b8 <stepper_set_rpm>
		}
		if(direction == 1) {// Counter Clockwise
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d10b      	bne.n	8001286 <stepper_step_angle+0x6e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <stepper_step_angle+0x8c>)
 8001276:	f002 fa31 	bl	80036dc <HAL_GPIO_WritePin>
			step();
 800127a:	f7ff ffb7 	bl	80011ec <step>
			stepper_set_rpm(rpm);
 800127e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001282:	f7ff ff99 	bl	80011b8 <stepper_set_rpm>
	for(int i = 0; i < numOfSteps; i++){
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbda      	blt.n	800124a <stepper_step_angle+0x32>
		}
	}
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	3ee66666 	.word	0x3ee66666
 80012a4:	40020800 	.word	0x40020800

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f001 f824 	bl	80022fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 f855 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b6:	f000 fbfb 	bl	8001ab0 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ba:	f000 fbdb 	bl	8001a74 <MX_DMA_Init>
  MX_TIM1_Init();
 80012be:	f000 f939 	bl	8001534 <MX_TIM1_Init>
  MX_TIM3_Init();
 80012c2:	f000 fa6b 	bl	800179c <MX_TIM3_Init>
  MX_DAC_Init();
 80012c6:	f000 f8cd 	bl	8001464 <MX_DAC_Init>
  MX_TIM2_Init();
 80012ca:	f000 f9f1 	bl	80016b0 <MX_TIM2_Init>
  MX_SPI1_Init();
 80012ce:	f000 f8f3 	bl	80014b8 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80012d2:	f000 fb9f 	bl	8001a14 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80012d6:	f000 faaf 	bl	8001838 <MX_TIM4_Init>
  MX_TIM8_Init();
 80012da:	f000 fafb 	bl	80018d4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80012de:	2100      	movs	r1, #0
 80012e0:	4818      	ldr	r0, [pc, #96]	; (8001344 <main+0x9c>)
 80012e2:	f003 fd3b 	bl	8004d5c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80012e6:	2104      	movs	r1, #4
 80012e8:	4816      	ldr	r0, [pc, #88]	; (8001344 <main+0x9c>)
 80012ea:	f003 fd37 	bl	8004d5c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80012ee:	4816      	ldr	r0, [pc, #88]	; (8001348 <main+0xa0>)
 80012f0:	f003 fc02 	bl	8004af8 <HAL_TIM_Base_Start>

  getSineVal();
 80012f4:	f7ff ff00 	bl	80010f8 <getSineVal>
  HAL_TIM_Base_Start(&htim4);
 80012f8:	4814      	ldr	r0, [pc, #80]	; (800134c <main+0xa4>)
 80012fa:	f003 fbfd 	bl	8004af8 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80012fe:	2100      	movs	r1, #0
 8001300:	4813      	ldr	r0, [pc, #76]	; (8001350 <main+0xa8>)
 8001302:	f001 f9ae 	bl	8002662 <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sineVal, samples, DAC_ALIGN_12B_R);
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <main+0xac>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	2300      	movs	r3, #0
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	4613      	mov	r3, r2
 8001312:	4a11      	ldr	r2, [pc, #68]	; (8001358 <main+0xb0>)
 8001314:	2100      	movs	r1, #0
 8001316:	480e      	ldr	r0, [pc, #56]	; (8001350 <main+0xa8>)
 8001318:	f001 f9f6 	bl	8002708 <HAL_DAC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  stepper_step_angle(90,7.5,0);
 800131c:	2000      	movs	r0, #0
 800131e:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 8001322:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800135c <main+0xb4>
 8001326:	f7ff ff77 	bl	8001218 <stepper_step_angle>
	  HAL_Delay(150);
 800132a:	2096      	movs	r0, #150	; 0x96
 800132c:	f001 f842 	bl	80023b4 <HAL_Delay>
	  stepper_step_angle(90,7.5,1);
 8001330:	2001      	movs	r0, #1
 8001332:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 8001336:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800135c <main+0xb4>
 800133a:	f7ff ff6d 	bl	8001218 <stepper_step_angle>
	  sensorRoutine();
 800133e:	f7ff fea9 	bl	8001094 <sensorRoutine>
	  stepper_step_angle(90,7.5,0);
 8001342:	e7eb      	b.n	800131c <main+0x74>
 8001344:	2000032c 	.word	0x2000032c
 8001348:	2000016c 	.word	0x2000016c
 800134c:	2000009c 	.word	0x2000009c
 8001350:	20000218 	.word	0x20000218
 8001354:	20000004 	.word	0x20000004
 8001358:	20000428 	.word	0x20000428
 800135c:	42b40000 	.word	0x42b40000

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0b4      	sub	sp, #208	; 0xd0
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800136a:	2230      	movs	r2, #48	; 0x30
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f005 ff2a 	bl	80071c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	2284      	movs	r2, #132	; 0x84
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f005 ff1b 	bl	80071c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b32      	ldr	r3, [pc, #200]	; (800145c <SystemClock_Config+0xfc>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a31      	ldr	r2, [pc, #196]	; (800145c <SystemClock_Config+0xfc>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b2f      	ldr	r3, [pc, #188]	; (800145c <SystemClock_Config+0xfc>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013aa:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <SystemClock_Config+0x100>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013b2:	4a2b      	ldr	r2, [pc, #172]	; (8001460 <SystemClock_Config+0x100>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <SystemClock_Config+0x100>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013cc:	2301      	movs	r3, #1
 80013ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d2:	2310      	movs	r3, #16
 80013d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 f9b8 	bl	8003758 <HAL_RCC_OscConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013ee:	f000 fc9b 	bl	8001d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f2:	230f      	movs	r3, #15
 80013f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001404:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800140c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001414:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f002 fc40 	bl	8003ca0 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001426:	f000 fc7f 	bl	8001d28 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800142a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001430:	2300      	movs	r3, #0
 8001432:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4618      	mov	r0, r3
 800143a:	f002 fe6b 	bl	8004114 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001444:	f000 fc70 	bl	8001d28 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2000      	movs	r0, #0
 800144e:	f002 fd13 	bl	8003e78 <HAL_RCC_MCOConfig>
}
 8001452:	bf00      	nop
 8001454:	37d0      	adds	r7, #208	; 0xd0
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000

08001464 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_DAC_Init+0x4c>)
 8001474:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <MX_DAC_Init+0x50>)
 8001476:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_DAC_Init+0x4c>)
 800147a:	f001 f8d0 	bl	800261e <HAL_DAC_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001484:	f000 fc50 	bl	8001d28 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8001488:	232c      	movs	r3, #44	; 0x2c
 800148a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_DAC_Init+0x4c>)
 8001498:	f001 fa86 	bl	80029a8 <HAL_DAC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80014a2:	f000 fc41 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000218 	.word	0x20000218
 80014b4:	40007400 	.word	0x40007400

080014b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <MX_SPI1_Init+0x74>)
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <MX_SPI1_Init+0x78>)
 80014c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_SPI1_Init+0x74>)
 80014c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_SPI1_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <MX_SPI1_Init+0x74>)
 80014d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_SPI1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_SPI1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_SPI1_Init+0x74>)
 80014e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_SPI1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_SPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_SPI1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_SPI1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_SPI1_Init+0x74>)
 8001506:	2207      	movs	r2, #7
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_SPI1_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_SPI1_Init+0x74>)
 8001512:	2208      	movs	r2, #8
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_SPI1_Init+0x74>)
 8001518:	f003 f9ec 	bl	80048f4 <HAL_SPI_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001522:	f000 fc01 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000378 	.word	0x20000378
 8001530:	40013000 	.word	0x40013000

08001534 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b090      	sub	sp, #64	; 0x40
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001570:	4b4d      	ldr	r3, [pc, #308]	; (80016a8 <MX_TIM1_Init+0x174>)
 8001572:	4a4e      	ldr	r2, [pc, #312]	; (80016ac <MX_TIM1_Init+0x178>)
 8001574:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8001576:	4b4c      	ldr	r3, [pc, #304]	; (80016a8 <MX_TIM1_Init+0x174>)
 8001578:	2201      	movs	r2, #1
 800157a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157c:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <MX_TIM1_Init+0x174>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <MX_TIM1_Init+0x174>)
 8001584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001588:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <MX_TIM1_Init+0x174>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001590:	4b45      	ldr	r3, [pc, #276]	; (80016a8 <MX_TIM1_Init+0x174>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <MX_TIM1_Init+0x174>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800159c:	4842      	ldr	r0, [pc, #264]	; (80016a8 <MX_TIM1_Init+0x174>)
 800159e:	f003 fa54 	bl	8004a4a <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80015a8:	f000 fbbe 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b6:	4619      	mov	r1, r3
 80015b8:	483b      	ldr	r0, [pc, #236]	; (80016a8 <MX_TIM1_Init+0x174>)
 80015ba:	f003 ffdd 	bl	8005578 <HAL_TIM_ConfigClockSource>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80015c4:	f000 fbb0 	bl	8001d28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80015c8:	4837      	ldr	r0, [pc, #220]	; (80016a8 <MX_TIM1_Init+0x174>)
 80015ca:	f003 fb66 	bl	8004c9a <HAL_TIM_IC_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80015d4:	f000 fba8 	bl	8001d28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80015d8:	2304      	movs	r3, #4
 80015da:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80015dc:	2350      	movs	r3, #80	; 0x50
 80015de:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	482e      	ldr	r0, [pc, #184]	; (80016a8 <MX_TIM1_Init+0x174>)
 80015f0:	f004 f888 	bl	8005704 <HAL_TIM_SlaveConfigSynchro>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80015fa:	f000 fb95 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	4619      	mov	r1, r3
 8001610:	4825      	ldr	r0, [pc, #148]	; (80016a8 <MX_TIM1_Init+0x174>)
 8001612:	f004 fe9d 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800161c:	f000 fb84 	bl	8001d28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001620:	2300      	movs	r3, #0
 8001622:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001624:	2301      	movs	r3, #1
 8001626:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	2200      	movs	r2, #0
 8001634:	4619      	mov	r1, r3
 8001636:	481c      	ldr	r0, [pc, #112]	; (80016a8 <MX_TIM1_Init+0x174>)
 8001638:	f003 fdf9 	bl	800522e <HAL_TIM_IC_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001642:	f000 fb71 	bl	8001d28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001646:	2302      	movs	r3, #2
 8001648:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800164a:	2302      	movs	r3, #2
 800164c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800164e:	463b      	mov	r3, r7
 8001650:	2204      	movs	r2, #4
 8001652:	4619      	mov	r1, r3
 8001654:	4814      	ldr	r0, [pc, #80]	; (80016a8 <MX_TIM1_Init+0x174>)
 8001656:	f003 fdea 	bl	800522e <HAL_TIM_IC_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001660:	f000 fb62 	bl	8001d28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001664:	2300      	movs	r3, #0
 8001666:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001668:	2301      	movs	r3, #1
 800166a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	2208      	movs	r2, #8
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_TIM1_Init+0x174>)
 8001674:	f003 fddb 	bl	800522e <HAL_TIM_IC_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800167e:	f000 fb53 	bl	8001d28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001682:	2302      	movs	r3, #2
 8001684:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001686:	2302      	movs	r3, #2
 8001688:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800168a:	463b      	mov	r3, r7
 800168c:	220c      	movs	r2, #12
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_TIM1_Init+0x174>)
 8001692:	f003 fdcc 	bl	800522e <HAL_TIM_IC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 800169c:	f000 fb44 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	3740      	adds	r7, #64	; 0x40
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2000032c 	.word	0x2000032c
 80016ac:	40010000 	.word	0x40010000

080016b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08e      	sub	sp, #56	; 0x38
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <MX_TIM2_Init+0xe8>)
 80016e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 80016ea:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <MX_TIM2_Init+0xe8>)
 80016ec:	f240 128f 	movw	r2, #399	; 0x18f
 80016f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b29      	ldr	r3, [pc, #164]	; (8001798 <MX_TIM2_Init+0xe8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <MX_TIM2_Init+0xe8>)
 80016fa:	2263      	movs	r2, #99	; 0x63
 80016fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <MX_TIM2_Init+0xe8>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <MX_TIM2_Init+0xe8>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800170a:	4823      	ldr	r0, [pc, #140]	; (8001798 <MX_TIM2_Init+0xe8>)
 800170c:	f003 f99d 	bl	8004a4a <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001716:	f000 fb07 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001724:	4619      	mov	r1, r3
 8001726:	481c      	ldr	r0, [pc, #112]	; (8001798 <MX_TIM2_Init+0xe8>)
 8001728:	f003 ff26 	bl	8005578 <HAL_TIM_ConfigClockSource>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001732:	f000 faf9 	bl	8001d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001736:	4818      	ldr	r0, [pc, #96]	; (8001798 <MX_TIM2_Init+0xe8>)
 8001738:	f003 fa4e 	bl	8004bd8 <HAL_TIM_PWM_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001742:	f000 faf1 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4810      	ldr	r0, [pc, #64]	; (8001798 <MX_TIM2_Init+0xe8>)
 8001756:	f004 fdfb 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001760:	f000 fae2 	bl	8001d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001764:	2360      	movs	r3, #96	; 0x60
 8001766:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	4619      	mov	r1, r3
 800177a:	4807      	ldr	r0, [pc, #28]	; (8001798 <MX_TIM2_Init+0xe8>)
 800177c:	f003 fdec 	bl	8005358 <HAL_TIM_PWM_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001786:	f000 facf 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800178a:	4803      	ldr	r0, [pc, #12]	; (8001798 <MX_TIM2_Init+0xe8>)
 800178c:	f000 fc80 	bl	8002090 <HAL_TIM_MspPostInit>

}
 8001790:	bf00      	nop
 8001792:	3738      	adds	r7, #56	; 0x38
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200003dc 	.word	0x200003dc

0800179c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <MX_TIM3_Init+0x94>)
 80017bc:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <MX_TIM3_Init+0x98>)
 80017be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <MX_TIM3_Init+0x94>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_TIM3_Init+0x94>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80017cc:	4b18      	ldr	r3, [pc, #96]	; (8001830 <MX_TIM3_Init+0x94>)
 80017ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_TIM3_Init+0x94>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <MX_TIM3_Init+0x94>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017e0:	4813      	ldr	r0, [pc, #76]	; (8001830 <MX_TIM3_Init+0x94>)
 80017e2:	f003 f932 	bl	8004a4a <HAL_TIM_Base_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80017ec:	f000 fa9c 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	4619      	mov	r1, r3
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <MX_TIM3_Init+0x94>)
 80017fe:	f003 febb 	bl	8005578 <HAL_TIM_ConfigClockSource>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001808:	f000 fa8e 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_TIM3_Init+0x94>)
 800181a:	f004 fd99 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001824:	f000 fa80 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000016c 	.word	0x2000016c
 8001834:	40000400 	.word	0x40000400

08001838 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_TIM4_Init+0x94>)
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <MX_TIM4_Init+0x98>)
 800185a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <MX_TIM4_Init+0x94>)
 800185e:	2200      	movs	r2, #0
 8001860:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_TIM4_Init+0x94>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_TIM4_Init+0x94>)
 800186a:	22ff      	movs	r2, #255	; 0xff
 800186c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_TIM4_Init+0x94>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_TIM4_Init+0x94>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800187a:	4814      	ldr	r0, [pc, #80]	; (80018cc <MX_TIM4_Init+0x94>)
 800187c:	f003 f8e5 	bl	8004a4a <HAL_TIM_Base_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001886:	f000 fa4f 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4619      	mov	r1, r3
 8001896:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_TIM4_Init+0x94>)
 8001898:	f003 fe6e 	bl	8005578 <HAL_TIM_ConfigClockSource>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f000 fa41 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018a6:	2320      	movs	r3, #32
 80018a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	4619      	mov	r1, r3
 80018b2:	4806      	ldr	r0, [pc, #24]	; (80018cc <MX_TIM4_Init+0x94>)
 80018b4:	f004 fd4c 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80018be:	f000 fa33 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000009c 	.word	0x2000009c
 80018d0:	40000800 	.word	0x40000800

080018d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b090      	sub	sp, #64	; 0x40
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001904:	463b      	mov	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001910:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <MX_TIM8_Init+0x138>)
 8001912:	4a3f      	ldr	r2, [pc, #252]	; (8001a10 <MX_TIM8_Init+0x13c>)
 8001914:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <MX_TIM8_Init+0x138>)
 8001918:	2201      	movs	r2, #1
 800191a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191c:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <MX_TIM8_Init+0x138>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001922:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <MX_TIM8_Init+0x138>)
 8001924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001928:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192a:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <MX_TIM8_Init+0x138>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <MX_TIM8_Init+0x138>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001936:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <MX_TIM8_Init+0x138>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800193c:	4833      	ldr	r0, [pc, #204]	; (8001a0c <MX_TIM8_Init+0x138>)
 800193e:	f003 f884 	bl	8004a4a <HAL_TIM_Base_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001948:	f000 f9ee 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001952:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001956:	4619      	mov	r1, r3
 8001958:	482c      	ldr	r0, [pc, #176]	; (8001a0c <MX_TIM8_Init+0x138>)
 800195a:	f003 fe0d 	bl	8005578 <HAL_TIM_ConfigClockSource>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001964:	f000 f9e0 	bl	8001d28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001968:	4828      	ldr	r0, [pc, #160]	; (8001a0c <MX_TIM8_Init+0x138>)
 800196a:	f003 f996 	bl	8004c9a <HAL_TIM_IC_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001974:	f000 f9d8 	bl	8001d28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001978:	2304      	movs	r3, #4
 800197a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800197c:	2350      	movs	r3, #80	; 0x50
 800197e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	481f      	ldr	r0, [pc, #124]	; (8001a0c <MX_TIM8_Init+0x138>)
 8001990:	f003 feb8 	bl	8005704 <HAL_TIM_SlaveConfigSynchro>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800199a:	f000 f9c5 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	4619      	mov	r1, r3
 80019b0:	4816      	ldr	r0, [pc, #88]	; (8001a0c <MX_TIM8_Init+0x138>)
 80019b2:	f004 fccd 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 80019bc:	f000 f9b4 	bl	8001d28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019c0:	2300      	movs	r3, #0
 80019c2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019c4:	2301      	movs	r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019d0:	463b      	mov	r3, r7
 80019d2:	2200      	movs	r2, #0
 80019d4:	4619      	mov	r1, r3
 80019d6:	480d      	ldr	r0, [pc, #52]	; (8001a0c <MX_TIM8_Init+0x138>)
 80019d8:	f003 fc29 	bl	800522e <HAL_TIM_IC_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 80019e2:	f000 f9a1 	bl	8001d28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80019e6:	2302      	movs	r3, #2
 80019e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80019ea:	2302      	movs	r3, #2
 80019ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019ee:	463b      	mov	r3, r7
 80019f0:	2204      	movs	r2, #4
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_TIM8_Init+0x138>)
 80019f6:	f003 fc1a 	bl	800522e <HAL_TIM_IC_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001a00:	f000 f992 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	3740      	adds	r7, #64	; 0x40
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000050 	.word	0x20000050
 8001a10:	40010400 	.word	0x40010400

08001a14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MX_USART3_UART_Init+0x58>)
 8001a1a:	4a15      	ldr	r2, [pc, #84]	; (8001a70 <MX_USART3_UART_Init+0x5c>)
 8001a1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <MX_USART3_UART_Init+0x58>)
 8001a20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_USART3_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_USART3_UART_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_USART3_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_USART3_UART_Init+0x58>)
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <MX_USART3_UART_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_USART3_UART_Init+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <MX_USART3_UART_Init+0x58>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_USART3_UART_Init+0x58>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_USART3_UART_Init+0x58>)
 8001a58:	f004 fd26 	bl	80064a8 <HAL_UART_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a62:	f000 f961 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200000e8 	.word	0x200000e8
 8001a70:	40004800 	.word	0x40004800

08001a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_DMA_Init+0x38>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <MX_DMA_Init+0x38>)
 8001a80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_DMA_Init+0x38>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	2010      	movs	r0, #16
 8001a98:	f000 fd8b 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a9c:	2010      	movs	r0, #16
 8001a9e:	f000 fda4 	bl	80025ea <HAL_NVIC_EnableIRQ>

}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08e      	sub	sp, #56	; 0x38
 8001ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac6:	4b90      	ldr	r3, [pc, #576]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a8f      	ldr	r2, [pc, #572]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b8d      	ldr	r3, [pc, #564]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	623b      	str	r3, [r7, #32]
 8001adc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ade:	4b8a      	ldr	r3, [pc, #552]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a89      	ldr	r2, [pc, #548]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b87      	ldr	r3, [pc, #540]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b84      	ldr	r3, [pc, #528]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a83      	ldr	r2, [pc, #524]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b81      	ldr	r3, [pc, #516]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b7e      	ldr	r3, [pc, #504]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a7d      	ldr	r2, [pc, #500]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b7b      	ldr	r3, [pc, #492]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b26:	4b78      	ldr	r3, [pc, #480]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a77      	ldr	r2, [pc, #476]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b2c:	f043 0320 	orr.w	r3, r3, #32
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b75      	ldr	r3, [pc, #468]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0320 	and.w	r3, r3, #32
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b3e:	4b72      	ldr	r3, [pc, #456]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a71      	ldr	r2, [pc, #452]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b44:	f043 0310 	orr.w	r3, r3, #16
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b56:	4b6c      	ldr	r3, [pc, #432]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a6b      	ldr	r2, [pc, #428]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b69      	ldr	r3, [pc, #420]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b6e:	4b66      	ldr	r3, [pc, #408]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a65      	ldr	r2, [pc, #404]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b63      	ldr	r3, [pc, #396]	; (8001d08 <MX_GPIO_Init+0x258>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001b86:	2200      	movs	r2, #0
 8001b88:	f640 7101 	movw	r1, #3841	; 0xf01
 8001b8c:	485f      	ldr	r0, [pc, #380]	; (8001d0c <MX_GPIO_Init+0x25c>)
 8001b8e:	f001 fda5 	bl	80036dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	f240 1181 	movw	r1, #385	; 0x181
 8001b98:	485d      	ldr	r0, [pc, #372]	; (8001d10 <MX_GPIO_Init+0x260>)
 8001b9a:	f001 fd9f 	bl	80036dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ba4:	485b      	ldr	r0, [pc, #364]	; (8001d14 <MX_GPIO_Init+0x264>)
 8001ba6:	f001 fd99 	bl	80036dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8001bb0:	4859      	ldr	r0, [pc, #356]	; (8001d18 <MX_GPIO_Init+0x268>)
 8001bb2:	f001 fd93 	bl	80036dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2108      	movs	r1, #8
 8001bba:	4858      	ldr	r0, [pc, #352]	; (8001d1c <MX_GPIO_Init+0x26c>)
 8001bbc:	f001 fd8e 	bl	80036dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc6:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <MX_GPIO_Init+0x270>)
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	484d      	ldr	r0, [pc, #308]	; (8001d0c <MX_GPIO_Init+0x25c>)
 8001bd6:	f001 fbd5 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4846      	ldr	r0, [pc, #280]	; (8001d0c <MX_GPIO_Init+0x25c>)
 8001bf2:	f001 fbc7 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bfa:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <MX_GPIO_Init+0x270>)
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c06:	4619      	mov	r1, r3
 8001c08:	4846      	ldr	r0, [pc, #280]	; (8001d24 <MX_GPIO_Init+0x274>)
 8001c0a:	f001 fbbb 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8001c0e:	2381      	movs	r3, #129	; 0x81
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c22:	4619      	mov	r1, r3
 8001c24:	483a      	ldr	r0, [pc, #232]	; (8001d10 <MX_GPIO_Init+0x260>)
 8001c26:	f001 fbad 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c30:	2301      	movs	r3, #1
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c40:	4619      	mov	r1, r3
 8001c42:	4834      	ldr	r0, [pc, #208]	; (8001d14 <MX_GPIO_Init+0x264>)
 8001c44:	f001 fb9e 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001c48:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5e:	4619      	mov	r1, r3
 8001c60:	482d      	ldr	r0, [pc, #180]	; (8001d18 <MX_GPIO_Init+0x268>)
 8001c62:	f001 fb8f 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c66:	2308      	movs	r3, #8
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4827      	ldr	r0, [pc, #156]	; (8001d1c <MX_GPIO_Init+0x26c>)
 8001c7e:	f001 fb81 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001c82:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c98:	4619      	mov	r1, r3
 8001c9a:	481c      	ldr	r0, [pc, #112]	; (8001d0c <MX_GPIO_Init+0x25c>)
 8001c9c:	f001 fb72 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4819      	ldr	r0, [pc, #100]	; (8001d24 <MX_GPIO_Init+0x274>)
 8001cbe:	f001 fb61 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480d      	ldr	r0, [pc, #52]	; (8001d10 <MX_GPIO_Init+0x260>)
 8001cdc:	f001 fb52 	bl	8003384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2009      	movs	r0, #9
 8001ce6:	f000 fc64 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001cea:	2009      	movs	r0, #9
 8001cec:	f000 fc7d 	bl	80025ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2028      	movs	r0, #40	; 0x28
 8001cf6:	f000 fc5c 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cfa:	2028      	movs	r0, #40	; 0x28
 8001cfc:	f000 fc75 	bl	80025ea <HAL_NVIC_EnableIRQ>

}
 8001d00:	bf00      	nop
 8001d02:	3738      	adds	r7, #56	; 0x38
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020800 	.word	0x40020800
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40021400 	.word	0x40021400
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40021800 	.word	0x40021800
 8001d20:	10110000 	.word	0x10110000
 8001d24:	40020000 	.word	0x40020000

08001d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d2c:	b672      	cpsid	i
}
 8001d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <Error_Handler+0x8>
	...

08001d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_MspInit+0x44>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_MspInit+0x44>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_MspInit+0x44>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_MspInit+0x44>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_MspInit+0x44>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_MspInit+0x44>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800

08001d7c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a32      	ldr	r2, [pc, #200]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d15d      	bne.n	8001e5a <HAL_DAC_MspInit+0xde>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d9e:	4b32      	ldr	r3, [pc, #200]	; (8001e68 <HAL_DAC_MspInit+0xec>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a31      	ldr	r2, [pc, #196]	; (8001e68 <HAL_DAC_MspInit+0xec>)
 8001da4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <HAL_DAC_MspInit+0xec>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <HAL_DAC_MspInit+0xec>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a2b      	ldr	r2, [pc, #172]	; (8001e68 <HAL_DAC_MspInit+0xec>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <HAL_DAC_MspInit+0xec>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dce:	2310      	movs	r3, #16
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	4822      	ldr	r0, [pc, #136]	; (8001e6c <HAL_DAC_MspInit+0xf0>)
 8001de2:	f001 facf 	bl	8003384 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_DAC_MspInit+0xf4>)
 8001de8:	4a22      	ldr	r2, [pc, #136]	; (8001e74 <HAL_DAC_MspInit+0xf8>)
 8001dea:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001dec:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_DAC_MspInit+0xf4>)
 8001dee:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001df2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df4:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_DAC_MspInit+0xf4>)
 8001df6:	2240      	movs	r2, #64	; 0x40
 8001df8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_DAC_MspInit+0xf4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_DAC_MspInit+0xf4>)
 8001e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e06:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_DAC_MspInit+0xf4>)
 8001e0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e0e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_DAC_MspInit+0xf4>)
 8001e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e16:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001e18:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_DAC_MspInit+0xf4>)
 8001e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_DAC_MspInit+0xf4>)
 8001e22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e26:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_DAC_MspInit+0xf4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001e2e:	4810      	ldr	r0, [pc, #64]	; (8001e70 <HAL_DAC_MspInit+0xf4>)
 8001e30:	f000 fe9e 	bl	8002b70 <HAL_DMA_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8001e3a:	f7ff ff75 	bl	8001d28 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <HAL_DAC_MspInit+0xf4>)
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <HAL_DAC_MspInit+0xf4>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2036      	movs	r0, #54	; 0x36
 8001e50:	f000 fbaf 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e54:	2036      	movs	r0, #54	; 0x36
 8001e56:	f000 fbc8 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	; 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40007400 	.word	0x40007400
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	200001b8 	.word	0x200001b8
 8001e74:	40026088 	.word	0x40026088

08001e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <HAL_SPI_MspInit+0x9c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d137      	bne.n	8001f0a <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <HAL_SPI_MspInit+0xa0>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	; (8001f18 <HAL_SPI_MspInit+0xa0>)
 8001ea0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_SPI_MspInit+0xa0>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_SPI_MspInit+0xa0>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <HAL_SPI_MspInit+0xa0>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_SPI_MspInit+0xa0>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001eca:	2320      	movs	r3, #32
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eda:	2305      	movs	r3, #5
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480d      	ldr	r0, [pc, #52]	; (8001f1c <HAL_SPI_MspInit+0xa4>)
 8001ee6:	f001 fa4d 	bl	8003384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eea:	23c0      	movs	r3, #192	; 0xc0
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001efa:	2305      	movs	r3, #5
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <HAL_SPI_MspInit+0xa4>)
 8001f06:	f001 fa3d 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40013000 	.word	0x40013000
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08e      	sub	sp, #56	; 0x38
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <HAL_TIM_Base_MspInit+0x154>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d131      	bne.n	8001fa6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f42:	4b4d      	ldr	r3, [pc, #308]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a4c      	ldr	r2, [pc, #304]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b4a      	ldr	r3, [pc, #296]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	623b      	str	r3, [r7, #32]
 8001f58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f5a:	4b47      	ldr	r3, [pc, #284]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a46      	ldr	r2, [pc, #280]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001f60:	f043 0310 	orr.w	r3, r3, #16
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b44      	ldr	r3, [pc, #272]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 8001f72:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f84:	2301      	movs	r3, #1
 8001f86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	483b      	ldr	r0, [pc, #236]	; (800207c <HAL_TIM_Base_MspInit+0x15c>)
 8001f90:	f001 f9f8 	bl	8003384 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	201b      	movs	r0, #27
 8001f9a:	f000 fb0a 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f9e:	201b      	movs	r0, #27
 8001fa0:	f000 fb23 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001fa4:	e062      	b.n	800206c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM2)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fae:	d10c      	bne.n	8001fca <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fb0:	4b31      	ldr	r3, [pc, #196]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	4a30      	ldr	r2, [pc, #192]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
}
 8001fc8:	e050      	b.n	800206c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM3)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2c      	ldr	r2, [pc, #176]	; (8002080 <HAL_TIM_Base_MspInit+0x160>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d10c      	bne.n	8001fee <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fd4:	4b28      	ldr	r3, [pc, #160]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	4a27      	ldr	r2, [pc, #156]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]
}
 8001fec:	e03e      	b.n	800206c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM4)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a24      	ldr	r2, [pc, #144]	; (8002084 <HAL_TIM_Base_MspInit+0x164>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d10c      	bne.n	8002012 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	4a1e      	ldr	r2, [pc, #120]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6413      	str	r3, [r2, #64]	; 0x40
 8002004:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]
}
 8002010:	e02c      	b.n	800206c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM8)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <HAL_TIM_Base_MspInit+0x168>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d127      	bne.n	800206c <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	4a15      	ldr	r2, [pc, #84]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	6453      	str	r3, [r2, #68]	; 0x44
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6313      	str	r3, [r2, #48]	; 0x30
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_TIM_Base_MspInit+0x158>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800204c:	2340      	movs	r3, #64	; 0x40
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800205c:	2303      	movs	r3, #3
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	4809      	ldr	r0, [pc, #36]	; (800208c <HAL_TIM_Base_MspInit+0x16c>)
 8002068:	f001 f98c 	bl	8003384 <HAL_GPIO_Init>
}
 800206c:	bf00      	nop
 800206e:	3738      	adds	r7, #56	; 0x38
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40010000 	.word	0x40010000
 8002078:	40023800 	.word	0x40023800
 800207c:	40021000 	.word	0x40021000
 8002080:	40000400 	.word	0x40000400
 8002084:	40000800 	.word	0x40000800
 8002088:	40010400 	.word	0x40010400
 800208c:	40020800 	.word	0x40020800

08002090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b0:	d11b      	bne.n	80020ea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_TIM_MspPostInit+0x64>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a0f      	ldr	r2, [pc, #60]	; (80020f4 <HAL_TIM_MspPostInit+0x64>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_TIM_MspPostInit+0x64>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020ca:	2301      	movs	r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020da:	2301      	movs	r3, #1
 80020dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	4619      	mov	r1, r3
 80020e4:	4804      	ldr	r0, [pc, #16]	; (80020f8 <HAL_TIM_MspPostInit+0x68>)
 80020e6:	f001 f94d 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020ea:	bf00      	nop
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020000 	.word	0x40020000

080020fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <HAL_UART_MspInit+0x8c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d130      	bne.n	8002180 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_UART_MspInit+0x90>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a1a      	ldr	r2, [pc, #104]	; (800218c <HAL_UART_MspInit+0x90>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <HAL_UART_MspInit+0x90>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_UART_MspInit+0x90>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a14      	ldr	r2, [pc, #80]	; (800218c <HAL_UART_MspInit+0x90>)
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_UART_MspInit+0x90>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800214e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002160:	2307      	movs	r3, #7
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	4809      	ldr	r0, [pc, #36]	; (8002190 <HAL_UART_MspInit+0x94>)
 800216c:	f001 f90a 	bl	8003384 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	2027      	movs	r0, #39	; 0x27
 8002176:	f000 fa1c 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800217a:	2027      	movs	r0, #39	; 0x27
 800217c:	f000 fa35 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002180:	bf00      	nop
 8002182:	3728      	adds	r7, #40	; 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40004800 	.word	0x40004800
 800218c:	40023800 	.word	0x40023800
 8002190:	40020400 	.word	0x40020400

08002194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002198:	e7fe      	b.n	8002198 <NMI_Handler+0x4>

0800219a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219e:	e7fe      	b.n	800219e <HardFault_Handler+0x4>

080021a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <MemManage_Handler+0x4>

080021a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021aa:	e7fe      	b.n	80021aa <BusFault_Handler+0x4>

080021ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <UsageFault_Handler+0x4>

080021b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e0:	f000 f8c8 	bl	8002374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80021ec:	2008      	movs	r0, #8
 80021ee:	f001 fa8f 	bl	8003710 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <DMA1_Stream5_IRQHandler+0x10>)
 80021fe:	f000 fe57 	bl	8002eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200001b8 	.word	0x200001b8

0800220c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <TIM1_CC_IRQHandler+0x10>)
 8002212:	f002 feed 	bl	8004ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	2000032c 	.word	0x2000032c

08002220 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002226:	480a      	ldr	r0, [pc, #40]	; (8002250 <USART3_IRQHandler+0x30>)
 8002228:	f004 f98c 	bl	8006544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  int result;
  result = strcmp(bufRec, "hello");
 800222c:	4909      	ldr	r1, [pc, #36]	; (8002254 <USART3_IRQHandler+0x34>)
 800222e:	480a      	ldr	r0, [pc, #40]	; (8002258 <USART3_IRQHandler+0x38>)
 8002230:	f7fd ffea 	bl	8000208 <strcmp>
 8002234:	6078      	str	r0, [r7, #4]
  if(result == 0){
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d104      	bne.n	8002246 <USART3_IRQHandler+0x26>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800223c:	2201      	movs	r2, #1
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	4806      	ldr	r0, [pc, #24]	; (800225c <USART3_IRQHandler+0x3c>)
 8002242:	f001 fa4b 	bl	80036dc <HAL_GPIO_WritePin>
  }
  /* USER CODE END USART3_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200000e8 	.word	0x200000e8
 8002254:	08008260 	.word	0x08008260
 8002258:	2000022c 	.word	0x2000022c
 800225c:	40020400 	.word	0x40020400

08002260 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002264:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002268:	f001 fa52 	bl	8003710 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <TIM6_DAC_IRQHandler+0x10>)
 8002276:	f000 fb15 	bl	80028a4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000218 	.word	0x20000218

08002284 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <SystemInit+0x20>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <SystemInit+0x20>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022ac:	480d      	ldr	r0, [pc, #52]	; (80022e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ae:	490e      	ldr	r1, [pc, #56]	; (80022e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022b0:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b4:	e002      	b.n	80022bc <LoopCopyDataInit>

080022b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ba:	3304      	adds	r3, #4

080022bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c0:	d3f9      	bcc.n	80022b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022c4:	4c0b      	ldr	r4, [pc, #44]	; (80022f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c8:	e001      	b.n	80022ce <LoopFillZerobss>

080022ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022cc:	3204      	adds	r2, #4

080022ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d0:	d3fb      	bcc.n	80022ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022d2:	f7ff ffd7 	bl	8002284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d6:	f004 ff53 	bl	8007180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022da:	f7fe ffe5 	bl	80012a8 <main>
  bx  lr    
 80022de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80022ec:	08008470 	.word	0x08008470
  ldr r2, =_sbss
 80022f0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80022f4:	2000046c 	.word	0x2000046c

080022f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC_IRQHandler>

080022fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fe:	2003      	movs	r0, #3
 8002300:	f000 f94c 	bl	800259c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002304:	2000      	movs	r0, #0
 8002306:	f000 f805 	bl	8002314 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800230a:	f7ff fd13 	bl	8001d34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_InitTick+0x54>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_InitTick+0x58>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232a:	fbb3 f3f1 	udiv	r3, r3, r1
 800232e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f967 	bl	8002606 <HAL_SYSTICK_Config>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e00e      	b.n	8002360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b0f      	cmp	r3, #15
 8002346:	d80a      	bhi.n	800235e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002348:	2200      	movs	r2, #0
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f000 f92f 	bl	80025b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002354:	4a06      	ldr	r2, [pc, #24]	; (8002370 <HAL_InitTick+0x5c>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e000      	b.n	8002360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000008 	.word	0x20000008
 800236c:	20000010 	.word	0x20000010
 8002370:	2000000c 	.word	0x2000000c

08002374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_IncTick+0x20>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_IncTick+0x24>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4413      	add	r3, r2
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_IncTick+0x24>)
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000010 	.word	0x20000010
 8002398:	20000468 	.word	0x20000468

0800239c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return uwTick;
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_GetTick+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000468 	.word	0x20000468

080023b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023bc:	f7ff ffee 	bl	800239c <HAL_GetTick>
 80023c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d005      	beq.n	80023da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_Delay+0x44>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023da:	bf00      	nop
 80023dc:	f7ff ffde 	bl	800239c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d8f7      	bhi.n	80023dc <HAL_Delay+0x28>
  {
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000010 	.word	0x20000010

080023fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <__NVIC_SetPriorityGrouping+0x40>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 8002426:	4313      	orrs	r3, r2
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	; (800243c <__NVIC_SetPriorityGrouping+0x40>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00
 8002440:	05fa0000 	.word	0x05fa0000

08002444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <__NVIC_GetPriorityGrouping+0x18>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 0307 	and.w	r3, r3, #7
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	db0b      	blt.n	800248a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4907      	ldr	r1, [pc, #28]	; (8002498 <__NVIC_EnableIRQ+0x38>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2001      	movs	r0, #1
 8002482:	fa00 f202 	lsl.w	r2, r0, r2
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	; (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	; (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
         );
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	; 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002568:	d301      	bcc.n	800256e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <SysTick_Config+0x40>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002576:	210f      	movs	r1, #15
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f7ff ff8e 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <SysTick_Config+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <SysTick_Config+0x40>)
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000e010 	.word	0xe000e010

0800259c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff29 	bl	80023fc <__NVIC_SetPriorityGrouping>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c4:	f7ff ff3e 	bl	8002444 <__NVIC_GetPriorityGrouping>
 80025c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f7ff ff8e 	bl	80024f0 <NVIC_EncodePriority>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff5d 	bl	800249c <__NVIC_SetPriority>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff31 	bl	8002460 <__NVIC_EnableIRQ>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ffa2 	bl	8002558 <SysTick_Config>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e014      	b.n	800265a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	791b      	ldrb	r3, [r3, #4]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d105      	bne.n	8002646 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff fb9b 	bl	8001d7c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2202      	movs	r2, #2
 800264a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	795b      	ldrb	r3, [r3, #5]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_DAC_Start+0x16>
 8002674:	2302      	movs	r3, #2
 8002676:	e040      	b.n	80026fa <HAL_DAC_Start+0x98>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2202      	movs	r2, #2
 8002682:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2201      	movs	r2, #1
 8002692:	409a      	lsls	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10f      	bne.n	80026c2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80026ac:	2b3c      	cmp	r3, #60	; 0x3c
 80026ae:	d11d      	bne.n	80026ec <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	e014      	b.n	80026ec <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	213c      	movs	r1, #60	; 0x3c
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	429a      	cmp	r2, r3
 80026da:	d107      	bne.n	80026ec <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0202 	orr.w	r2, r2, #2
 80026ea:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	795b      	ldrb	r3, [r3, #5]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_DAC_Start_DMA+0x22>
 8002726:	2302      	movs	r3, #2
 8002728:	e0ab      	b.n	8002882 <HAL_DAC_Start_DMA+0x17a>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2202      	movs	r2, #2
 8002734:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d12f      	bne.n	800279c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4a52      	ldr	r2, [pc, #328]	; (800288c <HAL_DAC_Start_DMA+0x184>)
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a51      	ldr	r2, [pc, #324]	; (8002890 <HAL_DAC_Start_DMA+0x188>)
 800274a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a50      	ldr	r2, [pc, #320]	; (8002894 <HAL_DAC_Start_DMA+0x18c>)
 8002752:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002762:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	2b08      	cmp	r3, #8
 8002768:	d013      	beq.n	8002792 <HAL_DAC_Start_DMA+0x8a>
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	2b08      	cmp	r3, #8
 800276e:	d845      	bhi.n	80027fc <HAL_DAC_Start_DMA+0xf4>
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_DAC_Start_DMA+0x76>
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d005      	beq.n	8002788 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800277c:	e03e      	b.n	80027fc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3308      	adds	r3, #8
 8002784:	613b      	str	r3, [r7, #16]
        break;
 8002786:	e03c      	b.n	8002802 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	330c      	adds	r3, #12
 800278e:	613b      	str	r3, [r7, #16]
        break;
 8002790:	e037      	b.n	8002802 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3310      	adds	r3, #16
 8002798:	613b      	str	r3, [r7, #16]
        break;
 800279a:	e032      	b.n	8002802 <HAL_DAC_Start_DMA+0xfa>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a3d      	ldr	r2, [pc, #244]	; (8002898 <HAL_DAC_Start_DMA+0x190>)
 80027a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a3c      	ldr	r2, [pc, #240]	; (800289c <HAL_DAC_Start_DMA+0x194>)
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a3b      	ldr	r2, [pc, #236]	; (80028a0 <HAL_DAC_Start_DMA+0x198>)
 80027b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027c2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d013      	beq.n	80027f2 <HAL_DAC_Start_DMA+0xea>
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d817      	bhi.n	8002800 <HAL_DAC_Start_DMA+0xf8>
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_DAC_Start_DMA+0xd6>
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d005      	beq.n	80027e8 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80027dc:	e010      	b.n	8002800 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3314      	adds	r3, #20
 80027e4:	613b      	str	r3, [r7, #16]
        break;
 80027e6:	e00c      	b.n	8002802 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3318      	adds	r3, #24
 80027ee:	613b      	str	r3, [r7, #16]
        break;
 80027f0:	e007      	b.n	8002802 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	331c      	adds	r3, #28
 80027f8:	613b      	str	r3, [r7, #16]
        break;
 80027fa:	e002      	b.n	8002802 <HAL_DAC_Start_DMA+0xfa>
        break;
 80027fc:	bf00      	nop
 80027fe:	e000      	b.n	8002802 <HAL_DAC_Start_DMA+0xfa>
        break;
 8002800:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d111      	bne.n	800282c <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002816:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6898      	ldr	r0, [r3, #8]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	f000 fa53 	bl	8002ccc <HAL_DMA_Start_IT>
 8002826:	4603      	mov	r3, r0
 8002828:	75fb      	strb	r3, [r7, #23]
 800282a:	e010      	b.n	800284e <HAL_DAC_Start_DMA+0x146>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800283a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68d8      	ldr	r0, [r3, #12]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	f000 fa41 	bl	8002ccc <HAL_DMA_Start_IT>
 800284a:	4603      	mov	r3, r0
 800284c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10c      	bne.n	8002874 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2201      	movs	r2, #1
 8002868:	409a      	lsls	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e005      	b.n	8002880 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f043 0204 	orr.w	r2, r3, #4
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002880:	7dfb      	ldrb	r3, [r7, #23]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	08002a47 	.word	0x08002a47
 8002890:	08002a69 	.word	0x08002a69
 8002894:	08002a85 	.word	0x08002a85
 8002898:	08002b03 	.word	0x08002b03
 800289c:	08002b25 	.word	0x08002b25
 80028a0:	08002b41 	.word	0x08002b41

080028a4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ba:	d120      	bne.n	80028fe <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ca:	d118      	bne.n	80028fe <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2204      	movs	r2, #4
 80028d0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f043 0201 	orr.w	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028f6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f84b 	bl	8002994 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800290c:	d120      	bne.n	8002950 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800291c:	d118      	bne.n	8002950 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2204      	movs	r2, #4
 8002922:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f043 0202 	orr.w	r2, r3, #2
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002938:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002948:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f8cf 	bl	8002aee <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	795b      	ldrb	r3, [r3, #5]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_DAC_ConfigChannel+0x18>
 80029bc:	2302      	movs	r3, #2
 80029be:	e03c      	b.n	8002a3a <HAL_DAC_ConfigChannel+0x92>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2202      	movs	r2, #2
 80029ca:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	f640 72fe 	movw	r2, #4094	; 0xffe
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4013      	ands	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6819      	ldr	r1, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	22c0      	movs	r2, #192	; 0xc0
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43da      	mvns	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	400a      	ands	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7ff ff7f 	bl	8002958 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	711a      	strb	r2, [r3, #4]
}
 8002a60:	bf00      	nop
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7ff ff78 	bl	800296c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f043 0204 	orr.w	r2, r3, #4
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff ff6e 	bl	8002980 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	711a      	strb	r2, [r3, #4]
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff ffce 	bl	8002ab2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	711a      	strb	r2, [r3, #4]
}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7ff ffc7 	bl	8002ac6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f043 0204 	orr.w	r2, r3, #4
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f7ff ffbd 	bl	8002ada <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	711a      	strb	r2, [r3, #4]
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b7c:	f7ff fc0e 	bl	800239c <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e099      	b.n	8002cc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bac:	e00f      	b.n	8002bce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bae:	f7ff fbf5 	bl	800239c <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d908      	bls.n	8002bce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e078      	b.n	8002cc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e8      	bne.n	8002bae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <HAL_DMA_Init+0x158>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d107      	bne.n	8002c38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	4313      	orrs	r3, r2
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f023 0307 	bic.w	r3, r3, #7
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d117      	bne.n	8002c92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00e      	beq.n	8002c92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fb09 	bl	800328c <DMA_CheckFifoParam>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2240      	movs	r2, #64	; 0x40
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e016      	b.n	8002cc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fac0 	bl	8003220 <DMA_CalcBaseAndBitshift>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	223f      	movs	r2, #63	; 0x3f
 8002caa:	409a      	lsls	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	f010803f 	.word	0xf010803f

08002ccc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_DMA_Start_IT+0x26>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e048      	b.n	8002d84 <HAL_DMA_Start_IT+0xb8>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d137      	bne.n	8002d76 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fa52 	bl	80031c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	223f      	movs	r2, #63	; 0x3f
 8002d26:	409a      	lsls	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0216 	orr.w	r2, r2, #22
 8002d3a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d4a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0208 	orr.w	r2, r2, #8
 8002d62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e005      	b.n	8002d82 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d9a:	f7ff faff 	bl	800239c <HAL_GetTick>
 8002d9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d008      	beq.n	8002dbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e052      	b.n	8002e64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0216 	bic.w	r2, r2, #22
 8002dcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ddc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <HAL_DMA_Abort+0x62>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0208 	bic.w	r2, r2, #8
 8002dfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e0e:	e013      	b.n	8002e38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e10:	f7ff fac4 	bl	800239c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d90c      	bls.n	8002e38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2203      	movs	r2, #3
 8002e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e015      	b.n	8002e64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e4      	bne.n	8002e10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	223f      	movs	r2, #63	; 0x3f
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d004      	beq.n	8002e8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2280      	movs	r2, #128	; 0x80
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00c      	b.n	8002ea4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2205      	movs	r2, #5
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002ebc:	4b92      	ldr	r3, [pc, #584]	; (8003108 <HAL_DMA_IRQHandler+0x258>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a92      	ldr	r2, [pc, #584]	; (800310c <HAL_DMA_IRQHandler+0x25c>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	0a9b      	lsrs	r3, r3, #10
 8002ec8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	2208      	movs	r2, #8
 8002edc:	409a      	lsls	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01a      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0204 	bic.w	r2, r2, #4
 8002f02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	2208      	movs	r2, #8
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f043 0201 	orr.w	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	2201      	movs	r2, #1
 8002f22:	409a      	lsls	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d012      	beq.n	8002f52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	2201      	movs	r2, #1
 8002f40:	409a      	lsls	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	f043 0202 	orr.w	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	2204      	movs	r2, #4
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d012      	beq.n	8002f88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	2204      	movs	r2, #4
 8002f76:	409a      	lsls	r2, r3
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f043 0204 	orr.w	r2, r3, #4
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d043      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d03c      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	2210      	movs	r2, #16
 8002fac:	409a      	lsls	r2, r3
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d018      	beq.n	8002ff2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d108      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d024      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	4798      	blx	r3
 8002fde:	e01f      	b.n	8003020 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01b      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
 8002ff0:	e016      	b.n	8003020 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0208 	bic.w	r2, r2, #8
 800300e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	2220      	movs	r2, #32
 8003026:	409a      	lsls	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 808e 	beq.w	800314e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8086 	beq.w	800314e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003046:	2220      	movs	r2, #32
 8003048:	409a      	lsls	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b05      	cmp	r3, #5
 8003058:	d136      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0216 	bic.w	r2, r2, #22
 8003068:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003078:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <HAL_DMA_IRQHandler+0x1da>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0208 	bic.w	r2, r2, #8
 8003098:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	223f      	movs	r2, #63	; 0x3f
 80030a0:	409a      	lsls	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d07d      	beq.n	80031ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
        }
        return;
 80030c6:	e078      	b.n	80031ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01c      	beq.n	8003110 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d108      	bne.n	80030f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d030      	beq.n	800314e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	4798      	blx	r3
 80030f4:	e02b      	b.n	800314e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d027      	beq.n	800314e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
 8003106:	e022      	b.n	800314e <HAL_DMA_IRQHandler+0x29e>
 8003108:	20000008 	.word	0x20000008
 800310c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0210 	bic.w	r2, r2, #16
 800312c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	2b00      	cmp	r3, #0
 8003154:	d032      	beq.n	80031bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d022      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2205      	movs	r2, #5
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	3301      	adds	r3, #1
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	429a      	cmp	r2, r3
 8003184:	d307      	bcc.n	8003196 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f2      	bne.n	800317a <HAL_DMA_IRQHandler+0x2ca>
 8003194:	e000      	b.n	8003198 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003196:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
 80031b8:	e000      	b.n	80031bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80031ba:	bf00      	nop
    }
  }
}
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop

080031c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d108      	bne.n	8003204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003202:	e007      	b.n	8003214 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	3b10      	subs	r3, #16
 8003230:	4a13      	ldr	r2, [pc, #76]	; (8003280 <DMA_CalcBaseAndBitshift+0x60>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <DMA_CalcBaseAndBitshift+0x64>)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d908      	bls.n	8003260 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <DMA_CalcBaseAndBitshift+0x68>)
 8003256:	4013      	ands	r3, r2
 8003258:	1d1a      	adds	r2, r3, #4
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	659a      	str	r2, [r3, #88]	; 0x58
 800325e:	e006      	b.n	800326e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	4b08      	ldr	r3, [pc, #32]	; (8003288 <DMA_CalcBaseAndBitshift+0x68>)
 8003268:	4013      	ands	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	aaaaaaab 	.word	0xaaaaaaab
 8003284:	08008280 	.word	0x08008280
 8003288:	fffffc00 	.word	0xfffffc00

0800328c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11f      	bne.n	80032e6 <DMA_CheckFifoParam+0x5a>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d856      	bhi.n	800335a <DMA_CheckFifoParam+0xce>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <DMA_CheckFifoParam+0x28>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032d7 	.word	0x080032d7
 80032bc:	080032c5 	.word	0x080032c5
 80032c0:	0800335b 	.word	0x0800335b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d046      	beq.n	800335e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d4:	e043      	b.n	800335e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032de:	d140      	bne.n	8003362 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e4:	e03d      	b.n	8003362 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ee:	d121      	bne.n	8003334 <DMA_CheckFifoParam+0xa8>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d837      	bhi.n	8003366 <DMA_CheckFifoParam+0xda>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <DMA_CheckFifoParam+0x70>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	08003313 	.word	0x08003313
 8003304:	0800330d 	.word	0x0800330d
 8003308:	08003325 	.word	0x08003325
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      break;
 8003310:	e030      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d025      	beq.n	800336a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003322:	e022      	b.n	800336a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800332c:	d11f      	bne.n	800336e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003332:	e01c      	b.n	800336e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d903      	bls.n	8003342 <DMA_CheckFifoParam+0xb6>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d003      	beq.n	8003348 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003340:	e018      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
      break;
 8003346:	e015      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00e      	beq.n	8003372 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      break;
 8003358:	e00b      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 800335a:	bf00      	nop
 800335c:	e00a      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 800335e:	bf00      	nop
 8003360:	e008      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 8003362:	bf00      	nop
 8003364:	e006      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 8003366:	bf00      	nop
 8003368:	e004      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e002      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;   
 800336e:	bf00      	nop
 8003370:	e000      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
    }
  } 
  
  return status; 
 8003374:	7bfb      	ldrb	r3, [r7, #15]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop

08003384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	; 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e175      	b.n	8003690 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033a4:	2201      	movs	r2, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	f040 8164 	bne.w	800368a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d00b      	beq.n	80033e2 <HAL_GPIO_Init+0x5e>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d007      	beq.n	80033e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d6:	2b11      	cmp	r3, #17
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b12      	cmp	r3, #18
 80033e0:	d130      	bne.n	8003444 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003418:	2201      	movs	r2, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 0201 	and.w	r2, r3, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2203      	movs	r2, #3
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x100>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b12      	cmp	r3, #18
 8003482:	d123      	bne.n	80034cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	08da      	lsrs	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3208      	adds	r2, #8
 800348c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	220f      	movs	r2, #15
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	08da      	lsrs	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3208      	adds	r2, #8
 80034c6:	69b9      	ldr	r1, [r7, #24]
 80034c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0203 	and.w	r2, r3, #3
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80be 	beq.w	800368a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350e:	4b66      	ldr	r3, [pc, #408]	; (80036a8 <HAL_GPIO_Init+0x324>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	4a65      	ldr	r2, [pc, #404]	; (80036a8 <HAL_GPIO_Init+0x324>)
 8003514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003518:	6453      	str	r3, [r2, #68]	; 0x44
 800351a:	4b63      	ldr	r3, [pc, #396]	; (80036a8 <HAL_GPIO_Init+0x324>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003526:	4a61      	ldr	r2, [pc, #388]	; (80036ac <HAL_GPIO_Init+0x328>)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	3302      	adds	r3, #2
 800352e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	220f      	movs	r2, #15
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4013      	ands	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a58      	ldr	r2, [pc, #352]	; (80036b0 <HAL_GPIO_Init+0x32c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d037      	beq.n	80035c2 <HAL_GPIO_Init+0x23e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a57      	ldr	r2, [pc, #348]	; (80036b4 <HAL_GPIO_Init+0x330>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d031      	beq.n	80035be <HAL_GPIO_Init+0x23a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a56      	ldr	r2, [pc, #344]	; (80036b8 <HAL_GPIO_Init+0x334>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d02b      	beq.n	80035ba <HAL_GPIO_Init+0x236>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a55      	ldr	r2, [pc, #340]	; (80036bc <HAL_GPIO_Init+0x338>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d025      	beq.n	80035b6 <HAL_GPIO_Init+0x232>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a54      	ldr	r2, [pc, #336]	; (80036c0 <HAL_GPIO_Init+0x33c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01f      	beq.n	80035b2 <HAL_GPIO_Init+0x22e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a53      	ldr	r2, [pc, #332]	; (80036c4 <HAL_GPIO_Init+0x340>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d019      	beq.n	80035ae <HAL_GPIO_Init+0x22a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a52      	ldr	r2, [pc, #328]	; (80036c8 <HAL_GPIO_Init+0x344>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <HAL_GPIO_Init+0x226>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a51      	ldr	r2, [pc, #324]	; (80036cc <HAL_GPIO_Init+0x348>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00d      	beq.n	80035a6 <HAL_GPIO_Init+0x222>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a50      	ldr	r2, [pc, #320]	; (80036d0 <HAL_GPIO_Init+0x34c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <HAL_GPIO_Init+0x21e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4f      	ldr	r2, [pc, #316]	; (80036d4 <HAL_GPIO_Init+0x350>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d101      	bne.n	800359e <HAL_GPIO_Init+0x21a>
 800359a:	2309      	movs	r3, #9
 800359c:	e012      	b.n	80035c4 <HAL_GPIO_Init+0x240>
 800359e:	230a      	movs	r3, #10
 80035a0:	e010      	b.n	80035c4 <HAL_GPIO_Init+0x240>
 80035a2:	2308      	movs	r3, #8
 80035a4:	e00e      	b.n	80035c4 <HAL_GPIO_Init+0x240>
 80035a6:	2307      	movs	r3, #7
 80035a8:	e00c      	b.n	80035c4 <HAL_GPIO_Init+0x240>
 80035aa:	2306      	movs	r3, #6
 80035ac:	e00a      	b.n	80035c4 <HAL_GPIO_Init+0x240>
 80035ae:	2305      	movs	r3, #5
 80035b0:	e008      	b.n	80035c4 <HAL_GPIO_Init+0x240>
 80035b2:	2304      	movs	r3, #4
 80035b4:	e006      	b.n	80035c4 <HAL_GPIO_Init+0x240>
 80035b6:	2303      	movs	r3, #3
 80035b8:	e004      	b.n	80035c4 <HAL_GPIO_Init+0x240>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e002      	b.n	80035c4 <HAL_GPIO_Init+0x240>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_GPIO_Init+0x240>
 80035c2:	2300      	movs	r3, #0
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	f002 0203 	and.w	r2, r2, #3
 80035ca:	0092      	lsls	r2, r2, #2
 80035cc:	4093      	lsls	r3, r2
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035d4:	4935      	ldr	r1, [pc, #212]	; (80036ac <HAL_GPIO_Init+0x328>)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	3302      	adds	r3, #2
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e2:	4b3d      	ldr	r3, [pc, #244]	; (80036d8 <HAL_GPIO_Init+0x354>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003606:	4a34      	ldr	r2, [pc, #208]	; (80036d8 <HAL_GPIO_Init+0x354>)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800360c:	4b32      	ldr	r3, [pc, #200]	; (80036d8 <HAL_GPIO_Init+0x354>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003630:	4a29      	ldr	r2, [pc, #164]	; (80036d8 <HAL_GPIO_Init+0x354>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003636:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <HAL_GPIO_Init+0x354>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	43db      	mvns	r3, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800365a:	4a1f      	ldr	r2, [pc, #124]	; (80036d8 <HAL_GPIO_Init+0x354>)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_GPIO_Init+0x354>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003684:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <HAL_GPIO_Init+0x354>)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3301      	adds	r3, #1
 800368e:	61fb      	str	r3, [r7, #28]
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2b0f      	cmp	r3, #15
 8003694:	f67f ae86 	bls.w	80033a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3724      	adds	r7, #36	; 0x24
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40013800 	.word	0x40013800
 80036b0:	40020000 	.word	0x40020000
 80036b4:	40020400 	.word	0x40020400
 80036b8:	40020800 	.word	0x40020800
 80036bc:	40020c00 	.word	0x40020c00
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40021400 	.word	0x40021400
 80036c8:	40021800 	.word	0x40021800
 80036cc:	40021c00 	.word	0x40021c00
 80036d0:	40022000 	.word	0x40022000
 80036d4:	40022400 	.word	0x40022400
 80036d8:	40013c00 	.word	0x40013c00

080036dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	807b      	strh	r3, [r7, #2]
 80036e8:	4613      	mov	r3, r2
 80036ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036ec:	787b      	ldrb	r3, [r7, #1]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036f2:	887a      	ldrh	r2, [r7, #2]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036f8:	e003      	b.n	8003702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	041a      	lsls	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	619a      	str	r2, [r3, #24]
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d006      	beq.n	8003734 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003726:	4a05      	ldr	r2, [pc, #20]	; (800373c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f806 	bl	8003740 <HAL_GPIO_EXTI_Callback>
  }
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40013c00 	.word	0x40013c00

08003740 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003760:	2300      	movs	r3, #0
 8003762:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e291      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8087 	beq.w	800388a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800377c:	4b96      	ldr	r3, [pc, #600]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b04      	cmp	r3, #4
 8003786:	d00c      	beq.n	80037a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003788:	4b93      	ldr	r3, [pc, #588]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d112      	bne.n	80037ba <HAL_RCC_OscConfig+0x62>
 8003794:	4b90      	ldr	r3, [pc, #576]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a0:	d10b      	bne.n	80037ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a2:	4b8d      	ldr	r3, [pc, #564]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d06c      	beq.n	8003888 <HAL_RCC_OscConfig+0x130>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d168      	bne.n	8003888 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e26b      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d106      	bne.n	80037d2 <HAL_RCC_OscConfig+0x7a>
 80037c4:	4b84      	ldr	r3, [pc, #528]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a83      	ldr	r2, [pc, #524]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	e02e      	b.n	8003830 <HAL_RCC_OscConfig+0xd8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x9c>
 80037da:	4b7f      	ldr	r3, [pc, #508]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7e      	ldr	r2, [pc, #504]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b7c      	ldr	r3, [pc, #496]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a7b      	ldr	r2, [pc, #492]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e01d      	b.n	8003830 <HAL_RCC_OscConfig+0xd8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0xc0>
 80037fe:	4b76      	ldr	r3, [pc, #472]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a75      	ldr	r2, [pc, #468]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b73      	ldr	r3, [pc, #460]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a72      	ldr	r2, [pc, #456]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0xd8>
 8003818:	4b6f      	ldr	r3, [pc, #444]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a6e      	ldr	r2, [pc, #440]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b6c      	ldr	r3, [pc, #432]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a6b      	ldr	r2, [pc, #428]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fe fdb0 	bl	800239c <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fe fdac 	bl	800239c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e21f      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b61      	ldr	r3, [pc, #388]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0xe8>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fe fd9c 	bl	800239c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7fe fd98 	bl	800239c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e20b      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	4b57      	ldr	r3, [pc, #348]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x110>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d069      	beq.n	800396a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003896:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a2:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d11c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x190>
 80038ae:	4b4a      	ldr	r3, [pc, #296]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ba:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_RCC_OscConfig+0x17a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e1df      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d2:	4b41      	ldr	r3, [pc, #260]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	493d      	ldr	r1, [pc, #244]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	e040      	b.n	800396a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d023      	beq.n	8003938 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f0:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a38      	ldr	r2, [pc, #224]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fe fd4e 	bl	800239c <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003904:	f7fe fd4a 	bl	800239c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e1bd      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003916:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003922:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4929      	ldr	r1, [pc, #164]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]
 8003936:	e018      	b.n	800396a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe fd2a 	bl	800239c <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394c:	f7fe fd26 	bl	800239c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e199      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395e:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d038      	beq.n	80039e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d019      	beq.n	80039b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397e:	4b16      	ldr	r3, [pc, #88]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003982:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398a:	f7fe fd07 	bl	800239c <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003992:	f7fe fd03 	bl	800239c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e176      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80039a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x23a>
 80039b0:	e01a      	b.n	80039e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80039b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b6:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039be:	f7fe fced 	bl	800239c <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c4:	e00a      	b.n	80039dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c6:	f7fe fce9 	bl	800239c <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d903      	bls.n	80039dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e15c      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
 80039d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	4b91      	ldr	r3, [pc, #580]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 80039de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1ee      	bne.n	80039c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a4 	beq.w	8003b3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f6:	4b8b      	ldr	r3, [pc, #556]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10d      	bne.n	8003a1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	4b88      	ldr	r3, [pc, #544]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	4a87      	ldr	r2, [pc, #540]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0e:	4b85      	ldr	r3, [pc, #532]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1e:	4b82      	ldr	r3, [pc, #520]	; (8003c28 <HAL_RCC_OscConfig+0x4d0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d118      	bne.n	8003a5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a2a:	4b7f      	ldr	r3, [pc, #508]	; (8003c28 <HAL_RCC_OscConfig+0x4d0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a7e      	ldr	r2, [pc, #504]	; (8003c28 <HAL_RCC_OscConfig+0x4d0>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a36:	f7fe fcb1 	bl	800239c <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3e:	f7fe fcad 	bl	800239c <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b64      	cmp	r3, #100	; 0x64
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e120      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a50:	4b75      	ldr	r3, [pc, #468]	; (8003c28 <HAL_RCC_OscConfig+0x4d0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x31a>
 8003a64:	4b6f      	ldr	r3, [pc, #444]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a6e      	ldr	r2, [pc, #440]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a70:	e02d      	b.n	8003ace <HAL_RCC_OscConfig+0x376>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x33c>
 8003a7a:	4b6a      	ldr	r3, [pc, #424]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	4a69      	ldr	r2, [pc, #420]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	6713      	str	r3, [r2, #112]	; 0x70
 8003a86:	4b67      	ldr	r3, [pc, #412]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a66      	ldr	r2, [pc, #408]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a8c:	f023 0304 	bic.w	r3, r3, #4
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70
 8003a92:	e01c      	b.n	8003ace <HAL_RCC_OscConfig+0x376>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b05      	cmp	r3, #5
 8003a9a:	d10c      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x35e>
 8003a9c:	4b61      	ldr	r3, [pc, #388]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	4a60      	ldr	r2, [pc, #384]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003aa2:	f043 0304 	orr.w	r3, r3, #4
 8003aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa8:	4b5e      	ldr	r3, [pc, #376]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4a5d      	ldr	r2, [pc, #372]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab4:	e00b      	b.n	8003ace <HAL_RCC_OscConfig+0x376>
 8003ab6:	4b5b      	ldr	r3, [pc, #364]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	4a5a      	ldr	r2, [pc, #360]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac2:	4b58      	ldr	r3, [pc, #352]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	4a57      	ldr	r2, [pc, #348]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003ac8:	f023 0304 	bic.w	r3, r3, #4
 8003acc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d015      	beq.n	8003b02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad6:	f7fe fc61 	bl	800239c <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003adc:	e00a      	b.n	8003af4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fe fc5d 	bl	800239c <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e0ce      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af4:	4b4b      	ldr	r3, [pc, #300]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0ee      	beq.n	8003ade <HAL_RCC_OscConfig+0x386>
 8003b00:	e014      	b.n	8003b2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b02:	f7fe fc4b 	bl	800239c <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b08:	e00a      	b.n	8003b20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0a:	f7fe fc47 	bl	800239c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e0b8      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b20:	4b40      	ldr	r3, [pc, #256]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1ee      	bne.n	8003b0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d105      	bne.n	8003b3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b32:	4b3c      	ldr	r3, [pc, #240]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	4a3b      	ldr	r2, [pc, #236]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 80a4 	beq.w	8003c90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b48:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d06b      	beq.n	8003c2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d149      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5c:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a30      	ldr	r2, [pc, #192]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fe fc18 	bl	800239c <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fe fc14 	bl	800239c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e087      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	4b28      	ldr	r3, [pc, #160]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	019b      	lsls	r3, r3, #6
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	041b      	lsls	r3, r3, #16
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	061b      	lsls	r3, r3, #24
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003bb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a18      	ldr	r2, [pc, #96]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fe fbe8 	bl	800239c <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fe fbe4 	bl	800239c <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e057      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x478>
 8003bee:	e04f      	b.n	8003c90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0b      	ldr	r2, [pc, #44]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fe fbce 	bl	800239c <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fe fbca 	bl	800239c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e03d      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4ac>
 8003c22:	e035      	b.n	8003c90 <HAL_RCC_OscConfig+0x538>
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_RCC_OscConfig+0x544>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d028      	beq.n	8003c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d121      	bne.n	8003c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d11a      	bne.n	8003c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d111      	bne.n	8003c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	3b01      	subs	r3, #1
 8003c76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800

08003ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0d0      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b6a      	ldr	r3, [pc, #424]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d910      	bls.n	8003ce8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b67      	ldr	r3, [pc, #412]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 020f 	bic.w	r2, r3, #15
 8003cce:	4965      	ldr	r1, [pc, #404]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0b8      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d020      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d00:	4b59      	ldr	r3, [pc, #356]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4a58      	ldr	r2, [pc, #352]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d18:	4b53      	ldr	r3, [pc, #332]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4a52      	ldr	r2, [pc, #328]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d24:	4b50      	ldr	r3, [pc, #320]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	494d      	ldr	r1, [pc, #308]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d040      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d107      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d115      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e07f      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d107      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d62:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e073      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d72:	4b3d      	ldr	r3, [pc, #244]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e06b      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d82:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 0203 	bic.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4936      	ldr	r1, [pc, #216]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d94:	f7fe fb02 	bl	800239c <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d9c:	f7fe fafe 	bl	800239c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e053      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 020c 	and.w	r2, r3, #12
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d1eb      	bne.n	8003d9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d210      	bcs.n	8003df4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 020f 	bic.w	r2, r3, #15
 8003dda:	4922      	ldr	r1, [pc, #136]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e032      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e00:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4916      	ldr	r1, [pc, #88]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e1e:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	490e      	ldr	r1, [pc, #56]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e32:	f000 f885 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8003e36:	4602      	mov	r2, r0
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	490a      	ldr	r1, [pc, #40]	; (8003e6c <HAL_RCC_ClockConfig+0x1cc>)
 8003e44:	5ccb      	ldrb	r3, [r1, r3]
 8003e46:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4a:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <HAL_RCC_ClockConfig+0x1d0>)
 8003e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x1d4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe fa5e 	bl	8002314 <HAL_InitTick>

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40023c00 	.word	0x40023c00
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	08008268 	.word	0x08008268
 8003e70:	20000008 	.word	0x20000008
 8003e74:	2000000c 	.word	0x2000000c

08003e78 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08c      	sub	sp, #48	; 0x30
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d127      	bne.n	8003eda <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003e8a:	4b2a      	ldr	r3, [pc, #168]	; (8003f34 <HAL_RCC_MCOConfig+0xbc>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	4a29      	ldr	r2, [pc, #164]	; (8003f34 <HAL_RCC_MCOConfig+0xbc>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6313      	str	r3, [r2, #48]	; 0x30
 8003e96:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <HAL_RCC_MCOConfig+0xbc>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	61bb      	str	r3, [r7, #24]
 8003ea0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003eac:	2303      	movs	r3, #3
 8003eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003eb8:	f107 031c 	add.w	r3, r7, #28
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	481e      	ldr	r0, [pc, #120]	; (8003f38 <HAL_RCC_MCOConfig+0xc0>)
 8003ec0:	f7ff fa60 	bl	8003384 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <HAL_RCC_MCOConfig+0xbc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	4918      	ldr	r1, [pc, #96]	; (8003f34 <HAL_RCC_MCOConfig+0xbc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8003ed8:	e027      	b.n	8003f2a <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8003eda:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <HAL_RCC_MCOConfig+0xbc>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <HAL_RCC_MCOConfig+0xbc>)
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <HAL_RCC_MCOConfig+0xbc>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003efc:	2303      	movs	r3, #3
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003f08:	f107 031c 	add.w	r3, r7, #28
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	480b      	ldr	r0, [pc, #44]	; (8003f3c <HAL_RCC_MCOConfig+0xc4>)
 8003f10:	f7ff fa38 	bl	8003384 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <HAL_RCC_MCOConfig+0xbc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	00d9      	lsls	r1, r3, #3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	430b      	orrs	r3, r1
 8003f24:	4903      	ldr	r1, [pc, #12]	; (8003f34 <HAL_RCC_MCOConfig+0xbc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
}
 8003f2a:	bf00      	nop
 8003f2c:	3730      	adds	r7, #48	; 0x30
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40020000 	.word	0x40020000
 8003f3c:	40020800 	.word	0x40020800

08003f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f40:	b5b0      	push	{r4, r5, r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f46:	2100      	movs	r1, #0
 8003f48:	6079      	str	r1, [r7, #4]
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	60f9      	str	r1, [r7, #12]
 8003f4e:	2100      	movs	r1, #0
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003f52:	2100      	movs	r1, #0
 8003f54:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f56:	4952      	ldr	r1, [pc, #328]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f58:	6889      	ldr	r1, [r1, #8]
 8003f5a:	f001 010c 	and.w	r1, r1, #12
 8003f5e:	2908      	cmp	r1, #8
 8003f60:	d00d      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0x3e>
 8003f62:	2908      	cmp	r1, #8
 8003f64:	f200 8094 	bhi.w	8004090 <HAL_RCC_GetSysClockFreq+0x150>
 8003f68:	2900      	cmp	r1, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_RCC_GetSysClockFreq+0x32>
 8003f6c:	2904      	cmp	r1, #4
 8003f6e:	d003      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x38>
 8003f70:	e08e      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f72:	4b4c      	ldr	r3, [pc, #304]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f74:	60bb      	str	r3, [r7, #8]
      break;
 8003f76:	e08e      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f78:	4b4b      	ldr	r3, [pc, #300]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f7a:	60bb      	str	r3, [r7, #8]
      break;
 8003f7c:	e08b      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f7e:	4948      	ldr	r1, [pc, #288]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f80:	6849      	ldr	r1, [r1, #4]
 8003f82:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003f86:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f88:	4945      	ldr	r1, [pc, #276]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f8a:	6849      	ldr	r1, [r1, #4]
 8003f8c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003f90:	2900      	cmp	r1, #0
 8003f92:	d024      	beq.n	8003fde <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f94:	4942      	ldr	r1, [pc, #264]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f96:	6849      	ldr	r1, [r1, #4]
 8003f98:	0989      	lsrs	r1, r1, #6
 8003f9a:	4608      	mov	r0, r1
 8003f9c:	f04f 0100 	mov.w	r1, #0
 8003fa0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003fa4:	f04f 0500 	mov.w	r5, #0
 8003fa8:	ea00 0204 	and.w	r2, r0, r4
 8003fac:	ea01 0305 	and.w	r3, r1, r5
 8003fb0:	493d      	ldr	r1, [pc, #244]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003fb2:	fb01 f003 	mul.w	r0, r1, r3
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	fb01 f102 	mul.w	r1, r1, r2
 8003fbc:	1844      	adds	r4, r0, r1
 8003fbe:	493a      	ldr	r1, [pc, #232]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003fc0:	fba2 0101 	umull	r0, r1, r2, r1
 8003fc4:	1863      	adds	r3, r4, r1
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	f7fc fdc2 	bl	8000b58 <__aeabi_uldivmod>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4613      	mov	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	e04a      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fde:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	099b      	lsrs	r3, r3, #6
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fee:	f04f 0100 	mov.w	r1, #0
 8003ff2:	ea02 0400 	and.w	r4, r2, r0
 8003ff6:	ea03 0501 	and.w	r5, r3, r1
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	014b      	lsls	r3, r1, #5
 8004008:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800400c:	0142      	lsls	r2, r0, #5
 800400e:	4610      	mov	r0, r2
 8004010:	4619      	mov	r1, r3
 8004012:	1b00      	subs	r0, r0, r4
 8004014:	eb61 0105 	sbc.w	r1, r1, r5
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	018b      	lsls	r3, r1, #6
 8004022:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004026:	0182      	lsls	r2, r0, #6
 8004028:	1a12      	subs	r2, r2, r0
 800402a:	eb63 0301 	sbc.w	r3, r3, r1
 800402e:	f04f 0000 	mov.w	r0, #0
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	00d9      	lsls	r1, r3, #3
 8004038:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800403c:	00d0      	lsls	r0, r2, #3
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	1912      	adds	r2, r2, r4
 8004044:	eb45 0303 	adc.w	r3, r5, r3
 8004048:	f04f 0000 	mov.w	r0, #0
 800404c:	f04f 0100 	mov.w	r1, #0
 8004050:	0299      	lsls	r1, r3, #10
 8004052:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004056:	0290      	lsls	r0, r2, #10
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4610      	mov	r0, r2
 800405e:	4619      	mov	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	461a      	mov	r2, r3
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	f7fc fd76 	bl	8000b58 <__aeabi_uldivmod>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4613      	mov	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	3301      	adds	r3, #1
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	60bb      	str	r3, [r7, #8]
      break;
 800408e:	e002      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004092:	60bb      	str	r3, [r7, #8]
      break;
 8004094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004096:	68bb      	ldr	r3, [r7, #8]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bdb0      	pop	{r4, r5, r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	00f42400 	.word	0x00f42400
 80040a8:	017d7840 	.word	0x017d7840

080040ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b0:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040b2:	681b      	ldr	r3, [r3, #0]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000008 	.word	0x20000008

080040c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040c8:	f7ff fff0 	bl	80040ac <HAL_RCC_GetHCLKFreq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	0a9b      	lsrs	r3, r3, #10
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	4903      	ldr	r1, [pc, #12]	; (80040e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040da:	5ccb      	ldrb	r3, [r1, r3]
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40023800 	.word	0x40023800
 80040e8:	08008278 	.word	0x08008278

080040ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040f0:	f7ff ffdc 	bl	80040ac <HAL_RCC_GetHCLKFreq>
 80040f4:	4602      	mov	r2, r0
 80040f6:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_RCC_GetPCLK2Freq+0x20>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	0b5b      	lsrs	r3, r3, #13
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	4903      	ldr	r1, [pc, #12]	; (8004110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004102:	5ccb      	ldrb	r3, [r1, r3]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004108:	4618      	mov	r0, r3
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40023800 	.word	0x40023800
 8004110:	08008278 	.word	0x08008278

08004114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d012      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800413c:	4b69      	ldr	r3, [pc, #420]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a68      	ldr	r2, [pc, #416]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004142:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004146:	6093      	str	r3, [r2, #8]
 8004148:	4b66      	ldr	r3, [pc, #408]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004150:	4964      	ldr	r1, [pc, #400]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800415e:	2301      	movs	r3, #1
 8004160:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d017      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800416e:	4b5d      	ldr	r3, [pc, #372]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004174:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417c:	4959      	ldr	r1, [pc, #356]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004188:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800418c:	d101      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800418e:	2301      	movs	r3, #1
 8004190:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d017      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041aa:	4b4e      	ldr	r3, [pc, #312]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	494a      	ldr	r1, [pc, #296]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c8:	d101      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041ca:	2301      	movs	r3, #1
 80041cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041d6:	2301      	movs	r3, #1
 80041d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80041e6:	2301      	movs	r3, #1
 80041e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 808b 	beq.w	800430e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041f8:	4b3a      	ldr	r3, [pc, #232]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	4a39      	ldr	r2, [pc, #228]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004202:	6413      	str	r3, [r2, #64]	; 0x40
 8004204:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004210:	4b35      	ldr	r3, [pc, #212]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a34      	ldr	r2, [pc, #208]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421c:	f7fe f8be 	bl	800239c <HAL_GetTick>
 8004220:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004224:	f7fe f8ba 	bl	800239c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	; 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e357      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004236:	4b2c      	ldr	r3, [pc, #176]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004242:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d035      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	429a      	cmp	r2, r3
 800425e:	d02e      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004260:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004268:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800426a:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	4a1d      	ldr	r2, [pc, #116]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004274:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004276:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a1a      	ldr	r2, [pc, #104]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004280:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004282:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004288:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d114      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fe f882 	bl	800239c <HAL_GetTick>
 8004298:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429a:	e00a      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429c:	f7fe f87e 	bl	800239c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e319      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b2:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0ee      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ca:	d111      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042da:	400b      	ands	r3, r1
 80042dc:	4901      	ldr	r1, [pc, #4]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	608b      	str	r3, [r1, #8]
 80042e2:	e00b      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40007000 	.word	0x40007000
 80042ec:	0ffffcff 	.word	0x0ffffcff
 80042f0:	4bb1      	ldr	r3, [pc, #708]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	4ab0      	ldr	r2, [pc, #704]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042fa:	6093      	str	r3, [r2, #8]
 80042fc:	4bae      	ldr	r3, [pc, #696]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004308:	49ab      	ldr	r1, [pc, #684]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800430a:	4313      	orrs	r3, r2
 800430c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	2b00      	cmp	r3, #0
 8004318:	d010      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800431a:	4ba7      	ldr	r3, [pc, #668]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800431c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004320:	4aa5      	ldr	r2, [pc, #660]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004326:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800432a:	4ba3      	ldr	r3, [pc, #652]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800432c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	49a0      	ldr	r1, [pc, #640]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004348:	4b9b      	ldr	r3, [pc, #620]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004356:	4998      	ldr	r1, [pc, #608]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800436a:	4b93      	ldr	r3, [pc, #588]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800436c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004370:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004378:	498f      	ldr	r1, [pc, #572]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800438c:	4b8a      	ldr	r3, [pc, #552]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439a:	4987      	ldr	r1, [pc, #540]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043ae:	4b82      	ldr	r3, [pc, #520]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	497e      	ldr	r1, [pc, #504]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043d0:	4b79      	ldr	r3, [pc, #484]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	f023 0203 	bic.w	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	4976      	ldr	r1, [pc, #472]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043f2:	4b71      	ldr	r3, [pc, #452]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f8:	f023 020c 	bic.w	r2, r3, #12
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004400:	496d      	ldr	r1, [pc, #436]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004414:	4b68      	ldr	r3, [pc, #416]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004422:	4965      	ldr	r1, [pc, #404]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004436:	4b60      	ldr	r3, [pc, #384]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004444:	495c      	ldr	r1, [pc, #368]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004458:	4b57      	ldr	r3, [pc, #348]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	4954      	ldr	r1, [pc, #336]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800447a:	4b4f      	ldr	r3, [pc, #316]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004480:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	494b      	ldr	r1, [pc, #300]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800449c:	4b46      	ldr	r3, [pc, #280]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044aa:	4943      	ldr	r1, [pc, #268]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80044be:	4b3e      	ldr	r3, [pc, #248]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044cc:	493a      	ldr	r1, [pc, #232]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044e0:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ee:	4932      	ldr	r1, [pc, #200]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d011      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004502:	4b2d      	ldr	r3, [pc, #180]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004510:	4929      	ldr	r1, [pc, #164]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800451c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004520:	d101      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004522:	2301      	movs	r3, #1
 8004524:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004532:	2301      	movs	r3, #1
 8004534:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004542:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004548:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004550:	4919      	ldr	r1, [pc, #100]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004564:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004574:	4910      	ldr	r1, [pc, #64]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d006      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80d9 	beq.w	8004742 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004590:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004596:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800459a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459c:	f7fd fefe 	bl	800239c <HAL_GetTick>
 80045a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045a2:	e00b      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045a4:	f7fd fefa 	bl	800239c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d904      	bls.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e197      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045bc:	4b6c      	ldr	r3, [pc, #432]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ed      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d021      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d11d      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045dc:	4b64      	ldr	r3, [pc, #400]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e2:	0c1b      	lsrs	r3, r3, #16
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045ea:	4b61      	ldr	r3, [pc, #388]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f0:	0e1b      	lsrs	r3, r3, #24
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	019a      	lsls	r2, r3, #6
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	431a      	orrs	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	061b      	lsls	r3, r3, #24
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	071b      	lsls	r3, r3, #28
 8004610:	4957      	ldr	r1, [pc, #348]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004636:	2b00      	cmp	r3, #0
 8004638:	d02e      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004642:	d129      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004644:	4b4a      	ldr	r3, [pc, #296]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004652:	4b47      	ldr	r3, [pc, #284]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004658:	0f1b      	lsrs	r3, r3, #28
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	019a      	lsls	r2, r3, #6
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	041b      	lsls	r3, r3, #16
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	061b      	lsls	r3, r3, #24
 8004672:	431a      	orrs	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	071b      	lsls	r3, r3, #28
 8004678:	493d      	ldr	r1, [pc, #244]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004680:	4b3b      	ldr	r3, [pc, #236]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004686:	f023 021f 	bic.w	r2, r3, #31
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	3b01      	subs	r3, #1
 8004690:	4937      	ldr	r1, [pc, #220]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01d      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046a4:	4b32      	ldr	r3, [pc, #200]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046aa:	0e1b      	lsrs	r3, r3, #24
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046b2:	4b2f      	ldr	r3, [pc, #188]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b8:	0f1b      	lsrs	r3, r3, #28
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	019a      	lsls	r2, r3, #6
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	041b      	lsls	r3, r3, #16
 80046cc:	431a      	orrs	r2, r3
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	061b      	lsls	r3, r3, #24
 80046d2:	431a      	orrs	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	071b      	lsls	r3, r3, #28
 80046d8:	4925      	ldr	r1, [pc, #148]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d011      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	019a      	lsls	r2, r3, #6
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	041b      	lsls	r3, r3, #16
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	061b      	lsls	r3, r3, #24
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	071b      	lsls	r3, r3, #28
 8004708:	4919      	ldr	r1, [pc, #100]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004710:	4b17      	ldr	r3, [pc, #92]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a16      	ldr	r2, [pc, #88]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004716:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800471a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471c:	f7fd fe3e 	bl	800239c <HAL_GetTick>
 8004720:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004724:	f7fd fe3a 	bl	800239c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	; 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e0d7      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004736:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2b01      	cmp	r3, #1
 8004746:	f040 80cd 	bne.w	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800474a:	4b09      	ldr	r3, [pc, #36]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a08      	ldr	r2, [pc, #32]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004756:	f7fd fe21 	bl	800239c <HAL_GetTick>
 800475a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800475c:	e00a      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800475e:	f7fd fe1d 	bl	800239c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b64      	cmp	r3, #100	; 0x64
 800476a:	d903      	bls.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e0ba      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004770:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004774:	4b5e      	ldr	r3, [pc, #376]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800477c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004780:	d0ed      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d02e      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d12a      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047aa:	4b51      	ldr	r3, [pc, #324]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047b8:	4b4d      	ldr	r3, [pc, #308]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	0f1b      	lsrs	r3, r3, #28
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	019a      	lsls	r2, r3, #6
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	041b      	lsls	r3, r3, #16
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	061b      	lsls	r3, r3, #24
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	071b      	lsls	r3, r3, #28
 80047de:	4944      	ldr	r1, [pc, #272]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047e6:	4b42      	ldr	r3, [pc, #264]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	3b01      	subs	r3, #1
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	493d      	ldr	r1, [pc, #244]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d022      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004814:	d11d      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004816:	4b36      	ldr	r3, [pc, #216]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	0e1b      	lsrs	r3, r3, #24
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004824:	4b32      	ldr	r3, [pc, #200]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	0f1b      	lsrs	r3, r3, #28
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	019a      	lsls	r2, r3, #6
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	431a      	orrs	r2, r3
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	061b      	lsls	r3, r3, #24
 8004844:	431a      	orrs	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	071b      	lsls	r3, r3, #28
 800484a:	4929      	ldr	r1, [pc, #164]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d028      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800485e:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004864:	0e1b      	lsrs	r3, r3, #24
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800486c:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	0c1b      	lsrs	r3, r3, #16
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	019a      	lsls	r2, r3, #6
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	041b      	lsls	r3, r3, #16
 8004884:	431a      	orrs	r2, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	061b      	lsls	r3, r3, #24
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	071b      	lsls	r3, r3, #28
 8004892:	4917      	ldr	r1, [pc, #92]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800489a:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800489c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4911      	ldr	r1, [pc, #68]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048b0:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a0e      	ldr	r2, [pc, #56]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048bc:	f7fd fd6e 	bl	800239c <HAL_GetTick>
 80048c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048c4:	f7fd fd6a 	bl	800239c <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e007      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e2:	d1ef      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800

080048f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e09d      	b.n	8004a42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004916:	d009      	beq.n	800492c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	61da      	str	r2, [r3, #28]
 800491e:	e005      	b.n	800492c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fd fa96 	bl	8001e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004962:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800496c:	d902      	bls.n	8004974 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e002      	b.n	800497a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004978:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004982:	d007      	beq.n	8004994 <HAL_SPI_Init+0xa0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800498c:	d002      	beq.n	8004994 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	ea42 0103 	orr.w	r1, r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	0c1b      	lsrs	r3, r3, #16
 80049f0:	f003 0204 	and.w	r2, r3, #4
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a10:	ea42 0103 	orr.w	r1, r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69da      	ldr	r2, [r3, #28]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e049      	b.n	8004af0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fd fa55 	bl	8001f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3304      	adds	r3, #4
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f000 fee9 	bl	8005860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d001      	beq.n	8004b10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e04c      	b.n	8004baa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a26      	ldr	r2, [pc, #152]	; (8004bb8 <HAL_TIM_Base_Start+0xc0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d022      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2a:	d01d      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a22      	ldr	r2, [pc, #136]	; (8004bbc <HAL_TIM_Base_Start+0xc4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d018      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a21      	ldr	r2, [pc, #132]	; (8004bc0 <HAL_TIM_Base_Start+0xc8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d013      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1f      	ldr	r2, [pc, #124]	; (8004bc4 <HAL_TIM_Base_Start+0xcc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00e      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1e      	ldr	r2, [pc, #120]	; (8004bc8 <HAL_TIM_Base_Start+0xd0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d009      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1c      	ldr	r2, [pc, #112]	; (8004bcc <HAL_TIM_Base_Start+0xd4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <HAL_TIM_Base_Start+0xd8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d115      	bne.n	8004b94 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <HAL_TIM_Base_Start+0xdc>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	d015      	beq.n	8004ba6 <HAL_TIM_Base_Start+0xae>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b80:	d011      	beq.n	8004ba6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b92:	e008      	b.n	8004ba6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e000      	b.n	8004ba8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	40000c00 	.word	0x40000c00
 8004bc8:	40010400 	.word	0x40010400
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40001800 	.word	0x40001800
 8004bd4:	00010007 	.word	0x00010007

08004bd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e049      	b.n	8004c7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f841 	bl	8004c86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f000 fe22 	bl	8005860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e049      	b.n	8004d40 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f841 	bl	8004d48 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f000 fdc1 	bl	8005860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d104      	bne.n	8004d76 <HAL_TIM_IC_Start_IT+0x1a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	e023      	b.n	8004dbe <HAL_TIM_IC_Start_IT+0x62>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d104      	bne.n	8004d86 <HAL_TIM_IC_Start_IT+0x2a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	e01b      	b.n	8004dbe <HAL_TIM_IC_Start_IT+0x62>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d104      	bne.n	8004d96 <HAL_TIM_IC_Start_IT+0x3a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	e013      	b.n	8004dbe <HAL_TIM_IC_Start_IT+0x62>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b0c      	cmp	r3, #12
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_IC_Start_IT+0x4a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	e00b      	b.n	8004dbe <HAL_TIM_IC_Start_IT+0x62>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_IC_Start_IT+0x5a>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	e003      	b.n	8004dbe <HAL_TIM_IC_Start_IT+0x62>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d104      	bne.n	8004dd0 <HAL_TIM_IC_Start_IT+0x74>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e013      	b.n	8004df8 <HAL_TIM_IC_Start_IT+0x9c>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d104      	bne.n	8004de0 <HAL_TIM_IC_Start_IT+0x84>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e00b      	b.n	8004df8 <HAL_TIM_IC_Start_IT+0x9c>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d104      	bne.n	8004df0 <HAL_TIM_IC_Start_IT+0x94>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	e003      	b.n	8004df8 <HAL_TIM_IC_Start_IT+0x9c>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d102      	bne.n	8004e06 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e00:	7bbb      	ldrb	r3, [r7, #14]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d001      	beq.n	8004e0a <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e0dd      	b.n	8004fc6 <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_IC_Start_IT+0xbe>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e18:	e023      	b.n	8004e62 <HAL_TIM_IC_Start_IT+0x106>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d104      	bne.n	8004e2a <HAL_TIM_IC_Start_IT+0xce>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e28:	e01b      	b.n	8004e62 <HAL_TIM_IC_Start_IT+0x106>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_IC_Start_IT+0xde>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e38:	e013      	b.n	8004e62 <HAL_TIM_IC_Start_IT+0x106>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	d104      	bne.n	8004e4a <HAL_TIM_IC_Start_IT+0xee>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e48:	e00b      	b.n	8004e62 <HAL_TIM_IC_Start_IT+0x106>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_IC_Start_IT+0xfe>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e58:	e003      	b.n	8004e62 <HAL_TIM_IC_Start_IT+0x106>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d104      	bne.n	8004e72 <HAL_TIM_IC_Start_IT+0x116>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e70:	e013      	b.n	8004e9a <HAL_TIM_IC_Start_IT+0x13e>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d104      	bne.n	8004e82 <HAL_TIM_IC_Start_IT+0x126>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e80:	e00b      	b.n	8004e9a <HAL_TIM_IC_Start_IT+0x13e>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d104      	bne.n	8004e92 <HAL_TIM_IC_Start_IT+0x136>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e90:	e003      	b.n	8004e9a <HAL_TIM_IC_Start_IT+0x13e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b0c      	cmp	r3, #12
 8004e9e:	d841      	bhi.n	8004f24 <HAL_TIM_IC_Start_IT+0x1c8>
 8004ea0:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <HAL_TIM_IC_Start_IT+0x14c>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004edd 	.word	0x08004edd
 8004eac:	08004f25 	.word	0x08004f25
 8004eb0:	08004f25 	.word	0x08004f25
 8004eb4:	08004f25 	.word	0x08004f25
 8004eb8:	08004eef 	.word	0x08004eef
 8004ebc:	08004f25 	.word	0x08004f25
 8004ec0:	08004f25 	.word	0x08004f25
 8004ec4:	08004f25 	.word	0x08004f25
 8004ec8:	08004f01 	.word	0x08004f01
 8004ecc:	08004f25 	.word	0x08004f25
 8004ed0:	08004f25 	.word	0x08004f25
 8004ed4:	08004f25 	.word	0x08004f25
 8004ed8:	08004f13 	.word	0x08004f13
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0202 	orr.w	r2, r2, #2
 8004eea:	60da      	str	r2, [r3, #12]
      break;
 8004eec:	e01b      	b.n	8004f26 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0204 	orr.w	r2, r2, #4
 8004efc:	60da      	str	r2, [r3, #12]
      break;
 8004efe:	e012      	b.n	8004f26 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0208 	orr.w	r2, r2, #8
 8004f0e:	60da      	str	r2, [r3, #12]
      break;
 8004f10:	e009      	b.n	8004f26 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0210 	orr.w	r2, r2, #16
 8004f20:	60da      	str	r2, [r3, #12]
      break;
 8004f22:	e000      	b.n	8004f26 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8004f24:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f001 f9e8 	bl	8006304 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a25      	ldr	r2, [pc, #148]	; (8004fd0 <HAL_TIM_IC_Start_IT+0x274>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d022      	beq.n	8004f84 <HAL_TIM_IC_Start_IT+0x228>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f46:	d01d      	beq.n	8004f84 <HAL_TIM_IC_Start_IT+0x228>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a21      	ldr	r2, [pc, #132]	; (8004fd4 <HAL_TIM_IC_Start_IT+0x278>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d018      	beq.n	8004f84 <HAL_TIM_IC_Start_IT+0x228>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a20      	ldr	r2, [pc, #128]	; (8004fd8 <HAL_TIM_IC_Start_IT+0x27c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <HAL_TIM_IC_Start_IT+0x228>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1e      	ldr	r2, [pc, #120]	; (8004fdc <HAL_TIM_IC_Start_IT+0x280>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00e      	beq.n	8004f84 <HAL_TIM_IC_Start_IT+0x228>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a1d      	ldr	r2, [pc, #116]	; (8004fe0 <HAL_TIM_IC_Start_IT+0x284>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d009      	beq.n	8004f84 <HAL_TIM_IC_Start_IT+0x228>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1b      	ldr	r2, [pc, #108]	; (8004fe4 <HAL_TIM_IC_Start_IT+0x288>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_TIM_IC_Start_IT+0x228>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1a      	ldr	r2, [pc, #104]	; (8004fe8 <HAL_TIM_IC_Start_IT+0x28c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d115      	bne.n	8004fb0 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	4b18      	ldr	r3, [pc, #96]	; (8004fec <HAL_TIM_IC_Start_IT+0x290>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b06      	cmp	r3, #6
 8004f94:	d015      	beq.n	8004fc2 <HAL_TIM_IC_Start_IT+0x266>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9c:	d011      	beq.n	8004fc2 <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0201 	orr.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fae:	e008      	b.n	8004fc2 <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	e000      	b.n	8004fc4 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40000800 	.word	0x40000800
 8004fdc:	40000c00 	.word	0x40000c00
 8004fe0:	40010400 	.word	0x40010400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40001800 	.word	0x40001800
 8004fec:	00010007 	.word	0x00010007

08004ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d122      	bne.n	800504c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b02      	cmp	r3, #2
 8005012:	d11b      	bne.n	800504c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0202 	mvn.w	r2, #2
 800501c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fb ff26 	bl	8000e84 <HAL_TIM_IC_CaptureCallback>
 8005038:	e005      	b.n	8005046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fbf2 	bl	8005824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fbf9 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b04      	cmp	r3, #4
 8005058:	d122      	bne.n	80050a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b04      	cmp	r3, #4
 8005066:	d11b      	bne.n	80050a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0204 	mvn.w	r2, #4
 8005070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fb fefc 	bl	8000e84 <HAL_TIM_IC_CaptureCallback>
 800508c:	e005      	b.n	800509a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fbc8 	bl	8005824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fbcf 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d122      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d11b      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0208 	mvn.w	r2, #8
 80050c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2204      	movs	r2, #4
 80050ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fb fed2 	bl	8000e84 <HAL_TIM_IC_CaptureCallback>
 80050e0:	e005      	b.n	80050ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fb9e 	bl	8005824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fba5 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	2b10      	cmp	r3, #16
 8005100:	d122      	bne.n	8005148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b10      	cmp	r3, #16
 800510e:	d11b      	bne.n	8005148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0210 	mvn.w	r2, #16
 8005118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2208      	movs	r2, #8
 800511e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fb fea8 	bl	8000e84 <HAL_TIM_IC_CaptureCallback>
 8005134:	e005      	b.n	8005142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fb74 	bl	8005824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fb7b 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b01      	cmp	r3, #1
 8005154:	d10e      	bne.n	8005174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b01      	cmp	r3, #1
 8005162:	d107      	bne.n	8005174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0201 	mvn.w	r2, #1
 800516c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fb4e 	bl	8005810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517e:	2b80      	cmp	r3, #128	; 0x80
 8005180:	d10e      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518c:	2b80      	cmp	r3, #128	; 0x80
 800518e:	d107      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f001 f970 	bl	8006480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ae:	d10e      	bne.n	80051ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b80      	cmp	r3, #128	; 0x80
 80051bc:	d107      	bne.n	80051ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f001 f963 	bl	8006494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b40      	cmp	r3, #64	; 0x40
 80051da:	d10e      	bne.n	80051fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d107      	bne.n	80051fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fb29 	bl	800584c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b20      	cmp	r3, #32
 8005206:	d10e      	bne.n	8005226 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b20      	cmp	r3, #32
 8005214:	d107      	bne.n	8005226 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f06f 0220 	mvn.w	r2, #32
 800521e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f001 f923 	bl	800646c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005244:	2302      	movs	r3, #2
 8005246:	e082      	b.n	800534e <HAL_TIM_IC_ConfigChannel+0x120>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d11b      	bne.n	800528e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6818      	ldr	r0, [r3, #0]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6819      	ldr	r1, [r3, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f000 fe89 	bl	8005f7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699a      	ldr	r2, [r3, #24]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 020c 	bic.w	r2, r2, #12
 8005278:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6999      	ldr	r1, [r3, #24]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	619a      	str	r2, [r3, #24]
 800528c:	e05a      	b.n	8005344 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d11c      	bne.n	80052ce <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6819      	ldr	r1, [r3, #0]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f000 ff0d 	bl	80060c2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80052b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6999      	ldr	r1, [r3, #24]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	021a      	lsls	r2, r3, #8
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	619a      	str	r2, [r3, #24]
 80052cc:	e03a      	b.n	8005344 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d11b      	bne.n	800530c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	6819      	ldr	r1, [r3, #0]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f000 ff5a 	bl	800619c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 020c 	bic.w	r2, r2, #12
 80052f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69d9      	ldr	r1, [r3, #28]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	61da      	str	r2, [r3, #28]
 800530a:	e01b      	b.n	8005344 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f000 ff7a 	bl	8006214 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69da      	ldr	r2, [r3, #28]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800532e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69d9      	ldr	r1, [r3, #28]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	021a      	lsls	r2, r3, #8
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800536e:	2302      	movs	r3, #2
 8005370:	e0fd      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x216>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b14      	cmp	r3, #20
 800537e:	f200 80f0 	bhi.w	8005562 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005382:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005388:	080053dd 	.word	0x080053dd
 800538c:	08005563 	.word	0x08005563
 8005390:	08005563 	.word	0x08005563
 8005394:	08005563 	.word	0x08005563
 8005398:	0800541d 	.word	0x0800541d
 800539c:	08005563 	.word	0x08005563
 80053a0:	08005563 	.word	0x08005563
 80053a4:	08005563 	.word	0x08005563
 80053a8:	0800545f 	.word	0x0800545f
 80053ac:	08005563 	.word	0x08005563
 80053b0:	08005563 	.word	0x08005563
 80053b4:	08005563 	.word	0x08005563
 80053b8:	0800549f 	.word	0x0800549f
 80053bc:	08005563 	.word	0x08005563
 80053c0:	08005563 	.word	0x08005563
 80053c4:	08005563 	.word	0x08005563
 80053c8:	080054e1 	.word	0x080054e1
 80053cc:	08005563 	.word	0x08005563
 80053d0:	08005563 	.word	0x08005563
 80053d4:	08005563 	.word	0x08005563
 80053d8:	08005521 	.word	0x08005521
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fadc 	bl	80059a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0208 	orr.w	r2, r2, #8
 80053f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0204 	bic.w	r2, r2, #4
 8005406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6999      	ldr	r1, [r3, #24]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	619a      	str	r2, [r3, #24]
      break;
 800541a:	e0a3      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fb2e 	bl	8005a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6999      	ldr	r1, [r3, #24]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	021a      	lsls	r2, r3, #8
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	619a      	str	r2, [r3, #24]
      break;
 800545c:	e082      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fb85 	bl	8005b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0208 	orr.w	r2, r2, #8
 8005478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0204 	bic.w	r2, r2, #4
 8005488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69d9      	ldr	r1, [r3, #28]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	61da      	str	r2, [r3, #28]
      break;
 800549c:	e062      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fbdb 	bl	8005c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69da      	ldr	r2, [r3, #28]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69d9      	ldr	r1, [r3, #28]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	021a      	lsls	r2, r3, #8
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	61da      	str	r2, [r3, #28]
      break;
 80054de:	e041      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fc12 	bl	8005d10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0208 	orr.w	r2, r2, #8
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0204 	bic.w	r2, r2, #4
 800550a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800551e:	e021      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fc44 	bl	8005db4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800553a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	021a      	lsls	r2, r3, #8
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005560:	e000      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005562:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop

08005578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_TIM_ConfigClockSource+0x18>
 800558c:	2302      	movs	r3, #2
 800558e:	e0b3      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x180>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4b55      	ldr	r3, [pc, #340]	; (8005700 <HAL_TIM_ConfigClockSource+0x188>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c8:	d03e      	beq.n	8005648 <HAL_TIM_ConfigClockSource+0xd0>
 80055ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ce:	f200 8087 	bhi.w	80056e0 <HAL_TIM_ConfigClockSource+0x168>
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d6:	f000 8085 	beq.w	80056e4 <HAL_TIM_ConfigClockSource+0x16c>
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055de:	d87f      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x168>
 80055e0:	2b70      	cmp	r3, #112	; 0x70
 80055e2:	d01a      	beq.n	800561a <HAL_TIM_ConfigClockSource+0xa2>
 80055e4:	2b70      	cmp	r3, #112	; 0x70
 80055e6:	d87b      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x168>
 80055e8:	2b60      	cmp	r3, #96	; 0x60
 80055ea:	d050      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x116>
 80055ec:	2b60      	cmp	r3, #96	; 0x60
 80055ee:	d877      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x168>
 80055f0:	2b50      	cmp	r3, #80	; 0x50
 80055f2:	d03c      	beq.n	800566e <HAL_TIM_ConfigClockSource+0xf6>
 80055f4:	2b50      	cmp	r3, #80	; 0x50
 80055f6:	d873      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x168>
 80055f8:	2b40      	cmp	r3, #64	; 0x40
 80055fa:	d058      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x136>
 80055fc:	2b40      	cmp	r3, #64	; 0x40
 80055fe:	d86f      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x168>
 8005600:	2b30      	cmp	r3, #48	; 0x30
 8005602:	d064      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x156>
 8005604:	2b30      	cmp	r3, #48	; 0x30
 8005606:	d86b      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x168>
 8005608:	2b20      	cmp	r3, #32
 800560a:	d060      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x156>
 800560c:	2b20      	cmp	r3, #32
 800560e:	d867      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x168>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d05c      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x156>
 8005614:	2b10      	cmp	r3, #16
 8005616:	d05a      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005618:	e062      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	6899      	ldr	r1, [r3, #8]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f000 fe4b 	bl	80062c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800563c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	609a      	str	r2, [r3, #8]
      break;
 8005646:	e04e      	b.n	80056e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6899      	ldr	r1, [r3, #8]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f000 fe34 	bl	80062c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566a:	609a      	str	r2, [r3, #8]
      break;
 800566c:	e03b      	b.n	80056e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6859      	ldr	r1, [r3, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	461a      	mov	r2, r3
 800567c:	f000 fcf2 	bl	8006064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2150      	movs	r1, #80	; 0x50
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fe01 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 800568c:	e02b      	b.n	80056e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6859      	ldr	r1, [r3, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	461a      	mov	r2, r3
 800569c:	f000 fd4e 	bl	800613c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2160      	movs	r1, #96	; 0x60
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fdf1 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 80056ac:	e01b      	b.n	80056e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6859      	ldr	r1, [r3, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	461a      	mov	r2, r3
 80056bc:	f000 fcd2 	bl	8006064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2140      	movs	r1, #64	; 0x40
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fde1 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 80056cc:	e00b      	b.n	80056e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4619      	mov	r1, r3
 80056d8:	4610      	mov	r0, r2
 80056da:	f000 fdd8 	bl	800628e <TIM_ITRx_SetConfig>
        break;
 80056de:	e002      	b.n	80056e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056e0:	bf00      	nop
 80056e2:	e000      	b.n	80056e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	fffeff88 	.word	0xfffeff88

08005704 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005718:	2302      	movs	r3, #2
 800571a:	e031      	b.n	8005780 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fb94 	bl	8005e5c <TIM_SlaveTimer_SetConfig>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d009      	beq.n	800574e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e018      	b.n	8005780 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800575c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800576c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b0c      	cmp	r3, #12
 800579a:	d831      	bhi.n	8005800 <HAL_TIM_ReadCapturedValue+0x78>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057d9 	.word	0x080057d9
 80057a8:	08005801 	.word	0x08005801
 80057ac:	08005801 	.word	0x08005801
 80057b0:	08005801 	.word	0x08005801
 80057b4:	080057e3 	.word	0x080057e3
 80057b8:	08005801 	.word	0x08005801
 80057bc:	08005801 	.word	0x08005801
 80057c0:	08005801 	.word	0x08005801
 80057c4:	080057ed 	.word	0x080057ed
 80057c8:	08005801 	.word	0x08005801
 80057cc:	08005801 	.word	0x08005801
 80057d0:	08005801 	.word	0x08005801
 80057d4:	080057f7 	.word	0x080057f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057de:	60fb      	str	r3, [r7, #12]

      break;
 80057e0:	e00f      	b.n	8005802 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	60fb      	str	r3, [r7, #12]

      break;
 80057ea:	e00a      	b.n	8005802 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	60fb      	str	r3, [r7, #12]

      break;
 80057f4:	e005      	b.n	8005802 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	60fb      	str	r3, [r7, #12]

      break;
 80057fe:	e000      	b.n	8005802 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005800:	bf00      	nop
  }

  return tmpreg;
 8005802:	68fb      	ldr	r3, [r7, #12]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a40      	ldr	r2, [pc, #256]	; (8005974 <TIM_Base_SetConfig+0x114>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587e:	d00f      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3d      	ldr	r2, [pc, #244]	; (8005978 <TIM_Base_SetConfig+0x118>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00b      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3c      	ldr	r2, [pc, #240]	; (800597c <TIM_Base_SetConfig+0x11c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3b      	ldr	r2, [pc, #236]	; (8005980 <TIM_Base_SetConfig+0x120>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a3a      	ldr	r2, [pc, #232]	; (8005984 <TIM_Base_SetConfig+0x124>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d108      	bne.n	80058b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2f      	ldr	r2, [pc, #188]	; (8005974 <TIM_Base_SetConfig+0x114>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d02b      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c0:	d027      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2c      	ldr	r2, [pc, #176]	; (8005978 <TIM_Base_SetConfig+0x118>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d023      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2b      	ldr	r2, [pc, #172]	; (800597c <TIM_Base_SetConfig+0x11c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01f      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2a      	ldr	r2, [pc, #168]	; (8005980 <TIM_Base_SetConfig+0x120>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01b      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a29      	ldr	r2, [pc, #164]	; (8005984 <TIM_Base_SetConfig+0x124>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d017      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a28      	ldr	r2, [pc, #160]	; (8005988 <TIM_Base_SetConfig+0x128>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a27      	ldr	r2, [pc, #156]	; (800598c <TIM_Base_SetConfig+0x12c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00f      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a26      	ldr	r2, [pc, #152]	; (8005990 <TIM_Base_SetConfig+0x130>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00b      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a25      	ldr	r2, [pc, #148]	; (8005994 <TIM_Base_SetConfig+0x134>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d007      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a24      	ldr	r2, [pc, #144]	; (8005998 <TIM_Base_SetConfig+0x138>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a23      	ldr	r2, [pc, #140]	; (800599c <TIM_Base_SetConfig+0x13c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d108      	bne.n	8005924 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a0a      	ldr	r2, [pc, #40]	; (8005974 <TIM_Base_SetConfig+0x114>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_Base_SetConfig+0xf8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a0c      	ldr	r2, [pc, #48]	; (8005984 <TIM_Base_SetConfig+0x124>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d103      	bne.n	8005960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	615a      	str	r2, [r3, #20]
}
 8005966:	bf00      	nop
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40010000 	.word	0x40010000
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	40000c00 	.word	0x40000c00
 8005984:	40010400 	.word	0x40010400
 8005988:	40014000 	.word	0x40014000
 800598c:	40014400 	.word	0x40014400
 8005990:	40014800 	.word	0x40014800
 8005994:	40001800 	.word	0x40001800
 8005998:	40001c00 	.word	0x40001c00
 800599c:	40002000 	.word	0x40002000

080059a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f023 0201 	bic.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4b2b      	ldr	r3, [pc, #172]	; (8005a78 <TIM_OC1_SetConfig+0xd8>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0303 	bic.w	r3, r3, #3
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 0302 	bic.w	r3, r3, #2
 80059e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a21      	ldr	r2, [pc, #132]	; (8005a7c <TIM_OC1_SetConfig+0xdc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d003      	beq.n	8005a04 <TIM_OC1_SetConfig+0x64>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a20      	ldr	r2, [pc, #128]	; (8005a80 <TIM_OC1_SetConfig+0xe0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d10c      	bne.n	8005a1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f023 0308 	bic.w	r3, r3, #8
 8005a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f023 0304 	bic.w	r3, r3, #4
 8005a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <TIM_OC1_SetConfig+0xdc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d003      	beq.n	8005a2e <TIM_OC1_SetConfig+0x8e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <TIM_OC1_SetConfig+0xe0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d111      	bne.n	8005a52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	621a      	str	r2, [r3, #32]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	fffeff8f 	.word	0xfffeff8f
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40010400 	.word	0x40010400

08005a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f023 0210 	bic.w	r2, r3, #16
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4b2e      	ldr	r3, [pc, #184]	; (8005b68 <TIM_OC2_SetConfig+0xe4>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0320 	bic.w	r3, r3, #32
 8005ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a23      	ldr	r2, [pc, #140]	; (8005b6c <TIM_OC2_SetConfig+0xe8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_OC2_SetConfig+0x68>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a22      	ldr	r2, [pc, #136]	; (8005b70 <TIM_OC2_SetConfig+0xec>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d10d      	bne.n	8005b08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a18      	ldr	r2, [pc, #96]	; (8005b6c <TIM_OC2_SetConfig+0xe8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_OC2_SetConfig+0x94>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a17      	ldr	r2, [pc, #92]	; (8005b70 <TIM_OC2_SetConfig+0xec>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d113      	bne.n	8005b40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	feff8fff 	.word	0xfeff8fff
 8005b6c:	40010000 	.word	0x40010000
 8005b70:	40010400 	.word	0x40010400

08005b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4b2d      	ldr	r3, [pc, #180]	; (8005c54 <TIM_OC3_SetConfig+0xe0>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0303 	bic.w	r3, r3, #3
 8005baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a22      	ldr	r2, [pc, #136]	; (8005c58 <TIM_OC3_SetConfig+0xe4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_OC3_SetConfig+0x66>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a21      	ldr	r2, [pc, #132]	; (8005c5c <TIM_OC3_SetConfig+0xe8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d10d      	bne.n	8005bf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <TIM_OC3_SetConfig+0xe4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_OC3_SetConfig+0x92>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a16      	ldr	r2, [pc, #88]	; (8005c5c <TIM_OC3_SetConfig+0xe8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d113      	bne.n	8005c2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	621a      	str	r2, [r3, #32]
}
 8005c48:	bf00      	nop
 8005c4a:	371c      	adds	r7, #28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	fffeff8f 	.word	0xfffeff8f
 8005c58:	40010000 	.word	0x40010000
 8005c5c:	40010400 	.word	0x40010400

08005c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <TIM_OC4_SetConfig+0xa4>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	031b      	lsls	r3, r3, #12
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a13      	ldr	r2, [pc, #76]	; (8005d08 <TIM_OC4_SetConfig+0xa8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_OC4_SetConfig+0x68>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a12      	ldr	r2, [pc, #72]	; (8005d0c <TIM_OC4_SetConfig+0xac>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d109      	bne.n	8005cdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	019b      	lsls	r3, r3, #6
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	621a      	str	r2, [r3, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	feff8fff 	.word	0xfeff8fff
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40010400 	.word	0x40010400

08005d10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <TIM_OC5_SetConfig+0x98>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	041b      	lsls	r3, r3, #16
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a12      	ldr	r2, [pc, #72]	; (8005dac <TIM_OC5_SetConfig+0x9c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d003      	beq.n	8005d6e <TIM_OC5_SetConfig+0x5e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a11      	ldr	r2, [pc, #68]	; (8005db0 <TIM_OC5_SetConfig+0xa0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d109      	bne.n	8005d82 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	021b      	lsls	r3, r3, #8
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	621a      	str	r2, [r3, #32]
}
 8005d9c:	bf00      	nop
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	fffeff8f 	.word	0xfffeff8f
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40010400 	.word	0x40010400

08005db4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <TIM_OC6_SetConfig+0x9c>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	051b      	lsls	r3, r3, #20
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <TIM_OC6_SetConfig+0xa0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d003      	beq.n	8005e14 <TIM_OC6_SetConfig+0x60>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a12      	ldr	r2, [pc, #72]	; (8005e58 <TIM_OC6_SetConfig+0xa4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d109      	bne.n	8005e28 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	029b      	lsls	r3, r3, #10
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	feff8fff 	.word	0xfeff8fff
 8005e54:	40010000 	.word	0x40010000
 8005e58:	40010400 	.word	0x40010400

08005e5c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e74:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4b3d      	ldr	r3, [pc, #244]	; (8005f78 <TIM_SlaveTimer_SetConfig+0x11c>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b70      	cmp	r3, #112	; 0x70
 8005ea0:	d01a      	beq.n	8005ed8 <TIM_SlaveTimer_SetConfig+0x7c>
 8005ea2:	2b70      	cmp	r3, #112	; 0x70
 8005ea4:	d860      	bhi.n	8005f68 <TIM_SlaveTimer_SetConfig+0x10c>
 8005ea6:	2b60      	cmp	r3, #96	; 0x60
 8005ea8:	d054      	beq.n	8005f54 <TIM_SlaveTimer_SetConfig+0xf8>
 8005eaa:	2b60      	cmp	r3, #96	; 0x60
 8005eac:	d85c      	bhi.n	8005f68 <TIM_SlaveTimer_SetConfig+0x10c>
 8005eae:	2b50      	cmp	r3, #80	; 0x50
 8005eb0:	d046      	beq.n	8005f40 <TIM_SlaveTimer_SetConfig+0xe4>
 8005eb2:	2b50      	cmp	r3, #80	; 0x50
 8005eb4:	d858      	bhi.n	8005f68 <TIM_SlaveTimer_SetConfig+0x10c>
 8005eb6:	2b40      	cmp	r3, #64	; 0x40
 8005eb8:	d019      	beq.n	8005eee <TIM_SlaveTimer_SetConfig+0x92>
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d854      	bhi.n	8005f68 <TIM_SlaveTimer_SetConfig+0x10c>
 8005ebe:	2b30      	cmp	r3, #48	; 0x30
 8005ec0:	d054      	beq.n	8005f6c <TIM_SlaveTimer_SetConfig+0x110>
 8005ec2:	2b30      	cmp	r3, #48	; 0x30
 8005ec4:	d850      	bhi.n	8005f68 <TIM_SlaveTimer_SetConfig+0x10c>
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d050      	beq.n	8005f6c <TIM_SlaveTimer_SetConfig+0x110>
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	d84c      	bhi.n	8005f68 <TIM_SlaveTimer_SetConfig+0x10c>
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d04c      	beq.n	8005f6c <TIM_SlaveTimer_SetConfig+0x110>
 8005ed2:	2b10      	cmp	r3, #16
 8005ed4:	d04a      	beq.n	8005f6c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005ed6:	e047      	b.n	8005f68 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68d9      	ldr	r1, [r3, #12]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f000 f9ec 	bl	80062c4 <TIM_ETR_SetConfig>
      break;
 8005eec:	e03f      	b.n	8005f6e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b05      	cmp	r3, #5
 8005ef4:	d101      	bne.n	8005efa <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e03a      	b.n	8005f70 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a1a      	ldr	r2, [r3, #32]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0201 	bic.w	r2, r2, #1
 8005f10:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f20:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	621a      	str	r2, [r3, #32]
      break;
 8005f3e:	e016      	b.n	8005f6e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	6899      	ldr	r1, [r3, #8]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f000 f889 	bl	8006064 <TIM_TI1_ConfigInputStage>
      break;
 8005f52:	e00c      	b.n	8005f6e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	6899      	ldr	r1, [r3, #8]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	461a      	mov	r2, r3
 8005f62:	f000 f8eb 	bl	800613c <TIM_TI2_ConfigInputStage>
      break;
 8005f66:	e002      	b.n	8005f6e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005f68:	bf00      	nop
 8005f6a:	e000      	b.n	8005f6e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8005f6c:	bf00      	nop
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	fffefff8 	.word	0xfffefff8

08005f7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f023 0201 	bic.w	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4a28      	ldr	r2, [pc, #160]	; (8006048 <TIM_TI1_SetConfig+0xcc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d01b      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb0:	d017      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4a25      	ldr	r2, [pc, #148]	; (800604c <TIM_TI1_SetConfig+0xd0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4a24      	ldr	r2, [pc, #144]	; (8006050 <TIM_TI1_SetConfig+0xd4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00f      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4a23      	ldr	r2, [pc, #140]	; (8006054 <TIM_TI1_SetConfig+0xd8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00b      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4a22      	ldr	r2, [pc, #136]	; (8006058 <TIM_TI1_SetConfig+0xdc>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d007      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4a21      	ldr	r2, [pc, #132]	; (800605c <TIM_TI1_SetConfig+0xe0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d003      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x66>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4a20      	ldr	r2, [pc, #128]	; (8006060 <TIM_TI1_SetConfig+0xe4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d101      	bne.n	8005fe6 <TIM_TI1_SetConfig+0x6a>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <TIM_TI1_SetConfig+0x6c>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d008      	beq.n	8005ffe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f023 0303 	bic.w	r3, r3, #3
 8005ff2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e003      	b.n	8006006 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800600c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	b2db      	uxtb	r3, r3
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f023 030a 	bic.w	r3, r3, #10
 8006020:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f003 030a 	and.w	r3, r3, #10
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40010000 	.word	0x40010000
 800604c:	40000400 	.word	0x40000400
 8006050:	40000800 	.word	0x40000800
 8006054:	40000c00 	.word	0x40000c00
 8006058:	40010400 	.word	0x40010400
 800605c:	40014000 	.word	0x40014000
 8006060:	40001800 	.word	0x40001800

08006064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f023 0201 	bic.w	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800608e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f023 030a 	bic.w	r3, r3, #10
 80060a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b087      	sub	sp, #28
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f023 0210 	bic.w	r2, r3, #16
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006100:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	031b      	lsls	r3, r3, #12
 8006106:	b29b      	uxth	r3, r3
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006114:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	621a      	str	r2, [r3, #32]
}
 8006130:	bf00      	nop
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f023 0210 	bic.w	r2, r3, #16
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006166:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	031b      	lsls	r3, r3, #12
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006178:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	621a      	str	r2, [r3, #32]
}
 8006190:	bf00      	nop
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f023 0303 	bic.w	r3, r3, #3
 80061c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80061ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	621a      	str	r2, [r3, #32]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006240:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	021b      	lsls	r3, r3, #8
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006252:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	031b      	lsls	r3, r3, #12
 8006258:	b29b      	uxth	r3, r3
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006266:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	031b      	lsls	r3, r3, #12
 800626c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f043 0307 	orr.w	r3, r3, #7
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	021a      	lsls	r2, r3, #8
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	609a      	str	r2, [r3, #8]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	2201      	movs	r2, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a1a      	ldr	r2, [r3, #32]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	43db      	mvns	r3, r3
 8006326:	401a      	ands	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1a      	ldr	r2, [r3, #32]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	fa01 f303 	lsl.w	r3, r1, r3
 800633c:	431a      	orrs	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
	...

08006350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006364:	2302      	movs	r3, #2
 8006366:	e06d      	b.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a30      	ldr	r2, [pc, #192]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a2f      	ldr	r2, [pc, #188]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d108      	bne.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a20      	ldr	r2, [pc, #128]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d022      	beq.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063da:	d01d      	beq.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1d      	ldr	r2, [pc, #116]	; (8006458 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d018      	beq.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1c      	ldr	r2, [pc, #112]	; (800645c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d013      	beq.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1a      	ldr	r2, [pc, #104]	; (8006460 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00e      	beq.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a15      	ldr	r2, [pc, #84]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d009      	beq.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a16      	ldr	r2, [pc, #88]	; (8006464 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d004      	beq.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a15      	ldr	r2, [pc, #84]	; (8006468 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d10c      	bne.n	8006432 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800641e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	4313      	orrs	r3, r2
 8006428:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	40010000 	.word	0x40010000
 8006454:	40010400 	.word	0x40010400
 8006458:	40000400 	.word	0x40000400
 800645c:	40000800 	.word	0x40000800
 8006460:	40000c00 	.word	0x40000c00
 8006464:	40014000 	.word	0x40014000
 8006468:	40001800 	.word	0x40001800

0800646c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e040      	b.n	800653c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fb fe16 	bl	80020fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2224      	movs	r2, #36	; 0x24
 80064d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0201 	bic.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fa38 	bl	800695c <UART_SetConfig>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e022      	b.n	800653c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fc8e 	bl	8006e20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006512:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006522:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fd15 	bl	8006f64 <UART_CheckIdleState>
 800653a:	4603      	mov	r3, r0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006564:	69fa      	ldr	r2, [r7, #28]
 8006566:	f640 030f 	movw	r3, #2063	; 0x80f
 800656a:	4013      	ands	r3, r2
 800656c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d113      	bne.n	800659c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	f003 0320 	and.w	r3, r3, #32
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00e      	beq.n	800659c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d009      	beq.n	800659c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 81b9 	beq.w	8006904 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
      }
      return;
 800659a:	e1b3      	b.n	8006904 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 80e3 	beq.w	800676a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d105      	bne.n	80065ba <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	4ba5      	ldr	r3, [pc, #660]	; (8006848 <HAL_UART_IRQHandler+0x304>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80d8 	beq.w	800676a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d010      	beq.n	80065e6 <HAL_UART_IRQHandler+0xa2>
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2201      	movs	r2, #1
 80065d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065dc:	f043 0201 	orr.w	r2, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d010      	beq.n	8006612 <HAL_UART_IRQHandler+0xce>
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00b      	beq.n	8006612 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2202      	movs	r2, #2
 8006600:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006608:	f043 0204 	orr.w	r2, r3, #4
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d010      	beq.n	800663e <HAL_UART_IRQHandler+0xfa>
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00b      	beq.n	800663e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2204      	movs	r2, #4
 800662c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006634:	f043 0202 	orr.w	r2, r3, #2
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b00      	cmp	r3, #0
 8006646:	d015      	beq.n	8006674 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d104      	bne.n	800665c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2208      	movs	r2, #8
 8006662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800666a:	f043 0208 	orr.w	r2, r3, #8
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800667a:	2b00      	cmp	r3, #0
 800667c:	d011      	beq.n	80066a2 <HAL_UART_IRQHandler+0x15e>
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00c      	beq.n	80066a2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006698:	f043 0220 	orr.w	r2, r3, #32
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 812d 	beq.w	8006908 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	f003 0320 	and.w	r3, r3, #32
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00c      	beq.n	80066d2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d007      	beq.n	80066d2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066d8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	d004      	beq.n	80066f2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d031      	beq.n	8006756 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fce5 	bl	80070c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b40      	cmp	r3, #64	; 0x40
 8006704:	d123      	bne.n	800674e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006714:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	2b00      	cmp	r3, #0
 800671c:	d013      	beq.n	8006746 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006722:	4a4a      	ldr	r2, [pc, #296]	; (800684c <HAL_UART_IRQHandler+0x308>)
 8006724:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672a:	4618      	mov	r0, r3
 800672c:	f7fc fb9e 	bl	8002e6c <HAL_DMA_Abort_IT>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d017      	beq.n	8006766 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006740:	4610      	mov	r0, r2
 8006742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006744:	e00f      	b.n	8006766 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f8f2 	bl	8006930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800674c:	e00b      	b.n	8006766 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f8ee 	bl	8006930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006754:	e007      	b.n	8006766 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f8ea 	bl	8006930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006764:	e0d0      	b.n	8006908 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006766:	bf00      	nop
    return;
 8006768:	e0ce      	b.n	8006908 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676e:	2b01      	cmp	r3, #1
 8006770:	f040 80a7 	bne.w	80068c2 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f003 0310 	and.w	r3, r3, #16
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 80a1 	beq.w	80068c2 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f003 0310 	and.w	r3, r3, #16
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 809b 	beq.w	80068c2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2210      	movs	r2, #16
 8006792:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d156      	bne.n	8006850 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80067ac:	893b      	ldrh	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 80ac 	beq.w	800690c <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067ba:	893a      	ldrh	r2, [r7, #8]
 80067bc:	429a      	cmp	r2, r3
 80067be:	f080 80a5 	bcs.w	800690c <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	893a      	ldrh	r2, [r7, #8]
 80067c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d4:	d02a      	beq.n	800682c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 0201 	bic.w	r2, r2, #1
 80067f4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006804:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0210 	bic.w	r2, r2, #16
 8006820:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006826:	4618      	mov	r0, r3
 8006828:	f7fc fab0 	bl	8002d8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006838:	b29b      	uxth	r3, r3
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	b29b      	uxth	r3, r3
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f87f 	bl	8006944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006846:	e061      	b.n	800690c <HAL_UART_IRQHandler+0x3c8>
 8006848:	04000120 	.word	0x04000120
 800684c:	08007121 	.word	0x08007121
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800685c:	b29b      	uxth	r3, r3
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d050      	beq.n	8006910 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800686e:	897b      	ldrh	r3, [r7, #10]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d04d      	beq.n	8006910 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006882:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0201 	bic.w	r2, r2, #1
 8006892:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2220      	movs	r2, #32
 8006898:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0210 	bic.w	r2, r2, #16
 80068b4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068b6:	897b      	ldrh	r3, [r7, #10]
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f842 	bl	8006944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068c0:	e026      	b.n	8006910 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00d      	beq.n	80068e8 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d008      	beq.n	80068e8 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d01a      	beq.n	8006914 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	4798      	blx	r3
    }
    return;
 80068e6:	e015      	b.n	8006914 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d011      	beq.n	8006916 <HAL_UART_IRQHandler+0x3d2>
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00c      	beq.n	8006916 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fc25 	bl	800714c <UART_EndTransmit_IT>
    return;
 8006902:	e008      	b.n	8006916 <HAL_UART_IRQHandler+0x3d2>
      return;
 8006904:	bf00      	nop
 8006906:	e006      	b.n	8006916 <HAL_UART_IRQHandler+0x3d2>
    return;
 8006908:	bf00      	nop
 800690a:	e004      	b.n	8006916 <HAL_UART_IRQHandler+0x3d2>
      return;
 800690c:	bf00      	nop
 800690e:	e002      	b.n	8006916 <HAL_UART_IRQHandler+0x3d2>
      return;
 8006910:	bf00      	nop
 8006912:	e000      	b.n	8006916 <HAL_UART_IRQHandler+0x3d2>
    return;
 8006914:	bf00      	nop
  }

}
 8006916:	3720      	adds	r7, #32
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4313      	orrs	r3, r2
 800697e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	4ba7      	ldr	r3, [pc, #668]	; (8006c24 <UART_SetConfig+0x2c8>)
 8006988:	4013      	ands	r3, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6812      	ldr	r2, [r2, #0]
 800698e:	6979      	ldr	r1, [r7, #20]
 8006990:	430b      	orrs	r3, r1
 8006992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a95      	ldr	r2, [pc, #596]	; (8006c28 <UART_SetConfig+0x2cc>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d120      	bne.n	8006a1a <UART_SetConfig+0xbe>
 80069d8:	4b94      	ldr	r3, [pc, #592]	; (8006c2c <UART_SetConfig+0x2d0>)
 80069da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d816      	bhi.n	8006a14 <UART_SetConfig+0xb8>
 80069e6:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <UART_SetConfig+0x90>)
 80069e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ec:	080069fd 	.word	0x080069fd
 80069f0:	08006a09 	.word	0x08006a09
 80069f4:	08006a03 	.word	0x08006a03
 80069f8:	08006a0f 	.word	0x08006a0f
 80069fc:	2301      	movs	r3, #1
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e14f      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006a02:	2302      	movs	r3, #2
 8006a04:	77fb      	strb	r3, [r7, #31]
 8006a06:	e14c      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006a08:	2304      	movs	r3, #4
 8006a0a:	77fb      	strb	r3, [r7, #31]
 8006a0c:	e149      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006a0e:	2308      	movs	r3, #8
 8006a10:	77fb      	strb	r3, [r7, #31]
 8006a12:	e146      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006a14:	2310      	movs	r3, #16
 8006a16:	77fb      	strb	r3, [r7, #31]
 8006a18:	e143      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a84      	ldr	r2, [pc, #528]	; (8006c30 <UART_SetConfig+0x2d4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d132      	bne.n	8006a8a <UART_SetConfig+0x12e>
 8006a24:	4b81      	ldr	r3, [pc, #516]	; (8006c2c <UART_SetConfig+0x2d0>)
 8006a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2a:	f003 030c 	and.w	r3, r3, #12
 8006a2e:	2b0c      	cmp	r3, #12
 8006a30:	d828      	bhi.n	8006a84 <UART_SetConfig+0x128>
 8006a32:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <UART_SetConfig+0xdc>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006a6d 	.word	0x08006a6d
 8006a3c:	08006a85 	.word	0x08006a85
 8006a40:	08006a85 	.word	0x08006a85
 8006a44:	08006a85 	.word	0x08006a85
 8006a48:	08006a79 	.word	0x08006a79
 8006a4c:	08006a85 	.word	0x08006a85
 8006a50:	08006a85 	.word	0x08006a85
 8006a54:	08006a85 	.word	0x08006a85
 8006a58:	08006a73 	.word	0x08006a73
 8006a5c:	08006a85 	.word	0x08006a85
 8006a60:	08006a85 	.word	0x08006a85
 8006a64:	08006a85 	.word	0x08006a85
 8006a68:	08006a7f 	.word	0x08006a7f
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e117      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006a72:	2302      	movs	r3, #2
 8006a74:	77fb      	strb	r3, [r7, #31]
 8006a76:	e114      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006a78:	2304      	movs	r3, #4
 8006a7a:	77fb      	strb	r3, [r7, #31]
 8006a7c:	e111      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006a7e:	2308      	movs	r3, #8
 8006a80:	77fb      	strb	r3, [r7, #31]
 8006a82:	e10e      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006a84:	2310      	movs	r3, #16
 8006a86:	77fb      	strb	r3, [r7, #31]
 8006a88:	e10b      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a69      	ldr	r2, [pc, #420]	; (8006c34 <UART_SetConfig+0x2d8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d120      	bne.n	8006ad6 <UART_SetConfig+0x17a>
 8006a94:	4b65      	ldr	r3, [pc, #404]	; (8006c2c <UART_SetConfig+0x2d0>)
 8006a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a9e:	2b30      	cmp	r3, #48	; 0x30
 8006aa0:	d013      	beq.n	8006aca <UART_SetConfig+0x16e>
 8006aa2:	2b30      	cmp	r3, #48	; 0x30
 8006aa4:	d814      	bhi.n	8006ad0 <UART_SetConfig+0x174>
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d009      	beq.n	8006abe <UART_SetConfig+0x162>
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d810      	bhi.n	8006ad0 <UART_SetConfig+0x174>
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <UART_SetConfig+0x15c>
 8006ab2:	2b10      	cmp	r3, #16
 8006ab4:	d006      	beq.n	8006ac4 <UART_SetConfig+0x168>
 8006ab6:	e00b      	b.n	8006ad0 <UART_SetConfig+0x174>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	77fb      	strb	r3, [r7, #31]
 8006abc:	e0f1      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	77fb      	strb	r3, [r7, #31]
 8006ac2:	e0ee      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e0eb      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006aca:	2308      	movs	r3, #8
 8006acc:	77fb      	strb	r3, [r7, #31]
 8006ace:	e0e8      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e0e5      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a57      	ldr	r2, [pc, #348]	; (8006c38 <UART_SetConfig+0x2dc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d120      	bne.n	8006b22 <UART_SetConfig+0x1c6>
 8006ae0:	4b52      	ldr	r3, [pc, #328]	; (8006c2c <UART_SetConfig+0x2d0>)
 8006ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006aea:	2bc0      	cmp	r3, #192	; 0xc0
 8006aec:	d013      	beq.n	8006b16 <UART_SetConfig+0x1ba>
 8006aee:	2bc0      	cmp	r3, #192	; 0xc0
 8006af0:	d814      	bhi.n	8006b1c <UART_SetConfig+0x1c0>
 8006af2:	2b80      	cmp	r3, #128	; 0x80
 8006af4:	d009      	beq.n	8006b0a <UART_SetConfig+0x1ae>
 8006af6:	2b80      	cmp	r3, #128	; 0x80
 8006af8:	d810      	bhi.n	8006b1c <UART_SetConfig+0x1c0>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <UART_SetConfig+0x1a8>
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d006      	beq.n	8006b10 <UART_SetConfig+0x1b4>
 8006b02:	e00b      	b.n	8006b1c <UART_SetConfig+0x1c0>
 8006b04:	2300      	movs	r3, #0
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e0cb      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e0c8      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006b10:	2304      	movs	r3, #4
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e0c5      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006b16:	2308      	movs	r3, #8
 8006b18:	77fb      	strb	r3, [r7, #31]
 8006b1a:	e0c2      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	77fb      	strb	r3, [r7, #31]
 8006b20:	e0bf      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a45      	ldr	r2, [pc, #276]	; (8006c3c <UART_SetConfig+0x2e0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d125      	bne.n	8006b78 <UART_SetConfig+0x21c>
 8006b2c:	4b3f      	ldr	r3, [pc, #252]	; (8006c2c <UART_SetConfig+0x2d0>)
 8006b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b3a:	d017      	beq.n	8006b6c <UART_SetConfig+0x210>
 8006b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b40:	d817      	bhi.n	8006b72 <UART_SetConfig+0x216>
 8006b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b46:	d00b      	beq.n	8006b60 <UART_SetConfig+0x204>
 8006b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b4c:	d811      	bhi.n	8006b72 <UART_SetConfig+0x216>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <UART_SetConfig+0x1fe>
 8006b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b56:	d006      	beq.n	8006b66 <UART_SetConfig+0x20a>
 8006b58:	e00b      	b.n	8006b72 <UART_SetConfig+0x216>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	77fb      	strb	r3, [r7, #31]
 8006b5e:	e0a0      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006b60:	2302      	movs	r3, #2
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e09d      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006b66:	2304      	movs	r3, #4
 8006b68:	77fb      	strb	r3, [r7, #31]
 8006b6a:	e09a      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006b6c:	2308      	movs	r3, #8
 8006b6e:	77fb      	strb	r3, [r7, #31]
 8006b70:	e097      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006b72:	2310      	movs	r3, #16
 8006b74:	77fb      	strb	r3, [r7, #31]
 8006b76:	e094      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a30      	ldr	r2, [pc, #192]	; (8006c40 <UART_SetConfig+0x2e4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d125      	bne.n	8006bce <UART_SetConfig+0x272>
 8006b82:	4b2a      	ldr	r3, [pc, #168]	; (8006c2c <UART_SetConfig+0x2d0>)
 8006b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b90:	d017      	beq.n	8006bc2 <UART_SetConfig+0x266>
 8006b92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b96:	d817      	bhi.n	8006bc8 <UART_SetConfig+0x26c>
 8006b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b9c:	d00b      	beq.n	8006bb6 <UART_SetConfig+0x25a>
 8006b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ba2:	d811      	bhi.n	8006bc8 <UART_SetConfig+0x26c>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <UART_SetConfig+0x254>
 8006ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bac:	d006      	beq.n	8006bbc <UART_SetConfig+0x260>
 8006bae:	e00b      	b.n	8006bc8 <UART_SetConfig+0x26c>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	77fb      	strb	r3, [r7, #31]
 8006bb4:	e075      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	77fb      	strb	r3, [r7, #31]
 8006bba:	e072      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	77fb      	strb	r3, [r7, #31]
 8006bc0:	e06f      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006bc2:	2308      	movs	r3, #8
 8006bc4:	77fb      	strb	r3, [r7, #31]
 8006bc6:	e06c      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006bc8:	2310      	movs	r3, #16
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	e069      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a1c      	ldr	r2, [pc, #112]	; (8006c44 <UART_SetConfig+0x2e8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d137      	bne.n	8006c48 <UART_SetConfig+0x2ec>
 8006bd8:	4b14      	ldr	r3, [pc, #80]	; (8006c2c <UART_SetConfig+0x2d0>)
 8006bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006be2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006be6:	d017      	beq.n	8006c18 <UART_SetConfig+0x2bc>
 8006be8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bec:	d817      	bhi.n	8006c1e <UART_SetConfig+0x2c2>
 8006bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf2:	d00b      	beq.n	8006c0c <UART_SetConfig+0x2b0>
 8006bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf8:	d811      	bhi.n	8006c1e <UART_SetConfig+0x2c2>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <UART_SetConfig+0x2aa>
 8006bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c02:	d006      	beq.n	8006c12 <UART_SetConfig+0x2b6>
 8006c04:	e00b      	b.n	8006c1e <UART_SetConfig+0x2c2>
 8006c06:	2300      	movs	r3, #0
 8006c08:	77fb      	strb	r3, [r7, #31]
 8006c0a:	e04a      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	e047      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006c12:	2304      	movs	r3, #4
 8006c14:	77fb      	strb	r3, [r7, #31]
 8006c16:	e044      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006c18:	2308      	movs	r3, #8
 8006c1a:	77fb      	strb	r3, [r7, #31]
 8006c1c:	e041      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006c1e:	2310      	movs	r3, #16
 8006c20:	77fb      	strb	r3, [r7, #31]
 8006c22:	e03e      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006c24:	efff69f3 	.word	0xefff69f3
 8006c28:	40011000 	.word	0x40011000
 8006c2c:	40023800 	.word	0x40023800
 8006c30:	40004400 	.word	0x40004400
 8006c34:	40004800 	.word	0x40004800
 8006c38:	40004c00 	.word	0x40004c00
 8006c3c:	40005000 	.word	0x40005000
 8006c40:	40011400 	.word	0x40011400
 8006c44:	40007800 	.word	0x40007800
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a71      	ldr	r2, [pc, #452]	; (8006e14 <UART_SetConfig+0x4b8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d125      	bne.n	8006c9e <UART_SetConfig+0x342>
 8006c52:	4b71      	ldr	r3, [pc, #452]	; (8006e18 <UART_SetConfig+0x4bc>)
 8006c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c60:	d017      	beq.n	8006c92 <UART_SetConfig+0x336>
 8006c62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c66:	d817      	bhi.n	8006c98 <UART_SetConfig+0x33c>
 8006c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6c:	d00b      	beq.n	8006c86 <UART_SetConfig+0x32a>
 8006c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c72:	d811      	bhi.n	8006c98 <UART_SetConfig+0x33c>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <UART_SetConfig+0x324>
 8006c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c7c:	d006      	beq.n	8006c8c <UART_SetConfig+0x330>
 8006c7e:	e00b      	b.n	8006c98 <UART_SetConfig+0x33c>
 8006c80:	2300      	movs	r3, #0
 8006c82:	77fb      	strb	r3, [r7, #31]
 8006c84:	e00d      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006c86:	2302      	movs	r3, #2
 8006c88:	77fb      	strb	r3, [r7, #31]
 8006c8a:	e00a      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	77fb      	strb	r3, [r7, #31]
 8006c90:	e007      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006c92:	2308      	movs	r3, #8
 8006c94:	77fb      	strb	r3, [r7, #31]
 8006c96:	e004      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	77fb      	strb	r3, [r7, #31]
 8006c9c:	e001      	b.n	8006ca2 <UART_SetConfig+0x346>
 8006c9e:	2310      	movs	r3, #16
 8006ca0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006caa:	d15b      	bne.n	8006d64 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006cac:	7ffb      	ldrb	r3, [r7, #31]
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d827      	bhi.n	8006d02 <UART_SetConfig+0x3a6>
 8006cb2:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <UART_SetConfig+0x35c>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006cdd 	.word	0x08006cdd
 8006cbc:	08006ce5 	.word	0x08006ce5
 8006cc0:	08006ced 	.word	0x08006ced
 8006cc4:	08006d03 	.word	0x08006d03
 8006cc8:	08006cf3 	.word	0x08006cf3
 8006ccc:	08006d03 	.word	0x08006d03
 8006cd0:	08006d03 	.word	0x08006d03
 8006cd4:	08006d03 	.word	0x08006d03
 8006cd8:	08006cfb 	.word	0x08006cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cdc:	f7fd f9f2 	bl	80040c4 <HAL_RCC_GetPCLK1Freq>
 8006ce0:	61b8      	str	r0, [r7, #24]
        break;
 8006ce2:	e013      	b.n	8006d0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce4:	f7fd fa02 	bl	80040ec <HAL_RCC_GetPCLK2Freq>
 8006ce8:	61b8      	str	r0, [r7, #24]
        break;
 8006cea:	e00f      	b.n	8006d0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b4b      	ldr	r3, [pc, #300]	; (8006e1c <UART_SetConfig+0x4c0>)
 8006cee:	61bb      	str	r3, [r7, #24]
        break;
 8006cf0:	e00c      	b.n	8006d0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fd f925 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8006cf6:	61b8      	str	r0, [r7, #24]
        break;
 8006cf8:	e008      	b.n	8006d0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfe:	61bb      	str	r3, [r7, #24]
        break;
 8006d00:	e004      	b.n	8006d0c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	77bb      	strb	r3, [r7, #30]
        break;
 8006d0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d074      	beq.n	8006dfc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	005a      	lsls	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	441a      	add	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2b0f      	cmp	r3, #15
 8006d2e:	d916      	bls.n	8006d5e <UART_SetConfig+0x402>
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d36:	d212      	bcs.n	8006d5e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f023 030f 	bic.w	r3, r3, #15
 8006d40:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	085b      	lsrs	r3, r3, #1
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	89fb      	ldrh	r3, [r7, #14]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	89fa      	ldrh	r2, [r7, #14]
 8006d5a:	60da      	str	r2, [r3, #12]
 8006d5c:	e04e      	b.n	8006dfc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	77bb      	strb	r3, [r7, #30]
 8006d62:	e04b      	b.n	8006dfc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d64:	7ffb      	ldrb	r3, [r7, #31]
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	d827      	bhi.n	8006dba <UART_SetConfig+0x45e>
 8006d6a:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <UART_SetConfig+0x414>)
 8006d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d70:	08006d95 	.word	0x08006d95
 8006d74:	08006d9d 	.word	0x08006d9d
 8006d78:	08006da5 	.word	0x08006da5
 8006d7c:	08006dbb 	.word	0x08006dbb
 8006d80:	08006dab 	.word	0x08006dab
 8006d84:	08006dbb 	.word	0x08006dbb
 8006d88:	08006dbb 	.word	0x08006dbb
 8006d8c:	08006dbb 	.word	0x08006dbb
 8006d90:	08006db3 	.word	0x08006db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d94:	f7fd f996 	bl	80040c4 <HAL_RCC_GetPCLK1Freq>
 8006d98:	61b8      	str	r0, [r7, #24]
        break;
 8006d9a:	e013      	b.n	8006dc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d9c:	f7fd f9a6 	bl	80040ec <HAL_RCC_GetPCLK2Freq>
 8006da0:	61b8      	str	r0, [r7, #24]
        break;
 8006da2:	e00f      	b.n	8006dc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006da4:	4b1d      	ldr	r3, [pc, #116]	; (8006e1c <UART_SetConfig+0x4c0>)
 8006da6:	61bb      	str	r3, [r7, #24]
        break;
 8006da8:	e00c      	b.n	8006dc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006daa:	f7fd f8c9 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8006dae:	61b8      	str	r0, [r7, #24]
        break;
 8006db0:	e008      	b.n	8006dc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006db6:	61bb      	str	r3, [r7, #24]
        break;
 8006db8:	e004      	b.n	8006dc4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	77bb      	strb	r3, [r7, #30]
        break;
 8006dc2:	bf00      	nop
    }

    if (pclk != 0U)
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d018      	beq.n	8006dfc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	085a      	lsrs	r2, r3, #1
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	441a      	add	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b0f      	cmp	r3, #15
 8006de4:	d908      	bls.n	8006df8 <UART_SetConfig+0x49c>
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dec:	d204      	bcs.n	8006df8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	60da      	str	r2, [r3, #12]
 8006df6:	e001      	b.n	8006dfc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e08:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3720      	adds	r7, #32
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	40007c00 	.word	0x40007c00
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	00f42400 	.word	0x00f42400

08006e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	f003 0308 	and.w	r3, r3, #8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	f003 0310 	and.w	r3, r3, #16
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00a      	beq.n	8006ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01a      	beq.n	8006f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1e:	d10a      	bne.n	8006f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	605a      	str	r2, [r3, #4]
  }
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af02      	add	r7, sp, #8
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f74:	f7fb fa12 	bl	800239c <HAL_GetTick>
 8006f78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d10e      	bne.n	8006fa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f817 	bl	8006fca <UART_WaitOnFlagUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e00d      	b.n	8006fc2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	603b      	str	r3, [r7, #0]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fda:	e05e      	b.n	800709a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe2:	d05a      	beq.n	800709a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe4:	f7fb f9da 	bl	800239c <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d302      	bcc.n	8006ffa <UART_WaitOnFlagUntilTimeout+0x30>
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d11b      	bne.n	8007032 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007008:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 0201 	bic.w	r2, r2, #1
 8007018:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e043      	b.n	80070ba <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d02c      	beq.n	800709a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800704a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800704e:	d124      	bne.n	800709a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007058:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007068:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0201 	bic.w	r2, r2, #1
 8007078:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2220      	movs	r2, #32
 800707e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2220      	movs	r2, #32
 8007084:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e00f      	b.n	80070ba <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69da      	ldr	r2, [r3, #28]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4013      	ands	r3, r2
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	bf0c      	ite	eq
 80070aa:	2301      	moveq	r3, #1
 80070ac:	2300      	movne	r3, #0
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	461a      	mov	r2, r3
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d091      	beq.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070d8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0201 	bic.w	r2, r2, #1
 80070e8:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d107      	bne.n	8007102 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0210 	bic.w	r2, r2, #16
 8007100:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2220      	movs	r2, #32
 8007106:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff fbf6 	bl	8006930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007162:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff fbd3 	bl	800691c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007176:	bf00      	nop
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <__libc_init_array>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	4d0d      	ldr	r5, [pc, #52]	; (80071b8 <__libc_init_array+0x38>)
 8007184:	4c0d      	ldr	r4, [pc, #52]	; (80071bc <__libc_init_array+0x3c>)
 8007186:	1b64      	subs	r4, r4, r5
 8007188:	10a4      	asrs	r4, r4, #2
 800718a:	2600      	movs	r6, #0
 800718c:	42a6      	cmp	r6, r4
 800718e:	d109      	bne.n	80071a4 <__libc_init_array+0x24>
 8007190:	4d0b      	ldr	r5, [pc, #44]	; (80071c0 <__libc_init_array+0x40>)
 8007192:	4c0c      	ldr	r4, [pc, #48]	; (80071c4 <__libc_init_array+0x44>)
 8007194:	f001 f856 	bl	8008244 <_init>
 8007198:	1b64      	subs	r4, r4, r5
 800719a:	10a4      	asrs	r4, r4, #2
 800719c:	2600      	movs	r6, #0
 800719e:	42a6      	cmp	r6, r4
 80071a0:	d105      	bne.n	80071ae <__libc_init_array+0x2e>
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a8:	4798      	blx	r3
 80071aa:	3601      	adds	r6, #1
 80071ac:	e7ee      	b.n	800718c <__libc_init_array+0xc>
 80071ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b2:	4798      	blx	r3
 80071b4:	3601      	adds	r6, #1
 80071b6:	e7f2      	b.n	800719e <__libc_init_array+0x1e>
 80071b8:	08008468 	.word	0x08008468
 80071bc:	08008468 	.word	0x08008468
 80071c0:	08008468 	.word	0x08008468
 80071c4:	0800846c 	.word	0x0800846c

080071c8 <memset>:
 80071c8:	4402      	add	r2, r0
 80071ca:	4603      	mov	r3, r0
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d100      	bne.n	80071d2 <memset+0xa>
 80071d0:	4770      	bx	lr
 80071d2:	f803 1b01 	strb.w	r1, [r3], #1
 80071d6:	e7f9      	b.n	80071cc <memset+0x4>

080071d8 <sin>:
 80071d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071da:	ec53 2b10 	vmov	r2, r3, d0
 80071de:	4826      	ldr	r0, [pc, #152]	; (8007278 <sin+0xa0>)
 80071e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80071e4:	4281      	cmp	r1, r0
 80071e6:	dc07      	bgt.n	80071f8 <sin+0x20>
 80071e8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007270 <sin+0x98>
 80071ec:	2000      	movs	r0, #0
 80071ee:	f000 fe5b 	bl	8007ea8 <__kernel_sin>
 80071f2:	ec51 0b10 	vmov	r0, r1, d0
 80071f6:	e007      	b.n	8007208 <sin+0x30>
 80071f8:	4820      	ldr	r0, [pc, #128]	; (800727c <sin+0xa4>)
 80071fa:	4281      	cmp	r1, r0
 80071fc:	dd09      	ble.n	8007212 <sin+0x3a>
 80071fe:	ee10 0a10 	vmov	r0, s0
 8007202:	4619      	mov	r1, r3
 8007204:	f7f9 f80e 	bl	8000224 <__aeabi_dsub>
 8007208:	ec41 0b10 	vmov	d0, r0, r1
 800720c:	b005      	add	sp, #20
 800720e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007212:	4668      	mov	r0, sp
 8007214:	f000 f834 	bl	8007280 <__ieee754_rem_pio2>
 8007218:	f000 0003 	and.w	r0, r0, #3
 800721c:	2801      	cmp	r0, #1
 800721e:	d008      	beq.n	8007232 <sin+0x5a>
 8007220:	2802      	cmp	r0, #2
 8007222:	d00d      	beq.n	8007240 <sin+0x68>
 8007224:	b9d0      	cbnz	r0, 800725c <sin+0x84>
 8007226:	ed9d 1b02 	vldr	d1, [sp, #8]
 800722a:	ed9d 0b00 	vldr	d0, [sp]
 800722e:	2001      	movs	r0, #1
 8007230:	e7dd      	b.n	80071ee <sin+0x16>
 8007232:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007236:	ed9d 0b00 	vldr	d0, [sp]
 800723a:	f000 fa2d 	bl	8007698 <__kernel_cos>
 800723e:	e7d8      	b.n	80071f2 <sin+0x1a>
 8007240:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007244:	ed9d 0b00 	vldr	d0, [sp]
 8007248:	2001      	movs	r0, #1
 800724a:	f000 fe2d 	bl	8007ea8 <__kernel_sin>
 800724e:	ec53 2b10 	vmov	r2, r3, d0
 8007252:	ee10 0a10 	vmov	r0, s0
 8007256:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800725a:	e7d5      	b.n	8007208 <sin+0x30>
 800725c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007260:	ed9d 0b00 	vldr	d0, [sp]
 8007264:	f000 fa18 	bl	8007698 <__kernel_cos>
 8007268:	e7f1      	b.n	800724e <sin+0x76>
 800726a:	bf00      	nop
 800726c:	f3af 8000 	nop.w
	...
 8007278:	3fe921fb 	.word	0x3fe921fb
 800727c:	7fefffff 	.word	0x7fefffff

08007280 <__ieee754_rem_pio2>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	ed2d 8b02 	vpush	{d8}
 8007288:	ec55 4b10 	vmov	r4, r5, d0
 800728c:	4bca      	ldr	r3, [pc, #808]	; (80075b8 <__ieee754_rem_pio2+0x338>)
 800728e:	b08b      	sub	sp, #44	; 0x2c
 8007290:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007294:	4598      	cmp	r8, r3
 8007296:	4682      	mov	sl, r0
 8007298:	9502      	str	r5, [sp, #8]
 800729a:	dc08      	bgt.n	80072ae <__ieee754_rem_pio2+0x2e>
 800729c:	2200      	movs	r2, #0
 800729e:	2300      	movs	r3, #0
 80072a0:	ed80 0b00 	vstr	d0, [r0]
 80072a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80072a8:	f04f 0b00 	mov.w	fp, #0
 80072ac:	e028      	b.n	8007300 <__ieee754_rem_pio2+0x80>
 80072ae:	4bc3      	ldr	r3, [pc, #780]	; (80075bc <__ieee754_rem_pio2+0x33c>)
 80072b0:	4598      	cmp	r8, r3
 80072b2:	dc78      	bgt.n	80073a6 <__ieee754_rem_pio2+0x126>
 80072b4:	9b02      	ldr	r3, [sp, #8]
 80072b6:	4ec2      	ldr	r6, [pc, #776]	; (80075c0 <__ieee754_rem_pio2+0x340>)
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	ee10 0a10 	vmov	r0, s0
 80072be:	a3b0      	add	r3, pc, #704	; (adr r3, 8007580 <__ieee754_rem_pio2+0x300>)
 80072c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c4:	4629      	mov	r1, r5
 80072c6:	dd39      	ble.n	800733c <__ieee754_rem_pio2+0xbc>
 80072c8:	f7f8 ffac 	bl	8000224 <__aeabi_dsub>
 80072cc:	45b0      	cmp	r8, r6
 80072ce:	4604      	mov	r4, r0
 80072d0:	460d      	mov	r5, r1
 80072d2:	d01b      	beq.n	800730c <__ieee754_rem_pio2+0x8c>
 80072d4:	a3ac      	add	r3, pc, #688	; (adr r3, 8007588 <__ieee754_rem_pio2+0x308>)
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	f7f8 ffa3 	bl	8000224 <__aeabi_dsub>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	e9ca 2300 	strd	r2, r3, [sl]
 80072e6:	4620      	mov	r0, r4
 80072e8:	4629      	mov	r1, r5
 80072ea:	f7f8 ff9b 	bl	8000224 <__aeabi_dsub>
 80072ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8007588 <__ieee754_rem_pio2+0x308>)
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	f7f8 ff96 	bl	8000224 <__aeabi_dsub>
 80072f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80072fc:	f04f 0b01 	mov.w	fp, #1
 8007300:	4658      	mov	r0, fp
 8007302:	b00b      	add	sp, #44	; 0x2c
 8007304:	ecbd 8b02 	vpop	{d8}
 8007308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730c:	a3a0      	add	r3, pc, #640	; (adr r3, 8007590 <__ieee754_rem_pio2+0x310>)
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	f7f8 ff87 	bl	8000224 <__aeabi_dsub>
 8007316:	a3a0      	add	r3, pc, #640	; (adr r3, 8007598 <__ieee754_rem_pio2+0x318>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	4604      	mov	r4, r0
 800731e:	460d      	mov	r5, r1
 8007320:	f7f8 ff80 	bl	8000224 <__aeabi_dsub>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	e9ca 2300 	strd	r2, r3, [sl]
 800732c:	4620      	mov	r0, r4
 800732e:	4629      	mov	r1, r5
 8007330:	f7f8 ff78 	bl	8000224 <__aeabi_dsub>
 8007334:	a398      	add	r3, pc, #608	; (adr r3, 8007598 <__ieee754_rem_pio2+0x318>)
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	e7db      	b.n	80072f4 <__ieee754_rem_pio2+0x74>
 800733c:	f7f8 ff74 	bl	8000228 <__adddf3>
 8007340:	45b0      	cmp	r8, r6
 8007342:	4604      	mov	r4, r0
 8007344:	460d      	mov	r5, r1
 8007346:	d016      	beq.n	8007376 <__ieee754_rem_pio2+0xf6>
 8007348:	a38f      	add	r3, pc, #572	; (adr r3, 8007588 <__ieee754_rem_pio2+0x308>)
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	f7f8 ff6b 	bl	8000228 <__adddf3>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	e9ca 2300 	strd	r2, r3, [sl]
 800735a:	4620      	mov	r0, r4
 800735c:	4629      	mov	r1, r5
 800735e:	f7f8 ff61 	bl	8000224 <__aeabi_dsub>
 8007362:	a389      	add	r3, pc, #548	; (adr r3, 8007588 <__ieee754_rem_pio2+0x308>)
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f7f8 ff5e 	bl	8000228 <__adddf3>
 800736c:	f04f 3bff 	mov.w	fp, #4294967295
 8007370:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007374:	e7c4      	b.n	8007300 <__ieee754_rem_pio2+0x80>
 8007376:	a386      	add	r3, pc, #536	; (adr r3, 8007590 <__ieee754_rem_pio2+0x310>)
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f7f8 ff54 	bl	8000228 <__adddf3>
 8007380:	a385      	add	r3, pc, #532	; (adr r3, 8007598 <__ieee754_rem_pio2+0x318>)
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	4604      	mov	r4, r0
 8007388:	460d      	mov	r5, r1
 800738a:	f7f8 ff4d 	bl	8000228 <__adddf3>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	e9ca 2300 	strd	r2, r3, [sl]
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f8 ff43 	bl	8000224 <__aeabi_dsub>
 800739e:	a37e      	add	r3, pc, #504	; (adr r3, 8007598 <__ieee754_rem_pio2+0x318>)
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	e7e0      	b.n	8007368 <__ieee754_rem_pio2+0xe8>
 80073a6:	4b87      	ldr	r3, [pc, #540]	; (80075c4 <__ieee754_rem_pio2+0x344>)
 80073a8:	4598      	cmp	r8, r3
 80073aa:	f300 80d9 	bgt.w	8007560 <__ieee754_rem_pio2+0x2e0>
 80073ae:	f000 fe39 	bl	8008024 <fabs>
 80073b2:	ec55 4b10 	vmov	r4, r5, d0
 80073b6:	ee10 0a10 	vmov	r0, s0
 80073ba:	a379      	add	r3, pc, #484	; (adr r3, 80075a0 <__ieee754_rem_pio2+0x320>)
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	4629      	mov	r1, r5
 80073c2:	f7f9 f8e7 	bl	8000594 <__aeabi_dmul>
 80073c6:	4b80      	ldr	r3, [pc, #512]	; (80075c8 <__ieee754_rem_pio2+0x348>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	f7f8 ff2d 	bl	8000228 <__adddf3>
 80073ce:	f7f9 fb7b 	bl	8000ac8 <__aeabi_d2iz>
 80073d2:	4683      	mov	fp, r0
 80073d4:	f7f9 f874 	bl	80004c0 <__aeabi_i2d>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	ec43 2b18 	vmov	d8, r2, r3
 80073e0:	a367      	add	r3, pc, #412	; (adr r3, 8007580 <__ieee754_rem_pio2+0x300>)
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	f7f9 f8d5 	bl	8000594 <__aeabi_dmul>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	4620      	mov	r0, r4
 80073f0:	4629      	mov	r1, r5
 80073f2:	f7f8 ff17 	bl	8000224 <__aeabi_dsub>
 80073f6:	a364      	add	r3, pc, #400	; (adr r3, 8007588 <__ieee754_rem_pio2+0x308>)
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	4606      	mov	r6, r0
 80073fe:	460f      	mov	r7, r1
 8007400:	ec51 0b18 	vmov	r0, r1, d8
 8007404:	f7f9 f8c6 	bl	8000594 <__aeabi_dmul>
 8007408:	f1bb 0f1f 	cmp.w	fp, #31
 800740c:	4604      	mov	r4, r0
 800740e:	460d      	mov	r5, r1
 8007410:	dc0d      	bgt.n	800742e <__ieee754_rem_pio2+0x1ae>
 8007412:	4b6e      	ldr	r3, [pc, #440]	; (80075cc <__ieee754_rem_pio2+0x34c>)
 8007414:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741c:	4543      	cmp	r3, r8
 800741e:	d006      	beq.n	800742e <__ieee754_rem_pio2+0x1ae>
 8007420:	4622      	mov	r2, r4
 8007422:	462b      	mov	r3, r5
 8007424:	4630      	mov	r0, r6
 8007426:	4639      	mov	r1, r7
 8007428:	f7f8 fefc 	bl	8000224 <__aeabi_dsub>
 800742c:	e00f      	b.n	800744e <__ieee754_rem_pio2+0x1ce>
 800742e:	462b      	mov	r3, r5
 8007430:	4622      	mov	r2, r4
 8007432:	4630      	mov	r0, r6
 8007434:	4639      	mov	r1, r7
 8007436:	f7f8 fef5 	bl	8000224 <__aeabi_dsub>
 800743a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800743e:	9303      	str	r3, [sp, #12]
 8007440:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007444:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007448:	f1b8 0f10 	cmp.w	r8, #16
 800744c:	dc02      	bgt.n	8007454 <__ieee754_rem_pio2+0x1d4>
 800744e:	e9ca 0100 	strd	r0, r1, [sl]
 8007452:	e039      	b.n	80074c8 <__ieee754_rem_pio2+0x248>
 8007454:	a34e      	add	r3, pc, #312	; (adr r3, 8007590 <__ieee754_rem_pio2+0x310>)
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	ec51 0b18 	vmov	r0, r1, d8
 800745e:	f7f9 f899 	bl	8000594 <__aeabi_dmul>
 8007462:	4604      	mov	r4, r0
 8007464:	460d      	mov	r5, r1
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4630      	mov	r0, r6
 800746c:	4639      	mov	r1, r7
 800746e:	f7f8 fed9 	bl	8000224 <__aeabi_dsub>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4680      	mov	r8, r0
 8007478:	4689      	mov	r9, r1
 800747a:	4630      	mov	r0, r6
 800747c:	4639      	mov	r1, r7
 800747e:	f7f8 fed1 	bl	8000224 <__aeabi_dsub>
 8007482:	4622      	mov	r2, r4
 8007484:	462b      	mov	r3, r5
 8007486:	f7f8 fecd 	bl	8000224 <__aeabi_dsub>
 800748a:	a343      	add	r3, pc, #268	; (adr r3, 8007598 <__ieee754_rem_pio2+0x318>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	4604      	mov	r4, r0
 8007492:	460d      	mov	r5, r1
 8007494:	ec51 0b18 	vmov	r0, r1, d8
 8007498:	f7f9 f87c 	bl	8000594 <__aeabi_dmul>
 800749c:	4622      	mov	r2, r4
 800749e:	462b      	mov	r3, r5
 80074a0:	f7f8 fec0 	bl	8000224 <__aeabi_dsub>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4604      	mov	r4, r0
 80074aa:	460d      	mov	r5, r1
 80074ac:	4640      	mov	r0, r8
 80074ae:	4649      	mov	r1, r9
 80074b0:	f7f8 feb8 	bl	8000224 <__aeabi_dsub>
 80074b4:	9a03      	ldr	r2, [sp, #12]
 80074b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b31      	cmp	r3, #49	; 0x31
 80074be:	dc24      	bgt.n	800750a <__ieee754_rem_pio2+0x28a>
 80074c0:	e9ca 0100 	strd	r0, r1, [sl]
 80074c4:	4646      	mov	r6, r8
 80074c6:	464f      	mov	r7, r9
 80074c8:	e9da 8900 	ldrd	r8, r9, [sl]
 80074cc:	4630      	mov	r0, r6
 80074ce:	4642      	mov	r2, r8
 80074d0:	464b      	mov	r3, r9
 80074d2:	4639      	mov	r1, r7
 80074d4:	f7f8 fea6 	bl	8000224 <__aeabi_dsub>
 80074d8:	462b      	mov	r3, r5
 80074da:	4622      	mov	r2, r4
 80074dc:	f7f8 fea2 	bl	8000224 <__aeabi_dsub>
 80074e0:	9b02      	ldr	r3, [sp, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80074e8:	f6bf af0a 	bge.w	8007300 <__ieee754_rem_pio2+0x80>
 80074ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80074f0:	f8ca 3004 	str.w	r3, [sl, #4]
 80074f4:	f8ca 8000 	str.w	r8, [sl]
 80074f8:	f8ca 0008 	str.w	r0, [sl, #8]
 80074fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007500:	f8ca 300c 	str.w	r3, [sl, #12]
 8007504:	f1cb 0b00 	rsb	fp, fp, #0
 8007508:	e6fa      	b.n	8007300 <__ieee754_rem_pio2+0x80>
 800750a:	a327      	add	r3, pc, #156	; (adr r3, 80075a8 <__ieee754_rem_pio2+0x328>)
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	ec51 0b18 	vmov	r0, r1, d8
 8007514:	f7f9 f83e 	bl	8000594 <__aeabi_dmul>
 8007518:	4604      	mov	r4, r0
 800751a:	460d      	mov	r5, r1
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4640      	mov	r0, r8
 8007522:	4649      	mov	r1, r9
 8007524:	f7f8 fe7e 	bl	8000224 <__aeabi_dsub>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4606      	mov	r6, r0
 800752e:	460f      	mov	r7, r1
 8007530:	4640      	mov	r0, r8
 8007532:	4649      	mov	r1, r9
 8007534:	f7f8 fe76 	bl	8000224 <__aeabi_dsub>
 8007538:	4622      	mov	r2, r4
 800753a:	462b      	mov	r3, r5
 800753c:	f7f8 fe72 	bl	8000224 <__aeabi_dsub>
 8007540:	a31b      	add	r3, pc, #108	; (adr r3, 80075b0 <__ieee754_rem_pio2+0x330>)
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	4604      	mov	r4, r0
 8007548:	460d      	mov	r5, r1
 800754a:	ec51 0b18 	vmov	r0, r1, d8
 800754e:	f7f9 f821 	bl	8000594 <__aeabi_dmul>
 8007552:	4622      	mov	r2, r4
 8007554:	462b      	mov	r3, r5
 8007556:	f7f8 fe65 	bl	8000224 <__aeabi_dsub>
 800755a:	4604      	mov	r4, r0
 800755c:	460d      	mov	r5, r1
 800755e:	e75f      	b.n	8007420 <__ieee754_rem_pio2+0x1a0>
 8007560:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <__ieee754_rem_pio2+0x350>)
 8007562:	4598      	cmp	r8, r3
 8007564:	dd36      	ble.n	80075d4 <__ieee754_rem_pio2+0x354>
 8007566:	ee10 2a10 	vmov	r2, s0
 800756a:	462b      	mov	r3, r5
 800756c:	4620      	mov	r0, r4
 800756e:	4629      	mov	r1, r5
 8007570:	f7f8 fe58 	bl	8000224 <__aeabi_dsub>
 8007574:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007578:	e9ca 0100 	strd	r0, r1, [sl]
 800757c:	e694      	b.n	80072a8 <__ieee754_rem_pio2+0x28>
 800757e:	bf00      	nop
 8007580:	54400000 	.word	0x54400000
 8007584:	3ff921fb 	.word	0x3ff921fb
 8007588:	1a626331 	.word	0x1a626331
 800758c:	3dd0b461 	.word	0x3dd0b461
 8007590:	1a600000 	.word	0x1a600000
 8007594:	3dd0b461 	.word	0x3dd0b461
 8007598:	2e037073 	.word	0x2e037073
 800759c:	3ba3198a 	.word	0x3ba3198a
 80075a0:	6dc9c883 	.word	0x6dc9c883
 80075a4:	3fe45f30 	.word	0x3fe45f30
 80075a8:	2e000000 	.word	0x2e000000
 80075ac:	3ba3198a 	.word	0x3ba3198a
 80075b0:	252049c1 	.word	0x252049c1
 80075b4:	397b839a 	.word	0x397b839a
 80075b8:	3fe921fb 	.word	0x3fe921fb
 80075bc:	4002d97b 	.word	0x4002d97b
 80075c0:	3ff921fb 	.word	0x3ff921fb
 80075c4:	413921fb 	.word	0x413921fb
 80075c8:	3fe00000 	.word	0x3fe00000
 80075cc:	08008288 	.word	0x08008288
 80075d0:	7fefffff 	.word	0x7fefffff
 80075d4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80075d8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80075dc:	ee10 0a10 	vmov	r0, s0
 80075e0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80075e4:	ee10 6a10 	vmov	r6, s0
 80075e8:	460f      	mov	r7, r1
 80075ea:	f7f9 fa6d 	bl	8000ac8 <__aeabi_d2iz>
 80075ee:	f7f8 ff67 	bl	80004c0 <__aeabi_i2d>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4630      	mov	r0, r6
 80075f8:	4639      	mov	r1, r7
 80075fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075fe:	f7f8 fe11 	bl	8000224 <__aeabi_dsub>
 8007602:	4b22      	ldr	r3, [pc, #136]	; (800768c <__ieee754_rem_pio2+0x40c>)
 8007604:	2200      	movs	r2, #0
 8007606:	f7f8 ffc5 	bl	8000594 <__aeabi_dmul>
 800760a:	460f      	mov	r7, r1
 800760c:	4606      	mov	r6, r0
 800760e:	f7f9 fa5b 	bl	8000ac8 <__aeabi_d2iz>
 8007612:	f7f8 ff55 	bl	80004c0 <__aeabi_i2d>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4630      	mov	r0, r6
 800761c:	4639      	mov	r1, r7
 800761e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007622:	f7f8 fdff 	bl	8000224 <__aeabi_dsub>
 8007626:	4b19      	ldr	r3, [pc, #100]	; (800768c <__ieee754_rem_pio2+0x40c>)
 8007628:	2200      	movs	r2, #0
 800762a:	f7f8 ffb3 	bl	8000594 <__aeabi_dmul>
 800762e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007632:	ad04      	add	r5, sp, #16
 8007634:	f04f 0803 	mov.w	r8, #3
 8007638:	46a9      	mov	r9, r5
 800763a:	2600      	movs	r6, #0
 800763c:	2700      	movs	r7, #0
 800763e:	4632      	mov	r2, r6
 8007640:	463b      	mov	r3, r7
 8007642:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007646:	46c3      	mov	fp, r8
 8007648:	3d08      	subs	r5, #8
 800764a:	f108 38ff 	add.w	r8, r8, #4294967295
 800764e:	f7f9 fa09 	bl	8000a64 <__aeabi_dcmpeq>
 8007652:	2800      	cmp	r0, #0
 8007654:	d1f3      	bne.n	800763e <__ieee754_rem_pio2+0x3be>
 8007656:	4b0e      	ldr	r3, [pc, #56]	; (8007690 <__ieee754_rem_pio2+0x410>)
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	2302      	movs	r3, #2
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	4622      	mov	r2, r4
 8007660:	465b      	mov	r3, fp
 8007662:	4651      	mov	r1, sl
 8007664:	4648      	mov	r0, r9
 8007666:	f000 f8df 	bl	8007828 <__kernel_rem_pio2>
 800766a:	9b02      	ldr	r3, [sp, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	4683      	mov	fp, r0
 8007670:	f6bf ae46 	bge.w	8007300 <__ieee754_rem_pio2+0x80>
 8007674:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007678:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800767c:	f8ca 3004 	str.w	r3, [sl, #4]
 8007680:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007684:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007688:	e73a      	b.n	8007500 <__ieee754_rem_pio2+0x280>
 800768a:	bf00      	nop
 800768c:	41700000 	.word	0x41700000
 8007690:	08008308 	.word	0x08008308
 8007694:	00000000 	.word	0x00000000

08007698 <__kernel_cos>:
 8007698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	ec57 6b10 	vmov	r6, r7, d0
 80076a0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80076a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80076a8:	ed8d 1b00 	vstr	d1, [sp]
 80076ac:	da07      	bge.n	80076be <__kernel_cos+0x26>
 80076ae:	ee10 0a10 	vmov	r0, s0
 80076b2:	4639      	mov	r1, r7
 80076b4:	f7f9 fa08 	bl	8000ac8 <__aeabi_d2iz>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	f000 8088 	beq.w	80077ce <__kernel_cos+0x136>
 80076be:	4632      	mov	r2, r6
 80076c0:	463b      	mov	r3, r7
 80076c2:	4630      	mov	r0, r6
 80076c4:	4639      	mov	r1, r7
 80076c6:	f7f8 ff65 	bl	8000594 <__aeabi_dmul>
 80076ca:	4b51      	ldr	r3, [pc, #324]	; (8007810 <__kernel_cos+0x178>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	4604      	mov	r4, r0
 80076d0:	460d      	mov	r5, r1
 80076d2:	f7f8 ff5f 	bl	8000594 <__aeabi_dmul>
 80076d6:	a340      	add	r3, pc, #256	; (adr r3, 80077d8 <__kernel_cos+0x140>)
 80076d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076dc:	4682      	mov	sl, r0
 80076de:	468b      	mov	fp, r1
 80076e0:	4620      	mov	r0, r4
 80076e2:	4629      	mov	r1, r5
 80076e4:	f7f8 ff56 	bl	8000594 <__aeabi_dmul>
 80076e8:	a33d      	add	r3, pc, #244	; (adr r3, 80077e0 <__kernel_cos+0x148>)
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	f7f8 fd9b 	bl	8000228 <__adddf3>
 80076f2:	4622      	mov	r2, r4
 80076f4:	462b      	mov	r3, r5
 80076f6:	f7f8 ff4d 	bl	8000594 <__aeabi_dmul>
 80076fa:	a33b      	add	r3, pc, #236	; (adr r3, 80077e8 <__kernel_cos+0x150>)
 80076fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007700:	f7f8 fd90 	bl	8000224 <__aeabi_dsub>
 8007704:	4622      	mov	r2, r4
 8007706:	462b      	mov	r3, r5
 8007708:	f7f8 ff44 	bl	8000594 <__aeabi_dmul>
 800770c:	a338      	add	r3, pc, #224	; (adr r3, 80077f0 <__kernel_cos+0x158>)
 800770e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007712:	f7f8 fd89 	bl	8000228 <__adddf3>
 8007716:	4622      	mov	r2, r4
 8007718:	462b      	mov	r3, r5
 800771a:	f7f8 ff3b 	bl	8000594 <__aeabi_dmul>
 800771e:	a336      	add	r3, pc, #216	; (adr r3, 80077f8 <__kernel_cos+0x160>)
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	f7f8 fd7e 	bl	8000224 <__aeabi_dsub>
 8007728:	4622      	mov	r2, r4
 800772a:	462b      	mov	r3, r5
 800772c:	f7f8 ff32 	bl	8000594 <__aeabi_dmul>
 8007730:	a333      	add	r3, pc, #204	; (adr r3, 8007800 <__kernel_cos+0x168>)
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	f7f8 fd77 	bl	8000228 <__adddf3>
 800773a:	4622      	mov	r2, r4
 800773c:	462b      	mov	r3, r5
 800773e:	f7f8 ff29 	bl	8000594 <__aeabi_dmul>
 8007742:	4622      	mov	r2, r4
 8007744:	462b      	mov	r3, r5
 8007746:	f7f8 ff25 	bl	8000594 <__aeabi_dmul>
 800774a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800774e:	4604      	mov	r4, r0
 8007750:	460d      	mov	r5, r1
 8007752:	4630      	mov	r0, r6
 8007754:	4639      	mov	r1, r7
 8007756:	f7f8 ff1d 	bl	8000594 <__aeabi_dmul>
 800775a:	460b      	mov	r3, r1
 800775c:	4602      	mov	r2, r0
 800775e:	4629      	mov	r1, r5
 8007760:	4620      	mov	r0, r4
 8007762:	f7f8 fd5f 	bl	8000224 <__aeabi_dsub>
 8007766:	4b2b      	ldr	r3, [pc, #172]	; (8007814 <__kernel_cos+0x17c>)
 8007768:	4598      	cmp	r8, r3
 800776a:	4606      	mov	r6, r0
 800776c:	460f      	mov	r7, r1
 800776e:	dc10      	bgt.n	8007792 <__kernel_cos+0xfa>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4650      	mov	r0, sl
 8007776:	4659      	mov	r1, fp
 8007778:	f7f8 fd54 	bl	8000224 <__aeabi_dsub>
 800777c:	460b      	mov	r3, r1
 800777e:	4926      	ldr	r1, [pc, #152]	; (8007818 <__kernel_cos+0x180>)
 8007780:	4602      	mov	r2, r0
 8007782:	2000      	movs	r0, #0
 8007784:	f7f8 fd4e 	bl	8000224 <__aeabi_dsub>
 8007788:	ec41 0b10 	vmov	d0, r0, r1
 800778c:	b003      	add	sp, #12
 800778e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007792:	4b22      	ldr	r3, [pc, #136]	; (800781c <__kernel_cos+0x184>)
 8007794:	4920      	ldr	r1, [pc, #128]	; (8007818 <__kernel_cos+0x180>)
 8007796:	4598      	cmp	r8, r3
 8007798:	bfcc      	ite	gt
 800779a:	4d21      	ldrgt	r5, [pc, #132]	; (8007820 <__kernel_cos+0x188>)
 800779c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80077a0:	2400      	movs	r4, #0
 80077a2:	4622      	mov	r2, r4
 80077a4:	462b      	mov	r3, r5
 80077a6:	2000      	movs	r0, #0
 80077a8:	f7f8 fd3c 	bl	8000224 <__aeabi_dsub>
 80077ac:	4622      	mov	r2, r4
 80077ae:	4680      	mov	r8, r0
 80077b0:	4689      	mov	r9, r1
 80077b2:	462b      	mov	r3, r5
 80077b4:	4650      	mov	r0, sl
 80077b6:	4659      	mov	r1, fp
 80077b8:	f7f8 fd34 	bl	8000224 <__aeabi_dsub>
 80077bc:	4632      	mov	r2, r6
 80077be:	463b      	mov	r3, r7
 80077c0:	f7f8 fd30 	bl	8000224 <__aeabi_dsub>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4640      	mov	r0, r8
 80077ca:	4649      	mov	r1, r9
 80077cc:	e7da      	b.n	8007784 <__kernel_cos+0xec>
 80077ce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007808 <__kernel_cos+0x170>
 80077d2:	e7db      	b.n	800778c <__kernel_cos+0xf4>
 80077d4:	f3af 8000 	nop.w
 80077d8:	be8838d4 	.word	0xbe8838d4
 80077dc:	bda8fae9 	.word	0xbda8fae9
 80077e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80077e4:	3e21ee9e 	.word	0x3e21ee9e
 80077e8:	809c52ad 	.word	0x809c52ad
 80077ec:	3e927e4f 	.word	0x3e927e4f
 80077f0:	19cb1590 	.word	0x19cb1590
 80077f4:	3efa01a0 	.word	0x3efa01a0
 80077f8:	16c15177 	.word	0x16c15177
 80077fc:	3f56c16c 	.word	0x3f56c16c
 8007800:	5555554c 	.word	0x5555554c
 8007804:	3fa55555 	.word	0x3fa55555
 8007808:	00000000 	.word	0x00000000
 800780c:	3ff00000 	.word	0x3ff00000
 8007810:	3fe00000 	.word	0x3fe00000
 8007814:	3fd33332 	.word	0x3fd33332
 8007818:	3ff00000 	.word	0x3ff00000
 800781c:	3fe90000 	.word	0x3fe90000
 8007820:	3fd20000 	.word	0x3fd20000
 8007824:	00000000 	.word	0x00000000

08007828 <__kernel_rem_pio2>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	ed2d 8b02 	vpush	{d8}
 8007830:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007834:	f112 0f14 	cmn.w	r2, #20
 8007838:	9308      	str	r3, [sp, #32]
 800783a:	9101      	str	r1, [sp, #4]
 800783c:	4bc6      	ldr	r3, [pc, #792]	; (8007b58 <__kernel_rem_pio2+0x330>)
 800783e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007840:	9009      	str	r0, [sp, #36]	; 0x24
 8007842:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007846:	9304      	str	r3, [sp, #16]
 8007848:	9b08      	ldr	r3, [sp, #32]
 800784a:	f103 33ff 	add.w	r3, r3, #4294967295
 800784e:	bfa8      	it	ge
 8007850:	1ed4      	subge	r4, r2, #3
 8007852:	9306      	str	r3, [sp, #24]
 8007854:	bfb2      	itee	lt
 8007856:	2400      	movlt	r4, #0
 8007858:	2318      	movge	r3, #24
 800785a:	fb94 f4f3 	sdivge	r4, r4, r3
 800785e:	f06f 0317 	mvn.w	r3, #23
 8007862:	fb04 3303 	mla	r3, r4, r3, r3
 8007866:	eb03 0a02 	add.w	sl, r3, r2
 800786a:	9b04      	ldr	r3, [sp, #16]
 800786c:	9a06      	ldr	r2, [sp, #24]
 800786e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007b48 <__kernel_rem_pio2+0x320>
 8007872:	eb03 0802 	add.w	r8, r3, r2
 8007876:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007878:	1aa7      	subs	r7, r4, r2
 800787a:	ae20      	add	r6, sp, #128	; 0x80
 800787c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007880:	2500      	movs	r5, #0
 8007882:	4545      	cmp	r5, r8
 8007884:	dd18      	ble.n	80078b8 <__kernel_rem_pio2+0x90>
 8007886:	9b08      	ldr	r3, [sp, #32]
 8007888:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800788c:	aa20      	add	r2, sp, #128	; 0x80
 800788e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007b48 <__kernel_rem_pio2+0x320>
 8007892:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007896:	f1c3 0301 	rsb	r3, r3, #1
 800789a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800789e:	9307      	str	r3, [sp, #28]
 80078a0:	9b07      	ldr	r3, [sp, #28]
 80078a2:	9a04      	ldr	r2, [sp, #16]
 80078a4:	4443      	add	r3, r8
 80078a6:	429a      	cmp	r2, r3
 80078a8:	db2f      	blt.n	800790a <__kernel_rem_pio2+0xe2>
 80078aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80078ae:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80078b2:	462f      	mov	r7, r5
 80078b4:	2600      	movs	r6, #0
 80078b6:	e01b      	b.n	80078f0 <__kernel_rem_pio2+0xc8>
 80078b8:	42ef      	cmn	r7, r5
 80078ba:	d407      	bmi.n	80078cc <__kernel_rem_pio2+0xa4>
 80078bc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80078c0:	f7f8 fdfe 	bl	80004c0 <__aeabi_i2d>
 80078c4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80078c8:	3501      	adds	r5, #1
 80078ca:	e7da      	b.n	8007882 <__kernel_rem_pio2+0x5a>
 80078cc:	ec51 0b18 	vmov	r0, r1, d8
 80078d0:	e7f8      	b.n	80078c4 <__kernel_rem_pio2+0x9c>
 80078d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078d6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80078da:	f7f8 fe5b 	bl	8000594 <__aeabi_dmul>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078e6:	f7f8 fc9f 	bl	8000228 <__adddf3>
 80078ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078ee:	3601      	adds	r6, #1
 80078f0:	9b06      	ldr	r3, [sp, #24]
 80078f2:	429e      	cmp	r6, r3
 80078f4:	f1a7 0708 	sub.w	r7, r7, #8
 80078f8:	ddeb      	ble.n	80078d2 <__kernel_rem_pio2+0xaa>
 80078fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80078fe:	3508      	adds	r5, #8
 8007900:	ecab 7b02 	vstmia	fp!, {d7}
 8007904:	f108 0801 	add.w	r8, r8, #1
 8007908:	e7ca      	b.n	80078a0 <__kernel_rem_pio2+0x78>
 800790a:	9b04      	ldr	r3, [sp, #16]
 800790c:	aa0c      	add	r2, sp, #48	; 0x30
 800790e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007912:	930b      	str	r3, [sp, #44]	; 0x2c
 8007914:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007916:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800791a:	9c04      	ldr	r4, [sp, #16]
 800791c:	930a      	str	r3, [sp, #40]	; 0x28
 800791e:	ab98      	add	r3, sp, #608	; 0x260
 8007920:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007924:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007928:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800792c:	f8cd b008 	str.w	fp, [sp, #8]
 8007930:	4625      	mov	r5, r4
 8007932:	2d00      	cmp	r5, #0
 8007934:	dc78      	bgt.n	8007a28 <__kernel_rem_pio2+0x200>
 8007936:	ec47 6b10 	vmov	d0, r6, r7
 800793a:	4650      	mov	r0, sl
 800793c:	f000 fbfc 	bl	8008138 <scalbn>
 8007940:	ec57 6b10 	vmov	r6, r7, d0
 8007944:	2200      	movs	r2, #0
 8007946:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800794a:	ee10 0a10 	vmov	r0, s0
 800794e:	4639      	mov	r1, r7
 8007950:	f7f8 fe20 	bl	8000594 <__aeabi_dmul>
 8007954:	ec41 0b10 	vmov	d0, r0, r1
 8007958:	f000 fb6e 	bl	8008038 <floor>
 800795c:	4b7f      	ldr	r3, [pc, #508]	; (8007b5c <__kernel_rem_pio2+0x334>)
 800795e:	ec51 0b10 	vmov	r0, r1, d0
 8007962:	2200      	movs	r2, #0
 8007964:	f7f8 fe16 	bl	8000594 <__aeabi_dmul>
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	4630      	mov	r0, r6
 800796e:	4639      	mov	r1, r7
 8007970:	f7f8 fc58 	bl	8000224 <__aeabi_dsub>
 8007974:	460f      	mov	r7, r1
 8007976:	4606      	mov	r6, r0
 8007978:	f7f9 f8a6 	bl	8000ac8 <__aeabi_d2iz>
 800797c:	9007      	str	r0, [sp, #28]
 800797e:	f7f8 fd9f 	bl	80004c0 <__aeabi_i2d>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4630      	mov	r0, r6
 8007988:	4639      	mov	r1, r7
 800798a:	f7f8 fc4b 	bl	8000224 <__aeabi_dsub>
 800798e:	f1ba 0f00 	cmp.w	sl, #0
 8007992:	4606      	mov	r6, r0
 8007994:	460f      	mov	r7, r1
 8007996:	dd70      	ble.n	8007a7a <__kernel_rem_pio2+0x252>
 8007998:	1e62      	subs	r2, r4, #1
 800799a:	ab0c      	add	r3, sp, #48	; 0x30
 800799c:	9d07      	ldr	r5, [sp, #28]
 800799e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80079a2:	f1ca 0118 	rsb	r1, sl, #24
 80079a6:	fa40 f301 	asr.w	r3, r0, r1
 80079aa:	441d      	add	r5, r3
 80079ac:	408b      	lsls	r3, r1
 80079ae:	1ac0      	subs	r0, r0, r3
 80079b0:	ab0c      	add	r3, sp, #48	; 0x30
 80079b2:	9507      	str	r5, [sp, #28]
 80079b4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80079b8:	f1ca 0317 	rsb	r3, sl, #23
 80079bc:	fa40 f303 	asr.w	r3, r0, r3
 80079c0:	9302      	str	r3, [sp, #8]
 80079c2:	9b02      	ldr	r3, [sp, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	dd66      	ble.n	8007a96 <__kernel_rem_pio2+0x26e>
 80079c8:	9b07      	ldr	r3, [sp, #28]
 80079ca:	2200      	movs	r2, #0
 80079cc:	3301      	adds	r3, #1
 80079ce:	9307      	str	r3, [sp, #28]
 80079d0:	4615      	mov	r5, r2
 80079d2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80079d6:	4294      	cmp	r4, r2
 80079d8:	f300 8099 	bgt.w	8007b0e <__kernel_rem_pio2+0x2e6>
 80079dc:	f1ba 0f00 	cmp.w	sl, #0
 80079e0:	dd07      	ble.n	80079f2 <__kernel_rem_pio2+0x1ca>
 80079e2:	f1ba 0f01 	cmp.w	sl, #1
 80079e6:	f000 80a5 	beq.w	8007b34 <__kernel_rem_pio2+0x30c>
 80079ea:	f1ba 0f02 	cmp.w	sl, #2
 80079ee:	f000 80c1 	beq.w	8007b74 <__kernel_rem_pio2+0x34c>
 80079f2:	9b02      	ldr	r3, [sp, #8]
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d14e      	bne.n	8007a96 <__kernel_rem_pio2+0x26e>
 80079f8:	4632      	mov	r2, r6
 80079fa:	463b      	mov	r3, r7
 80079fc:	4958      	ldr	r1, [pc, #352]	; (8007b60 <__kernel_rem_pio2+0x338>)
 80079fe:	2000      	movs	r0, #0
 8007a00:	f7f8 fc10 	bl	8000224 <__aeabi_dsub>
 8007a04:	4606      	mov	r6, r0
 8007a06:	460f      	mov	r7, r1
 8007a08:	2d00      	cmp	r5, #0
 8007a0a:	d044      	beq.n	8007a96 <__kernel_rem_pio2+0x26e>
 8007a0c:	4650      	mov	r0, sl
 8007a0e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007b50 <__kernel_rem_pio2+0x328>
 8007a12:	f000 fb91 	bl	8008138 <scalbn>
 8007a16:	4630      	mov	r0, r6
 8007a18:	4639      	mov	r1, r7
 8007a1a:	ec53 2b10 	vmov	r2, r3, d0
 8007a1e:	f7f8 fc01 	bl	8000224 <__aeabi_dsub>
 8007a22:	4606      	mov	r6, r0
 8007a24:	460f      	mov	r7, r1
 8007a26:	e036      	b.n	8007a96 <__kernel_rem_pio2+0x26e>
 8007a28:	4b4e      	ldr	r3, [pc, #312]	; (8007b64 <__kernel_rem_pio2+0x33c>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	4639      	mov	r1, r7
 8007a30:	f7f8 fdb0 	bl	8000594 <__aeabi_dmul>
 8007a34:	f7f9 f848 	bl	8000ac8 <__aeabi_d2iz>
 8007a38:	f7f8 fd42 	bl	80004c0 <__aeabi_i2d>
 8007a3c:	4b4a      	ldr	r3, [pc, #296]	; (8007b68 <__kernel_rem_pio2+0x340>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	4680      	mov	r8, r0
 8007a42:	4689      	mov	r9, r1
 8007a44:	f7f8 fda6 	bl	8000594 <__aeabi_dmul>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	4639      	mov	r1, r7
 8007a50:	f7f8 fbe8 	bl	8000224 <__aeabi_dsub>
 8007a54:	f7f9 f838 	bl	8000ac8 <__aeabi_d2iz>
 8007a58:	9b02      	ldr	r3, [sp, #8]
 8007a5a:	f843 0b04 	str.w	r0, [r3], #4
 8007a5e:	3d01      	subs	r5, #1
 8007a60:	9302      	str	r3, [sp, #8]
 8007a62:	ab70      	add	r3, sp, #448	; 0x1c0
 8007a64:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	4649      	mov	r1, r9
 8007a70:	f7f8 fbda 	bl	8000228 <__adddf3>
 8007a74:	4606      	mov	r6, r0
 8007a76:	460f      	mov	r7, r1
 8007a78:	e75b      	b.n	8007932 <__kernel_rem_pio2+0x10a>
 8007a7a:	d105      	bne.n	8007a88 <__kernel_rem_pio2+0x260>
 8007a7c:	1e63      	subs	r3, r4, #1
 8007a7e:	aa0c      	add	r2, sp, #48	; 0x30
 8007a80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007a84:	15c3      	asrs	r3, r0, #23
 8007a86:	e79b      	b.n	80079c0 <__kernel_rem_pio2+0x198>
 8007a88:	4b38      	ldr	r3, [pc, #224]	; (8007b6c <__kernel_rem_pio2+0x344>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f7f9 f808 	bl	8000aa0 <__aeabi_dcmpge>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d139      	bne.n	8007b08 <__kernel_rem_pio2+0x2e0>
 8007a94:	9002      	str	r0, [sp, #8]
 8007a96:	2200      	movs	r2, #0
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	4639      	mov	r1, r7
 8007a9e:	f7f8 ffe1 	bl	8000a64 <__aeabi_dcmpeq>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	f000 80b4 	beq.w	8007c10 <__kernel_rem_pio2+0x3e8>
 8007aa8:	f104 3bff 	add.w	fp, r4, #4294967295
 8007aac:	465b      	mov	r3, fp
 8007aae:	2200      	movs	r2, #0
 8007ab0:	9904      	ldr	r1, [sp, #16]
 8007ab2:	428b      	cmp	r3, r1
 8007ab4:	da65      	bge.n	8007b82 <__kernel_rem_pio2+0x35a>
 8007ab6:	2a00      	cmp	r2, #0
 8007ab8:	d07b      	beq.n	8007bb2 <__kernel_rem_pio2+0x38a>
 8007aba:	ab0c      	add	r3, sp, #48	; 0x30
 8007abc:	f1aa 0a18 	sub.w	sl, sl, #24
 8007ac0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80a0 	beq.w	8007c0a <__kernel_rem_pio2+0x3e2>
 8007aca:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007b50 <__kernel_rem_pio2+0x328>
 8007ace:	4650      	mov	r0, sl
 8007ad0:	f000 fb32 	bl	8008138 <scalbn>
 8007ad4:	4f23      	ldr	r7, [pc, #140]	; (8007b64 <__kernel_rem_pio2+0x33c>)
 8007ad6:	ec55 4b10 	vmov	r4, r5, d0
 8007ada:	46d8      	mov	r8, fp
 8007adc:	2600      	movs	r6, #0
 8007ade:	f1b8 0f00 	cmp.w	r8, #0
 8007ae2:	f280 80cf 	bge.w	8007c84 <__kernel_rem_pio2+0x45c>
 8007ae6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007b48 <__kernel_rem_pio2+0x320>
 8007aea:	465f      	mov	r7, fp
 8007aec:	f04f 0800 	mov.w	r8, #0
 8007af0:	2f00      	cmp	r7, #0
 8007af2:	f2c0 80fd 	blt.w	8007cf0 <__kernel_rem_pio2+0x4c8>
 8007af6:	ab70      	add	r3, sp, #448	; 0x1c0
 8007af8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007b70 <__kernel_rem_pio2+0x348>
 8007afc:	ec55 4b18 	vmov	r4, r5, d8
 8007b00:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8007b04:	2600      	movs	r6, #0
 8007b06:	e0e5      	b.n	8007cd4 <__kernel_rem_pio2+0x4ac>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	9302      	str	r3, [sp, #8]
 8007b0c:	e75c      	b.n	80079c8 <__kernel_rem_pio2+0x1a0>
 8007b0e:	f8db 3000 	ldr.w	r3, [fp]
 8007b12:	b955      	cbnz	r5, 8007b2a <__kernel_rem_pio2+0x302>
 8007b14:	b123      	cbz	r3, 8007b20 <__kernel_rem_pio2+0x2f8>
 8007b16:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007b1a:	f8cb 3000 	str.w	r3, [fp]
 8007b1e:	2301      	movs	r3, #1
 8007b20:	3201      	adds	r2, #1
 8007b22:	f10b 0b04 	add.w	fp, fp, #4
 8007b26:	461d      	mov	r5, r3
 8007b28:	e755      	b.n	80079d6 <__kernel_rem_pio2+0x1ae>
 8007b2a:	1acb      	subs	r3, r1, r3
 8007b2c:	f8cb 3000 	str.w	r3, [fp]
 8007b30:	462b      	mov	r3, r5
 8007b32:	e7f5      	b.n	8007b20 <__kernel_rem_pio2+0x2f8>
 8007b34:	1e62      	subs	r2, r4, #1
 8007b36:	ab0c      	add	r3, sp, #48	; 0x30
 8007b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007b40:	a90c      	add	r1, sp, #48	; 0x30
 8007b42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007b46:	e754      	b.n	80079f2 <__kernel_rem_pio2+0x1ca>
	...
 8007b54:	3ff00000 	.word	0x3ff00000
 8007b58:	08008450 	.word	0x08008450
 8007b5c:	40200000 	.word	0x40200000
 8007b60:	3ff00000 	.word	0x3ff00000
 8007b64:	3e700000 	.word	0x3e700000
 8007b68:	41700000 	.word	0x41700000
 8007b6c:	3fe00000 	.word	0x3fe00000
 8007b70:	08008410 	.word	0x08008410
 8007b74:	1e62      	subs	r2, r4, #1
 8007b76:	ab0c      	add	r3, sp, #48	; 0x30
 8007b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007b80:	e7de      	b.n	8007b40 <__kernel_rem_pio2+0x318>
 8007b82:	a90c      	add	r1, sp, #48	; 0x30
 8007b84:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	e790      	b.n	8007ab0 <__kernel_rem_pio2+0x288>
 8007b8e:	3301      	adds	r3, #1
 8007b90:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007b94:	2900      	cmp	r1, #0
 8007b96:	d0fa      	beq.n	8007b8e <__kernel_rem_pio2+0x366>
 8007b98:	9a08      	ldr	r2, [sp, #32]
 8007b9a:	18e3      	adds	r3, r4, r3
 8007b9c:	18a6      	adds	r6, r4, r2
 8007b9e:	aa20      	add	r2, sp, #128	; 0x80
 8007ba0:	1c65      	adds	r5, r4, #1
 8007ba2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007ba6:	9302      	str	r3, [sp, #8]
 8007ba8:	9b02      	ldr	r3, [sp, #8]
 8007baa:	42ab      	cmp	r3, r5
 8007bac:	da04      	bge.n	8007bb8 <__kernel_rem_pio2+0x390>
 8007bae:	461c      	mov	r4, r3
 8007bb0:	e6b5      	b.n	800791e <__kernel_rem_pio2+0xf6>
 8007bb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e7eb      	b.n	8007b90 <__kernel_rem_pio2+0x368>
 8007bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bbe:	f7f8 fc7f 	bl	80004c0 <__aeabi_i2d>
 8007bc2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc8:	46b3      	mov	fp, r6
 8007bca:	461c      	mov	r4, r3
 8007bcc:	2700      	movs	r7, #0
 8007bce:	f04f 0800 	mov.w	r8, #0
 8007bd2:	f04f 0900 	mov.w	r9, #0
 8007bd6:	9b06      	ldr	r3, [sp, #24]
 8007bd8:	429f      	cmp	r7, r3
 8007bda:	dd06      	ble.n	8007bea <__kernel_rem_pio2+0x3c2>
 8007bdc:	ab70      	add	r3, sp, #448	; 0x1c0
 8007bde:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007be2:	e9c3 8900 	strd	r8, r9, [r3]
 8007be6:	3501      	adds	r5, #1
 8007be8:	e7de      	b.n	8007ba8 <__kernel_rem_pio2+0x380>
 8007bea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007bee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007bf2:	f7f8 fccf 	bl	8000594 <__aeabi_dmul>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4640      	mov	r0, r8
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	f7f8 fb13 	bl	8000228 <__adddf3>
 8007c02:	3701      	adds	r7, #1
 8007c04:	4680      	mov	r8, r0
 8007c06:	4689      	mov	r9, r1
 8007c08:	e7e5      	b.n	8007bd6 <__kernel_rem_pio2+0x3ae>
 8007c0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c0e:	e754      	b.n	8007aba <__kernel_rem_pio2+0x292>
 8007c10:	ec47 6b10 	vmov	d0, r6, r7
 8007c14:	f1ca 0000 	rsb	r0, sl, #0
 8007c18:	f000 fa8e 	bl	8008138 <scalbn>
 8007c1c:	ec57 6b10 	vmov	r6, r7, d0
 8007c20:	4b9f      	ldr	r3, [pc, #636]	; (8007ea0 <__kernel_rem_pio2+0x678>)
 8007c22:	ee10 0a10 	vmov	r0, s0
 8007c26:	2200      	movs	r2, #0
 8007c28:	4639      	mov	r1, r7
 8007c2a:	f7f8 ff39 	bl	8000aa0 <__aeabi_dcmpge>
 8007c2e:	b300      	cbz	r0, 8007c72 <__kernel_rem_pio2+0x44a>
 8007c30:	4b9c      	ldr	r3, [pc, #624]	; (8007ea4 <__kernel_rem_pio2+0x67c>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	4630      	mov	r0, r6
 8007c36:	4639      	mov	r1, r7
 8007c38:	f7f8 fcac 	bl	8000594 <__aeabi_dmul>
 8007c3c:	f7f8 ff44 	bl	8000ac8 <__aeabi_d2iz>
 8007c40:	4605      	mov	r5, r0
 8007c42:	f7f8 fc3d 	bl	80004c0 <__aeabi_i2d>
 8007c46:	4b96      	ldr	r3, [pc, #600]	; (8007ea0 <__kernel_rem_pio2+0x678>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f7f8 fca3 	bl	8000594 <__aeabi_dmul>
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4602      	mov	r2, r0
 8007c52:	4639      	mov	r1, r7
 8007c54:	4630      	mov	r0, r6
 8007c56:	f7f8 fae5 	bl	8000224 <__aeabi_dsub>
 8007c5a:	f7f8 ff35 	bl	8000ac8 <__aeabi_d2iz>
 8007c5e:	f104 0b01 	add.w	fp, r4, #1
 8007c62:	ab0c      	add	r3, sp, #48	; 0x30
 8007c64:	f10a 0a18 	add.w	sl, sl, #24
 8007c68:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007c6c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007c70:	e72b      	b.n	8007aca <__kernel_rem_pio2+0x2a2>
 8007c72:	4630      	mov	r0, r6
 8007c74:	4639      	mov	r1, r7
 8007c76:	f7f8 ff27 	bl	8000ac8 <__aeabi_d2iz>
 8007c7a:	ab0c      	add	r3, sp, #48	; 0x30
 8007c7c:	46a3      	mov	fp, r4
 8007c7e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007c82:	e722      	b.n	8007aca <__kernel_rem_pio2+0x2a2>
 8007c84:	ab70      	add	r3, sp, #448	; 0x1c0
 8007c86:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007c8a:	ab0c      	add	r3, sp, #48	; 0x30
 8007c8c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007c90:	f7f8 fc16 	bl	80004c0 <__aeabi_i2d>
 8007c94:	4622      	mov	r2, r4
 8007c96:	462b      	mov	r3, r5
 8007c98:	f7f8 fc7c 	bl	8000594 <__aeabi_dmul>
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	e9c9 0100 	strd	r0, r1, [r9]
 8007ca2:	463b      	mov	r3, r7
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	f7f8 fc74 	bl	8000594 <__aeabi_dmul>
 8007cac:	f108 38ff 	add.w	r8, r8, #4294967295
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	460d      	mov	r5, r1
 8007cb4:	e713      	b.n	8007ade <__kernel_rem_pio2+0x2b6>
 8007cb6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007cba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007cbe:	f7f8 fc69 	bl	8000594 <__aeabi_dmul>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	4629      	mov	r1, r5
 8007cca:	f7f8 faad 	bl	8000228 <__adddf3>
 8007cce:	3601      	adds	r6, #1
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	460d      	mov	r5, r1
 8007cd4:	9b04      	ldr	r3, [sp, #16]
 8007cd6:	429e      	cmp	r6, r3
 8007cd8:	dc01      	bgt.n	8007cde <__kernel_rem_pio2+0x4b6>
 8007cda:	45b0      	cmp	r8, r6
 8007cdc:	daeb      	bge.n	8007cb6 <__kernel_rem_pio2+0x48e>
 8007cde:	ab48      	add	r3, sp, #288	; 0x120
 8007ce0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007ce4:	e9c3 4500 	strd	r4, r5, [r3]
 8007ce8:	3f01      	subs	r7, #1
 8007cea:	f108 0801 	add.w	r8, r8, #1
 8007cee:	e6ff      	b.n	8007af0 <__kernel_rem_pio2+0x2c8>
 8007cf0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	dc0b      	bgt.n	8007d0e <__kernel_rem_pio2+0x4e6>
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	dc6e      	bgt.n	8007dd8 <__kernel_rem_pio2+0x5b0>
 8007cfa:	d045      	beq.n	8007d88 <__kernel_rem_pio2+0x560>
 8007cfc:	9b07      	ldr	r3, [sp, #28]
 8007cfe:	f003 0007 	and.w	r0, r3, #7
 8007d02:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007d06:	ecbd 8b02 	vpop	{d8}
 8007d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d1f3      	bne.n	8007cfc <__kernel_rem_pio2+0x4d4>
 8007d14:	ab48      	add	r3, sp, #288	; 0x120
 8007d16:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007d1a:	46d0      	mov	r8, sl
 8007d1c:	46d9      	mov	r9, fp
 8007d1e:	f1b9 0f00 	cmp.w	r9, #0
 8007d22:	f1a8 0808 	sub.w	r8, r8, #8
 8007d26:	dc64      	bgt.n	8007df2 <__kernel_rem_pio2+0x5ca>
 8007d28:	465c      	mov	r4, fp
 8007d2a:	2c01      	cmp	r4, #1
 8007d2c:	f1aa 0a08 	sub.w	sl, sl, #8
 8007d30:	dc7e      	bgt.n	8007e30 <__kernel_rem_pio2+0x608>
 8007d32:	2000      	movs	r0, #0
 8007d34:	2100      	movs	r1, #0
 8007d36:	f1bb 0f01 	cmp.w	fp, #1
 8007d3a:	f300 8097 	bgt.w	8007e6c <__kernel_rem_pio2+0x644>
 8007d3e:	9b02      	ldr	r3, [sp, #8]
 8007d40:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007d44:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f040 8099 	bne.w	8007e80 <__kernel_rem_pio2+0x658>
 8007d4e:	9b01      	ldr	r3, [sp, #4]
 8007d50:	e9c3 5600 	strd	r5, r6, [r3]
 8007d54:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007d58:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007d5c:	e7ce      	b.n	8007cfc <__kernel_rem_pio2+0x4d4>
 8007d5e:	ab48      	add	r3, sp, #288	; 0x120
 8007d60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	f7f8 fa5e 	bl	8000228 <__adddf3>
 8007d6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d70:	f1bb 0f00 	cmp.w	fp, #0
 8007d74:	daf3      	bge.n	8007d5e <__kernel_rem_pio2+0x536>
 8007d76:	9b02      	ldr	r3, [sp, #8]
 8007d78:	b113      	cbz	r3, 8007d80 <__kernel_rem_pio2+0x558>
 8007d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d7e:	4619      	mov	r1, r3
 8007d80:	9b01      	ldr	r3, [sp, #4]
 8007d82:	e9c3 0100 	strd	r0, r1, [r3]
 8007d86:	e7b9      	b.n	8007cfc <__kernel_rem_pio2+0x4d4>
 8007d88:	2000      	movs	r0, #0
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	e7f0      	b.n	8007d70 <__kernel_rem_pio2+0x548>
 8007d8e:	ab48      	add	r3, sp, #288	; 0x120
 8007d90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f7f8 fa46 	bl	8000228 <__adddf3>
 8007d9c:	3c01      	subs	r4, #1
 8007d9e:	2c00      	cmp	r4, #0
 8007da0:	daf5      	bge.n	8007d8e <__kernel_rem_pio2+0x566>
 8007da2:	9b02      	ldr	r3, [sp, #8]
 8007da4:	b1e3      	cbz	r3, 8007de0 <__kernel_rem_pio2+0x5b8>
 8007da6:	4602      	mov	r2, r0
 8007da8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dac:	9c01      	ldr	r4, [sp, #4]
 8007dae:	e9c4 2300 	strd	r2, r3, [r4]
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007dba:	f7f8 fa33 	bl	8000224 <__aeabi_dsub>
 8007dbe:	ad4a      	add	r5, sp, #296	; 0x128
 8007dc0:	2401      	movs	r4, #1
 8007dc2:	45a3      	cmp	fp, r4
 8007dc4:	da0f      	bge.n	8007de6 <__kernel_rem_pio2+0x5be>
 8007dc6:	9b02      	ldr	r3, [sp, #8]
 8007dc8:	b113      	cbz	r3, 8007dd0 <__kernel_rem_pio2+0x5a8>
 8007dca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dce:	4619      	mov	r1, r3
 8007dd0:	9b01      	ldr	r3, [sp, #4]
 8007dd2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007dd6:	e791      	b.n	8007cfc <__kernel_rem_pio2+0x4d4>
 8007dd8:	465c      	mov	r4, fp
 8007dda:	2000      	movs	r0, #0
 8007ddc:	2100      	movs	r1, #0
 8007dde:	e7de      	b.n	8007d9e <__kernel_rem_pio2+0x576>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	e7e2      	b.n	8007dac <__kernel_rem_pio2+0x584>
 8007de6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007dea:	f7f8 fa1d 	bl	8000228 <__adddf3>
 8007dee:	3401      	adds	r4, #1
 8007df0:	e7e7      	b.n	8007dc2 <__kernel_rem_pio2+0x59a>
 8007df2:	e9d8 4500 	ldrd	r4, r5, [r8]
 8007df6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	4632      	mov	r2, r6
 8007dfe:	463b      	mov	r3, r7
 8007e00:	4629      	mov	r1, r5
 8007e02:	f7f8 fa11 	bl	8000228 <__adddf3>
 8007e06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	f7f8 fa07 	bl	8000224 <__aeabi_dsub>
 8007e16:	4632      	mov	r2, r6
 8007e18:	463b      	mov	r3, r7
 8007e1a:	f7f8 fa05 	bl	8000228 <__adddf3>
 8007e1e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007e22:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8007e26:	ed88 7b00 	vstr	d7, [r8]
 8007e2a:	f109 39ff 	add.w	r9, r9, #4294967295
 8007e2e:	e776      	b.n	8007d1e <__kernel_rem_pio2+0x4f6>
 8007e30:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e34:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007e38:	4640      	mov	r0, r8
 8007e3a:	4632      	mov	r2, r6
 8007e3c:	463b      	mov	r3, r7
 8007e3e:	4649      	mov	r1, r9
 8007e40:	f7f8 f9f2 	bl	8000228 <__adddf3>
 8007e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4640      	mov	r0, r8
 8007e4e:	4649      	mov	r1, r9
 8007e50:	f7f8 f9e8 	bl	8000224 <__aeabi_dsub>
 8007e54:	4632      	mov	r2, r6
 8007e56:	463b      	mov	r3, r7
 8007e58:	f7f8 f9e6 	bl	8000228 <__adddf3>
 8007e5c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007e60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007e64:	ed8a 7b00 	vstr	d7, [sl]
 8007e68:	3c01      	subs	r4, #1
 8007e6a:	e75e      	b.n	8007d2a <__kernel_rem_pio2+0x502>
 8007e6c:	ab48      	add	r3, sp, #288	; 0x120
 8007e6e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f7f8 f9d7 	bl	8000228 <__adddf3>
 8007e7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e7e:	e75a      	b.n	8007d36 <__kernel_rem_pio2+0x50e>
 8007e80:	9b01      	ldr	r3, [sp, #4]
 8007e82:	9a01      	ldr	r2, [sp, #4]
 8007e84:	601d      	str	r5, [r3, #0]
 8007e86:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007e8a:	605c      	str	r4, [r3, #4]
 8007e8c:	609f      	str	r7, [r3, #8]
 8007e8e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007e92:	60d3      	str	r3, [r2, #12]
 8007e94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e98:	6110      	str	r0, [r2, #16]
 8007e9a:	6153      	str	r3, [r2, #20]
 8007e9c:	e72e      	b.n	8007cfc <__kernel_rem_pio2+0x4d4>
 8007e9e:	bf00      	nop
 8007ea0:	41700000 	.word	0x41700000
 8007ea4:	3e700000 	.word	0x3e700000

08007ea8 <__kernel_sin>:
 8007ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	ed2d 8b04 	vpush	{d8-d9}
 8007eb0:	eeb0 8a41 	vmov.f32	s16, s2
 8007eb4:	eef0 8a61 	vmov.f32	s17, s3
 8007eb8:	ec55 4b10 	vmov	r4, r5, d0
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007ec2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007ec6:	9001      	str	r0, [sp, #4]
 8007ec8:	da06      	bge.n	8007ed8 <__kernel_sin+0x30>
 8007eca:	ee10 0a10 	vmov	r0, s0
 8007ece:	4629      	mov	r1, r5
 8007ed0:	f7f8 fdfa 	bl	8000ac8 <__aeabi_d2iz>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d051      	beq.n	8007f7c <__kernel_sin+0xd4>
 8007ed8:	4622      	mov	r2, r4
 8007eda:	462b      	mov	r3, r5
 8007edc:	4620      	mov	r0, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f7f8 fb58 	bl	8000594 <__aeabi_dmul>
 8007ee4:	4682      	mov	sl, r0
 8007ee6:	468b      	mov	fp, r1
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4620      	mov	r0, r4
 8007eee:	4629      	mov	r1, r5
 8007ef0:	f7f8 fb50 	bl	8000594 <__aeabi_dmul>
 8007ef4:	a341      	add	r3, pc, #260	; (adr r3, 8007ffc <__kernel_sin+0x154>)
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	4680      	mov	r8, r0
 8007efc:	4689      	mov	r9, r1
 8007efe:	4650      	mov	r0, sl
 8007f00:	4659      	mov	r1, fp
 8007f02:	f7f8 fb47 	bl	8000594 <__aeabi_dmul>
 8007f06:	a33f      	add	r3, pc, #252	; (adr r3, 8008004 <__kernel_sin+0x15c>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	f7f8 f98a 	bl	8000224 <__aeabi_dsub>
 8007f10:	4652      	mov	r2, sl
 8007f12:	465b      	mov	r3, fp
 8007f14:	f7f8 fb3e 	bl	8000594 <__aeabi_dmul>
 8007f18:	a33c      	add	r3, pc, #240	; (adr r3, 800800c <__kernel_sin+0x164>)
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	f7f8 f983 	bl	8000228 <__adddf3>
 8007f22:	4652      	mov	r2, sl
 8007f24:	465b      	mov	r3, fp
 8007f26:	f7f8 fb35 	bl	8000594 <__aeabi_dmul>
 8007f2a:	a33a      	add	r3, pc, #232	; (adr r3, 8008014 <__kernel_sin+0x16c>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f7f8 f978 	bl	8000224 <__aeabi_dsub>
 8007f34:	4652      	mov	r2, sl
 8007f36:	465b      	mov	r3, fp
 8007f38:	f7f8 fb2c 	bl	8000594 <__aeabi_dmul>
 8007f3c:	a337      	add	r3, pc, #220	; (adr r3, 800801c <__kernel_sin+0x174>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	f7f8 f971 	bl	8000228 <__adddf3>
 8007f46:	9b01      	ldr	r3, [sp, #4]
 8007f48:	4606      	mov	r6, r0
 8007f4a:	460f      	mov	r7, r1
 8007f4c:	b9eb      	cbnz	r3, 8007f8a <__kernel_sin+0xe2>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	4650      	mov	r0, sl
 8007f54:	4659      	mov	r1, fp
 8007f56:	f7f8 fb1d 	bl	8000594 <__aeabi_dmul>
 8007f5a:	a325      	add	r3, pc, #148	; (adr r3, 8007ff0 <__kernel_sin+0x148>)
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f7f8 f960 	bl	8000224 <__aeabi_dsub>
 8007f64:	4642      	mov	r2, r8
 8007f66:	464b      	mov	r3, r9
 8007f68:	f7f8 fb14 	bl	8000594 <__aeabi_dmul>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4620      	mov	r0, r4
 8007f72:	4629      	mov	r1, r5
 8007f74:	f7f8 f958 	bl	8000228 <__adddf3>
 8007f78:	4604      	mov	r4, r0
 8007f7a:	460d      	mov	r5, r1
 8007f7c:	ec45 4b10 	vmov	d0, r4, r5
 8007f80:	b003      	add	sp, #12
 8007f82:	ecbd 8b04 	vpop	{d8-d9}
 8007f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8a:	4b1b      	ldr	r3, [pc, #108]	; (8007ff8 <__kernel_sin+0x150>)
 8007f8c:	ec51 0b18 	vmov	r0, r1, d8
 8007f90:	2200      	movs	r2, #0
 8007f92:	f7f8 faff 	bl	8000594 <__aeabi_dmul>
 8007f96:	4632      	mov	r2, r6
 8007f98:	ec41 0b19 	vmov	d9, r0, r1
 8007f9c:	463b      	mov	r3, r7
 8007f9e:	4640      	mov	r0, r8
 8007fa0:	4649      	mov	r1, r9
 8007fa2:	f7f8 faf7 	bl	8000594 <__aeabi_dmul>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	ec51 0b19 	vmov	r0, r1, d9
 8007fae:	f7f8 f939 	bl	8000224 <__aeabi_dsub>
 8007fb2:	4652      	mov	r2, sl
 8007fb4:	465b      	mov	r3, fp
 8007fb6:	f7f8 faed 	bl	8000594 <__aeabi_dmul>
 8007fba:	ec53 2b18 	vmov	r2, r3, d8
 8007fbe:	f7f8 f931 	bl	8000224 <__aeabi_dsub>
 8007fc2:	a30b      	add	r3, pc, #44	; (adr r3, 8007ff0 <__kernel_sin+0x148>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	4606      	mov	r6, r0
 8007fca:	460f      	mov	r7, r1
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4649      	mov	r1, r9
 8007fd0:	f7f8 fae0 	bl	8000594 <__aeabi_dmul>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	4630      	mov	r0, r6
 8007fda:	4639      	mov	r1, r7
 8007fdc:	f7f8 f924 	bl	8000228 <__adddf3>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	f7f8 f91c 	bl	8000224 <__aeabi_dsub>
 8007fec:	e7c4      	b.n	8007f78 <__kernel_sin+0xd0>
 8007fee:	bf00      	nop
 8007ff0:	55555549 	.word	0x55555549
 8007ff4:	3fc55555 	.word	0x3fc55555
 8007ff8:	3fe00000 	.word	0x3fe00000
 8007ffc:	5acfd57c 	.word	0x5acfd57c
 8008000:	3de5d93a 	.word	0x3de5d93a
 8008004:	8a2b9ceb 	.word	0x8a2b9ceb
 8008008:	3e5ae5e6 	.word	0x3e5ae5e6
 800800c:	57b1fe7d 	.word	0x57b1fe7d
 8008010:	3ec71de3 	.word	0x3ec71de3
 8008014:	19c161d5 	.word	0x19c161d5
 8008018:	3f2a01a0 	.word	0x3f2a01a0
 800801c:	1110f8a6 	.word	0x1110f8a6
 8008020:	3f811111 	.word	0x3f811111

08008024 <fabs>:
 8008024:	ec51 0b10 	vmov	r0, r1, d0
 8008028:	ee10 2a10 	vmov	r2, s0
 800802c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008030:	ec43 2b10 	vmov	d0, r2, r3
 8008034:	4770      	bx	lr
	...

08008038 <floor>:
 8008038:	ec51 0b10 	vmov	r0, r1, d0
 800803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008040:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008044:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008048:	2e13      	cmp	r6, #19
 800804a:	ee10 5a10 	vmov	r5, s0
 800804e:	ee10 8a10 	vmov	r8, s0
 8008052:	460c      	mov	r4, r1
 8008054:	dc32      	bgt.n	80080bc <floor+0x84>
 8008056:	2e00      	cmp	r6, #0
 8008058:	da14      	bge.n	8008084 <floor+0x4c>
 800805a:	a333      	add	r3, pc, #204	; (adr r3, 8008128 <floor+0xf0>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f7f8 f8e2 	bl	8000228 <__adddf3>
 8008064:	2200      	movs	r2, #0
 8008066:	2300      	movs	r3, #0
 8008068:	f7f8 fd24 	bl	8000ab4 <__aeabi_dcmpgt>
 800806c:	b138      	cbz	r0, 800807e <floor+0x46>
 800806e:	2c00      	cmp	r4, #0
 8008070:	da57      	bge.n	8008122 <floor+0xea>
 8008072:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008076:	431d      	orrs	r5, r3
 8008078:	d001      	beq.n	800807e <floor+0x46>
 800807a:	4c2d      	ldr	r4, [pc, #180]	; (8008130 <floor+0xf8>)
 800807c:	2500      	movs	r5, #0
 800807e:	4621      	mov	r1, r4
 8008080:	4628      	mov	r0, r5
 8008082:	e025      	b.n	80080d0 <floor+0x98>
 8008084:	4f2b      	ldr	r7, [pc, #172]	; (8008134 <floor+0xfc>)
 8008086:	4137      	asrs	r7, r6
 8008088:	ea01 0307 	and.w	r3, r1, r7
 800808c:	4303      	orrs	r3, r0
 800808e:	d01f      	beq.n	80080d0 <floor+0x98>
 8008090:	a325      	add	r3, pc, #148	; (adr r3, 8008128 <floor+0xf0>)
 8008092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008096:	f7f8 f8c7 	bl	8000228 <__adddf3>
 800809a:	2200      	movs	r2, #0
 800809c:	2300      	movs	r3, #0
 800809e:	f7f8 fd09 	bl	8000ab4 <__aeabi_dcmpgt>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d0eb      	beq.n	800807e <floor+0x46>
 80080a6:	2c00      	cmp	r4, #0
 80080a8:	bfbe      	ittt	lt
 80080aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80080ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80080b2:	19a4      	addlt	r4, r4, r6
 80080b4:	ea24 0407 	bic.w	r4, r4, r7
 80080b8:	2500      	movs	r5, #0
 80080ba:	e7e0      	b.n	800807e <floor+0x46>
 80080bc:	2e33      	cmp	r6, #51	; 0x33
 80080be:	dd0b      	ble.n	80080d8 <floor+0xa0>
 80080c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80080c4:	d104      	bne.n	80080d0 <floor+0x98>
 80080c6:	ee10 2a10 	vmov	r2, s0
 80080ca:	460b      	mov	r3, r1
 80080cc:	f7f8 f8ac 	bl	8000228 <__adddf3>
 80080d0:	ec41 0b10 	vmov	d0, r0, r1
 80080d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80080dc:	f04f 33ff 	mov.w	r3, #4294967295
 80080e0:	fa23 f707 	lsr.w	r7, r3, r7
 80080e4:	4207      	tst	r7, r0
 80080e6:	d0f3      	beq.n	80080d0 <floor+0x98>
 80080e8:	a30f      	add	r3, pc, #60	; (adr r3, 8008128 <floor+0xf0>)
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	f7f8 f89b 	bl	8000228 <__adddf3>
 80080f2:	2200      	movs	r2, #0
 80080f4:	2300      	movs	r3, #0
 80080f6:	f7f8 fcdd 	bl	8000ab4 <__aeabi_dcmpgt>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	d0bf      	beq.n	800807e <floor+0x46>
 80080fe:	2c00      	cmp	r4, #0
 8008100:	da02      	bge.n	8008108 <floor+0xd0>
 8008102:	2e14      	cmp	r6, #20
 8008104:	d103      	bne.n	800810e <floor+0xd6>
 8008106:	3401      	adds	r4, #1
 8008108:	ea25 0507 	bic.w	r5, r5, r7
 800810c:	e7b7      	b.n	800807e <floor+0x46>
 800810e:	2301      	movs	r3, #1
 8008110:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008114:	fa03 f606 	lsl.w	r6, r3, r6
 8008118:	4435      	add	r5, r6
 800811a:	4545      	cmp	r5, r8
 800811c:	bf38      	it	cc
 800811e:	18e4      	addcc	r4, r4, r3
 8008120:	e7f2      	b.n	8008108 <floor+0xd0>
 8008122:	2500      	movs	r5, #0
 8008124:	462c      	mov	r4, r5
 8008126:	e7aa      	b.n	800807e <floor+0x46>
 8008128:	8800759c 	.word	0x8800759c
 800812c:	7e37e43c 	.word	0x7e37e43c
 8008130:	bff00000 	.word	0xbff00000
 8008134:	000fffff 	.word	0x000fffff

08008138 <scalbn>:
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	ec55 4b10 	vmov	r4, r5, d0
 800813e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008142:	4606      	mov	r6, r0
 8008144:	462b      	mov	r3, r5
 8008146:	b99a      	cbnz	r2, 8008170 <scalbn+0x38>
 8008148:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800814c:	4323      	orrs	r3, r4
 800814e:	d036      	beq.n	80081be <scalbn+0x86>
 8008150:	4b39      	ldr	r3, [pc, #228]	; (8008238 <scalbn+0x100>)
 8008152:	4629      	mov	r1, r5
 8008154:	ee10 0a10 	vmov	r0, s0
 8008158:	2200      	movs	r2, #0
 800815a:	f7f8 fa1b 	bl	8000594 <__aeabi_dmul>
 800815e:	4b37      	ldr	r3, [pc, #220]	; (800823c <scalbn+0x104>)
 8008160:	429e      	cmp	r6, r3
 8008162:	4604      	mov	r4, r0
 8008164:	460d      	mov	r5, r1
 8008166:	da10      	bge.n	800818a <scalbn+0x52>
 8008168:	a32b      	add	r3, pc, #172	; (adr r3, 8008218 <scalbn+0xe0>)
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	e03a      	b.n	80081e6 <scalbn+0xae>
 8008170:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008174:	428a      	cmp	r2, r1
 8008176:	d10c      	bne.n	8008192 <scalbn+0x5a>
 8008178:	ee10 2a10 	vmov	r2, s0
 800817c:	4620      	mov	r0, r4
 800817e:	4629      	mov	r1, r5
 8008180:	f7f8 f852 	bl	8000228 <__adddf3>
 8008184:	4604      	mov	r4, r0
 8008186:	460d      	mov	r5, r1
 8008188:	e019      	b.n	80081be <scalbn+0x86>
 800818a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800818e:	460b      	mov	r3, r1
 8008190:	3a36      	subs	r2, #54	; 0x36
 8008192:	4432      	add	r2, r6
 8008194:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008198:	428a      	cmp	r2, r1
 800819a:	dd08      	ble.n	80081ae <scalbn+0x76>
 800819c:	2d00      	cmp	r5, #0
 800819e:	a120      	add	r1, pc, #128	; (adr r1, 8008220 <scalbn+0xe8>)
 80081a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081a4:	da1c      	bge.n	80081e0 <scalbn+0xa8>
 80081a6:	a120      	add	r1, pc, #128	; (adr r1, 8008228 <scalbn+0xf0>)
 80081a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ac:	e018      	b.n	80081e0 <scalbn+0xa8>
 80081ae:	2a00      	cmp	r2, #0
 80081b0:	dd08      	ble.n	80081c4 <scalbn+0x8c>
 80081b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80081be:	ec45 4b10 	vmov	d0, r4, r5
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80081c8:	da19      	bge.n	80081fe <scalbn+0xc6>
 80081ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80081ce:	429e      	cmp	r6, r3
 80081d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80081d4:	dd0a      	ble.n	80081ec <scalbn+0xb4>
 80081d6:	a112      	add	r1, pc, #72	; (adr r1, 8008220 <scalbn+0xe8>)
 80081d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e2      	bne.n	80081a6 <scalbn+0x6e>
 80081e0:	a30f      	add	r3, pc, #60	; (adr r3, 8008220 <scalbn+0xe8>)
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	f7f8 f9d5 	bl	8000594 <__aeabi_dmul>
 80081ea:	e7cb      	b.n	8008184 <scalbn+0x4c>
 80081ec:	a10a      	add	r1, pc, #40	; (adr r1, 8008218 <scalbn+0xe0>)
 80081ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0b8      	beq.n	8008168 <scalbn+0x30>
 80081f6:	a10e      	add	r1, pc, #56	; (adr r1, 8008230 <scalbn+0xf8>)
 80081f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081fc:	e7b4      	b.n	8008168 <scalbn+0x30>
 80081fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008202:	3236      	adds	r2, #54	; 0x36
 8008204:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008208:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800820c:	4620      	mov	r0, r4
 800820e:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <scalbn+0x108>)
 8008210:	2200      	movs	r2, #0
 8008212:	e7e8      	b.n	80081e6 <scalbn+0xae>
 8008214:	f3af 8000 	nop.w
 8008218:	c2f8f359 	.word	0xc2f8f359
 800821c:	01a56e1f 	.word	0x01a56e1f
 8008220:	8800759c 	.word	0x8800759c
 8008224:	7e37e43c 	.word	0x7e37e43c
 8008228:	8800759c 	.word	0x8800759c
 800822c:	fe37e43c 	.word	0xfe37e43c
 8008230:	c2f8f359 	.word	0xc2f8f359
 8008234:	81a56e1f 	.word	0x81a56e1f
 8008238:	43500000 	.word	0x43500000
 800823c:	ffff3cb0 	.word	0xffff3cb0
 8008240:	3c900000 	.word	0x3c900000

08008244 <_init>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr

08008250 <_fini>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	bf00      	nop
 8008254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008256:	bc08      	pop	{r3}
 8008258:	469e      	mov	lr, r3
 800825a:	4770      	bx	lr
