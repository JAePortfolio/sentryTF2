
sentryTF2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000545c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005628  08005628  00015628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005818  08005818  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005820  08005820  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000010  08005838  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08005838  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2ed  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a50  00000000  00000000  0002c32d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb0  00000000  00000000  0002dd80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  0002e930  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025411  00000000  00000000  0002f408  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b6f  00000000  00000000  00054819  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eafaf  00000000  00000000  0005e388  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149337  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d0  00000000  00000000  001493b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800560c 	.word	0x0800560c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	0800560c 	.word	0x0800560c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b972 	b.w	8000e40 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9e08      	ldr	r6, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	4688      	mov	r8, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d14b      	bne.n	8000c1a <__udivmoddi4+0xa6>
 8000b82:	428a      	cmp	r2, r1
 8000b84:	4615      	mov	r5, r2
 8000b86:	d967      	bls.n	8000c58 <__udivmoddi4+0xe4>
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	b14a      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b8e:	f1c2 0720 	rsb	r7, r2, #32
 8000b92:	fa01 f302 	lsl.w	r3, r1, r2
 8000b96:	fa20 f707 	lsr.w	r7, r0, r7
 8000b9a:	4095      	lsls	r5, r2
 8000b9c:	ea47 0803 	orr.w	r8, r7, r3
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba6:	0c23      	lsrs	r3, r4, #16
 8000ba8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bac:	fa1f fc85 	uxth.w	ip, r5
 8000bb0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x60>
 8000bc0:	18eb      	adds	r3, r5, r3
 8000bc2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bc6:	f080 811b 	bcs.w	8000e00 <__udivmoddi4+0x28c>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 8118 	bls.w	8000e00 <__udivmoddi4+0x28c>
 8000bd0:	3f02      	subs	r7, #2
 8000bd2:	442b      	add	r3, r5
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bdc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be8:	45a4      	cmp	ip, r4
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x8c>
 8000bec:	192c      	adds	r4, r5, r4
 8000bee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf2:	f080 8107 	bcs.w	8000e04 <__udivmoddi4+0x290>
 8000bf6:	45a4      	cmp	ip, r4
 8000bf8:	f240 8104 	bls.w	8000e04 <__udivmoddi4+0x290>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	442c      	add	r4, r5
 8000c00:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c04:	eba4 040c 	sub.w	r4, r4, ip
 8000c08:	2700      	movs	r7, #0
 8000c0a:	b11e      	cbz	r6, 8000c14 <__udivmoddi4+0xa0>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c6 4300 	strd	r4, r3, [r6]
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0xbe>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	f000 80eb 	beq.w	8000dfa <__udivmoddi4+0x286>
 8000c24:	2700      	movs	r7, #0
 8000c26:	e9c6 0100 	strd	r0, r1, [r6]
 8000c2a:	4638      	mov	r0, r7
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	fab3 f783 	clz	r7, r3
 8000c36:	2f00      	cmp	r7, #0
 8000c38:	d147      	bne.n	8000cca <__udivmoddi4+0x156>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d302      	bcc.n	8000c44 <__udivmoddi4+0xd0>
 8000c3e:	4282      	cmp	r2, r0
 8000c40:	f200 80fa 	bhi.w	8000e38 <__udivmoddi4+0x2c4>
 8000c44:	1a84      	subs	r4, r0, r2
 8000c46:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	4698      	mov	r8, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d0e0      	beq.n	8000c14 <__udivmoddi4+0xa0>
 8000c52:	e9c6 4800 	strd	r4, r8, [r6]
 8000c56:	e7dd      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000c58:	b902      	cbnz	r2, 8000c5c <__udivmoddi4+0xe8>
 8000c5a:	deff      	udf	#255	; 0xff
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	f040 808f 	bne.w	8000d84 <__udivmoddi4+0x210>
 8000c66:	1b49      	subs	r1, r1, r5
 8000c68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6c:	fa1f f885 	uxth.w	r8, r5
 8000c70:	2701      	movs	r7, #1
 8000c72:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c76:	0c23      	lsrs	r3, r4, #16
 8000c78:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c80:	fb08 f10c 	mul.w	r1, r8, ip
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x124>
 8000c88:	18eb      	adds	r3, r5, r3
 8000c8a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x122>
 8000c90:	4299      	cmp	r1, r3
 8000c92:	f200 80cd 	bhi.w	8000e30 <__udivmoddi4+0x2bc>
 8000c96:	4684      	mov	ip, r0
 8000c98:	1a59      	subs	r1, r3, r1
 8000c9a:	b2a3      	uxth	r3, r4
 8000c9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca8:	fb08 f800 	mul.w	r8, r8, r0
 8000cac:	45a0      	cmp	r8, r4
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x14c>
 8000cb0:	192c      	adds	r4, r5, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x14a>
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	f200 80b6 	bhi.w	8000e2a <__udivmoddi4+0x2b6>
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	eba4 0408 	sub.w	r4, r4, r8
 8000cc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc8:	e79f      	b.n	8000c0a <__udivmoddi4+0x96>
 8000cca:	f1c7 0c20 	rsb	ip, r7, #32
 8000cce:	40bb      	lsls	r3, r7
 8000cd0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cdc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ce0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce8:	4325      	orrs	r5, r4
 8000cea:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cee:	0c2c      	lsrs	r4, r5, #16
 8000cf0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf4:	fa1f fa8e 	uxth.w	sl, lr
 8000cf8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cfc:	fb09 f40a 	mul.w	r4, r9, sl
 8000d00:	429c      	cmp	r4, r3
 8000d02:	fa02 f207 	lsl.w	r2, r2, r7
 8000d06:	fa00 f107 	lsl.w	r1, r0, r7
 8000d0a:	d90b      	bls.n	8000d24 <__udivmoddi4+0x1b0>
 8000d0c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d14:	f080 8087 	bcs.w	8000e26 <__udivmoddi4+0x2b2>
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	f240 8084 	bls.w	8000e26 <__udivmoddi4+0x2b2>
 8000d1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d22:	4473      	add	r3, lr
 8000d24:	1b1b      	subs	r3, r3, r4
 8000d26:	b2ad      	uxth	r5, r5
 8000d28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d30:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d34:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d38:	45a2      	cmp	sl, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x1da>
 8000d3c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d44:	d26b      	bcs.n	8000e1e <__udivmoddi4+0x2aa>
 8000d46:	45a2      	cmp	sl, r4
 8000d48:	d969      	bls.n	8000e1e <__udivmoddi4+0x2aa>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	4474      	add	r4, lr
 8000d4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d52:	fba0 8902 	umull	r8, r9, r0, r2
 8000d56:	eba4 040a 	sub.w	r4, r4, sl
 8000d5a:	454c      	cmp	r4, r9
 8000d5c:	46c2      	mov	sl, r8
 8000d5e:	464b      	mov	r3, r9
 8000d60:	d354      	bcc.n	8000e0c <__udivmoddi4+0x298>
 8000d62:	d051      	beq.n	8000e08 <__udivmoddi4+0x294>
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d069      	beq.n	8000e3c <__udivmoddi4+0x2c8>
 8000d68:	ebb1 050a 	subs.w	r5, r1, sl
 8000d6c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d70:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d74:	40fd      	lsrs	r5, r7
 8000d76:	40fc      	lsrs	r4, r7
 8000d78:	ea4c 0505 	orr.w	r5, ip, r5
 8000d7c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d80:	2700      	movs	r7, #0
 8000d82:	e747      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000d84:	f1c2 0320 	rsb	r3, r2, #32
 8000d88:	fa20 f703 	lsr.w	r7, r0, r3
 8000d8c:	4095      	lsls	r5, r2
 8000d8e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d92:	fa21 f303 	lsr.w	r3, r1, r3
 8000d96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d9a:	4338      	orrs	r0, r7
 8000d9c:	0c01      	lsrs	r1, r0, #16
 8000d9e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000da2:	fa1f f885 	uxth.w	r8, r5
 8000da6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000daa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dae:	fb07 f308 	mul.w	r3, r7, r8
 8000db2:	428b      	cmp	r3, r1
 8000db4:	fa04 f402 	lsl.w	r4, r4, r2
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x256>
 8000dba:	1869      	adds	r1, r5, r1
 8000dbc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dc0:	d22f      	bcs.n	8000e22 <__udivmoddi4+0x2ae>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d92d      	bls.n	8000e22 <__udivmoddi4+0x2ae>
 8000dc6:	3f02      	subs	r7, #2
 8000dc8:	4429      	add	r1, r5
 8000dca:	1acb      	subs	r3, r1, r3
 8000dcc:	b281      	uxth	r1, r0
 8000dce:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dda:	fb00 f308 	mul.w	r3, r0, r8
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x27e>
 8000de2:	1869      	adds	r1, r5, r1
 8000de4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de8:	d217      	bcs.n	8000e1a <__udivmoddi4+0x2a6>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d915      	bls.n	8000e1a <__udivmoddi4+0x2a6>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4429      	add	r1, r5
 8000df2:	1ac9      	subs	r1, r1, r3
 8000df4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df8:	e73b      	b.n	8000c72 <__udivmoddi4+0xfe>
 8000dfa:	4637      	mov	r7, r6
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e709      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000e00:	4607      	mov	r7, r0
 8000e02:	e6e7      	b.n	8000bd4 <__udivmoddi4+0x60>
 8000e04:	4618      	mov	r0, r3
 8000e06:	e6fb      	b.n	8000c00 <__udivmoddi4+0x8c>
 8000e08:	4541      	cmp	r1, r8
 8000e0a:	d2ab      	bcs.n	8000d64 <__udivmoddi4+0x1f0>
 8000e0c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e10:	eb69 020e 	sbc.w	r2, r9, lr
 8000e14:	3801      	subs	r0, #1
 8000e16:	4613      	mov	r3, r2
 8000e18:	e7a4      	b.n	8000d64 <__udivmoddi4+0x1f0>
 8000e1a:	4660      	mov	r0, ip
 8000e1c:	e7e9      	b.n	8000df2 <__udivmoddi4+0x27e>
 8000e1e:	4618      	mov	r0, r3
 8000e20:	e795      	b.n	8000d4e <__udivmoddi4+0x1da>
 8000e22:	4667      	mov	r7, ip
 8000e24:	e7d1      	b.n	8000dca <__udivmoddi4+0x256>
 8000e26:	4681      	mov	r9, r0
 8000e28:	e77c      	b.n	8000d24 <__udivmoddi4+0x1b0>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	442c      	add	r4, r5
 8000e2e:	e747      	b.n	8000cc0 <__udivmoddi4+0x14c>
 8000e30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e34:	442b      	add	r3, r5
 8000e36:	e72f      	b.n	8000c98 <__udivmoddi4+0x124>
 8000e38:	4638      	mov	r0, r7
 8000e3a:	e708      	b.n	8000c4e <__udivmoddi4+0xda>
 8000e3c:	4637      	mov	r7, r6
 8000e3e:	e6e9      	b.n	8000c14 <__udivmoddi4+0xa0>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	0000      	movs	r0, r0
	...

08000e48 <getSineVal>:
int distance = 0;

float startVolt = 0.5;
uint32_t sineVal[100];

void getSineVal(){
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 100; i++){
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	e038      	b.n	8000ec6 <getSineVal+0x7e>
		sineVal[i] = (sin(i*PI/5)+1)*((0xFFF+1)/2);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff fb29 	bl	80004ac <__aeabi_i2d>
 8000e5a:	a323      	add	r3, pc, #140	; (adr r3, 8000ee8 <getSineVal+0xa0>)
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	f7ff fb8e 	bl	8000580 <__aeabi_dmul>
 8000e64:	4603      	mov	r3, r0
 8000e66:	460c      	mov	r4, r1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	4621      	mov	r1, r4
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <getSineVal+0x90>)
 8000e72:	f7ff fcaf 	bl	80007d4 <__aeabi_ddiv>
 8000e76:	4603      	mov	r3, r0
 8000e78:	460c      	mov	r4, r1
 8000e7a:	ec44 3b17 	vmov	d7, r3, r4
 8000e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8000e82:	eef0 0a67 	vmov.f32	s1, s15
 8000e86:	f003 fbaf 	bl	80045e8 <sin>
 8000e8a:	ec51 0b10 	vmov	r0, r1, d0
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <getSineVal+0x94>)
 8000e94:	f7ff f9be 	bl	8000214 <__adddf3>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	4621      	mov	r1, r4
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <getSineVal+0x98>)
 8000ea6:	f7ff fb6b 	bl	8000580 <__aeabi_dmul>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	460c      	mov	r4, r1
 8000eae:	4618      	mov	r0, r3
 8000eb0:	4621      	mov	r1, r4
 8000eb2:	f7ff fe27 	bl	8000b04 <__aeabi_d2uiz>
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <getSineVal+0x9c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 100; i++){
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b63      	cmp	r3, #99	; 0x63
 8000eca:	ddc3      	ble.n	8000e54 <getSineVal+0xc>
	}
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	40140000 	.word	0x40140000
 8000edc:	3ff00000 	.word	0x3ff00000
 8000ee0:	40a00000 	.word	0x40a00000
 8000ee4:	20000194 	.word	0x20000194
 8000ee8:	4d12d84a 	.word	0x4d12d84a
 8000eec:	400921fb 	.word	0x400921fb

08000ef0 <HAL_TIM_IC_CaptureCallback>:
void delay_us(uint16_t us){
	__HAL_TIM_SET_COUNTER(&htim3,0); // Set counter start to 0
	while(__HAL_TIM_GET_COUNTER(&htim3) < us);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	if(htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a15      	ldr	r2, [pc, #84]	; (8000f50 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d122      	bne.n	8000f46 <HAL_TIM_IC_CaptureCallback+0x56>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7f1b      	ldrb	r3, [r3, #28]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d11e      	bne.n	8000f46 <HAL_TIM_IC_CaptureCallback+0x56>
		if(firstCaptured == 0) firstCaptured++;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d105      	bne.n	8000f1c <HAL_TIM_IC_CaptureCallback+0x2c>
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]
			totalTimeOne = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //Retrieves pulse width value from ultrasonic
			calcObjDist(totalTimeOne);
			firstCaptured--;
		}
	}
}
 8000f1a:	e014      	b.n	8000f46 <HAL_TIM_IC_CaptureCallback+0x56>
		else if(firstCaptured == 1){
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d110      	bne.n	8000f46 <HAL_TIM_IC_CaptureCallback+0x56>
			totalTimeOne = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //Retrieves pulse width value from ultrasonic
 8000f24:	2104      	movs	r1, #4
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f002 ff08 	bl	8003d3c <HAL_TIM_ReadCapturedValue>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
			calcObjDist(totalTimeOne);
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f812 	bl	8000f60 <calcObjDist>
			firstCaptured--;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000148 	.word	0x20000148
 8000f54:	2000002c 	.word	0x2000002c
 8000f58:	20000030 	.word	0x20000030
 8000f5c:	00000000 	.word	0x00000000

08000f60 <calcObjDist>:

void calcObjDist(uint32_t totalTime){
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	totalFinal = totalTime/2;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	085b      	lsrs	r3, r3, #1
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <calcObjDist+0x50>)
 8000f70:	601a      	str	r2, [r3, #0]
	distance = totalFinal * velSound * pow(10,-6);
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <calcObjDist+0x50>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a0f      	ldr	r2, [pc, #60]	; (8000fb4 <calcObjDist+0x54>)
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fa94 	bl	80004ac <__aeabi_i2d>
 8000f84:	a308      	add	r3, pc, #32	; (adr r3, 8000fa8 <calcObjDist+0x48>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff faf9 	bl	8000580 <__aeabi_dmul>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460c      	mov	r4, r1
 8000f92:	4618      	mov	r0, r3
 8000f94:	4621      	mov	r1, r4
 8000f96:	f7ff fd8d 	bl	8000ab4 <__aeabi_d2iz>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <calcObjDist+0x58>)
 8000f9e:	601a      	str	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd90      	pop	{r4, r7, pc}
 8000fa8:	a0b5ed8d 	.word	0xa0b5ed8d
 8000fac:	3eb0c6f7 	.word	0x3eb0c6f7
 8000fb0:	20000034 	.word	0x20000034
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000038 	.word	0x20000038

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc2:	f000 fc12 	bl	80017ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc6:	f000 f833 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fca:	f000 f9fb 	bl	80013c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fce:	f000 f9db 	bl	8001388 <MX_DMA_Init>
  MX_TIM1_Init();
 8000fd2:	f000 f8b5 	bl	8001140 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000fd6:	f000 f953 	bl	8001280 <MX_TIM3_Init>
  MX_DAC_Init();
 8000fda:	f000 f887 	bl	80010ec <MX_DAC_Init>
  MX_TIM6_Init();
 8000fde:	f000 f99d 	bl	800131c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <main+0x60>)
 8000fe6:	f002 faaf 	bl	8003548 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000fea:	2104      	movs	r1, #4
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <main+0x60>)
 8000fee:	f002 faab 	bl	8003548 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8000ff2:	480b      	ldr	r0, [pc, #44]	; (8001020 <main+0x64>)
 8000ff4:	f002 f9d6 	bl	80033a4 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim6);
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <main+0x68>)
 8000ffa:	f002 f9d3 	bl	80033a4 <HAL_TIM_Base_Start>
  getSineVal();
 8000ffe:	f7ff ff23 	bl	8000e48 <getSineVal>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001002:	2100      	movs	r1, #0
 8001004:	4808      	ldr	r0, [pc, #32]	; (8001028 <main+0x6c>)
 8001006:	f000 fd80 	bl	8001b0a <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sineVal, 100, DAC_ALIGN_12B_R);
 800100a:	2300      	movs	r3, #0
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <main+0x70>)
 8001012:	2100      	movs	r1, #0
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <main+0x6c>)
 8001016:	f000 fdcb 	bl	8001bb0 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800101a:	e7fe      	b.n	800101a <main+0x5e>
 800101c:	20000148 	.word	0x20000148
 8001020:	2000003c 	.word	0x2000003c
 8001024:	200000fc 	.word	0x200000fc
 8001028:	200000e8 	.word	0x200000e8
 800102c:	20000194 	.word	0x20000194

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	; 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2230      	movs	r2, #48	; 0x30
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f003 faca 	bl	80045d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <SystemClock_Config+0xb4>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <SystemClock_Config+0xb4>)
 800105a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105e:	6413      	str	r3, [r2, #64]	; 0x40
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <SystemClock_Config+0xb4>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <SystemClock_Config+0xb8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001074:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <SystemClock_Config+0xb8>)
 8001076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <SystemClock_Config+0xb8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001088:	2302      	movs	r3, #2
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001090:	2310      	movs	r3, #16
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001094:	2300      	movs	r3, #0
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fce7 	bl	8002a70 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80010a8:	f000 f9fa 	bl	80014a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	230f      	movs	r3, #15
 80010ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80010b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80010be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 ff74 	bl	8002fb8 <HAL_RCC_ClockConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010d6:	f000 f9e3 	bl	80014a0 <Error_Handler>
  }
}
 80010da:	bf00      	nop
 80010dc:	3750      	adds	r7, #80	; 0x50
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000

080010ec <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_DAC_Init+0x4c>)
 80010fc:	4a0f      	ldr	r2, [pc, #60]	; (800113c <MX_DAC_Init+0x50>)
 80010fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_DAC_Init+0x4c>)
 8001102:	f000 fce0 	bl	8001ac6 <HAL_DAC_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800110c:	f000 f9c8 	bl	80014a0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001110:	2304      	movs	r3, #4
 8001112:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001114:	2302      	movs	r3, #2
 8001116:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_DAC_Init+0x4c>)
 8001120:	f000 fe88 	bl	8001e34 <HAL_DAC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800112a:	f000 f9b9 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200000e8 	.word	0x200000e8
 800113c:	40007400 	.word	0x40007400

08001140 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b090      	sub	sp, #64	; 0x40
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800117c:	4b3e      	ldr	r3, [pc, #248]	; (8001278 <MX_TIM1_Init+0x138>)
 800117e:	4a3f      	ldr	r2, [pc, #252]	; (800127c <MX_TIM1_Init+0x13c>)
 8001180:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <MX_TIM1_Init+0x138>)
 8001184:	2201      	movs	r2, #1
 8001186:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <MX_TIM1_Init+0x138>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800118e:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <MX_TIM1_Init+0x138>)
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b38      	ldr	r3, [pc, #224]	; (8001278 <MX_TIM1_Init+0x138>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <MX_TIM1_Init+0x138>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b35      	ldr	r3, [pc, #212]	; (8001278 <MX_TIM1_Init+0x138>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011a8:	4833      	ldr	r0, [pc, #204]	; (8001278 <MX_TIM1_Init+0x138>)
 80011aa:	f002 f8a3 	bl	80032f4 <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80011b4:	f000 f974 	bl	80014a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c2:	4619      	mov	r1, r3
 80011c4:	482c      	ldr	r0, [pc, #176]	; (8001278 <MX_TIM1_Init+0x138>)
 80011c6:	f002 fcbd 	bl	8003b44 <HAL_TIM_ConfigClockSource>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80011d0:	f000 f966 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80011d4:	4828      	ldr	r0, [pc, #160]	; (8001278 <MX_TIM1_Init+0x138>)
 80011d6:	f002 f955 	bl	8003484 <HAL_TIM_IC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80011e0:	f000 f95e 	bl	80014a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80011e4:	2304      	movs	r3, #4
 80011e6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80011e8:	2350      	movs	r3, #80	; 0x50
 80011ea:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	481f      	ldr	r0, [pc, #124]	; (8001278 <MX_TIM1_Init+0x138>)
 80011fc:	f002 fd5c 	bl	8003cb8 <HAL_TIM_SlaveConfigSynchro>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001206:	f000 f94b 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	4619      	mov	r1, r3
 800121c:	4816      	ldr	r0, [pc, #88]	; (8001278 <MX_TIM1_Init+0x138>)
 800121e:	f003 f90b 	bl	8004438 <HAL_TIMEx_MasterConfigSynchronization>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001228:	f000 f93a 	bl	80014a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001230:	2301      	movs	r3, #1
 8001232:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_TIM1_Init+0x138>)
 8001244:	f002 fbe9 	bl	8003a1a <HAL_TIM_IC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800124e:	f000 f927 	bl	80014a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001252:	2302      	movs	r3, #2
 8001254:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001256:	2302      	movs	r3, #2
 8001258:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2204      	movs	r2, #4
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_TIM1_Init+0x138>)
 8001262:	f002 fbda 	bl	8003a1a <HAL_TIM_IC_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800126c:	f000 f918 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	3740      	adds	r7, #64	; 0x40
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000148 	.word	0x20000148
 800127c:	40010000 	.word	0x40010000

08001280 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_TIM3_Init+0x94>)
 80012a0:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <MX_TIM3_Init+0x98>)
 80012a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_TIM3_Init+0x94>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_TIM3_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_TIM3_Init+0x94>)
 80012b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_TIM3_Init+0x94>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_TIM3_Init+0x94>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012c4:	4813      	ldr	r0, [pc, #76]	; (8001314 <MX_TIM3_Init+0x94>)
 80012c6:	f002 f815 	bl	80032f4 <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012d0:	f000 f8e6 	bl	80014a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4619      	mov	r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_TIM3_Init+0x94>)
 80012e2:	f002 fc2f 	bl	8003b44 <HAL_TIM_ConfigClockSource>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012ec:	f000 f8d8 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_TIM3_Init+0x94>)
 80012fe:	f003 f89b 	bl	8004438 <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001308:	f000 f8ca 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2000003c 	.word	0x2000003c
 8001318:	40000400 	.word	0x40000400

0800131c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_TIM6_Init+0x64>)
 800132e:	4a15      	ldr	r2, [pc, #84]	; (8001384 <MX_TIM6_Init+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2-1;
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <MX_TIM6_Init+0x64>)
 8001334:	2201      	movs	r2, #1
 8001336:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_TIM6_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 22-1;
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <MX_TIM6_Init+0x64>)
 8001340:	2215      	movs	r2, #21
 8001342:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_TIM6_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800134a:	480d      	ldr	r0, [pc, #52]	; (8001380 <MX_TIM6_Init+0x64>)
 800134c:	f001 ffd2 	bl	80032f4 <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001356:	f000 f8a3 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800135a:	2320      	movs	r3, #32
 800135c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	; (8001380 <MX_TIM6_Init+0x64>)
 8001368:	f003 f866 	bl	8004438 <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001372:	f000 f895 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200000fc 	.word	0x200000fc
 8001384:	40001000 	.word	0x40001000

08001388 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_DMA_Init+0x38>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <MX_DMA_Init+0x38>)
 8001394:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_DMA_Init+0x38>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2010      	movs	r0, #16
 80013ac:	f000 fb55 	bl	8001a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013b0:	2010      	movs	r0, #16
 80013b2:	f000 fb6e 	bl	8001a92 <HAL_NVIC_EnableIRQ>

}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <MX_GPIO_Init+0xd0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a2d      	ldr	r2, [pc, #180]	; (8001494 <MX_GPIO_Init+0xd0>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <MX_GPIO_Init+0xd0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <MX_GPIO_Init+0xd0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a27      	ldr	r2, [pc, #156]	; (8001494 <MX_GPIO_Init+0xd0>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <MX_GPIO_Init+0xd0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a21      	ldr	r2, [pc, #132]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001410:	f043 0310 	orr.w	r3, r3, #16
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2101      	movs	r1, #1
 800143e:	4816      	ldr	r0, [pc, #88]	; (8001498 <MX_GPIO_Init+0xd4>)
 8001440:	f001 fafc 	bl	8002a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800144a:	4814      	ldr	r0, [pc, #80]	; (800149c <MX_GPIO_Init+0xd8>)
 800144c:	f001 faf6 	bl	8002a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001450:	2301      	movs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	480c      	ldr	r0, [pc, #48]	; (8001498 <MX_GPIO_Init+0xd4>)
 8001468:	f001 f93e 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800146c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_GPIO_Init+0xd8>)
 8001486:	f001 f92f 	bl	80026e8 <HAL_GPIO_Init>

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40020400 	.word	0x40020400
 800149c:	40020c00 	.word	0x40020c00

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <Error_Handler+0x6>

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_MspInit+0x44>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_MspInit+0x44>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_MspInit+0x44>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_MspInit+0x44>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_MspInit+0x44>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_MspInit+0x44>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800

080014f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a30      	ldr	r2, [pc, #192]	; (80015d0 <HAL_DAC_MspInit+0xe0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d15a      	bne.n	80015c8 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001512:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <HAL_DAC_MspInit+0xe4>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a2f      	ldr	r2, [pc, #188]	; (80015d4 <HAL_DAC_MspInit+0xe4>)
 8001518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <HAL_DAC_MspInit+0xe4>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <HAL_DAC_MspInit+0xe4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a29      	ldr	r2, [pc, #164]	; (80015d4 <HAL_DAC_MspInit+0xe4>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HAL_DAC_MspInit+0xe4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001542:	2310      	movs	r3, #16
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001546:	2303      	movs	r3, #3
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4820      	ldr	r0, [pc, #128]	; (80015d8 <HAL_DAC_MspInit+0xe8>)
 8001556:	f001 f8c7 	bl	80026e8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_DAC_MspInit+0xec>)
 800155c:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <HAL_DAC_MspInit+0xf0>)
 800155e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <HAL_DAC_MspInit+0xec>)
 8001562:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001566:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <HAL_DAC_MspInit+0xec>)
 800156a:	2240      	movs	r2, #64	; 0x40
 800156c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_DAC_MspInit+0xec>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_DAC_MspInit+0xec>)
 8001576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_DAC_MspInit+0xec>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_DAC_MspInit+0xec>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_DAC_MspInit+0xec>)
 800158a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800158e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_DAC_MspInit+0xec>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_DAC_MspInit+0xec>)
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800159c:	480f      	ldr	r0, [pc, #60]	; (80015dc <HAL_DAC_MspInit+0xec>)
 800159e:	f000 fd2d 	bl	8001ffc <HAL_DMA_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_DAC_MspInit+0xbc>
    {
      Error_Handler();
 80015a8:	f7ff ff7a 	bl	80014a0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <HAL_DAC_MspInit+0xec>)
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_DAC_MspInit+0xec>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	2036      	movs	r0, #54	; 0x36
 80015be:	f000 fa4c 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c2:	2036      	movs	r0, #54	; 0x36
 80015c4:	f000 fa65 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3728      	adds	r7, #40	; 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40007400 	.word	0x40007400
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	20000088 	.word	0x20000088
 80015e0:	40026088 	.word	0x40026088

080015e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08c      	sub	sp, #48	; 0x30
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <HAL_TIM_Base_MspInit+0xe4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d131      	bne.n	800166a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001606:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_TIM_Base_MspInit+0xe8>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a30      	ldr	r2, [pc, #192]	; (80016cc <HAL_TIM_Base_MspInit+0xe8>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <HAL_TIM_Base_MspInit+0xe8>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_TIM_Base_MspInit+0xe8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <HAL_TIM_Base_MspInit+0xe8>)
 8001624:	f043 0310 	orr.w	r3, r3, #16
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <HAL_TIM_Base_MspInit+0xe8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001648:	2301      	movs	r3, #1
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	481f      	ldr	r0, [pc, #124]	; (80016d0 <HAL_TIM_Base_MspInit+0xec>)
 8001654:	f001 f848 	bl	80026e8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	201b      	movs	r0, #27
 800165e:	f000 f9fc 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001662:	201b      	movs	r0, #27
 8001664:	f000 fa15 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001668:	e02a      	b.n	80016c0 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM3)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_TIM_Base_MspInit+0xf0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d10c      	bne.n	800168e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_TIM_Base_MspInit+0xe8>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <HAL_TIM_Base_MspInit+0xe8>)
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	6413      	str	r3, [r2, #64]	; 0x40
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_TIM_Base_MspInit+0xe8>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
}
 800168c:	e018      	b.n	80016c0 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM6)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <HAL_TIM_Base_MspInit+0xf4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d113      	bne.n	80016c0 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_TIM_Base_MspInit+0xe8>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_TIM_Base_MspInit+0xe8>)
 800169e:	f043 0310 	orr.w	r3, r3, #16
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_TIM_Base_MspInit+0xe8>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2036      	movs	r0, #54	; 0x36
 80016b6:	f000 f9d0 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016ba:	2036      	movs	r0, #54	; 0x36
 80016bc:	f000 f9e9 	bl	8001a92 <HAL_NVIC_EnableIRQ>
}
 80016c0:	bf00      	nop
 80016c2:	3730      	adds	r7, #48	; 0x30
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40010000 	.word	0x40010000
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40000400 	.word	0x40000400
 80016d8:	40001000 	.word	0x40001000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <NMI_Handler+0x4>

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001728:	f000 f89c 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <DMA1_Stream5_IRQHandler+0x10>)
 8001736:	f000 fd6f 	bl	8002218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000088 	.word	0x20000088

08001744 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <TIM1_CC_IRQHandler+0x10>)
 800174a:	f002 f847 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000148 	.word	0x20000148

08001758 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <TIM6_DAC_IRQHandler+0x14>)
 800175e:	f000 fae7 	bl	8001d30 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001762:	4803      	ldr	r0, [pc, #12]	; (8001770 <TIM6_DAC_IRQHandler+0x18>)
 8001764:	f002 f83a 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200000e8 	.word	0x200000e8
 8001770:	200000fc 	.word	0x200000fc

08001774 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <SystemInit+0x20>)
 800177a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <SystemInit+0x20>)
 8001780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800179e:	490e      	ldr	r1, [pc, #56]	; (80017d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017b4:	4c0b      	ldr	r4, [pc, #44]	; (80017e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017c2:	f7ff ffd7 	bl	8001774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017c6:	f002 fee3 	bl	8004590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff fbf7 	bl	8000fbc <main>
  bx  lr    
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017dc:	08005828 	.word	0x08005828
  ldr r2, =_sbss
 80017e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017e4:	20000328 	.word	0x20000328

080017e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC_IRQHandler>

080017ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ee:	2003      	movs	r0, #3
 80017f0:	f000 f928 	bl	8001a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f000 f805 	bl	8001804 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80017fa:	f7ff fe55 	bl	80014a8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f943 	bl	8001aae <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 f90b 	bl	8001a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000004 	.word	0x20000004
 800185c:	2000000c 	.word	0x2000000c
 8001860:	20000008 	.word	0x20000008

08001864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_IncTick+0x20>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x24>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_IncTick+0x24>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	2000000c 	.word	0x2000000c
 8001888:	20000324 	.word	0x20000324

0800188c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTick;
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_GetTick+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000324 	.word	0x20000324

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <__NVIC_SetPriorityGrouping+0x40>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d2:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <__NVIC_SetPriorityGrouping+0x40>)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	60d3      	str	r3, [r2, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00
 80018e8:	05fa0000 	.word	0x05fa0000

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	2b00      	cmp	r3, #0
 8001918:	db0b      	blt.n	8001932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	f003 021f 	and.w	r2, r3, #31
 8001920:	4907      	ldr	r1, [pc, #28]	; (8001940 <__NVIC_EnableIRQ+0x38>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	2001      	movs	r0, #1
 800192a:	fa00 f202 	lsl.w	r2, r0, r2
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e100 	.word	0xe000e100

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	; (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	; (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
         );
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	; 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a10:	d301      	bcc.n	8001a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <SysTick_Config+0x40>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1e:	210f      	movs	r1, #15
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f7ff ff8e 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <SysTick_Config+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <SysTick_Config+0x40>)
 8001a30:	2207      	movs	r2, #7
 8001a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff29 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6c:	f7ff ff3e 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff ff8e 	bl	8001998 <NVIC_EncodePriority>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff5d 	bl	8001944 <__NVIC_SetPriority>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff31 	bl	8001908 <__NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ffa2 	bl	8001a00 <SysTick_Config>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e014      	b.n	8001b02 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	791b      	ldrb	r3, [r3, #4]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d105      	bne.n	8001aee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff fd01 	bl	80014f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2202      	movs	r2, #2
 8001af2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	795b      	ldrb	r3, [r3, #5]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_DAC_Start+0x16>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e040      	b.n	8001ba2 <HAL_DAC_Start+0x98>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2201      	movs	r2, #1
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001b54:	2b3c      	cmp	r3, #60	; 0x3c
 8001b56:	d11d      	bne.n	8001b94 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	e014      	b.n	8001b94 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	213c      	movs	r1, #60	; 0x3c
 8001b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d107      	bne.n	8001b94 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0202 	orr.w	r2, r2, #2
 8001b92:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	795b      	ldrb	r3, [r3, #5]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_DAC_Start_DMA+0x22>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e09e      	b.n	8001d10 <HAL_DAC_Start_DMA+0x160>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d12a      	bne.n	8001c3a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4a4b      	ldr	r2, [pc, #300]	; (8001d18 <HAL_DAC_Start_DMA+0x168>)
 8001bea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4a4a      	ldr	r2, [pc, #296]	; (8001d1c <HAL_DAC_Start_DMA+0x16c>)
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a49      	ldr	r2, [pc, #292]	; (8001d20 <HAL_DAC_Start_DMA+0x170>)
 8001bfa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c0a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d009      	beq.n	8001c26 <HAL_DAC_Start_DMA+0x76>
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d00c      	beq.n	8001c30 <HAL_DAC_Start_DMA+0x80>
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d000      	beq.n	8001c1c <HAL_DAC_Start_DMA+0x6c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001c1a:	e039      	b.n	8001c90 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3308      	adds	r3, #8
 8001c22:	613b      	str	r3, [r7, #16]
        break;
 8001c24:	e034      	b.n	8001c90 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	330c      	adds	r3, #12
 8001c2c:	613b      	str	r3, [r7, #16]
        break;
 8001c2e:	e02f      	b.n	8001c90 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3310      	adds	r3, #16
 8001c36:	613b      	str	r3, [r7, #16]
        break;
 8001c38:	e02a      	b.n	8001c90 <HAL_DAC_Start_DMA+0xe0>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	4a39      	ldr	r2, [pc, #228]	; (8001d24 <HAL_DAC_Start_DMA+0x174>)
 8001c40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	4a38      	ldr	r2, [pc, #224]	; (8001d28 <HAL_DAC_Start_DMA+0x178>)
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	4a37      	ldr	r2, [pc, #220]	; (8001d2c <HAL_DAC_Start_DMA+0x17c>)
 8001c50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c60:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d009      	beq.n	8001c7c <HAL_DAC_Start_DMA+0xcc>
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d00c      	beq.n	8001c86 <HAL_DAC_Start_DMA+0xd6>
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d000      	beq.n	8001c72 <HAL_DAC_Start_DMA+0xc2>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001c70:	e00e      	b.n	8001c90 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3314      	adds	r3, #20
 8001c78:	613b      	str	r3, [r7, #16]
        break;
 8001c7a:	e009      	b.n	8001c90 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3318      	adds	r3, #24
 8001c82:	613b      	str	r3, [r7, #16]
        break;
 8001c84:	e004      	b.n	8001c90 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	331c      	adds	r3, #28
 8001c8c:	613b      	str	r3, [r7, #16]
        break;
 8001c8e:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d111      	bne.n	8001cba <HAL_DAC_Start_DMA+0x10a>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ca4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6898      	ldr	r0, [r3, #8]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	f000 fa52 	bl	8002158 <HAL_DMA_Start_IT>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	75fb      	strb	r3, [r7, #23]
 8001cb8:	e010      	b.n	8001cdc <HAL_DAC_Start_DMA+0x12c>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001cc8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	68d8      	ldr	r0, [r3, #12]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	f000 fa40 	bl	8002158 <HAL_DMA_Start_IT>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10c      	bne.n	8001d02 <HAL_DAC_Start_DMA+0x152>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6819      	ldr	r1, [r3, #0]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e005      	b.n	8001d0e <HAL_DAC_Start_DMA+0x15e>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f043 0204 	orr.w	r2, r3, #4
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	08001ed3 	.word	0x08001ed3
 8001d1c:	08001ef5 	.word	0x08001ef5
 8001d20:	08001f11 	.word	0x08001f11
 8001d24:	08001f8f 	.word	0x08001f8f
 8001d28:	08001fb1 	.word	0x08001fb1
 8001d2c:	08001fcd 	.word	0x08001fcd

08001d30 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d46:	d120      	bne.n	8001d8a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d56:	d118      	bne.n	8001d8a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d82:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f84b 	bl	8001e20 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d98:	d120      	bne.n	8001ddc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001da8:	d118      	bne.n	8001ddc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2204      	movs	r2, #4
 8001dae:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f043 0202 	orr.w	r2, r3, #2
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001dc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001dd4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8cf 	bl	8001f7a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	795b      	ldrb	r3, [r3, #5]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_DAC_ConfigChannel+0x18>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e03c      	b.n	8001ec6 <HAL_DAC_ConfigChannel+0x92>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2202      	movs	r2, #2
 8001e56:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	4013      	ands	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6819      	ldr	r1, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	22c0      	movs	r2, #192	; 0xc0
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f7ff ff7f 	bl	8001de4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	711a      	strb	r2, [r3, #4]
}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f00:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f7ff ff78 	bl	8001df8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f043 0204 	orr.w	r2, r3, #4
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f7ff ff6e 	bl	8001e0c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2201      	movs	r2, #1
 8001f34:	711a      	strb	r2, [r3, #4]
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff ffce 	bl	8001f3e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	711a      	strb	r2, [r3, #4]
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff ffc7 	bl	8001f52 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f043 0204 	orr.w	r2, r3, #4
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff ffbd 	bl	8001f66 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	711a      	strb	r2, [r3, #4]
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff fc40 	bl	800188c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e099      	b.n	800214c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002038:	e00f      	b.n	800205a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800203a:	f7ff fc27 	bl	800188c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b05      	cmp	r3, #5
 8002046:	d908      	bls.n	800205a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2203      	movs	r2, #3
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e078      	b.n	800214c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e8      	bne.n	800203a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4b38      	ldr	r3, [pc, #224]	; (8002154 <HAL_DMA_Init+0x158>)
 8002074:	4013      	ands	r3, r2
 8002076:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002086:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d107      	bne.n	80020c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	4313      	orrs	r3, r2
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f023 0307 	bic.w	r3, r3, #7
 80020da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d117      	bne.n	800211e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00e      	beq.n	800211e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fa77 	bl	80025f4 <DMA_CheckFifoParam>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2240      	movs	r2, #64	; 0x40
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800211a:	2301      	movs	r3, #1
 800211c:	e016      	b.n	800214c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa2e 	bl	8002588 <DMA_CalcBaseAndBitshift>
 800212c:	4603      	mov	r3, r0
 800212e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	223f      	movs	r2, #63	; 0x3f
 8002136:	409a      	lsls	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	f010803f 	.word	0xf010803f

08002158 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_DMA_Start_IT+0x26>
 800217a:	2302      	movs	r3, #2
 800217c:	e048      	b.n	8002210 <HAL_DMA_Start_IT+0xb8>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d137      	bne.n	8002202 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f9c0 	bl	800252c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	223f      	movs	r2, #63	; 0x3f
 80021b2:	409a      	lsls	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0216 	orr.w	r2, r2, #22
 80021c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021d6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0208 	orr.w	r2, r2, #8
 80021ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e005      	b.n	800220e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800220a:	2302      	movs	r3, #2
 800220c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800220e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002224:	4b92      	ldr	r3, [pc, #584]	; (8002470 <HAL_DMA_IRQHandler+0x258>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a92      	ldr	r2, [pc, #584]	; (8002474 <HAL_DMA_IRQHandler+0x25c>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0a9b      	lsrs	r3, r3, #10
 8002230:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	2208      	movs	r2, #8
 8002244:	409a      	lsls	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d01a      	beq.n	8002284 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0204 	bic.w	r2, r2, #4
 800226a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	2208      	movs	r2, #8
 8002272:	409a      	lsls	r2, r3
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	2201      	movs	r2, #1
 800228a:	409a      	lsls	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d012      	beq.n	80022ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	2201      	movs	r2, #1
 80022a8:	409a      	lsls	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b2:	f043 0202 	orr.w	r2, r3, #2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022be:	2204      	movs	r2, #4
 80022c0:	409a      	lsls	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d012      	beq.n	80022f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00b      	beq.n	80022f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	2204      	movs	r2, #4
 80022de:	409a      	lsls	r2, r3
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	f043 0204 	orr.w	r2, r3, #4
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	2210      	movs	r2, #16
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d043      	beq.n	8002388 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d03c      	beq.n	8002388 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	2210      	movs	r2, #16
 8002314:	409a      	lsls	r2, r3
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d018      	beq.n	800235a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d108      	bne.n	8002348 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d024      	beq.n	8002388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
 8002346:	e01f      	b.n	8002388 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01b      	beq.n	8002388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
 8002358:	e016      	b.n	8002388 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0208 	bic.w	r2, r2, #8
 8002376:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	2220      	movs	r2, #32
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 808e 	beq.w	80024b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8086 	beq.w	80024b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	2220      	movs	r2, #32
 80023b0:	409a      	lsls	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b05      	cmp	r3, #5
 80023c0:	d136      	bne.n	8002430 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0216 	bic.w	r2, r2, #22
 80023d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d103      	bne.n	80023f2 <HAL_DMA_IRQHandler+0x1da>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0208 	bic.w	r2, r2, #8
 8002400:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	223f      	movs	r2, #63	; 0x3f
 8002408:	409a      	lsls	r2, r3
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002422:	2b00      	cmp	r3, #0
 8002424:	d07d      	beq.n	8002522 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
        }
        return;
 800242e:	e078      	b.n	8002522 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01c      	beq.n	8002478 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d108      	bne.n	800245e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002450:	2b00      	cmp	r3, #0
 8002452:	d030      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
 800245c:	e02b      	b.n	80024b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d027      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
 800246e:	e022      	b.n	80024b6 <HAL_DMA_IRQHandler+0x29e>
 8002470:	20000004 	.word	0x20000004
 8002474:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10f      	bne.n	80024a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0210 	bic.w	r2, r2, #16
 8002494:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d032      	beq.n	8002524 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d022      	beq.n	8002510 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2205      	movs	r2, #5
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0201 	bic.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3301      	adds	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d307      	bcc.n	80024fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f2      	bne.n	80024e2 <HAL_DMA_IRQHandler+0x2ca>
 80024fc:	e000      	b.n	8002500 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80024fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4798      	blx	r3
 8002520:	e000      	b.n	8002524 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002522:	bf00      	nop
    }
  }
}
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop

0800252c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002548:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d108      	bne.n	800256c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800256a:	e007      	b.n	800257c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	60da      	str	r2, [r3, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3b10      	subs	r3, #16
 8002598:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <DMA_CalcBaseAndBitshift+0x60>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025a2:	4a12      	ldr	r2, [pc, #72]	; (80025ec <DMA_CalcBaseAndBitshift+0x64>)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4413      	add	r3, r2
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d908      	bls.n	80025c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <DMA_CalcBaseAndBitshift+0x68>)
 80025be:	4013      	ands	r3, r2
 80025c0:	1d1a      	adds	r2, r3, #4
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	659a      	str	r2, [r3, #88]	; 0x58
 80025c6:	e006      	b.n	80025d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <DMA_CalcBaseAndBitshift+0x68>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	aaaaaaab 	.word	0xaaaaaaab
 80025ec:	08005638 	.word	0x08005638
 80025f0:	fffffc00 	.word	0xfffffc00

080025f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11f      	bne.n	800264e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d855      	bhi.n	80026c0 <DMA_CheckFifoParam+0xcc>
 8002614:	a201      	add	r2, pc, #4	; (adr r2, 800261c <DMA_CheckFifoParam+0x28>)
 8002616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261a:	bf00      	nop
 800261c:	0800262d 	.word	0x0800262d
 8002620:	0800263f 	.word	0x0800263f
 8002624:	0800262d 	.word	0x0800262d
 8002628:	080026c1 	.word	0x080026c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d045      	beq.n	80026c4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800263c:	e042      	b.n	80026c4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002646:	d13f      	bne.n	80026c8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264c:	e03c      	b.n	80026c8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002656:	d121      	bne.n	800269c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b03      	cmp	r3, #3
 800265c:	d836      	bhi.n	80026cc <DMA_CheckFifoParam+0xd8>
 800265e:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <DMA_CheckFifoParam+0x70>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	08002675 	.word	0x08002675
 8002668:	0800267b 	.word	0x0800267b
 800266c:	08002675 	.word	0x08002675
 8002670:	0800268d 	.word	0x0800268d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      break;
 8002678:	e02f      	b.n	80026da <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d024      	beq.n	80026d0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800268a:	e021      	b.n	80026d0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002694:	d11e      	bne.n	80026d4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800269a:	e01b      	b.n	80026d4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d902      	bls.n	80026a8 <DMA_CheckFifoParam+0xb4>
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d003      	beq.n	80026ae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026a6:	e018      	b.n	80026da <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
      break;
 80026ac:	e015      	b.n	80026da <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00e      	beq.n	80026d8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
      break;
 80026be:	e00b      	b.n	80026d8 <DMA_CheckFifoParam+0xe4>
      break;
 80026c0:	bf00      	nop
 80026c2:	e00a      	b.n	80026da <DMA_CheckFifoParam+0xe6>
      break;
 80026c4:	bf00      	nop
 80026c6:	e008      	b.n	80026da <DMA_CheckFifoParam+0xe6>
      break;
 80026c8:	bf00      	nop
 80026ca:	e006      	b.n	80026da <DMA_CheckFifoParam+0xe6>
      break;
 80026cc:	bf00      	nop
 80026ce:	e004      	b.n	80026da <DMA_CheckFifoParam+0xe6>
      break;
 80026d0:	bf00      	nop
 80026d2:	e002      	b.n	80026da <DMA_CheckFifoParam+0xe6>
      break;   
 80026d4:	bf00      	nop
 80026d6:	e000      	b.n	80026da <DMA_CheckFifoParam+0xe6>
      break;
 80026d8:	bf00      	nop
    }
  } 
  
  return status; 
 80026da:	7bfb      	ldrb	r3, [r7, #15]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	e175      	b.n	80029f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002708:	2201      	movs	r2, #1
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	429a      	cmp	r2, r3
 8002722:	f040 8164 	bne.w	80029ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d00b      	beq.n	8002746 <HAL_GPIO_Init+0x5e>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d007      	beq.n	8002746 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800273a:	2b11      	cmp	r3, #17
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b12      	cmp	r3, #18
 8002744:	d130      	bne.n	80027a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2203      	movs	r2, #3
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800277c:	2201      	movs	r2, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 0201 	and.w	r2, r3, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x100>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b12      	cmp	r3, #18
 80027e6:	d123      	bne.n	8002830 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	08da      	lsrs	r2, r3, #3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3208      	adds	r2, #8
 80027f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	220f      	movs	r2, #15
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	08da      	lsrs	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3208      	adds	r2, #8
 800282a:	69b9      	ldr	r1, [r7, #24]
 800282c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0203 	and.w	r2, r3, #3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80be 	beq.w	80029ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002872:	4b65      	ldr	r3, [pc, #404]	; (8002a08 <HAL_GPIO_Init+0x320>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	4a64      	ldr	r2, [pc, #400]	; (8002a08 <HAL_GPIO_Init+0x320>)
 8002878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800287c:	6453      	str	r3, [r2, #68]	; 0x44
 800287e:	4b62      	ldr	r3, [pc, #392]	; (8002a08 <HAL_GPIO_Init+0x320>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800288a:	4a60      	ldr	r2, [pc, #384]	; (8002a0c <HAL_GPIO_Init+0x324>)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	3302      	adds	r3, #2
 8002892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	220f      	movs	r2, #15
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a57      	ldr	r2, [pc, #348]	; (8002a10 <HAL_GPIO_Init+0x328>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d037      	beq.n	8002926 <HAL_GPIO_Init+0x23e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a56      	ldr	r2, [pc, #344]	; (8002a14 <HAL_GPIO_Init+0x32c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d031      	beq.n	8002922 <HAL_GPIO_Init+0x23a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a55      	ldr	r2, [pc, #340]	; (8002a18 <HAL_GPIO_Init+0x330>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d02b      	beq.n	800291e <HAL_GPIO_Init+0x236>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a54      	ldr	r2, [pc, #336]	; (8002a1c <HAL_GPIO_Init+0x334>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d025      	beq.n	800291a <HAL_GPIO_Init+0x232>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a53      	ldr	r2, [pc, #332]	; (8002a20 <HAL_GPIO_Init+0x338>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01f      	beq.n	8002916 <HAL_GPIO_Init+0x22e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a52      	ldr	r2, [pc, #328]	; (8002a24 <HAL_GPIO_Init+0x33c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d019      	beq.n	8002912 <HAL_GPIO_Init+0x22a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a51      	ldr	r2, [pc, #324]	; (8002a28 <HAL_GPIO_Init+0x340>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d013      	beq.n	800290e <HAL_GPIO_Init+0x226>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a50      	ldr	r2, [pc, #320]	; (8002a2c <HAL_GPIO_Init+0x344>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00d      	beq.n	800290a <HAL_GPIO_Init+0x222>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4f      	ldr	r2, [pc, #316]	; (8002a30 <HAL_GPIO_Init+0x348>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d007      	beq.n	8002906 <HAL_GPIO_Init+0x21e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4e      	ldr	r2, [pc, #312]	; (8002a34 <HAL_GPIO_Init+0x34c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d101      	bne.n	8002902 <HAL_GPIO_Init+0x21a>
 80028fe:	2309      	movs	r3, #9
 8002900:	e012      	b.n	8002928 <HAL_GPIO_Init+0x240>
 8002902:	230a      	movs	r3, #10
 8002904:	e010      	b.n	8002928 <HAL_GPIO_Init+0x240>
 8002906:	2308      	movs	r3, #8
 8002908:	e00e      	b.n	8002928 <HAL_GPIO_Init+0x240>
 800290a:	2307      	movs	r3, #7
 800290c:	e00c      	b.n	8002928 <HAL_GPIO_Init+0x240>
 800290e:	2306      	movs	r3, #6
 8002910:	e00a      	b.n	8002928 <HAL_GPIO_Init+0x240>
 8002912:	2305      	movs	r3, #5
 8002914:	e008      	b.n	8002928 <HAL_GPIO_Init+0x240>
 8002916:	2304      	movs	r3, #4
 8002918:	e006      	b.n	8002928 <HAL_GPIO_Init+0x240>
 800291a:	2303      	movs	r3, #3
 800291c:	e004      	b.n	8002928 <HAL_GPIO_Init+0x240>
 800291e:	2302      	movs	r3, #2
 8002920:	e002      	b.n	8002928 <HAL_GPIO_Init+0x240>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_GPIO_Init+0x240>
 8002926:	2300      	movs	r3, #0
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f002 0203 	and.w	r2, r2, #3
 800292e:	0092      	lsls	r2, r2, #2
 8002930:	4093      	lsls	r3, r2
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002938:	4934      	ldr	r1, [pc, #208]	; (8002a0c <HAL_GPIO_Init+0x324>)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	3302      	adds	r3, #2
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002946:	4b3c      	ldr	r3, [pc, #240]	; (8002a38 <HAL_GPIO_Init+0x350>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800296a:	4a33      	ldr	r2, [pc, #204]	; (8002a38 <HAL_GPIO_Init+0x350>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002970:	4b31      	ldr	r3, [pc, #196]	; (8002a38 <HAL_GPIO_Init+0x350>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002994:	4a28      	ldr	r2, [pc, #160]	; (8002a38 <HAL_GPIO_Init+0x350>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299a:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <HAL_GPIO_Init+0x350>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029be:	4a1e      	ldr	r2, [pc, #120]	; (8002a38 <HAL_GPIO_Init+0x350>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c4:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <HAL_GPIO_Init+0x350>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e8:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <HAL_GPIO_Init+0x350>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	f67f ae86 	bls.w	8002708 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029fc:	bf00      	nop
 80029fe:	3724      	adds	r7, #36	; 0x24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40013800 	.word	0x40013800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40020400 	.word	0x40020400
 8002a18:	40020800 	.word	0x40020800
 8002a1c:	40020c00 	.word	0x40020c00
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40021400 	.word	0x40021400
 8002a28:	40021800 	.word	0x40021800
 8002a2c:	40021c00 	.word	0x40021c00
 8002a30:	40022000 	.word	0x40022000
 8002a34:	40022400 	.word	0x40022400
 8002a38:	40013c00 	.word	0x40013c00

08002a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	807b      	strh	r3, [r7, #2]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a4c:	787b      	ldrb	r3, [r7, #1]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a58:	e003      	b.n	8002a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a5a:	887b      	ldrh	r3, [r7, #2]
 8002a5c:	041a      	lsls	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	619a      	str	r2, [r3, #24]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e291      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8087 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a94:	4b96      	ldr	r3, [pc, #600]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d00c      	beq.n	8002aba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa0:	4b93      	ldr	r3, [pc, #588]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d112      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x62>
 8002aac:	4b90      	ldr	r3, [pc, #576]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aba:	4b8d      	ldr	r3, [pc, #564]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d06c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x130>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d168      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e26b      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x7a>
 8002adc:	4b84      	ldr	r3, [pc, #528]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a83      	ldr	r2, [pc, #524]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	e02e      	b.n	8002b48 <HAL_RCC_OscConfig+0xd8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x9c>
 8002af2:	4b7f      	ldr	r3, [pc, #508]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a7e      	ldr	r2, [pc, #504]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b7c      	ldr	r3, [pc, #496]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a7b      	ldr	r2, [pc, #492]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e01d      	b.n	8002b48 <HAL_RCC_OscConfig+0xd8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0xc0>
 8002b16:	4b76      	ldr	r3, [pc, #472]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a75      	ldr	r2, [pc, #468]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b73      	ldr	r3, [pc, #460]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a72      	ldr	r2, [pc, #456]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0xd8>
 8002b30:	4b6f      	ldr	r3, [pc, #444]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a6e      	ldr	r2, [pc, #440]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b6c      	ldr	r3, [pc, #432]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a6b      	ldr	r2, [pc, #428]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fe9c 	bl	800188c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fe fe98 	bl	800188c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e21f      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b61      	ldr	r3, [pc, #388]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0xe8>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fe88 	bl	800188c <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fe fe84 	bl	800188c <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e20b      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	4b57      	ldr	r3, [pc, #348]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x110>
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d069      	beq.n	8002c82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bae:	4b50      	ldr	r3, [pc, #320]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bba:	4b4d      	ldr	r3, [pc, #308]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d11c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x190>
 8002bc6:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d116      	bne.n	8002c00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	4b47      	ldr	r3, [pc, #284]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_RCC_OscConfig+0x17a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e1df      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bea:	4b41      	ldr	r3, [pc, #260]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	493d      	ldr	r1, [pc, #244]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	e040      	b.n	8002c82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d023      	beq.n	8002c50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c08:	4b39      	ldr	r3, [pc, #228]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a38      	ldr	r2, [pc, #224]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fe3a 	bl	800188c <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1c:	f7fe fe36 	bl	800188c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1bd      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2e:	4b30      	ldr	r3, [pc, #192]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3a:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4929      	ldr	r1, [pc, #164]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
 8002c4e:	e018      	b.n	8002c82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c50:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a26      	ldr	r2, [pc, #152]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fe16 	bl	800188c <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c64:	f7fe fe12 	bl	800188c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e199      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c76:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d038      	beq.n	8002d00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d019      	beq.n	8002cca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9a:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fdf3 	bl	800188c <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002caa:	f7fe fdef 	bl	800188c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e176      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x23a>
 8002cc8:	e01a      	b.n	8002d00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cce:	4a08      	ldr	r2, [pc, #32]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fdd9 	bl	800188c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cde:	f7fe fdd5 	bl	800188c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d903      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e15c      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
 8002cf0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf4:	4b91      	ldr	r3, [pc, #580]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1ee      	bne.n	8002cde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80a4 	beq.w	8002e56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0e:	4b8b      	ldr	r3, [pc, #556]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a87      	ldr	r2, [pc, #540]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b85      	ldr	r3, [pc, #532]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d36:	4b82      	ldr	r3, [pc, #520]	; (8002f40 <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d42:	4b7f      	ldr	r3, [pc, #508]	; (8002f40 <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a7e      	ldr	r2, [pc, #504]	; (8002f40 <HAL_RCC_OscConfig+0x4d0>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fd9d 	bl	800188c <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d56:	f7fe fd99 	bl	800188c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b64      	cmp	r3, #100	; 0x64
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e120      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d68:	4b75      	ldr	r3, [pc, #468]	; (8002f40 <HAL_RCC_OscConfig+0x4d0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x31a>
 8002d7c:	4b6f      	ldr	r3, [pc, #444]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	4a6e      	ldr	r2, [pc, #440]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6713      	str	r3, [r2, #112]	; 0x70
 8002d88:	e02d      	b.n	8002de6 <HAL_RCC_OscConfig+0x376>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x33c>
 8002d92:	4b6a      	ldr	r3, [pc, #424]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a69      	ldr	r2, [pc, #420]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9e:	4b67      	ldr	r3, [pc, #412]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	4a66      	ldr	r2, [pc, #408]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	6713      	str	r3, [r2, #112]	; 0x70
 8002daa:	e01c      	b.n	8002de6 <HAL_RCC_OscConfig+0x376>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d10c      	bne.n	8002dce <HAL_RCC_OscConfig+0x35e>
 8002db4:	4b61      	ldr	r3, [pc, #388]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	4a60      	ldr	r2, [pc, #384]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002dba:	f043 0304 	orr.w	r3, r3, #4
 8002dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc0:	4b5e      	ldr	r3, [pc, #376]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc4:	4a5d      	ldr	r2, [pc, #372]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6713      	str	r3, [r2, #112]	; 0x70
 8002dcc:	e00b      	b.n	8002de6 <HAL_RCC_OscConfig+0x376>
 8002dce:	4b5b      	ldr	r3, [pc, #364]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a5a      	ldr	r2, [pc, #360]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dda:	4b58      	ldr	r3, [pc, #352]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a57      	ldr	r2, [pc, #348]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d015      	beq.n	8002e1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7fe fd4d 	bl	800188c <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7fe fd49 	bl	800188c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0ce      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0c:	4b4b      	ldr	r3, [pc, #300]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0ee      	beq.n	8002df6 <HAL_RCC_OscConfig+0x386>
 8002e18:	e014      	b.n	8002e44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1a:	f7fe fd37 	bl	800188c <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe fd33 	bl	800188c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e0b8      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e38:	4b40      	ldr	r3, [pc, #256]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ee      	bne.n	8002e22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d105      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4a:	4b3c      	ldr	r3, [pc, #240]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a3b      	ldr	r2, [pc, #236]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 80a4 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e60:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d06b      	beq.n	8002f44 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d149      	bne.n	8002f08 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a30      	ldr	r2, [pc, #192]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe fd04 	bl	800188c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe fd00 	bl	800188c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e087      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	019b      	lsls	r3, r3, #6
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	041b      	lsls	r3, r3, #16
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	4a1b      	ldr	r2, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002ece:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ed2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fcd4 	bl	800188c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fe fcd0 	bl	800188c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e057      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x478>
 8002f06:	e04f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0b      	ldr	r2, [pc, #44]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fcba 	bl	800188c <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fcb6 	bl	800188c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e03d      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x4ac>
 8002f3a:	e035      	b.n	8002fa8 <HAL_RCC_OscConfig+0x538>
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <HAL_RCC_OscConfig+0x544>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d028      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d121      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d11a      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f74:	4013      	ands	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d111      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d107      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0d0      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	; (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d910      	bls.n	8003000 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b67      	ldr	r3, [pc, #412]	; (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 020f 	bic.w	r2, r3, #15
 8002fe6:	4965      	ldr	r1, [pc, #404]	; (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b63      	ldr	r3, [pc, #396]	; (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0b8      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003018:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a58      	ldr	r2, [pc, #352]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 800301e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003022:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 8003036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800303a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	494d      	ldr	r1, [pc, #308]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d040      	beq.n	80030dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d115      	bne.n	800309a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307a:	4b41      	ldr	r3, [pc, #260]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e073      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308a:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e06b      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800309a:	4b39      	ldr	r3, [pc, #228]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f023 0203 	bic.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4936      	ldr	r1, [pc, #216]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ac:	f7fe fbee 	bl	800188c <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b4:	f7fe fbea 	bl	800188c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e053      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 020c 	and.w	r2, r3, #12
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	429a      	cmp	r2, r3
 80030da:	d1eb      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030dc:	4b27      	ldr	r3, [pc, #156]	; (800317c <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d210      	bcs.n	800310c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 020f 	bic.w	r2, r3, #15
 80030f2:	4922      	ldr	r1, [pc, #136]	; (800317c <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e032      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4916      	ldr	r1, [pc, #88]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	490e      	ldr	r1, [pc, #56]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800314a:	f000 f821 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800314e:	4601      	mov	r1, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <HAL_RCC_ClockConfig+0x1cc>)
 800315c:	5cd3      	ldrb	r3, [r2, r3]
 800315e:	fa21 f303 	lsr.w	r3, r1, r3
 8003162:	4a09      	ldr	r2, [pc, #36]	; (8003188 <HAL_RCC_ClockConfig+0x1d0>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1d4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fb4a 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023c00 	.word	0x40023c00
 8003180:	40023800 	.word	0x40023800
 8003184:	08005628 	.word	0x08005628
 8003188:	20000004 	.word	0x20000004
 800318c:	20000008 	.word	0x20000008

08003190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	2300      	movs	r3, #0
 80031a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a6:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d007      	beq.n	80031c2 <HAL_RCC_GetSysClockFreq+0x32>
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d008      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x38>
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 808d 	bne.w	80032d6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031bc:	4b4b      	ldr	r3, [pc, #300]	; (80032ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80031be:	60bb      	str	r3, [r7, #8]
      break;
 80031c0:	e08c      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031c2:	4b4b      	ldr	r3, [pc, #300]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80031c4:	60bb      	str	r3, [r7, #8]
      break;
 80031c6:	e089      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031c8:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031d2:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d023      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031de:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	f04f 0400 	mov.w	r4, #0
 80031e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	ea03 0501 	and.w	r5, r3, r1
 80031f4:	ea04 0602 	and.w	r6, r4, r2
 80031f8:	4a3d      	ldr	r2, [pc, #244]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80031fa:	fb02 f106 	mul.w	r1, r2, r6
 80031fe:	2200      	movs	r2, #0
 8003200:	fb02 f205 	mul.w	r2, r2, r5
 8003204:	440a      	add	r2, r1
 8003206:	493a      	ldr	r1, [pc, #232]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003208:	fba5 0101 	umull	r0, r1, r5, r1
 800320c:	1853      	adds	r3, r2, r1
 800320e:	4619      	mov	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f04f 0400 	mov.w	r4, #0
 8003216:	461a      	mov	r2, r3
 8003218:	4623      	mov	r3, r4
 800321a:	f7fd fc93 	bl	8000b44 <__aeabi_uldivmod>
 800321e:	4603      	mov	r3, r0
 8003220:	460c      	mov	r4, r1
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e049      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003226:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	099b      	lsrs	r3, r3, #6
 800322c:	f04f 0400 	mov.w	r4, #0
 8003230:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	ea03 0501 	and.w	r5, r3, r1
 800323c:	ea04 0602 	and.w	r6, r4, r2
 8003240:	4629      	mov	r1, r5
 8003242:	4632      	mov	r2, r6
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	f04f 0400 	mov.w	r4, #0
 800324c:	0154      	lsls	r4, r2, #5
 800324e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003252:	014b      	lsls	r3, r1, #5
 8003254:	4619      	mov	r1, r3
 8003256:	4622      	mov	r2, r4
 8003258:	1b49      	subs	r1, r1, r5
 800325a:	eb62 0206 	sbc.w	r2, r2, r6
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	f04f 0400 	mov.w	r4, #0
 8003266:	0194      	lsls	r4, r2, #6
 8003268:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800326c:	018b      	lsls	r3, r1, #6
 800326e:	1a5b      	subs	r3, r3, r1
 8003270:	eb64 0402 	sbc.w	r4, r4, r2
 8003274:	f04f 0100 	mov.w	r1, #0
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	00e2      	lsls	r2, r4, #3
 800327e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003282:	00d9      	lsls	r1, r3, #3
 8003284:	460b      	mov	r3, r1
 8003286:	4614      	mov	r4, r2
 8003288:	195b      	adds	r3, r3, r5
 800328a:	eb44 0406 	adc.w	r4, r4, r6
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	02a2      	lsls	r2, r4, #10
 8003298:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800329c:	0299      	lsls	r1, r3, #10
 800329e:	460b      	mov	r3, r1
 80032a0:	4614      	mov	r4, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	4621      	mov	r1, r4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	461a      	mov	r2, r3
 80032ae:	4623      	mov	r3, r4
 80032b0:	f7fd fc48 	bl	8000b44 <__aeabi_uldivmod>
 80032b4:	4603      	mov	r3, r0
 80032b6:	460c      	mov	r4, r1
 80032b8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	3301      	adds	r3, #1
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	60bb      	str	r3, [r7, #8]
      break;
 80032d4:	e002      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80032d8:	60bb      	str	r3, [r7, #8]
      break;
 80032da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032dc:	68bb      	ldr	r3, [r7, #8]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	00f42400 	.word	0x00f42400
 80032f0:	017d7840 	.word	0x017d7840

080032f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e049      	b.n	800339a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fe f962 	bl	80015e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3304      	adds	r3, #4
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f000 fd6e 	bl	8003e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d001      	beq.n	80033bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e04c      	b.n	8003456 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a26      	ldr	r2, [pc, #152]	; (8003464 <HAL_TIM_Base_Start+0xc0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d022      	beq.n	8003414 <HAL_TIM_Base_Start+0x70>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d6:	d01d      	beq.n	8003414 <HAL_TIM_Base_Start+0x70>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a22      	ldr	r2, [pc, #136]	; (8003468 <HAL_TIM_Base_Start+0xc4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d018      	beq.n	8003414 <HAL_TIM_Base_Start+0x70>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a21      	ldr	r2, [pc, #132]	; (800346c <HAL_TIM_Base_Start+0xc8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d013      	beq.n	8003414 <HAL_TIM_Base_Start+0x70>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <HAL_TIM_Base_Start+0xcc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00e      	beq.n	8003414 <HAL_TIM_Base_Start+0x70>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1e      	ldr	r2, [pc, #120]	; (8003474 <HAL_TIM_Base_Start+0xd0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d009      	beq.n	8003414 <HAL_TIM_Base_Start+0x70>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_TIM_Base_Start+0xd4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d004      	beq.n	8003414 <HAL_TIM_Base_Start+0x70>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1b      	ldr	r2, [pc, #108]	; (800347c <HAL_TIM_Base_Start+0xd8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d115      	bne.n	8003440 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_TIM_Base_Start+0xdc>)
 800341c:	4013      	ands	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b06      	cmp	r3, #6
 8003424:	d015      	beq.n	8003452 <HAL_TIM_Base_Start+0xae>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342c:	d011      	beq.n	8003452 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0201 	orr.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343e:	e008      	b.n	8003452 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e000      	b.n	8003454 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003452:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40010000 	.word	0x40010000
 8003468:	40000400 	.word	0x40000400
 800346c:	40000800 	.word	0x40000800
 8003470:	40000c00 	.word	0x40000c00
 8003474:	40010400 	.word	0x40010400
 8003478:	40014000 	.word	0x40014000
 800347c:	40001800 	.word	0x40001800
 8003480:	00010007 	.word	0x00010007

08003484 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e049      	b.n	800352a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f841 	bl	8003532 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	4619      	mov	r1, r3
 80034c2:	4610      	mov	r0, r2
 80034c4:	f000 fca6 	bl	8003e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d104      	bne.n	8003562 <HAL_TIM_IC_Start_IT+0x1a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800355e:	b2db      	uxtb	r3, r3
 8003560:	e023      	b.n	80035aa <HAL_TIM_IC_Start_IT+0x62>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b04      	cmp	r3, #4
 8003566:	d104      	bne.n	8003572 <HAL_TIM_IC_Start_IT+0x2a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800356e:	b2db      	uxtb	r3, r3
 8003570:	e01b      	b.n	80035aa <HAL_TIM_IC_Start_IT+0x62>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d104      	bne.n	8003582 <HAL_TIM_IC_Start_IT+0x3a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800357e:	b2db      	uxtb	r3, r3
 8003580:	e013      	b.n	80035aa <HAL_TIM_IC_Start_IT+0x62>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b0c      	cmp	r3, #12
 8003586:	d104      	bne.n	8003592 <HAL_TIM_IC_Start_IT+0x4a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358e:	b2db      	uxtb	r3, r3
 8003590:	e00b      	b.n	80035aa <HAL_TIM_IC_Start_IT+0x62>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b10      	cmp	r3, #16
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_IC_Start_IT+0x5a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	e003      	b.n	80035aa <HAL_TIM_IC_Start_IT+0x62>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <HAL_TIM_IC_Start_IT+0x74>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	e013      	b.n	80035e4 <HAL_TIM_IC_Start_IT+0x9c>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d104      	bne.n	80035cc <HAL_TIM_IC_Start_IT+0x84>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e00b      	b.n	80035e4 <HAL_TIM_IC_Start_IT+0x9c>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d104      	bne.n	80035dc <HAL_TIM_IC_Start_IT+0x94>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e003      	b.n	80035e4 <HAL_TIM_IC_Start_IT+0x9c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d102      	bne.n	80035f2 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80035ec:	7bbb      	ldrb	r3, [r7, #14]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d001      	beq.n	80035f6 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0dd      	b.n	80037b2 <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d104      	bne.n	8003606 <HAL_TIM_IC_Start_IT+0xbe>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003604:	e023      	b.n	800364e <HAL_TIM_IC_Start_IT+0x106>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d104      	bne.n	8003616 <HAL_TIM_IC_Start_IT+0xce>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003614:	e01b      	b.n	800364e <HAL_TIM_IC_Start_IT+0x106>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b08      	cmp	r3, #8
 800361a:	d104      	bne.n	8003626 <HAL_TIM_IC_Start_IT+0xde>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003624:	e013      	b.n	800364e <HAL_TIM_IC_Start_IT+0x106>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b0c      	cmp	r3, #12
 800362a:	d104      	bne.n	8003636 <HAL_TIM_IC_Start_IT+0xee>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003634:	e00b      	b.n	800364e <HAL_TIM_IC_Start_IT+0x106>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b10      	cmp	r3, #16
 800363a:	d104      	bne.n	8003646 <HAL_TIM_IC_Start_IT+0xfe>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003644:	e003      	b.n	800364e <HAL_TIM_IC_Start_IT+0x106>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d104      	bne.n	800365e <HAL_TIM_IC_Start_IT+0x116>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800365c:	e013      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x13e>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d104      	bne.n	800366e <HAL_TIM_IC_Start_IT+0x126>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800366c:	e00b      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x13e>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b08      	cmp	r3, #8
 8003672:	d104      	bne.n	800367e <HAL_TIM_IC_Start_IT+0x136>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800367c:	e003      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x13e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b0c      	cmp	r3, #12
 800368a:	d841      	bhi.n	8003710 <HAL_TIM_IC_Start_IT+0x1c8>
 800368c:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <HAL_TIM_IC_Start_IT+0x14c>)
 800368e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003692:	bf00      	nop
 8003694:	080036c9 	.word	0x080036c9
 8003698:	08003711 	.word	0x08003711
 800369c:	08003711 	.word	0x08003711
 80036a0:	08003711 	.word	0x08003711
 80036a4:	080036db 	.word	0x080036db
 80036a8:	08003711 	.word	0x08003711
 80036ac:	08003711 	.word	0x08003711
 80036b0:	08003711 	.word	0x08003711
 80036b4:	080036ed 	.word	0x080036ed
 80036b8:	08003711 	.word	0x08003711
 80036bc:	08003711 	.word	0x08003711
 80036c0:	08003711 	.word	0x08003711
 80036c4:	080036ff 	.word	0x080036ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0202 	orr.w	r2, r2, #2
 80036d6:	60da      	str	r2, [r3, #12]
      break;
 80036d8:	e01b      	b.n	8003712 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0204 	orr.w	r2, r2, #4
 80036e8:	60da      	str	r2, [r3, #12]
      break;
 80036ea:	e012      	b.n	8003712 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0208 	orr.w	r2, r2, #8
 80036fa:	60da      	str	r2, [r3, #12]
      break;
 80036fc:	e009      	b.n	8003712 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0210 	orr.w	r2, r2, #16
 800370c:	60da      	str	r2, [r3, #12]
      break;
 800370e:	e000      	b.n	8003712 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8003710:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2201      	movs	r2, #1
 8003718:	6839      	ldr	r1, [r7, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fe66 	bl	80043ec <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a25      	ldr	r2, [pc, #148]	; (80037bc <HAL_TIM_IC_Start_IT+0x274>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d022      	beq.n	8003770 <HAL_TIM_IC_Start_IT+0x228>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003732:	d01d      	beq.n	8003770 <HAL_TIM_IC_Start_IT+0x228>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a21      	ldr	r2, [pc, #132]	; (80037c0 <HAL_TIM_IC_Start_IT+0x278>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d018      	beq.n	8003770 <HAL_TIM_IC_Start_IT+0x228>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a20      	ldr	r2, [pc, #128]	; (80037c4 <HAL_TIM_IC_Start_IT+0x27c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d013      	beq.n	8003770 <HAL_TIM_IC_Start_IT+0x228>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <HAL_TIM_IC_Start_IT+0x280>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00e      	beq.n	8003770 <HAL_TIM_IC_Start_IT+0x228>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <HAL_TIM_IC_Start_IT+0x284>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d009      	beq.n	8003770 <HAL_TIM_IC_Start_IT+0x228>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1b      	ldr	r2, [pc, #108]	; (80037d0 <HAL_TIM_IC_Start_IT+0x288>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d004      	beq.n	8003770 <HAL_TIM_IC_Start_IT+0x228>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1a      	ldr	r2, [pc, #104]	; (80037d4 <HAL_TIM_IC_Start_IT+0x28c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d115      	bne.n	800379c <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <HAL_TIM_IC_Start_IT+0x290>)
 8003778:	4013      	ands	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b06      	cmp	r3, #6
 8003780:	d015      	beq.n	80037ae <HAL_TIM_IC_Start_IT+0x266>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d011      	beq.n	80037ae <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0201 	orr.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379a:	e008      	b.n	80037ae <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e000      	b.n	80037b0 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40000400 	.word	0x40000400
 80037c4:	40000800 	.word	0x40000800
 80037c8:	40000c00 	.word	0x40000c00
 80037cc:	40010400 	.word	0x40010400
 80037d0:	40014000 	.word	0x40014000
 80037d4:	40001800 	.word	0x40001800
 80037d8:	00010007 	.word	0x00010007

080037dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0202 	mvn.w	r2, #2
 8003808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd fb66 	bl	8000ef0 <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fad6 	bl	8003dd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fadd 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0204 	mvn.w	r2, #4
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd fb3c 	bl	8000ef0 <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 faac 	bl	8003dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fab3 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b08      	cmp	r3, #8
 8003898:	d122      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d11b      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0208 	mvn.w	r2, #8
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2204      	movs	r2, #4
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fb12 	bl	8000ef0 <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa82 	bl	8003dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fa89 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d122      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d11b      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0210 	mvn.w	r2, #16
 8003904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2208      	movs	r2, #8
 800390a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd fae8 	bl	8000ef0 <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fa58 	bl	8003dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fa5f 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0201 	mvn.w	r2, #1
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fa32 	bl	8003dc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fdee 	bl	8004568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800399a:	d10e      	bne.n	80039ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b80      	cmp	r3, #128	; 0x80
 80039a8:	d107      	bne.n	80039ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fde1 	bl	800457c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d10e      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d107      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fa0d 	bl	8003e00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d10e      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d107      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f06f 0220 	mvn.w	r2, #32
 8003a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fda1 	bl	8004554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e082      	b.n	8003b3a <HAL_TIM_IC_ConfigChannel+0x120>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d11b      	bne.n	8003a7a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6819      	ldr	r1, [r3, #0]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f000 fb07 	bl	8004064 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 020c 	bic.w	r2, r2, #12
 8003a64:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6999      	ldr	r1, [r3, #24]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	619a      	str	r2, [r3, #24]
 8003a78:	e05a      	b.n	8003b30 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d11c      	bne.n	8003aba <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6819      	ldr	r1, [r3, #0]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f000 fb8b 	bl	80041aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003aa2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6999      	ldr	r1, [r3, #24]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	021a      	lsls	r2, r3, #8
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	619a      	str	r2, [r3, #24]
 8003ab8:	e03a      	b.n	8003b30 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d11b      	bne.n	8003af8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	6819      	ldr	r1, [r3, #0]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f000 fbd8 	bl	8004284 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 020c 	bic.w	r2, r2, #12
 8003ae2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69d9      	ldr	r1, [r3, #28]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	61da      	str	r2, [r3, #28]
 8003af6:	e01b      	b.n	8003b30 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	6819      	ldr	r1, [r3, #0]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f000 fbf8 	bl	80042fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69da      	ldr	r2, [r3, #28]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b1a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69d9      	ldr	r1, [r3, #28]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	021a      	lsls	r2, r3, #8
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_TIM_ConfigClockSource+0x18>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e0a6      	b.n	8003caa <HAL_TIM_ConfigClockSource+0x166>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4b4f      	ldr	r3, [pc, #316]	; (8003cb4 <HAL_TIM_ConfigClockSource+0x170>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b40      	cmp	r3, #64	; 0x40
 8003b92:	d067      	beq.n	8003c64 <HAL_TIM_ConfigClockSource+0x120>
 8003b94:	2b40      	cmp	r3, #64	; 0x40
 8003b96:	d80b      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x6c>
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d073      	beq.n	8003c84 <HAL_TIM_ConfigClockSource+0x140>
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d802      	bhi.n	8003ba6 <HAL_TIM_ConfigClockSource+0x62>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d06f      	beq.n	8003c84 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ba4:	e078      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d06c      	beq.n	8003c84 <HAL_TIM_ConfigClockSource+0x140>
 8003baa:	2b30      	cmp	r3, #48	; 0x30
 8003bac:	d06a      	beq.n	8003c84 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003bae:	e073      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bb0:	2b70      	cmp	r3, #112	; 0x70
 8003bb2:	d00d      	beq.n	8003bd0 <HAL_TIM_ConfigClockSource+0x8c>
 8003bb4:	2b70      	cmp	r3, #112	; 0x70
 8003bb6:	d804      	bhi.n	8003bc2 <HAL_TIM_ConfigClockSource+0x7e>
 8003bb8:	2b50      	cmp	r3, #80	; 0x50
 8003bba:	d033      	beq.n	8003c24 <HAL_TIM_ConfigClockSource+0xe0>
 8003bbc:	2b60      	cmp	r3, #96	; 0x60
 8003bbe:	d041      	beq.n	8003c44 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003bc0:	e06a      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	d066      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x152>
 8003bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bcc:	d017      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003bce:	e063      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6899      	ldr	r1, [r3, #8]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f000 fbe4 	bl	80043ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bf2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	609a      	str	r2, [r3, #8]
      break;
 8003bfc:	e04c      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6899      	ldr	r1, [r3, #8]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f000 fbcd 	bl	80043ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c20:	609a      	str	r2, [r3, #8]
      break;
 8003c22:	e039      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	461a      	mov	r2, r3
 8003c32:	f000 fa8b 	bl	800414c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2150      	movs	r1, #80	; 0x50
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fb9a 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 8003c42:	e029      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	6859      	ldr	r1, [r3, #4]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	461a      	mov	r2, r3
 8003c52:	f000 fae7 	bl	8004224 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2160      	movs	r1, #96	; 0x60
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fb8a 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 8003c62:	e019      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	461a      	mov	r2, r3
 8003c72:	f000 fa6b 	bl	800414c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2140      	movs	r1, #64	; 0x40
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fb7a 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 8003c82:	e009      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f000 fb71 	bl	8004376 <TIM_ITRx_SetConfig>
        break;
 8003c94:	e000      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	fffeff88 	.word	0xfffeff88

08003cb8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e031      	b.n	8003d34 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003ce0:	6839      	ldr	r1, [r7, #0]
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f936 	bl	8003f54 <TIM_SlaveTimer_SetConfig>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e018      	b.n	8003d34 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d10:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d20:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b0c      	cmp	r3, #12
 8003d4e:	d831      	bhi.n	8003db4 <HAL_TIM_ReadCapturedValue+0x78>
 8003d50:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d56:	bf00      	nop
 8003d58:	08003d8d 	.word	0x08003d8d
 8003d5c:	08003db5 	.word	0x08003db5
 8003d60:	08003db5 	.word	0x08003db5
 8003d64:	08003db5 	.word	0x08003db5
 8003d68:	08003d97 	.word	0x08003d97
 8003d6c:	08003db5 	.word	0x08003db5
 8003d70:	08003db5 	.word	0x08003db5
 8003d74:	08003db5 	.word	0x08003db5
 8003d78:	08003da1 	.word	0x08003da1
 8003d7c:	08003db5 	.word	0x08003db5
 8003d80:	08003db5 	.word	0x08003db5
 8003d84:	08003db5 	.word	0x08003db5
 8003d88:	08003dab 	.word	0x08003dab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	60fb      	str	r3, [r7, #12]

      break;
 8003d94:	e00f      	b.n	8003db6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	60fb      	str	r3, [r7, #12]

      break;
 8003d9e:	e00a      	b.n	8003db6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da6:	60fb      	str	r3, [r7, #12]

      break;
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	60fb      	str	r3, [r7, #12]

      break;
 8003db2:	e000      	b.n	8003db6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003db4:	bf00      	nop
  }

  return tmpreg;
 8003db6:	68fb      	ldr	r3, [r7, #12]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a40      	ldr	r2, [pc, #256]	; (8003f28 <TIM_Base_SetConfig+0x114>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e32:	d00f      	beq.n	8003e54 <TIM_Base_SetConfig+0x40>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a3d      	ldr	r2, [pc, #244]	; (8003f2c <TIM_Base_SetConfig+0x118>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00b      	beq.n	8003e54 <TIM_Base_SetConfig+0x40>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a3c      	ldr	r2, [pc, #240]	; (8003f30 <TIM_Base_SetConfig+0x11c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d007      	beq.n	8003e54 <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a3b      	ldr	r2, [pc, #236]	; (8003f34 <TIM_Base_SetConfig+0x120>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3a      	ldr	r2, [pc, #232]	; (8003f38 <TIM_Base_SetConfig+0x124>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d108      	bne.n	8003e66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2f      	ldr	r2, [pc, #188]	; (8003f28 <TIM_Base_SetConfig+0x114>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d02b      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e74:	d027      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a2c      	ldr	r2, [pc, #176]	; (8003f2c <TIM_Base_SetConfig+0x118>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d023      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <TIM_Base_SetConfig+0x11c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01f      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a2a      	ldr	r2, [pc, #168]	; (8003f34 <TIM_Base_SetConfig+0x120>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01b      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a29      	ldr	r2, [pc, #164]	; (8003f38 <TIM_Base_SetConfig+0x124>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d017      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a28      	ldr	r2, [pc, #160]	; (8003f3c <TIM_Base_SetConfig+0x128>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a27      	ldr	r2, [pc, #156]	; (8003f40 <TIM_Base_SetConfig+0x12c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00f      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a26      	ldr	r2, [pc, #152]	; (8003f44 <TIM_Base_SetConfig+0x130>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00b      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a25      	ldr	r2, [pc, #148]	; (8003f48 <TIM_Base_SetConfig+0x134>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d007      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a24      	ldr	r2, [pc, #144]	; (8003f4c <TIM_Base_SetConfig+0x138>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d003      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a23      	ldr	r2, [pc, #140]	; (8003f50 <TIM_Base_SetConfig+0x13c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d108      	bne.n	8003ed8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <TIM_Base_SetConfig+0x114>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d003      	beq.n	8003f0c <TIM_Base_SetConfig+0xf8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a0c      	ldr	r2, [pc, #48]	; (8003f38 <TIM_Base_SetConfig+0x124>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d103      	bne.n	8003f14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	615a      	str	r2, [r3, #20]
}
 8003f1a:	bf00      	nop
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800
 8003f34:	40000c00 	.word	0x40000c00
 8003f38:	40010400 	.word	0x40010400
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	40014400 	.word	0x40014400
 8003f44:	40014800 	.word	0x40014800
 8003f48:	40001800 	.word	0x40001800
 8003f4c:	40001c00 	.word	0x40001c00
 8003f50:	40002000 	.word	0x40002000

08003f54 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4b39      	ldr	r3, [pc, #228]	; (8004060 <TIM_SlaveTimer_SetConfig+0x10c>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b30      	cmp	r3, #48	; 0x30
 8003f98:	d05c      	beq.n	8004054 <TIM_SlaveTimer_SetConfig+0x100>
 8003f9a:	2b30      	cmp	r3, #48	; 0x30
 8003f9c:	d806      	bhi.n	8003fac <TIM_SlaveTimer_SetConfig+0x58>
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d058      	beq.n	8004054 <TIM_SlaveTimer_SetConfig+0x100>
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d056      	beq.n	8004054 <TIM_SlaveTimer_SetConfig+0x100>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d054      	beq.n	8004054 <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003faa:	e054      	b.n	8004056 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003fac:	2b50      	cmp	r3, #80	; 0x50
 8003fae:	d03d      	beq.n	800402c <TIM_SlaveTimer_SetConfig+0xd8>
 8003fb0:	2b50      	cmp	r3, #80	; 0x50
 8003fb2:	d802      	bhi.n	8003fba <TIM_SlaveTimer_SetConfig+0x66>
 8003fb4:	2b40      	cmp	r3, #64	; 0x40
 8003fb6:	d010      	beq.n	8003fda <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8003fb8:	e04d      	b.n	8004056 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003fba:	2b60      	cmp	r3, #96	; 0x60
 8003fbc:	d040      	beq.n	8004040 <TIM_SlaveTimer_SetConfig+0xec>
 8003fbe:	2b70      	cmp	r3, #112	; 0x70
 8003fc0:	d000      	beq.n	8003fc4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8003fc2:	e048      	b.n	8004056 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68d9      	ldr	r1, [r3, #12]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f000 f9ea 	bl	80043ac <TIM_ETR_SetConfig>
      break;
 8003fd8:	e03d      	b.n	8004056 <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d101      	bne.n	8003fe6 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e038      	b.n	8004058 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a1a      	ldr	r2, [r3, #32]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0201 	bic.w	r2, r2, #1
 8003ffc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	621a      	str	r2, [r3, #32]
      break;
 800402a:	e014      	b.n	8004056 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6899      	ldr	r1, [r3, #8]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	461a      	mov	r2, r3
 800403a:	f000 f887 	bl	800414c <TIM_TI1_ConfigInputStage>
      break;
 800403e:	e00a      	b.n	8004056 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6899      	ldr	r1, [r3, #8]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	461a      	mov	r2, r3
 800404e:	f000 f8e9 	bl	8004224 <TIM_TI2_ConfigInputStage>
      break;
 8004052:	e000      	b.n	8004056 <TIM_SlaveTimer_SetConfig+0x102>
        break;
 8004054:	bf00      	nop
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	fffefff8 	.word	0xfffefff8

08004064 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f023 0201 	bic.w	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4a28      	ldr	r2, [pc, #160]	; (8004130 <TIM_TI1_SetConfig+0xcc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01b      	beq.n	80040ca <TIM_TI1_SetConfig+0x66>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004098:	d017      	beq.n	80040ca <TIM_TI1_SetConfig+0x66>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a25      	ldr	r2, [pc, #148]	; (8004134 <TIM_TI1_SetConfig+0xd0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <TIM_TI1_SetConfig+0x66>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4a24      	ldr	r2, [pc, #144]	; (8004138 <TIM_TI1_SetConfig+0xd4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00f      	beq.n	80040ca <TIM_TI1_SetConfig+0x66>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a23      	ldr	r2, [pc, #140]	; (800413c <TIM_TI1_SetConfig+0xd8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_TI1_SetConfig+0x66>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4a22      	ldr	r2, [pc, #136]	; (8004140 <TIM_TI1_SetConfig+0xdc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_TI1_SetConfig+0x66>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4a21      	ldr	r2, [pc, #132]	; (8004144 <TIM_TI1_SetConfig+0xe0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_TI1_SetConfig+0x66>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a20      	ldr	r2, [pc, #128]	; (8004148 <TIM_TI1_SetConfig+0xe4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d101      	bne.n	80040ce <TIM_TI1_SetConfig+0x6a>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <TIM_TI1_SetConfig+0x6c>
 80040ce:	2300      	movs	r3, #0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	e003      	b.n	80040ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f023 030a 	bic.w	r3, r3, #10
 8004108:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f003 030a 	and.w	r3, r3, #10
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40010400 	.word	0x40010400
 8004144:	40014000 	.word	0x40014000
 8004148:	40001800 	.word	0x40001800

0800414c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f023 030a 	bic.w	r3, r3, #10
 8004188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	621a      	str	r2, [r3, #32]
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b087      	sub	sp, #28
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f023 0210 	bic.w	r2, r3, #16
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	031b      	lsls	r3, r3, #12
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	f023 0210 	bic.w	r2, r3, #16
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800424e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	031b      	lsls	r3, r3, #12
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	621a      	str	r2, [r3, #32]
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 0303 	bic.w	r3, r3, #3
 80042b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80042d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	621a      	str	r2, [r3, #32]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004328:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800433a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	031b      	lsls	r3, r3, #12
 8004340:	b29b      	uxth	r3, r3
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800434e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	031b      	lsls	r3, r3, #12
 8004354:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	f043 0307 	orr.w	r3, r3, #7
 8004398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	609a      	str	r2, [r3, #8]
}
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	021a      	lsls	r2, r3, #8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	609a      	str	r2, [r3, #8]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	2201      	movs	r2, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a1a      	ldr	r2, [r3, #32]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	43db      	mvns	r3, r3
 800440e:	401a      	ands	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	fa01 f303 	lsl.w	r3, r1, r3
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800444c:	2302      	movs	r3, #2
 800444e:	e06d      	b.n	800452c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a30      	ldr	r2, [pc, #192]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a2f      	ldr	r2, [pc, #188]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d108      	bne.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800448a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a20      	ldr	r2, [pc, #128]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d022      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c2:	d01d      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d018      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1c      	ldr	r2, [pc, #112]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d013      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1a      	ldr	r2, [pc, #104]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00e      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a15      	ldr	r2, [pc, #84]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d009      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a16      	ldr	r2, [pc, #88]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d004      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d10c      	bne.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004506:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	4313      	orrs	r3, r2
 8004510:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40010000 	.word	0x40010000
 800453c:	40010400 	.word	0x40010400
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00
 800454c:	40014000 	.word	0x40014000
 8004550:	40001800 	.word	0x40001800

08004554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <__libc_init_array>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4e0d      	ldr	r6, [pc, #52]	; (80045c8 <__libc_init_array+0x38>)
 8004594:	4c0d      	ldr	r4, [pc, #52]	; (80045cc <__libc_init_array+0x3c>)
 8004596:	1ba4      	subs	r4, r4, r6
 8004598:	10a4      	asrs	r4, r4, #2
 800459a:	2500      	movs	r5, #0
 800459c:	42a5      	cmp	r5, r4
 800459e:	d109      	bne.n	80045b4 <__libc_init_array+0x24>
 80045a0:	4e0b      	ldr	r6, [pc, #44]	; (80045d0 <__libc_init_array+0x40>)
 80045a2:	4c0c      	ldr	r4, [pc, #48]	; (80045d4 <__libc_init_array+0x44>)
 80045a4:	f001 f832 	bl	800560c <_init>
 80045a8:	1ba4      	subs	r4, r4, r6
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	2500      	movs	r5, #0
 80045ae:	42a5      	cmp	r5, r4
 80045b0:	d105      	bne.n	80045be <__libc_init_array+0x2e>
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045b8:	4798      	blx	r3
 80045ba:	3501      	adds	r5, #1
 80045bc:	e7ee      	b.n	800459c <__libc_init_array+0xc>
 80045be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045c2:	4798      	blx	r3
 80045c4:	3501      	adds	r5, #1
 80045c6:	e7f2      	b.n	80045ae <__libc_init_array+0x1e>
 80045c8:	08005820 	.word	0x08005820
 80045cc:	08005820 	.word	0x08005820
 80045d0:	08005820 	.word	0x08005820
 80045d4:	08005824 	.word	0x08005824

080045d8 <memset>:
 80045d8:	4402      	add	r2, r0
 80045da:	4603      	mov	r3, r0
 80045dc:	4293      	cmp	r3, r2
 80045de:	d100      	bne.n	80045e2 <memset+0xa>
 80045e0:	4770      	bx	lr
 80045e2:	f803 1b01 	strb.w	r1, [r3], #1
 80045e6:	e7f9      	b.n	80045dc <memset+0x4>

080045e8 <sin>:
 80045e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80045ea:	ec51 0b10 	vmov	r0, r1, d0
 80045ee:	4a20      	ldr	r2, [pc, #128]	; (8004670 <sin+0x88>)
 80045f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80045f4:	4293      	cmp	r3, r2
 80045f6:	dc07      	bgt.n	8004608 <sin+0x20>
 80045f8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004668 <sin+0x80>
 80045fc:	2000      	movs	r0, #0
 80045fe:	f000 fe37 	bl	8005270 <__kernel_sin>
 8004602:	ec51 0b10 	vmov	r0, r1, d0
 8004606:	e007      	b.n	8004618 <sin+0x30>
 8004608:	4a1a      	ldr	r2, [pc, #104]	; (8004674 <sin+0x8c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	dd09      	ble.n	8004622 <sin+0x3a>
 800460e:	ee10 2a10 	vmov	r2, s0
 8004612:	460b      	mov	r3, r1
 8004614:	f7fb fdfc 	bl	8000210 <__aeabi_dsub>
 8004618:	ec41 0b10 	vmov	d0, r0, r1
 800461c:	b005      	add	sp, #20
 800461e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004622:	4668      	mov	r0, sp
 8004624:	f000 f828 	bl	8004678 <__ieee754_rem_pio2>
 8004628:	f000 0003 	and.w	r0, r0, #3
 800462c:	2801      	cmp	r0, #1
 800462e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004632:	ed9d 0b00 	vldr	d0, [sp]
 8004636:	d004      	beq.n	8004642 <sin+0x5a>
 8004638:	2802      	cmp	r0, #2
 800463a:	d005      	beq.n	8004648 <sin+0x60>
 800463c:	b970      	cbnz	r0, 800465c <sin+0x74>
 800463e:	2001      	movs	r0, #1
 8004640:	e7dd      	b.n	80045fe <sin+0x16>
 8004642:	f000 fa0d 	bl	8004a60 <__kernel_cos>
 8004646:	e7dc      	b.n	8004602 <sin+0x1a>
 8004648:	2001      	movs	r0, #1
 800464a:	f000 fe11 	bl	8005270 <__kernel_sin>
 800464e:	ec53 2b10 	vmov	r2, r3, d0
 8004652:	ee10 0a10 	vmov	r0, s0
 8004656:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800465a:	e7dd      	b.n	8004618 <sin+0x30>
 800465c:	f000 fa00 	bl	8004a60 <__kernel_cos>
 8004660:	e7f5      	b.n	800464e <sin+0x66>
 8004662:	bf00      	nop
 8004664:	f3af 8000 	nop.w
	...
 8004670:	3fe921fb 	.word	0x3fe921fb
 8004674:	7fefffff 	.word	0x7fefffff

08004678 <__ieee754_rem_pio2>:
 8004678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467c:	ec57 6b10 	vmov	r6, r7, d0
 8004680:	4bc3      	ldr	r3, [pc, #780]	; (8004990 <__ieee754_rem_pio2+0x318>)
 8004682:	b08d      	sub	sp, #52	; 0x34
 8004684:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004688:	4598      	cmp	r8, r3
 800468a:	4604      	mov	r4, r0
 800468c:	9704      	str	r7, [sp, #16]
 800468e:	dc07      	bgt.n	80046a0 <__ieee754_rem_pio2+0x28>
 8004690:	2200      	movs	r2, #0
 8004692:	2300      	movs	r3, #0
 8004694:	ed84 0b00 	vstr	d0, [r4]
 8004698:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800469c:	2500      	movs	r5, #0
 800469e:	e027      	b.n	80046f0 <__ieee754_rem_pio2+0x78>
 80046a0:	4bbc      	ldr	r3, [pc, #752]	; (8004994 <__ieee754_rem_pio2+0x31c>)
 80046a2:	4598      	cmp	r8, r3
 80046a4:	dc75      	bgt.n	8004792 <__ieee754_rem_pio2+0x11a>
 80046a6:	9b04      	ldr	r3, [sp, #16]
 80046a8:	4dbb      	ldr	r5, [pc, #748]	; (8004998 <__ieee754_rem_pio2+0x320>)
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	ee10 0a10 	vmov	r0, s0
 80046b0:	a3a9      	add	r3, pc, #676	; (adr r3, 8004958 <__ieee754_rem_pio2+0x2e0>)
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	4639      	mov	r1, r7
 80046b8:	dd36      	ble.n	8004728 <__ieee754_rem_pio2+0xb0>
 80046ba:	f7fb fda9 	bl	8000210 <__aeabi_dsub>
 80046be:	45a8      	cmp	r8, r5
 80046c0:	4606      	mov	r6, r0
 80046c2:	460f      	mov	r7, r1
 80046c4:	d018      	beq.n	80046f8 <__ieee754_rem_pio2+0x80>
 80046c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004960 <__ieee754_rem_pio2+0x2e8>)
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f7fb fda0 	bl	8000210 <__aeabi_dsub>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	e9c4 2300 	strd	r2, r3, [r4]
 80046d8:	4630      	mov	r0, r6
 80046da:	4639      	mov	r1, r7
 80046dc:	f7fb fd98 	bl	8000210 <__aeabi_dsub>
 80046e0:	a39f      	add	r3, pc, #636	; (adr r3, 8004960 <__ieee754_rem_pio2+0x2e8>)
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f7fb fd93 	bl	8000210 <__aeabi_dsub>
 80046ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80046ee:	2501      	movs	r5, #1
 80046f0:	4628      	mov	r0, r5
 80046f2:	b00d      	add	sp, #52	; 0x34
 80046f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f8:	a39b      	add	r3, pc, #620	; (adr r3, 8004968 <__ieee754_rem_pio2+0x2f0>)
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f7fb fd87 	bl	8000210 <__aeabi_dsub>
 8004702:	a39b      	add	r3, pc, #620	; (adr r3, 8004970 <__ieee754_rem_pio2+0x2f8>)
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	4606      	mov	r6, r0
 800470a:	460f      	mov	r7, r1
 800470c:	f7fb fd80 	bl	8000210 <__aeabi_dsub>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	e9c4 2300 	strd	r2, r3, [r4]
 8004718:	4630      	mov	r0, r6
 800471a:	4639      	mov	r1, r7
 800471c:	f7fb fd78 	bl	8000210 <__aeabi_dsub>
 8004720:	a393      	add	r3, pc, #588	; (adr r3, 8004970 <__ieee754_rem_pio2+0x2f8>)
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	e7de      	b.n	80046e6 <__ieee754_rem_pio2+0x6e>
 8004728:	f7fb fd74 	bl	8000214 <__adddf3>
 800472c:	45a8      	cmp	r8, r5
 800472e:	4606      	mov	r6, r0
 8004730:	460f      	mov	r7, r1
 8004732:	d016      	beq.n	8004762 <__ieee754_rem_pio2+0xea>
 8004734:	a38a      	add	r3, pc, #552	; (adr r3, 8004960 <__ieee754_rem_pio2+0x2e8>)
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	f7fb fd6b 	bl	8000214 <__adddf3>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	e9c4 2300 	strd	r2, r3, [r4]
 8004746:	4630      	mov	r0, r6
 8004748:	4639      	mov	r1, r7
 800474a:	f7fb fd61 	bl	8000210 <__aeabi_dsub>
 800474e:	a384      	add	r3, pc, #528	; (adr r3, 8004960 <__ieee754_rem_pio2+0x2e8>)
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	f7fb fd5e 	bl	8000214 <__adddf3>
 8004758:	f04f 35ff 	mov.w	r5, #4294967295
 800475c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004760:	e7c6      	b.n	80046f0 <__ieee754_rem_pio2+0x78>
 8004762:	a381      	add	r3, pc, #516	; (adr r3, 8004968 <__ieee754_rem_pio2+0x2f0>)
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f7fb fd54 	bl	8000214 <__adddf3>
 800476c:	a380      	add	r3, pc, #512	; (adr r3, 8004970 <__ieee754_rem_pio2+0x2f8>)
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	4606      	mov	r6, r0
 8004774:	460f      	mov	r7, r1
 8004776:	f7fb fd4d 	bl	8000214 <__adddf3>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	e9c4 2300 	strd	r2, r3, [r4]
 8004782:	4630      	mov	r0, r6
 8004784:	4639      	mov	r1, r7
 8004786:	f7fb fd43 	bl	8000210 <__aeabi_dsub>
 800478a:	a379      	add	r3, pc, #484	; (adr r3, 8004970 <__ieee754_rem_pio2+0x2f8>)
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	e7e0      	b.n	8004754 <__ieee754_rem_pio2+0xdc>
 8004792:	4b82      	ldr	r3, [pc, #520]	; (800499c <__ieee754_rem_pio2+0x324>)
 8004794:	4598      	cmp	r8, r3
 8004796:	f300 80d0 	bgt.w	800493a <__ieee754_rem_pio2+0x2c2>
 800479a:	f000 fe23 	bl	80053e4 <fabs>
 800479e:	ec57 6b10 	vmov	r6, r7, d0
 80047a2:	ee10 0a10 	vmov	r0, s0
 80047a6:	a374      	add	r3, pc, #464	; (adr r3, 8004978 <__ieee754_rem_pio2+0x300>)
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	4639      	mov	r1, r7
 80047ae:	f7fb fee7 	bl	8000580 <__aeabi_dmul>
 80047b2:	2200      	movs	r2, #0
 80047b4:	4b7a      	ldr	r3, [pc, #488]	; (80049a0 <__ieee754_rem_pio2+0x328>)
 80047b6:	f7fb fd2d 	bl	8000214 <__adddf3>
 80047ba:	f7fc f97b 	bl	8000ab4 <__aeabi_d2iz>
 80047be:	4605      	mov	r5, r0
 80047c0:	f7fb fe74 	bl	80004ac <__aeabi_i2d>
 80047c4:	a364      	add	r3, pc, #400	; (adr r3, 8004958 <__ieee754_rem_pio2+0x2e0>)
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047ce:	f7fb fed7 	bl	8000580 <__aeabi_dmul>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4630      	mov	r0, r6
 80047d8:	4639      	mov	r1, r7
 80047da:	f7fb fd19 	bl	8000210 <__aeabi_dsub>
 80047de:	a360      	add	r3, pc, #384	; (adr r3, 8004960 <__ieee754_rem_pio2+0x2e8>)
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	4682      	mov	sl, r0
 80047e6:	468b      	mov	fp, r1
 80047e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ec:	f7fb fec8 	bl	8000580 <__aeabi_dmul>
 80047f0:	2d1f      	cmp	r5, #31
 80047f2:	4606      	mov	r6, r0
 80047f4:	460f      	mov	r7, r1
 80047f6:	dc0c      	bgt.n	8004812 <__ieee754_rem_pio2+0x19a>
 80047f8:	1e6a      	subs	r2, r5, #1
 80047fa:	4b6a      	ldr	r3, [pc, #424]	; (80049a4 <__ieee754_rem_pio2+0x32c>)
 80047fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004800:	4543      	cmp	r3, r8
 8004802:	d006      	beq.n	8004812 <__ieee754_rem_pio2+0x19a>
 8004804:	4632      	mov	r2, r6
 8004806:	463b      	mov	r3, r7
 8004808:	4650      	mov	r0, sl
 800480a:	4659      	mov	r1, fp
 800480c:	f7fb fd00 	bl	8000210 <__aeabi_dsub>
 8004810:	e00e      	b.n	8004830 <__ieee754_rem_pio2+0x1b8>
 8004812:	4632      	mov	r2, r6
 8004814:	463b      	mov	r3, r7
 8004816:	4650      	mov	r0, sl
 8004818:	4659      	mov	r1, fp
 800481a:	f7fb fcf9 	bl	8000210 <__aeabi_dsub>
 800481e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004822:	9305      	str	r3, [sp, #20]
 8004824:	9a05      	ldr	r2, [sp, #20]
 8004826:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b10      	cmp	r3, #16
 800482e:	dc02      	bgt.n	8004836 <__ieee754_rem_pio2+0x1be>
 8004830:	e9c4 0100 	strd	r0, r1, [r4]
 8004834:	e039      	b.n	80048aa <__ieee754_rem_pio2+0x232>
 8004836:	a34c      	add	r3, pc, #304	; (adr r3, 8004968 <__ieee754_rem_pio2+0x2f0>)
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004840:	f7fb fe9e 	bl	8000580 <__aeabi_dmul>
 8004844:	4606      	mov	r6, r0
 8004846:	460f      	mov	r7, r1
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4650      	mov	r0, sl
 800484e:	4659      	mov	r1, fp
 8004850:	f7fb fcde 	bl	8000210 <__aeabi_dsub>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4680      	mov	r8, r0
 800485a:	4689      	mov	r9, r1
 800485c:	4650      	mov	r0, sl
 800485e:	4659      	mov	r1, fp
 8004860:	f7fb fcd6 	bl	8000210 <__aeabi_dsub>
 8004864:	4632      	mov	r2, r6
 8004866:	463b      	mov	r3, r7
 8004868:	f7fb fcd2 	bl	8000210 <__aeabi_dsub>
 800486c:	a340      	add	r3, pc, #256	; (adr r3, 8004970 <__ieee754_rem_pio2+0x2f8>)
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	4606      	mov	r6, r0
 8004874:	460f      	mov	r7, r1
 8004876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800487a:	f7fb fe81 	bl	8000580 <__aeabi_dmul>
 800487e:	4632      	mov	r2, r6
 8004880:	463b      	mov	r3, r7
 8004882:	f7fb fcc5 	bl	8000210 <__aeabi_dsub>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4606      	mov	r6, r0
 800488c:	460f      	mov	r7, r1
 800488e:	4640      	mov	r0, r8
 8004890:	4649      	mov	r1, r9
 8004892:	f7fb fcbd 	bl	8000210 <__aeabi_dsub>
 8004896:	9a05      	ldr	r2, [sp, #20]
 8004898:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b31      	cmp	r3, #49	; 0x31
 80048a0:	dc20      	bgt.n	80048e4 <__ieee754_rem_pio2+0x26c>
 80048a2:	e9c4 0100 	strd	r0, r1, [r4]
 80048a6:	46c2      	mov	sl, r8
 80048a8:	46cb      	mov	fp, r9
 80048aa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80048ae:	4650      	mov	r0, sl
 80048b0:	4642      	mov	r2, r8
 80048b2:	464b      	mov	r3, r9
 80048b4:	4659      	mov	r1, fp
 80048b6:	f7fb fcab 	bl	8000210 <__aeabi_dsub>
 80048ba:	463b      	mov	r3, r7
 80048bc:	4632      	mov	r2, r6
 80048be:	f7fb fca7 	bl	8000210 <__aeabi_dsub>
 80048c2:	9b04      	ldr	r3, [sp, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80048ca:	f6bf af11 	bge.w	80046f0 <__ieee754_rem_pio2+0x78>
 80048ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80048d2:	6063      	str	r3, [r4, #4]
 80048d4:	f8c4 8000 	str.w	r8, [r4]
 80048d8:	60a0      	str	r0, [r4, #8]
 80048da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048de:	60e3      	str	r3, [r4, #12]
 80048e0:	426d      	negs	r5, r5
 80048e2:	e705      	b.n	80046f0 <__ieee754_rem_pio2+0x78>
 80048e4:	a326      	add	r3, pc, #152	; (adr r3, 8004980 <__ieee754_rem_pio2+0x308>)
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048ee:	f7fb fe47 	bl	8000580 <__aeabi_dmul>
 80048f2:	4606      	mov	r6, r0
 80048f4:	460f      	mov	r7, r1
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4640      	mov	r0, r8
 80048fc:	4649      	mov	r1, r9
 80048fe:	f7fb fc87 	bl	8000210 <__aeabi_dsub>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4682      	mov	sl, r0
 8004908:	468b      	mov	fp, r1
 800490a:	4640      	mov	r0, r8
 800490c:	4649      	mov	r1, r9
 800490e:	f7fb fc7f 	bl	8000210 <__aeabi_dsub>
 8004912:	4632      	mov	r2, r6
 8004914:	463b      	mov	r3, r7
 8004916:	f7fb fc7b 	bl	8000210 <__aeabi_dsub>
 800491a:	a31b      	add	r3, pc, #108	; (adr r3, 8004988 <__ieee754_rem_pio2+0x310>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	4606      	mov	r6, r0
 8004922:	460f      	mov	r7, r1
 8004924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004928:	f7fb fe2a 	bl	8000580 <__aeabi_dmul>
 800492c:	4632      	mov	r2, r6
 800492e:	463b      	mov	r3, r7
 8004930:	f7fb fc6e 	bl	8000210 <__aeabi_dsub>
 8004934:	4606      	mov	r6, r0
 8004936:	460f      	mov	r7, r1
 8004938:	e764      	b.n	8004804 <__ieee754_rem_pio2+0x18c>
 800493a:	4b1b      	ldr	r3, [pc, #108]	; (80049a8 <__ieee754_rem_pio2+0x330>)
 800493c:	4598      	cmp	r8, r3
 800493e:	dd35      	ble.n	80049ac <__ieee754_rem_pio2+0x334>
 8004940:	ee10 2a10 	vmov	r2, s0
 8004944:	463b      	mov	r3, r7
 8004946:	4630      	mov	r0, r6
 8004948:	4639      	mov	r1, r7
 800494a:	f7fb fc61 	bl	8000210 <__aeabi_dsub>
 800494e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004952:	e9c4 0100 	strd	r0, r1, [r4]
 8004956:	e6a1      	b.n	800469c <__ieee754_rem_pio2+0x24>
 8004958:	54400000 	.word	0x54400000
 800495c:	3ff921fb 	.word	0x3ff921fb
 8004960:	1a626331 	.word	0x1a626331
 8004964:	3dd0b461 	.word	0x3dd0b461
 8004968:	1a600000 	.word	0x1a600000
 800496c:	3dd0b461 	.word	0x3dd0b461
 8004970:	2e037073 	.word	0x2e037073
 8004974:	3ba3198a 	.word	0x3ba3198a
 8004978:	6dc9c883 	.word	0x6dc9c883
 800497c:	3fe45f30 	.word	0x3fe45f30
 8004980:	2e000000 	.word	0x2e000000
 8004984:	3ba3198a 	.word	0x3ba3198a
 8004988:	252049c1 	.word	0x252049c1
 800498c:	397b839a 	.word	0x397b839a
 8004990:	3fe921fb 	.word	0x3fe921fb
 8004994:	4002d97b 	.word	0x4002d97b
 8004998:	3ff921fb 	.word	0x3ff921fb
 800499c:	413921fb 	.word	0x413921fb
 80049a0:	3fe00000 	.word	0x3fe00000
 80049a4:	08005640 	.word	0x08005640
 80049a8:	7fefffff 	.word	0x7fefffff
 80049ac:	ea4f 5528 	mov.w	r5, r8, asr #20
 80049b0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80049b4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80049b8:	4630      	mov	r0, r6
 80049ba:	460f      	mov	r7, r1
 80049bc:	f7fc f87a 	bl	8000ab4 <__aeabi_d2iz>
 80049c0:	f7fb fd74 	bl	80004ac <__aeabi_i2d>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4630      	mov	r0, r6
 80049ca:	4639      	mov	r1, r7
 80049cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80049d0:	f7fb fc1e 	bl	8000210 <__aeabi_dsub>
 80049d4:	2200      	movs	r2, #0
 80049d6:	4b1f      	ldr	r3, [pc, #124]	; (8004a54 <__ieee754_rem_pio2+0x3dc>)
 80049d8:	f7fb fdd2 	bl	8000580 <__aeabi_dmul>
 80049dc:	460f      	mov	r7, r1
 80049de:	4606      	mov	r6, r0
 80049e0:	f7fc f868 	bl	8000ab4 <__aeabi_d2iz>
 80049e4:	f7fb fd62 	bl	80004ac <__aeabi_i2d>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4630      	mov	r0, r6
 80049ee:	4639      	mov	r1, r7
 80049f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80049f4:	f7fb fc0c 	bl	8000210 <__aeabi_dsub>
 80049f8:	2200      	movs	r2, #0
 80049fa:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <__ieee754_rem_pio2+0x3dc>)
 80049fc:	f7fb fdc0 	bl	8000580 <__aeabi_dmul>
 8004a00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004a04:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004a08:	f04f 0803 	mov.w	r8, #3
 8004a0c:	2600      	movs	r6, #0
 8004a0e:	2700      	movs	r7, #0
 8004a10:	4632      	mov	r2, r6
 8004a12:	463b      	mov	r3, r7
 8004a14:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004a18:	f108 3aff 	add.w	sl, r8, #4294967295
 8004a1c:	f7fc f818 	bl	8000a50 <__aeabi_dcmpeq>
 8004a20:	b9b0      	cbnz	r0, 8004a50 <__ieee754_rem_pio2+0x3d8>
 8004a22:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <__ieee754_rem_pio2+0x3e0>)
 8004a24:	9301      	str	r3, [sp, #4]
 8004a26:	2302      	movs	r3, #2
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	462a      	mov	r2, r5
 8004a2c:	4643      	mov	r3, r8
 8004a2e:	4621      	mov	r1, r4
 8004a30:	a806      	add	r0, sp, #24
 8004a32:	f000 f8dd 	bl	8004bf0 <__kernel_rem_pio2>
 8004a36:	9b04      	ldr	r3, [sp, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	4605      	mov	r5, r0
 8004a3c:	f6bf ae58 	bge.w	80046f0 <__ieee754_rem_pio2+0x78>
 8004a40:	6863      	ldr	r3, [r4, #4]
 8004a42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a46:	6063      	str	r3, [r4, #4]
 8004a48:	68e3      	ldr	r3, [r4, #12]
 8004a4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a4e:	e746      	b.n	80048de <__ieee754_rem_pio2+0x266>
 8004a50:	46d0      	mov	r8, sl
 8004a52:	e7dd      	b.n	8004a10 <__ieee754_rem_pio2+0x398>
 8004a54:	41700000 	.word	0x41700000
 8004a58:	080056c0 	.word	0x080056c0
 8004a5c:	00000000 	.word	0x00000000

08004a60 <__kernel_cos>:
 8004a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a64:	ec59 8b10 	vmov	r8, r9, d0
 8004a68:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8004a6c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004a70:	ed2d 8b02 	vpush	{d8}
 8004a74:	eeb0 8a41 	vmov.f32	s16, s2
 8004a78:	eef0 8a61 	vmov.f32	s17, s3
 8004a7c:	da07      	bge.n	8004a8e <__kernel_cos+0x2e>
 8004a7e:	ee10 0a10 	vmov	r0, s0
 8004a82:	4649      	mov	r1, r9
 8004a84:	f7fc f816 	bl	8000ab4 <__aeabi_d2iz>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	f000 8089 	beq.w	8004ba0 <__kernel_cos+0x140>
 8004a8e:	4642      	mov	r2, r8
 8004a90:	464b      	mov	r3, r9
 8004a92:	4640      	mov	r0, r8
 8004a94:	4649      	mov	r1, r9
 8004a96:	f7fb fd73 	bl	8000580 <__aeabi_dmul>
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	4b4e      	ldr	r3, [pc, #312]	; (8004bd8 <__kernel_cos+0x178>)
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	460d      	mov	r5, r1
 8004aa2:	f7fb fd6d 	bl	8000580 <__aeabi_dmul>
 8004aa6:	a340      	add	r3, pc, #256	; (adr r3, 8004ba8 <__kernel_cos+0x148>)
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	4682      	mov	sl, r0
 8004aae:	468b      	mov	fp, r1
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	f7fb fd64 	bl	8000580 <__aeabi_dmul>
 8004ab8:	a33d      	add	r3, pc, #244	; (adr r3, 8004bb0 <__kernel_cos+0x150>)
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f7fb fba9 	bl	8000214 <__adddf3>
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	462b      	mov	r3, r5
 8004ac6:	f7fb fd5b 	bl	8000580 <__aeabi_dmul>
 8004aca:	a33b      	add	r3, pc, #236	; (adr r3, 8004bb8 <__kernel_cos+0x158>)
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	f7fb fb9e 	bl	8000210 <__aeabi_dsub>
 8004ad4:	4622      	mov	r2, r4
 8004ad6:	462b      	mov	r3, r5
 8004ad8:	f7fb fd52 	bl	8000580 <__aeabi_dmul>
 8004adc:	a338      	add	r3, pc, #224	; (adr r3, 8004bc0 <__kernel_cos+0x160>)
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f7fb fb97 	bl	8000214 <__adddf3>
 8004ae6:	4622      	mov	r2, r4
 8004ae8:	462b      	mov	r3, r5
 8004aea:	f7fb fd49 	bl	8000580 <__aeabi_dmul>
 8004aee:	a336      	add	r3, pc, #216	; (adr r3, 8004bc8 <__kernel_cos+0x168>)
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f7fb fb8c 	bl	8000210 <__aeabi_dsub>
 8004af8:	4622      	mov	r2, r4
 8004afa:	462b      	mov	r3, r5
 8004afc:	f7fb fd40 	bl	8000580 <__aeabi_dmul>
 8004b00:	a333      	add	r3, pc, #204	; (adr r3, 8004bd0 <__kernel_cos+0x170>)
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f7fb fb85 	bl	8000214 <__adddf3>
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	f7fb fd37 	bl	8000580 <__aeabi_dmul>
 8004b12:	4622      	mov	r2, r4
 8004b14:	462b      	mov	r3, r5
 8004b16:	f7fb fd33 	bl	8000580 <__aeabi_dmul>
 8004b1a:	ec53 2b18 	vmov	r2, r3, d8
 8004b1e:	4604      	mov	r4, r0
 8004b20:	460d      	mov	r5, r1
 8004b22:	4640      	mov	r0, r8
 8004b24:	4649      	mov	r1, r9
 8004b26:	f7fb fd2b 	bl	8000580 <__aeabi_dmul>
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4629      	mov	r1, r5
 8004b30:	4620      	mov	r0, r4
 8004b32:	f7fb fb6d 	bl	8000210 <__aeabi_dsub>
 8004b36:	4b29      	ldr	r3, [pc, #164]	; (8004bdc <__kernel_cos+0x17c>)
 8004b38:	429e      	cmp	r6, r3
 8004b3a:	4680      	mov	r8, r0
 8004b3c:	4689      	mov	r9, r1
 8004b3e:	dc11      	bgt.n	8004b64 <__kernel_cos+0x104>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4650      	mov	r0, sl
 8004b46:	4659      	mov	r1, fp
 8004b48:	f7fb fb62 	bl	8000210 <__aeabi_dsub>
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4924      	ldr	r1, [pc, #144]	; (8004be0 <__kernel_cos+0x180>)
 8004b50:	4602      	mov	r2, r0
 8004b52:	2000      	movs	r0, #0
 8004b54:	f7fb fb5c 	bl	8000210 <__aeabi_dsub>
 8004b58:	ecbd 8b02 	vpop	{d8}
 8004b5c:	ec41 0b10 	vmov	d0, r0, r1
 8004b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b64:	4b1f      	ldr	r3, [pc, #124]	; (8004be4 <__kernel_cos+0x184>)
 8004b66:	491e      	ldr	r1, [pc, #120]	; (8004be0 <__kernel_cos+0x180>)
 8004b68:	429e      	cmp	r6, r3
 8004b6a:	bfcc      	ite	gt
 8004b6c:	4d1e      	ldrgt	r5, [pc, #120]	; (8004be8 <__kernel_cos+0x188>)
 8004b6e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004b72:	2400      	movs	r4, #0
 8004b74:	4622      	mov	r2, r4
 8004b76:	462b      	mov	r3, r5
 8004b78:	2000      	movs	r0, #0
 8004b7a:	f7fb fb49 	bl	8000210 <__aeabi_dsub>
 8004b7e:	4622      	mov	r2, r4
 8004b80:	4606      	mov	r6, r0
 8004b82:	460f      	mov	r7, r1
 8004b84:	462b      	mov	r3, r5
 8004b86:	4650      	mov	r0, sl
 8004b88:	4659      	mov	r1, fp
 8004b8a:	f7fb fb41 	bl	8000210 <__aeabi_dsub>
 8004b8e:	4642      	mov	r2, r8
 8004b90:	464b      	mov	r3, r9
 8004b92:	f7fb fb3d 	bl	8000210 <__aeabi_dsub>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	e7d9      	b.n	8004b54 <__kernel_cos+0xf4>
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	490f      	ldr	r1, [pc, #60]	; (8004be0 <__kernel_cos+0x180>)
 8004ba4:	e7d8      	b.n	8004b58 <__kernel_cos+0xf8>
 8004ba6:	bf00      	nop
 8004ba8:	be8838d4 	.word	0xbe8838d4
 8004bac:	bda8fae9 	.word	0xbda8fae9
 8004bb0:	bdb4b1c4 	.word	0xbdb4b1c4
 8004bb4:	3e21ee9e 	.word	0x3e21ee9e
 8004bb8:	809c52ad 	.word	0x809c52ad
 8004bbc:	3e927e4f 	.word	0x3e927e4f
 8004bc0:	19cb1590 	.word	0x19cb1590
 8004bc4:	3efa01a0 	.word	0x3efa01a0
 8004bc8:	16c15177 	.word	0x16c15177
 8004bcc:	3f56c16c 	.word	0x3f56c16c
 8004bd0:	5555554c 	.word	0x5555554c
 8004bd4:	3fa55555 	.word	0x3fa55555
 8004bd8:	3fe00000 	.word	0x3fe00000
 8004bdc:	3fd33332 	.word	0x3fd33332
 8004be0:	3ff00000 	.word	0x3ff00000
 8004be4:	3fe90000 	.word	0x3fe90000
 8004be8:	3fd20000 	.word	0x3fd20000
 8004bec:	00000000 	.word	0x00000000

08004bf0 <__kernel_rem_pio2>:
 8004bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf4:	ed2d 8b02 	vpush	{d8}
 8004bf8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004bfc:	1ed4      	subs	r4, r2, #3
 8004bfe:	9308      	str	r3, [sp, #32]
 8004c00:	9101      	str	r1, [sp, #4]
 8004c02:	4bc5      	ldr	r3, [pc, #788]	; (8004f18 <__kernel_rem_pio2+0x328>)
 8004c04:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004c06:	9009      	str	r0, [sp, #36]	; 0x24
 8004c08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004c0c:	9304      	str	r3, [sp, #16]
 8004c0e:	9b08      	ldr	r3, [sp, #32]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	9307      	str	r3, [sp, #28]
 8004c14:	2318      	movs	r3, #24
 8004c16:	fb94 f4f3 	sdiv	r4, r4, r3
 8004c1a:	f06f 0317 	mvn.w	r3, #23
 8004c1e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004c22:	fb04 3303 	mla	r3, r4, r3, r3
 8004c26:	eb03 0a02 	add.w	sl, r3, r2
 8004c2a:	9b04      	ldr	r3, [sp, #16]
 8004c2c:	9a07      	ldr	r2, [sp, #28]
 8004c2e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004f08 <__kernel_rem_pio2+0x318>
 8004c32:	eb03 0802 	add.w	r8, r3, r2
 8004c36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004c38:	1aa7      	subs	r7, r4, r2
 8004c3a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004c3e:	ae22      	add	r6, sp, #136	; 0x88
 8004c40:	2500      	movs	r5, #0
 8004c42:	4545      	cmp	r5, r8
 8004c44:	dd13      	ble.n	8004c6e <__kernel_rem_pio2+0x7e>
 8004c46:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8004f08 <__kernel_rem_pio2+0x318>
 8004c4a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004c4e:	2600      	movs	r6, #0
 8004c50:	9b04      	ldr	r3, [sp, #16]
 8004c52:	429e      	cmp	r6, r3
 8004c54:	dc32      	bgt.n	8004cbc <__kernel_rem_pio2+0xcc>
 8004c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c58:	9302      	str	r3, [sp, #8]
 8004c5a:	9b08      	ldr	r3, [sp, #32]
 8004c5c:	199d      	adds	r5, r3, r6
 8004c5e:	ab22      	add	r3, sp, #136	; 0x88
 8004c60:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004c64:	9306      	str	r3, [sp, #24]
 8004c66:	ec59 8b18 	vmov	r8, r9, d8
 8004c6a:	2700      	movs	r7, #0
 8004c6c:	e01f      	b.n	8004cae <__kernel_rem_pio2+0xbe>
 8004c6e:	42ef      	cmn	r7, r5
 8004c70:	d407      	bmi.n	8004c82 <__kernel_rem_pio2+0x92>
 8004c72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004c76:	f7fb fc19 	bl	80004ac <__aeabi_i2d>
 8004c7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004c7e:	3501      	adds	r5, #1
 8004c80:	e7df      	b.n	8004c42 <__kernel_rem_pio2+0x52>
 8004c82:	ec51 0b18 	vmov	r0, r1, d8
 8004c86:	e7f8      	b.n	8004c7a <__kernel_rem_pio2+0x8a>
 8004c88:	9906      	ldr	r1, [sp, #24]
 8004c8a:	9d02      	ldr	r5, [sp, #8]
 8004c8c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004c90:	9106      	str	r1, [sp, #24]
 8004c92:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004c96:	9502      	str	r5, [sp, #8]
 8004c98:	f7fb fc72 	bl	8000580 <__aeabi_dmul>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	f7fb fab6 	bl	8000214 <__adddf3>
 8004ca8:	3701      	adds	r7, #1
 8004caa:	4680      	mov	r8, r0
 8004cac:	4689      	mov	r9, r1
 8004cae:	9b07      	ldr	r3, [sp, #28]
 8004cb0:	429f      	cmp	r7, r3
 8004cb2:	dde9      	ble.n	8004c88 <__kernel_rem_pio2+0x98>
 8004cb4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004cb8:	3601      	adds	r6, #1
 8004cba:	e7c9      	b.n	8004c50 <__kernel_rem_pio2+0x60>
 8004cbc:	9b04      	ldr	r3, [sp, #16]
 8004cbe:	aa0e      	add	r2, sp, #56	; 0x38
 8004cc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004cc4:	930c      	str	r3, [sp, #48]	; 0x30
 8004cc6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004cc8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004ccc:	9c04      	ldr	r4, [sp, #16]
 8004cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cd0:	ab9a      	add	r3, sp, #616	; 0x268
 8004cd2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8004cd6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004cda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004cde:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8004ce2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8004ce6:	ab9a      	add	r3, sp, #616	; 0x268
 8004ce8:	445b      	add	r3, fp
 8004cea:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8004cee:	2500      	movs	r5, #0
 8004cf0:	1b63      	subs	r3, r4, r5
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	dc78      	bgt.n	8004de8 <__kernel_rem_pio2+0x1f8>
 8004cf6:	4650      	mov	r0, sl
 8004cf8:	ec49 8b10 	vmov	d0, r8, r9
 8004cfc:	f000 fc00 	bl	8005500 <scalbn>
 8004d00:	ec57 6b10 	vmov	r6, r7, d0
 8004d04:	2200      	movs	r2, #0
 8004d06:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004d0a:	ee10 0a10 	vmov	r0, s0
 8004d0e:	4639      	mov	r1, r7
 8004d10:	f7fb fc36 	bl	8000580 <__aeabi_dmul>
 8004d14:	ec41 0b10 	vmov	d0, r0, r1
 8004d18:	f000 fb6e 	bl	80053f8 <floor>
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	ec51 0b10 	vmov	r0, r1, d0
 8004d22:	4b7e      	ldr	r3, [pc, #504]	; (8004f1c <__kernel_rem_pio2+0x32c>)
 8004d24:	f7fb fc2c 	bl	8000580 <__aeabi_dmul>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	4639      	mov	r1, r7
 8004d30:	f7fb fa6e 	bl	8000210 <__aeabi_dsub>
 8004d34:	460f      	mov	r7, r1
 8004d36:	4606      	mov	r6, r0
 8004d38:	f7fb febc 	bl	8000ab4 <__aeabi_d2iz>
 8004d3c:	9006      	str	r0, [sp, #24]
 8004d3e:	f7fb fbb5 	bl	80004ac <__aeabi_i2d>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4630      	mov	r0, r6
 8004d48:	4639      	mov	r1, r7
 8004d4a:	f7fb fa61 	bl	8000210 <__aeabi_dsub>
 8004d4e:	f1ba 0f00 	cmp.w	sl, #0
 8004d52:	4606      	mov	r6, r0
 8004d54:	460f      	mov	r7, r1
 8004d56:	dd6c      	ble.n	8004e32 <__kernel_rem_pio2+0x242>
 8004d58:	1e62      	subs	r2, r4, #1
 8004d5a:	ab0e      	add	r3, sp, #56	; 0x38
 8004d5c:	f1ca 0118 	rsb	r1, sl, #24
 8004d60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004d64:	9d06      	ldr	r5, [sp, #24]
 8004d66:	fa40 f301 	asr.w	r3, r0, r1
 8004d6a:	441d      	add	r5, r3
 8004d6c:	408b      	lsls	r3, r1
 8004d6e:	1ac0      	subs	r0, r0, r3
 8004d70:	ab0e      	add	r3, sp, #56	; 0x38
 8004d72:	9506      	str	r5, [sp, #24]
 8004d74:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004d78:	f1ca 0317 	rsb	r3, sl, #23
 8004d7c:	fa40 f303 	asr.w	r3, r0, r3
 8004d80:	9302      	str	r3, [sp, #8]
 8004d82:	9b02      	ldr	r3, [sp, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	dd62      	ble.n	8004e4e <__kernel_rem_pio2+0x25e>
 8004d88:	9b06      	ldr	r3, [sp, #24]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	9306      	str	r3, [sp, #24]
 8004d90:	4615      	mov	r5, r2
 8004d92:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004d96:	4294      	cmp	r4, r2
 8004d98:	f300 8095 	bgt.w	8004ec6 <__kernel_rem_pio2+0x2d6>
 8004d9c:	f1ba 0f00 	cmp.w	sl, #0
 8004da0:	dd07      	ble.n	8004db2 <__kernel_rem_pio2+0x1c2>
 8004da2:	f1ba 0f01 	cmp.w	sl, #1
 8004da6:	f000 80a2 	beq.w	8004eee <__kernel_rem_pio2+0x2fe>
 8004daa:	f1ba 0f02 	cmp.w	sl, #2
 8004dae:	f000 80c1 	beq.w	8004f34 <__kernel_rem_pio2+0x344>
 8004db2:	9b02      	ldr	r3, [sp, #8]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d14a      	bne.n	8004e4e <__kernel_rem_pio2+0x25e>
 8004db8:	4632      	mov	r2, r6
 8004dba:	463b      	mov	r3, r7
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	4958      	ldr	r1, [pc, #352]	; (8004f20 <__kernel_rem_pio2+0x330>)
 8004dc0:	f7fb fa26 	bl	8000210 <__aeabi_dsub>
 8004dc4:	4606      	mov	r6, r0
 8004dc6:	460f      	mov	r7, r1
 8004dc8:	2d00      	cmp	r5, #0
 8004dca:	d040      	beq.n	8004e4e <__kernel_rem_pio2+0x25e>
 8004dcc:	4650      	mov	r0, sl
 8004dce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004f10 <__kernel_rem_pio2+0x320>
 8004dd2:	f000 fb95 	bl	8005500 <scalbn>
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	4639      	mov	r1, r7
 8004dda:	ec53 2b10 	vmov	r2, r3, d0
 8004dde:	f7fb fa17 	bl	8000210 <__aeabi_dsub>
 8004de2:	4606      	mov	r6, r0
 8004de4:	460f      	mov	r7, r1
 8004de6:	e032      	b.n	8004e4e <__kernel_rem_pio2+0x25e>
 8004de8:	2200      	movs	r2, #0
 8004dea:	4b4e      	ldr	r3, [pc, #312]	; (8004f24 <__kernel_rem_pio2+0x334>)
 8004dec:	4640      	mov	r0, r8
 8004dee:	4649      	mov	r1, r9
 8004df0:	f7fb fbc6 	bl	8000580 <__aeabi_dmul>
 8004df4:	f7fb fe5e 	bl	8000ab4 <__aeabi_d2iz>
 8004df8:	f7fb fb58 	bl	80004ac <__aeabi_i2d>
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4b4a      	ldr	r3, [pc, #296]	; (8004f28 <__kernel_rem_pio2+0x338>)
 8004e00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e04:	f7fb fbbc 	bl	8000580 <__aeabi_dmul>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4640      	mov	r0, r8
 8004e0e:	4649      	mov	r1, r9
 8004e10:	f7fb f9fe 	bl	8000210 <__aeabi_dsub>
 8004e14:	f7fb fe4e 	bl	8000ab4 <__aeabi_d2iz>
 8004e18:	ab0e      	add	r3, sp, #56	; 0x38
 8004e1a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8004e1e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004e22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e26:	f7fb f9f5 	bl	8000214 <__adddf3>
 8004e2a:	3501      	adds	r5, #1
 8004e2c:	4680      	mov	r8, r0
 8004e2e:	4689      	mov	r9, r1
 8004e30:	e75e      	b.n	8004cf0 <__kernel_rem_pio2+0x100>
 8004e32:	d105      	bne.n	8004e40 <__kernel_rem_pio2+0x250>
 8004e34:	1e63      	subs	r3, r4, #1
 8004e36:	aa0e      	add	r2, sp, #56	; 0x38
 8004e38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004e3c:	15c3      	asrs	r3, r0, #23
 8004e3e:	e79f      	b.n	8004d80 <__kernel_rem_pio2+0x190>
 8004e40:	2200      	movs	r2, #0
 8004e42:	4b3a      	ldr	r3, [pc, #232]	; (8004f2c <__kernel_rem_pio2+0x33c>)
 8004e44:	f7fb fe22 	bl	8000a8c <__aeabi_dcmpge>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d139      	bne.n	8004ec0 <__kernel_rem_pio2+0x2d0>
 8004e4c:	9002      	str	r0, [sp, #8]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2300      	movs	r3, #0
 8004e52:	4630      	mov	r0, r6
 8004e54:	4639      	mov	r1, r7
 8004e56:	f7fb fdfb 	bl	8000a50 <__aeabi_dcmpeq>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	f000 80c7 	beq.w	8004fee <__kernel_rem_pio2+0x3fe>
 8004e60:	1e65      	subs	r5, r4, #1
 8004e62:	462b      	mov	r3, r5
 8004e64:	2200      	movs	r2, #0
 8004e66:	9904      	ldr	r1, [sp, #16]
 8004e68:	428b      	cmp	r3, r1
 8004e6a:	da6a      	bge.n	8004f42 <__kernel_rem_pio2+0x352>
 8004e6c:	2a00      	cmp	r2, #0
 8004e6e:	f000 8088 	beq.w	8004f82 <__kernel_rem_pio2+0x392>
 8004e72:	ab0e      	add	r3, sp, #56	; 0x38
 8004e74:	f1aa 0a18 	sub.w	sl, sl, #24
 8004e78:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80b4 	beq.w	8004fea <__kernel_rem_pio2+0x3fa>
 8004e82:	4650      	mov	r0, sl
 8004e84:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8004f10 <__kernel_rem_pio2+0x320>
 8004e88:	f000 fb3a 	bl	8005500 <scalbn>
 8004e8c:	00ec      	lsls	r4, r5, #3
 8004e8e:	ab72      	add	r3, sp, #456	; 0x1c8
 8004e90:	191e      	adds	r6, r3, r4
 8004e92:	ec59 8b10 	vmov	r8, r9, d0
 8004e96:	f106 0a08 	add.w	sl, r6, #8
 8004e9a:	462f      	mov	r7, r5
 8004e9c:	2f00      	cmp	r7, #0
 8004e9e:	f280 80df 	bge.w	8005060 <__kernel_rem_pio2+0x470>
 8004ea2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8004f08 <__kernel_rem_pio2+0x318>
 8004ea6:	f04f 0a00 	mov.w	sl, #0
 8004eaa:	eba5 030a 	sub.w	r3, r5, sl
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f2c0 810a 	blt.w	80050c8 <__kernel_rem_pio2+0x4d8>
 8004eb4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8004f30 <__kernel_rem_pio2+0x340>
 8004eb8:	ec59 8b18 	vmov	r8, r9, d8
 8004ebc:	2700      	movs	r7, #0
 8004ebe:	e0f5      	b.n	80050ac <__kernel_rem_pio2+0x4bc>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	9302      	str	r3, [sp, #8]
 8004ec4:	e760      	b.n	8004d88 <__kernel_rem_pio2+0x198>
 8004ec6:	ab0e      	add	r3, sp, #56	; 0x38
 8004ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ecc:	b94d      	cbnz	r5, 8004ee2 <__kernel_rem_pio2+0x2f2>
 8004ece:	b12b      	cbz	r3, 8004edc <__kernel_rem_pio2+0x2ec>
 8004ed0:	a80e      	add	r0, sp, #56	; 0x38
 8004ed2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004ed6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004eda:	2301      	movs	r3, #1
 8004edc:	3201      	adds	r2, #1
 8004ede:	461d      	mov	r5, r3
 8004ee0:	e759      	b.n	8004d96 <__kernel_rem_pio2+0x1a6>
 8004ee2:	a80e      	add	r0, sp, #56	; 0x38
 8004ee4:	1acb      	subs	r3, r1, r3
 8004ee6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004eea:	462b      	mov	r3, r5
 8004eec:	e7f6      	b.n	8004edc <__kernel_rem_pio2+0x2ec>
 8004eee:	1e62      	subs	r2, r4, #1
 8004ef0:	ab0e      	add	r3, sp, #56	; 0x38
 8004ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004efa:	a90e      	add	r1, sp, #56	; 0x38
 8004efc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004f00:	e757      	b.n	8004db2 <__kernel_rem_pio2+0x1c2>
 8004f02:	bf00      	nop
 8004f04:	f3af 8000 	nop.w
	...
 8004f14:	3ff00000 	.word	0x3ff00000
 8004f18:	08005808 	.word	0x08005808
 8004f1c:	40200000 	.word	0x40200000
 8004f20:	3ff00000 	.word	0x3ff00000
 8004f24:	3e700000 	.word	0x3e700000
 8004f28:	41700000 	.word	0x41700000
 8004f2c:	3fe00000 	.word	0x3fe00000
 8004f30:	080057c8 	.word	0x080057c8
 8004f34:	1e62      	subs	r2, r4, #1
 8004f36:	ab0e      	add	r3, sp, #56	; 0x38
 8004f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004f40:	e7db      	b.n	8004efa <__kernel_rem_pio2+0x30a>
 8004f42:	a90e      	add	r1, sp, #56	; 0x38
 8004f44:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	e78b      	b.n	8004e66 <__kernel_rem_pio2+0x276>
 8004f4e:	3301      	adds	r3, #1
 8004f50:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004f54:	2900      	cmp	r1, #0
 8004f56:	d0fa      	beq.n	8004f4e <__kernel_rem_pio2+0x35e>
 8004f58:	9a08      	ldr	r2, [sp, #32]
 8004f5a:	4422      	add	r2, r4
 8004f5c:	00d2      	lsls	r2, r2, #3
 8004f5e:	a922      	add	r1, sp, #136	; 0x88
 8004f60:	18e3      	adds	r3, r4, r3
 8004f62:	9206      	str	r2, [sp, #24]
 8004f64:	440a      	add	r2, r1
 8004f66:	9302      	str	r3, [sp, #8]
 8004f68:	f10b 0108 	add.w	r1, fp, #8
 8004f6c:	f102 0308 	add.w	r3, r2, #8
 8004f70:	1c66      	adds	r6, r4, #1
 8004f72:	910a      	str	r1, [sp, #40]	; 0x28
 8004f74:	2500      	movs	r5, #0
 8004f76:	930d      	str	r3, [sp, #52]	; 0x34
 8004f78:	9b02      	ldr	r3, [sp, #8]
 8004f7a:	42b3      	cmp	r3, r6
 8004f7c:	da04      	bge.n	8004f88 <__kernel_rem_pio2+0x398>
 8004f7e:	461c      	mov	r4, r3
 8004f80:	e6a6      	b.n	8004cd0 <__kernel_rem_pio2+0xe0>
 8004f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f84:	2301      	movs	r3, #1
 8004f86:	e7e3      	b.n	8004f50 <__kernel_rem_pio2+0x360>
 8004f88:	9b06      	ldr	r3, [sp, #24]
 8004f8a:	18ef      	adds	r7, r5, r3
 8004f8c:	ab22      	add	r3, sp, #136	; 0x88
 8004f8e:	441f      	add	r7, r3
 8004f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f92:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004f96:	f7fb fa89 	bl	80004ac <__aeabi_i2d>
 8004f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9c:	461c      	mov	r4, r3
 8004f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fa0:	e9c7 0100 	strd	r0, r1, [r7]
 8004fa4:	eb03 0b05 	add.w	fp, r3, r5
 8004fa8:	2700      	movs	r7, #0
 8004faa:	f04f 0800 	mov.w	r8, #0
 8004fae:	f04f 0900 	mov.w	r9, #0
 8004fb2:	9b07      	ldr	r3, [sp, #28]
 8004fb4:	429f      	cmp	r7, r3
 8004fb6:	dd08      	ble.n	8004fca <__kernel_rem_pio2+0x3da>
 8004fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fba:	aa72      	add	r2, sp, #456	; 0x1c8
 8004fbc:	18eb      	adds	r3, r5, r3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8004fc4:	3601      	adds	r6, #1
 8004fc6:	3508      	adds	r5, #8
 8004fc8:	e7d6      	b.n	8004f78 <__kernel_rem_pio2+0x388>
 8004fca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004fce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004fd2:	f7fb fad5 	bl	8000580 <__aeabi_dmul>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4640      	mov	r0, r8
 8004fdc:	4649      	mov	r1, r9
 8004fde:	f7fb f919 	bl	8000214 <__adddf3>
 8004fe2:	3701      	adds	r7, #1
 8004fe4:	4680      	mov	r8, r0
 8004fe6:	4689      	mov	r9, r1
 8004fe8:	e7e3      	b.n	8004fb2 <__kernel_rem_pio2+0x3c2>
 8004fea:	3d01      	subs	r5, #1
 8004fec:	e741      	b.n	8004e72 <__kernel_rem_pio2+0x282>
 8004fee:	f1ca 0000 	rsb	r0, sl, #0
 8004ff2:	ec47 6b10 	vmov	d0, r6, r7
 8004ff6:	f000 fa83 	bl	8005500 <scalbn>
 8004ffa:	ec57 6b10 	vmov	r6, r7, d0
 8004ffe:	2200      	movs	r2, #0
 8005000:	4b99      	ldr	r3, [pc, #612]	; (8005268 <__kernel_rem_pio2+0x678>)
 8005002:	ee10 0a10 	vmov	r0, s0
 8005006:	4639      	mov	r1, r7
 8005008:	f7fb fd40 	bl	8000a8c <__aeabi_dcmpge>
 800500c:	b1f8      	cbz	r0, 800504e <__kernel_rem_pio2+0x45e>
 800500e:	2200      	movs	r2, #0
 8005010:	4b96      	ldr	r3, [pc, #600]	; (800526c <__kernel_rem_pio2+0x67c>)
 8005012:	4630      	mov	r0, r6
 8005014:	4639      	mov	r1, r7
 8005016:	f7fb fab3 	bl	8000580 <__aeabi_dmul>
 800501a:	f7fb fd4b 	bl	8000ab4 <__aeabi_d2iz>
 800501e:	4680      	mov	r8, r0
 8005020:	f7fb fa44 	bl	80004ac <__aeabi_i2d>
 8005024:	2200      	movs	r2, #0
 8005026:	4b90      	ldr	r3, [pc, #576]	; (8005268 <__kernel_rem_pio2+0x678>)
 8005028:	f7fb faaa 	bl	8000580 <__aeabi_dmul>
 800502c:	460b      	mov	r3, r1
 800502e:	4602      	mov	r2, r0
 8005030:	4639      	mov	r1, r7
 8005032:	4630      	mov	r0, r6
 8005034:	f7fb f8ec 	bl	8000210 <__aeabi_dsub>
 8005038:	f7fb fd3c 	bl	8000ab4 <__aeabi_d2iz>
 800503c:	1c65      	adds	r5, r4, #1
 800503e:	ab0e      	add	r3, sp, #56	; 0x38
 8005040:	f10a 0a18 	add.w	sl, sl, #24
 8005044:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005048:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800504c:	e719      	b.n	8004e82 <__kernel_rem_pio2+0x292>
 800504e:	4630      	mov	r0, r6
 8005050:	4639      	mov	r1, r7
 8005052:	f7fb fd2f 	bl	8000ab4 <__aeabi_d2iz>
 8005056:	ab0e      	add	r3, sp, #56	; 0x38
 8005058:	4625      	mov	r5, r4
 800505a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800505e:	e710      	b.n	8004e82 <__kernel_rem_pio2+0x292>
 8005060:	ab0e      	add	r3, sp, #56	; 0x38
 8005062:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005066:	f7fb fa21 	bl	80004ac <__aeabi_i2d>
 800506a:	4642      	mov	r2, r8
 800506c:	464b      	mov	r3, r9
 800506e:	f7fb fa87 	bl	8000580 <__aeabi_dmul>
 8005072:	2200      	movs	r2, #0
 8005074:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005078:	4b7c      	ldr	r3, [pc, #496]	; (800526c <__kernel_rem_pio2+0x67c>)
 800507a:	4640      	mov	r0, r8
 800507c:	4649      	mov	r1, r9
 800507e:	f7fb fa7f 	bl	8000580 <__aeabi_dmul>
 8005082:	3f01      	subs	r7, #1
 8005084:	4680      	mov	r8, r0
 8005086:	4689      	mov	r9, r1
 8005088:	e708      	b.n	8004e9c <__kernel_rem_pio2+0x2ac>
 800508a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005096:	f7fb fa73 	bl	8000580 <__aeabi_dmul>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4640      	mov	r0, r8
 80050a0:	4649      	mov	r1, r9
 80050a2:	f7fb f8b7 	bl	8000214 <__adddf3>
 80050a6:	3701      	adds	r7, #1
 80050a8:	4680      	mov	r8, r0
 80050aa:	4689      	mov	r9, r1
 80050ac:	9b04      	ldr	r3, [sp, #16]
 80050ae:	429f      	cmp	r7, r3
 80050b0:	dc01      	bgt.n	80050b6 <__kernel_rem_pio2+0x4c6>
 80050b2:	45ba      	cmp	sl, r7
 80050b4:	dae9      	bge.n	800508a <__kernel_rem_pio2+0x49a>
 80050b6:	ab4a      	add	r3, sp, #296	; 0x128
 80050b8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050bc:	e9c3 8900 	strd	r8, r9, [r3]
 80050c0:	f10a 0a01 	add.w	sl, sl, #1
 80050c4:	3e08      	subs	r6, #8
 80050c6:	e6f0      	b.n	8004eaa <__kernel_rem_pio2+0x2ba>
 80050c8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d85b      	bhi.n	8005186 <__kernel_rem_pio2+0x596>
 80050ce:	e8df f003 	tbb	[pc, r3]
 80050d2:	264a      	.short	0x264a
 80050d4:	0226      	.short	0x0226
 80050d6:	ab9a      	add	r3, sp, #616	; 0x268
 80050d8:	441c      	add	r4, r3
 80050da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80050de:	46a2      	mov	sl, r4
 80050e0:	46ab      	mov	fp, r5
 80050e2:	f1bb 0f00 	cmp.w	fp, #0
 80050e6:	dc6c      	bgt.n	80051c2 <__kernel_rem_pio2+0x5d2>
 80050e8:	46a2      	mov	sl, r4
 80050ea:	46ab      	mov	fp, r5
 80050ec:	f1bb 0f01 	cmp.w	fp, #1
 80050f0:	f300 8086 	bgt.w	8005200 <__kernel_rem_pio2+0x610>
 80050f4:	2000      	movs	r0, #0
 80050f6:	2100      	movs	r1, #0
 80050f8:	2d01      	cmp	r5, #1
 80050fa:	f300 80a0 	bgt.w	800523e <__kernel_rem_pio2+0x64e>
 80050fe:	9b02      	ldr	r3, [sp, #8]
 8005100:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005104:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005108:	2b00      	cmp	r3, #0
 800510a:	f040 809e 	bne.w	800524a <__kernel_rem_pio2+0x65a>
 800510e:	9b01      	ldr	r3, [sp, #4]
 8005110:	e9c3 7800 	strd	r7, r8, [r3]
 8005114:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005118:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800511c:	e033      	b.n	8005186 <__kernel_rem_pio2+0x596>
 800511e:	3408      	adds	r4, #8
 8005120:	ab4a      	add	r3, sp, #296	; 0x128
 8005122:	441c      	add	r4, r3
 8005124:	462e      	mov	r6, r5
 8005126:	2000      	movs	r0, #0
 8005128:	2100      	movs	r1, #0
 800512a:	2e00      	cmp	r6, #0
 800512c:	da3a      	bge.n	80051a4 <__kernel_rem_pio2+0x5b4>
 800512e:	9b02      	ldr	r3, [sp, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d03d      	beq.n	80051b0 <__kernel_rem_pio2+0x5c0>
 8005134:	4602      	mov	r2, r0
 8005136:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800513a:	9c01      	ldr	r4, [sp, #4]
 800513c:	e9c4 2300 	strd	r2, r3, [r4]
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005148:	f7fb f862 	bl	8000210 <__aeabi_dsub>
 800514c:	ae4c      	add	r6, sp, #304	; 0x130
 800514e:	2401      	movs	r4, #1
 8005150:	42a5      	cmp	r5, r4
 8005152:	da30      	bge.n	80051b6 <__kernel_rem_pio2+0x5c6>
 8005154:	9b02      	ldr	r3, [sp, #8]
 8005156:	b113      	cbz	r3, 800515e <__kernel_rem_pio2+0x56e>
 8005158:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800515c:	4619      	mov	r1, r3
 800515e:	9b01      	ldr	r3, [sp, #4]
 8005160:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005164:	e00f      	b.n	8005186 <__kernel_rem_pio2+0x596>
 8005166:	ab9a      	add	r3, sp, #616	; 0x268
 8005168:	441c      	add	r4, r3
 800516a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800516e:	2000      	movs	r0, #0
 8005170:	2100      	movs	r1, #0
 8005172:	2d00      	cmp	r5, #0
 8005174:	da10      	bge.n	8005198 <__kernel_rem_pio2+0x5a8>
 8005176:	9b02      	ldr	r3, [sp, #8]
 8005178:	b113      	cbz	r3, 8005180 <__kernel_rem_pio2+0x590>
 800517a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800517e:	4619      	mov	r1, r3
 8005180:	9b01      	ldr	r3, [sp, #4]
 8005182:	e9c3 0100 	strd	r0, r1, [r3]
 8005186:	9b06      	ldr	r3, [sp, #24]
 8005188:	f003 0007 	and.w	r0, r3, #7
 800518c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005190:	ecbd 8b02 	vpop	{d8}
 8005194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005198:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800519c:	f7fb f83a 	bl	8000214 <__adddf3>
 80051a0:	3d01      	subs	r5, #1
 80051a2:	e7e6      	b.n	8005172 <__kernel_rem_pio2+0x582>
 80051a4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80051a8:	f7fb f834 	bl	8000214 <__adddf3>
 80051ac:	3e01      	subs	r6, #1
 80051ae:	e7bc      	b.n	800512a <__kernel_rem_pio2+0x53a>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	e7c1      	b.n	800513a <__kernel_rem_pio2+0x54a>
 80051b6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80051ba:	f7fb f82b 	bl	8000214 <__adddf3>
 80051be:	3401      	adds	r4, #1
 80051c0:	e7c6      	b.n	8005150 <__kernel_rem_pio2+0x560>
 80051c2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80051c6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80051ca:	4640      	mov	r0, r8
 80051cc:	ec53 2b17 	vmov	r2, r3, d7
 80051d0:	4649      	mov	r1, r9
 80051d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80051d6:	f7fb f81d 	bl	8000214 <__adddf3>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4606      	mov	r6, r0
 80051e0:	460f      	mov	r7, r1
 80051e2:	4640      	mov	r0, r8
 80051e4:	4649      	mov	r1, r9
 80051e6:	f7fb f813 	bl	8000210 <__aeabi_dsub>
 80051ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ee:	f7fb f811 	bl	8000214 <__adddf3>
 80051f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80051f6:	e9ca 0100 	strd	r0, r1, [sl]
 80051fa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80051fe:	e770      	b.n	80050e2 <__kernel_rem_pio2+0x4f2>
 8005200:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005204:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005208:	4630      	mov	r0, r6
 800520a:	ec53 2b17 	vmov	r2, r3, d7
 800520e:	4639      	mov	r1, r7
 8005210:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005214:	f7fa fffe 	bl	8000214 <__adddf3>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4680      	mov	r8, r0
 800521e:	4689      	mov	r9, r1
 8005220:	4630      	mov	r0, r6
 8005222:	4639      	mov	r1, r7
 8005224:	f7fa fff4 	bl	8000210 <__aeabi_dsub>
 8005228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800522c:	f7fa fff2 	bl	8000214 <__adddf3>
 8005230:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005234:	e9ca 0100 	strd	r0, r1, [sl]
 8005238:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800523c:	e756      	b.n	80050ec <__kernel_rem_pio2+0x4fc>
 800523e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005242:	f7fa ffe7 	bl	8000214 <__adddf3>
 8005246:	3d01      	subs	r5, #1
 8005248:	e756      	b.n	80050f8 <__kernel_rem_pio2+0x508>
 800524a:	9b01      	ldr	r3, [sp, #4]
 800524c:	9a01      	ldr	r2, [sp, #4]
 800524e:	601f      	str	r7, [r3, #0]
 8005250:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005254:	605c      	str	r4, [r3, #4]
 8005256:	609d      	str	r5, [r3, #8]
 8005258:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800525c:	60d3      	str	r3, [r2, #12]
 800525e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005262:	6110      	str	r0, [r2, #16]
 8005264:	6153      	str	r3, [r2, #20]
 8005266:	e78e      	b.n	8005186 <__kernel_rem_pio2+0x596>
 8005268:	41700000 	.word	0x41700000
 800526c:	3e700000 	.word	0x3e700000

08005270 <__kernel_sin>:
 8005270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005274:	ec55 4b10 	vmov	r4, r5, d0
 8005278:	b085      	sub	sp, #20
 800527a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800527e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005282:	ed8d 1b00 	vstr	d1, [sp]
 8005286:	9002      	str	r0, [sp, #8]
 8005288:	da06      	bge.n	8005298 <__kernel_sin+0x28>
 800528a:	ee10 0a10 	vmov	r0, s0
 800528e:	4629      	mov	r1, r5
 8005290:	f7fb fc10 	bl	8000ab4 <__aeabi_d2iz>
 8005294:	2800      	cmp	r0, #0
 8005296:	d051      	beq.n	800533c <__kernel_sin+0xcc>
 8005298:	4622      	mov	r2, r4
 800529a:	462b      	mov	r3, r5
 800529c:	4620      	mov	r0, r4
 800529e:	4629      	mov	r1, r5
 80052a0:	f7fb f96e 	bl	8000580 <__aeabi_dmul>
 80052a4:	4682      	mov	sl, r0
 80052a6:	468b      	mov	fp, r1
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4620      	mov	r0, r4
 80052ae:	4629      	mov	r1, r5
 80052b0:	f7fb f966 	bl	8000580 <__aeabi_dmul>
 80052b4:	a341      	add	r3, pc, #260	; (adr r3, 80053bc <__kernel_sin+0x14c>)
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	4680      	mov	r8, r0
 80052bc:	4689      	mov	r9, r1
 80052be:	4650      	mov	r0, sl
 80052c0:	4659      	mov	r1, fp
 80052c2:	f7fb f95d 	bl	8000580 <__aeabi_dmul>
 80052c6:	a33f      	add	r3, pc, #252	; (adr r3, 80053c4 <__kernel_sin+0x154>)
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f7fa ffa0 	bl	8000210 <__aeabi_dsub>
 80052d0:	4652      	mov	r2, sl
 80052d2:	465b      	mov	r3, fp
 80052d4:	f7fb f954 	bl	8000580 <__aeabi_dmul>
 80052d8:	a33c      	add	r3, pc, #240	; (adr r3, 80053cc <__kernel_sin+0x15c>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	f7fa ff99 	bl	8000214 <__adddf3>
 80052e2:	4652      	mov	r2, sl
 80052e4:	465b      	mov	r3, fp
 80052e6:	f7fb f94b 	bl	8000580 <__aeabi_dmul>
 80052ea:	a33a      	add	r3, pc, #232	; (adr r3, 80053d4 <__kernel_sin+0x164>)
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f7fa ff8e 	bl	8000210 <__aeabi_dsub>
 80052f4:	4652      	mov	r2, sl
 80052f6:	465b      	mov	r3, fp
 80052f8:	f7fb f942 	bl	8000580 <__aeabi_dmul>
 80052fc:	a337      	add	r3, pc, #220	; (adr r3, 80053dc <__kernel_sin+0x16c>)
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f7fa ff87 	bl	8000214 <__adddf3>
 8005306:	9b02      	ldr	r3, [sp, #8]
 8005308:	4606      	mov	r6, r0
 800530a:	460f      	mov	r7, r1
 800530c:	b9db      	cbnz	r3, 8005346 <__kernel_sin+0xd6>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4650      	mov	r0, sl
 8005314:	4659      	mov	r1, fp
 8005316:	f7fb f933 	bl	8000580 <__aeabi_dmul>
 800531a:	a325      	add	r3, pc, #148	; (adr r3, 80053b0 <__kernel_sin+0x140>)
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	f7fa ff76 	bl	8000210 <__aeabi_dsub>
 8005324:	4642      	mov	r2, r8
 8005326:	464b      	mov	r3, r9
 8005328:	f7fb f92a 	bl	8000580 <__aeabi_dmul>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4620      	mov	r0, r4
 8005332:	4629      	mov	r1, r5
 8005334:	f7fa ff6e 	bl	8000214 <__adddf3>
 8005338:	4604      	mov	r4, r0
 800533a:	460d      	mov	r5, r1
 800533c:	ec45 4b10 	vmov	d0, r4, r5
 8005340:	b005      	add	sp, #20
 8005342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005346:	2200      	movs	r2, #0
 8005348:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <__kernel_sin+0x148>)
 800534a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800534e:	f7fb f917 	bl	8000580 <__aeabi_dmul>
 8005352:	4632      	mov	r2, r6
 8005354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005358:	463b      	mov	r3, r7
 800535a:	4640      	mov	r0, r8
 800535c:	4649      	mov	r1, r9
 800535e:	f7fb f90f 	bl	8000580 <__aeabi_dmul>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800536a:	f7fa ff51 	bl	8000210 <__aeabi_dsub>
 800536e:	4652      	mov	r2, sl
 8005370:	465b      	mov	r3, fp
 8005372:	f7fb f905 	bl	8000580 <__aeabi_dmul>
 8005376:	e9dd 2300 	ldrd	r2, r3, [sp]
 800537a:	f7fa ff49 	bl	8000210 <__aeabi_dsub>
 800537e:	a30c      	add	r3, pc, #48	; (adr r3, 80053b0 <__kernel_sin+0x140>)
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	4606      	mov	r6, r0
 8005386:	460f      	mov	r7, r1
 8005388:	4640      	mov	r0, r8
 800538a:	4649      	mov	r1, r9
 800538c:	f7fb f8f8 	bl	8000580 <__aeabi_dmul>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4630      	mov	r0, r6
 8005396:	4639      	mov	r1, r7
 8005398:	f7fa ff3c 	bl	8000214 <__adddf3>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4620      	mov	r0, r4
 80053a2:	4629      	mov	r1, r5
 80053a4:	f7fa ff34 	bl	8000210 <__aeabi_dsub>
 80053a8:	e7c6      	b.n	8005338 <__kernel_sin+0xc8>
 80053aa:	bf00      	nop
 80053ac:	f3af 8000 	nop.w
 80053b0:	55555549 	.word	0x55555549
 80053b4:	3fc55555 	.word	0x3fc55555
 80053b8:	3fe00000 	.word	0x3fe00000
 80053bc:	5acfd57c 	.word	0x5acfd57c
 80053c0:	3de5d93a 	.word	0x3de5d93a
 80053c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80053c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80053cc:	57b1fe7d 	.word	0x57b1fe7d
 80053d0:	3ec71de3 	.word	0x3ec71de3
 80053d4:	19c161d5 	.word	0x19c161d5
 80053d8:	3f2a01a0 	.word	0x3f2a01a0
 80053dc:	1110f8a6 	.word	0x1110f8a6
 80053e0:	3f811111 	.word	0x3f811111

080053e4 <fabs>:
 80053e4:	ec51 0b10 	vmov	r0, r1, d0
 80053e8:	ee10 2a10 	vmov	r2, s0
 80053ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80053f0:	ec43 2b10 	vmov	d0, r2, r3
 80053f4:	4770      	bx	lr
	...

080053f8 <floor>:
 80053f8:	ec51 0b10 	vmov	r0, r1, d0
 80053fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005400:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005404:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005408:	2e13      	cmp	r6, #19
 800540a:	460c      	mov	r4, r1
 800540c:	ee10 5a10 	vmov	r5, s0
 8005410:	4680      	mov	r8, r0
 8005412:	dc34      	bgt.n	800547e <floor+0x86>
 8005414:	2e00      	cmp	r6, #0
 8005416:	da16      	bge.n	8005446 <floor+0x4e>
 8005418:	a335      	add	r3, pc, #212	; (adr r3, 80054f0 <floor+0xf8>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f7fa fef9 	bl	8000214 <__adddf3>
 8005422:	2200      	movs	r2, #0
 8005424:	2300      	movs	r3, #0
 8005426:	f7fb fb3b 	bl	8000aa0 <__aeabi_dcmpgt>
 800542a:	b148      	cbz	r0, 8005440 <floor+0x48>
 800542c:	2c00      	cmp	r4, #0
 800542e:	da59      	bge.n	80054e4 <floor+0xec>
 8005430:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005434:	4a30      	ldr	r2, [pc, #192]	; (80054f8 <floor+0x100>)
 8005436:	432b      	orrs	r3, r5
 8005438:	2500      	movs	r5, #0
 800543a:	42ab      	cmp	r3, r5
 800543c:	bf18      	it	ne
 800543e:	4614      	movne	r4, r2
 8005440:	4621      	mov	r1, r4
 8005442:	4628      	mov	r0, r5
 8005444:	e025      	b.n	8005492 <floor+0x9a>
 8005446:	4f2d      	ldr	r7, [pc, #180]	; (80054fc <floor+0x104>)
 8005448:	4137      	asrs	r7, r6
 800544a:	ea01 0307 	and.w	r3, r1, r7
 800544e:	4303      	orrs	r3, r0
 8005450:	d01f      	beq.n	8005492 <floor+0x9a>
 8005452:	a327      	add	r3, pc, #156	; (adr r3, 80054f0 <floor+0xf8>)
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f7fa fedc 	bl	8000214 <__adddf3>
 800545c:	2200      	movs	r2, #0
 800545e:	2300      	movs	r3, #0
 8005460:	f7fb fb1e 	bl	8000aa0 <__aeabi_dcmpgt>
 8005464:	2800      	cmp	r0, #0
 8005466:	d0eb      	beq.n	8005440 <floor+0x48>
 8005468:	2c00      	cmp	r4, #0
 800546a:	bfbe      	ittt	lt
 800546c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005470:	fa43 f606 	asrlt.w	r6, r3, r6
 8005474:	19a4      	addlt	r4, r4, r6
 8005476:	ea24 0407 	bic.w	r4, r4, r7
 800547a:	2500      	movs	r5, #0
 800547c:	e7e0      	b.n	8005440 <floor+0x48>
 800547e:	2e33      	cmp	r6, #51	; 0x33
 8005480:	dd0b      	ble.n	800549a <floor+0xa2>
 8005482:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005486:	d104      	bne.n	8005492 <floor+0x9a>
 8005488:	ee10 2a10 	vmov	r2, s0
 800548c:	460b      	mov	r3, r1
 800548e:	f7fa fec1 	bl	8000214 <__adddf3>
 8005492:	ec41 0b10 	vmov	d0, r0, r1
 8005496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800549a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800549e:	f04f 33ff 	mov.w	r3, #4294967295
 80054a2:	fa23 f707 	lsr.w	r7, r3, r7
 80054a6:	4207      	tst	r7, r0
 80054a8:	d0f3      	beq.n	8005492 <floor+0x9a>
 80054aa:	a311      	add	r3, pc, #68	; (adr r3, 80054f0 <floor+0xf8>)
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f7fa feb0 	bl	8000214 <__adddf3>
 80054b4:	2200      	movs	r2, #0
 80054b6:	2300      	movs	r3, #0
 80054b8:	f7fb faf2 	bl	8000aa0 <__aeabi_dcmpgt>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d0bf      	beq.n	8005440 <floor+0x48>
 80054c0:	2c00      	cmp	r4, #0
 80054c2:	da02      	bge.n	80054ca <floor+0xd2>
 80054c4:	2e14      	cmp	r6, #20
 80054c6:	d103      	bne.n	80054d0 <floor+0xd8>
 80054c8:	3401      	adds	r4, #1
 80054ca:	ea25 0507 	bic.w	r5, r5, r7
 80054ce:	e7b7      	b.n	8005440 <floor+0x48>
 80054d0:	2301      	movs	r3, #1
 80054d2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80054d6:	fa03 f606 	lsl.w	r6, r3, r6
 80054da:	4435      	add	r5, r6
 80054dc:	4545      	cmp	r5, r8
 80054de:	bf38      	it	cc
 80054e0:	18e4      	addcc	r4, r4, r3
 80054e2:	e7f2      	b.n	80054ca <floor+0xd2>
 80054e4:	2500      	movs	r5, #0
 80054e6:	462c      	mov	r4, r5
 80054e8:	e7aa      	b.n	8005440 <floor+0x48>
 80054ea:	bf00      	nop
 80054ec:	f3af 8000 	nop.w
 80054f0:	8800759c 	.word	0x8800759c
 80054f4:	7e37e43c 	.word	0x7e37e43c
 80054f8:	bff00000 	.word	0xbff00000
 80054fc:	000fffff 	.word	0x000fffff

08005500 <scalbn>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	ec55 4b10 	vmov	r4, r5, d0
 8005506:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800550a:	4606      	mov	r6, r0
 800550c:	462b      	mov	r3, r5
 800550e:	b9aa      	cbnz	r2, 800553c <scalbn+0x3c>
 8005510:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005514:	4323      	orrs	r3, r4
 8005516:	d03b      	beq.n	8005590 <scalbn+0x90>
 8005518:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <scalbn+0xe0>)
 800551a:	4629      	mov	r1, r5
 800551c:	2200      	movs	r2, #0
 800551e:	ee10 0a10 	vmov	r0, s0
 8005522:	f7fb f82d 	bl	8000580 <__aeabi_dmul>
 8005526:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <scalbn+0xe4>)
 8005528:	429e      	cmp	r6, r3
 800552a:	4604      	mov	r4, r0
 800552c:	460d      	mov	r5, r1
 800552e:	da12      	bge.n	8005556 <scalbn+0x56>
 8005530:	a327      	add	r3, pc, #156	; (adr r3, 80055d0 <scalbn+0xd0>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f7fb f823 	bl	8000580 <__aeabi_dmul>
 800553a:	e009      	b.n	8005550 <scalbn+0x50>
 800553c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005540:	428a      	cmp	r2, r1
 8005542:	d10c      	bne.n	800555e <scalbn+0x5e>
 8005544:	ee10 2a10 	vmov	r2, s0
 8005548:	4620      	mov	r0, r4
 800554a:	4629      	mov	r1, r5
 800554c:	f7fa fe62 	bl	8000214 <__adddf3>
 8005550:	4604      	mov	r4, r0
 8005552:	460d      	mov	r5, r1
 8005554:	e01c      	b.n	8005590 <scalbn+0x90>
 8005556:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800555a:	460b      	mov	r3, r1
 800555c:	3a36      	subs	r2, #54	; 0x36
 800555e:	4432      	add	r2, r6
 8005560:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005564:	428a      	cmp	r2, r1
 8005566:	dd0b      	ble.n	8005580 <scalbn+0x80>
 8005568:	ec45 4b11 	vmov	d1, r4, r5
 800556c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80055d8 <scalbn+0xd8>
 8005570:	f000 f83c 	bl	80055ec <copysign>
 8005574:	a318      	add	r3, pc, #96	; (adr r3, 80055d8 <scalbn+0xd8>)
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	ec51 0b10 	vmov	r0, r1, d0
 800557e:	e7da      	b.n	8005536 <scalbn+0x36>
 8005580:	2a00      	cmp	r2, #0
 8005582:	dd08      	ble.n	8005596 <scalbn+0x96>
 8005584:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005588:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800558c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005590:	ec45 4b10 	vmov	d0, r4, r5
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800559a:	da0d      	bge.n	80055b8 <scalbn+0xb8>
 800559c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80055a0:	429e      	cmp	r6, r3
 80055a2:	ec45 4b11 	vmov	d1, r4, r5
 80055a6:	dce1      	bgt.n	800556c <scalbn+0x6c>
 80055a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80055d0 <scalbn+0xd0>
 80055ac:	f000 f81e 	bl	80055ec <copysign>
 80055b0:	a307      	add	r3, pc, #28	; (adr r3, 80055d0 <scalbn+0xd0>)
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	e7e0      	b.n	800557a <scalbn+0x7a>
 80055b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80055bc:	3236      	adds	r2, #54	; 0x36
 80055be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80055c6:	4620      	mov	r0, r4
 80055c8:	4629      	mov	r1, r5
 80055ca:	2200      	movs	r2, #0
 80055cc:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <scalbn+0xe8>)
 80055ce:	e7b2      	b.n	8005536 <scalbn+0x36>
 80055d0:	c2f8f359 	.word	0xc2f8f359
 80055d4:	01a56e1f 	.word	0x01a56e1f
 80055d8:	8800759c 	.word	0x8800759c
 80055dc:	7e37e43c 	.word	0x7e37e43c
 80055e0:	43500000 	.word	0x43500000
 80055e4:	ffff3cb0 	.word	0xffff3cb0
 80055e8:	3c900000 	.word	0x3c900000

080055ec <copysign>:
 80055ec:	ec51 0b10 	vmov	r0, r1, d0
 80055f0:	ee11 0a90 	vmov	r0, s3
 80055f4:	ee10 2a10 	vmov	r2, s0
 80055f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80055fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005600:	ea41 0300 	orr.w	r3, r1, r0
 8005604:	ec43 2b10 	vmov	d0, r2, r3
 8005608:	4770      	bx	lr
	...

0800560c <_init>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	bf00      	nop
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr

08005618 <_fini>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	bf00      	nop
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr
