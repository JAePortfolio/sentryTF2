
sentryTF2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000784c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08007a18  08007a18  00017a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c10  08007c10  0004f2f0  2**0
                  CONTENTS
  4 .ARM          00000008  08007c10  08007c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c18  08007c18  0004f2f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c18  08007c18  00017c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c1c  08007c1c  00017c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08007c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  2000002c  08007c4c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  08007c4c  0002082c  2**0
                  ALLOC
 11 .sentry_shoot 0000f37c  080f0000  080f0000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .sentry_spot  00000000  080ff37c  080ff37c  0004f2f0  2**0
                  CONTENTS
 13 .sentry_scan  00008a44  081068ac  081068ac  000468ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .ARM.attributes 00000030  00000000  00000000  0004f2f0  2**0
                  CONTENTS, READONLY
 15 .debug_info   00010296  00000000  00000000  0004f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000225e  00000000  00000000  0005f5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000ed8  00000000  00000000  00061818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000de0  00000000  00000000  000626f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000260e3  00000000  00000000  000634d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000107f3  00000000  00000000  000895b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f0aab  00000000  00000000  00099da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  0018a851  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000041ec  00000000  00000000  0018a8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000002c 	.word	0x2000002c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080079fc 	.word	0x080079fc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000030 	.word	0x20000030
 8000204:	080079fc 	.word	0x080079fc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b96e 	b.w	8000e38 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8083 	bne.w	8000c8a <__udivmoddi4+0x116>
 8000b84:	428a      	cmp	r2, r1
 8000b86:	4617      	mov	r7, r2
 8000b88:	d947      	bls.n	8000c1a <__udivmoddi4+0xa6>
 8000b8a:	fab2 f282 	clz	r2, r2
 8000b8e:	b142      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b90:	f1c2 0020 	rsb	r0, r2, #32
 8000b94:	fa24 f000 	lsr.w	r0, r4, r0
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	4097      	lsls	r7, r2
 8000b9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba6:	0c23      	lsrs	r3, r4, #16
 8000ba8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bac:	fa1f fe87 	uxth.w	lr, r7
 8000bb0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x60>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc6:	f080 8119 	bcs.w	8000dfc <__udivmoddi4+0x288>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 8116 	bls.w	8000dfc <__udivmoddi4+0x288>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	443b      	add	r3, r7
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x8c>
 8000bec:	193c      	adds	r4, r7, r4
 8000bee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf2:	f080 8105 	bcs.w	8000e00 <__udivmoddi4+0x28c>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	f240 8102 	bls.w	8000e00 <__udivmoddi4+0x28c>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	443c      	add	r4, r7
 8000c00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c04:	eba4 040e 	sub.w	r4, r4, lr
 8000c08:	2600      	movs	r6, #0
 8000c0a:	b11d      	cbz	r5, 8000c14 <__udivmoddi4+0xa0>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c5 4300 	strd	r4, r3, [r5]
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	b902      	cbnz	r2, 8000c1e <__udivmoddi4+0xaa>
 8000c1c:	deff      	udf	#255	; 0xff
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d150      	bne.n	8000cc8 <__udivmoddi4+0x154>
 8000c26:	1bcb      	subs	r3, r1, r7
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f f887 	uxth.w	r8, r7
 8000c30:	2601      	movs	r6, #1
 8000c32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c36:	0c21      	lsrs	r1, r4, #16
 8000c38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c40:	fb08 f30c 	mul.w	r3, r8, ip
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0xe4>
 8000c48:	1879      	adds	r1, r7, r1
 8000c4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0xe2>
 8000c50:	428b      	cmp	r3, r1
 8000c52:	f200 80e9 	bhi.w	8000e28 <__udivmoddi4+0x2b4>
 8000c56:	4684      	mov	ip, r0
 8000c58:	1ac9      	subs	r1, r1, r3
 8000c5a:	b2a3      	uxth	r3, r4
 8000c5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c68:	fb08 f800 	mul.w	r8, r8, r0
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x10c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x10a>
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	f200 80d9 	bhi.w	8000e30 <__udivmoddi4+0x2bc>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eba4 0408 	sub.w	r4, r4, r8
 8000c84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c88:	e7bf      	b.n	8000c0a <__udivmoddi4+0x96>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d909      	bls.n	8000ca2 <__udivmoddi4+0x12e>
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	f000 80b1 	beq.w	8000df6 <__udivmoddi4+0x282>
 8000c94:	2600      	movs	r6, #0
 8000c96:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	fab3 f683 	clz	r6, r3
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d14a      	bne.n	8000d40 <__udivmoddi4+0x1cc>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0x140>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 80b8 	bhi.w	8000e24 <__udivmoddi4+0x2b0>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	468c      	mov	ip, r1
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0a8      	beq.n	8000c14 <__udivmoddi4+0xa0>
 8000cc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc6:	e7a5      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f603 	lsr.w	r6, r0, r3
 8000cd0:	4097      	lsls	r7, r2
 8000cd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cda:	40d9      	lsrs	r1, r3
 8000cdc:	4330      	orrs	r0, r6
 8000cde:	0c03      	lsrs	r3, r0, #16
 8000ce0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf0:	fb06 f108 	mul.w	r1, r6, r8
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x19c>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d02:	f080 808d 	bcs.w	8000e20 <__udivmoddi4+0x2ac>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 808a 	bls.w	8000e20 <__udivmoddi4+0x2ac>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	443b      	add	r3, r7
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b281      	uxth	r1, r0
 8000d14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d20:	fb00 f308 	mul.w	r3, r0, r8
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x1c4>
 8000d28:	1879      	adds	r1, r7, r1
 8000d2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2e:	d273      	bcs.n	8000e18 <__udivmoddi4+0x2a4>
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d971      	bls.n	8000e18 <__udivmoddi4+0x2a4>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4439      	add	r1, r7
 8000d38:	1acb      	subs	r3, r1, r3
 8000d3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3e:	e778      	b.n	8000c32 <__udivmoddi4+0xbe>
 8000d40:	f1c6 0c20 	rsb	ip, r6, #32
 8000d44:	fa03 f406 	lsl.w	r4, r3, r6
 8000d48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d4c:	431c      	orrs	r4, r3
 8000d4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d52:	fa01 f306 	lsl.w	r3, r1, r6
 8000d56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	0c3b      	lsrs	r3, r7, #16
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fa1f f884 	uxth.w	r8, r4
 8000d6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d72:	fb09 fa08 	mul.w	sl, r9, r8
 8000d76:	458a      	cmp	sl, r1
 8000d78:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x220>
 8000d82:	1861      	adds	r1, r4, r1
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	d248      	bcs.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	d946      	bls.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d92:	4421      	add	r1, r4
 8000d94:	eba1 010a 	sub.w	r1, r1, sl
 8000d98:	b2bf      	uxth	r7, r7
 8000d9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da6:	fb00 f808 	mul.w	r8, r0, r8
 8000daa:	45b8      	cmp	r8, r7
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x24a>
 8000dae:	19e7      	adds	r7, r4, r7
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d22e      	bcs.n	8000e14 <__udivmoddi4+0x2a0>
 8000db6:	45b8      	cmp	r8, r7
 8000db8:	d92c      	bls.n	8000e14 <__udivmoddi4+0x2a0>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4427      	add	r7, r4
 8000dbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc2:	eba7 0708 	sub.w	r7, r7, r8
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	454f      	cmp	r7, r9
 8000dcc:	46c6      	mov	lr, r8
 8000dce:	4649      	mov	r1, r9
 8000dd0:	d31a      	bcc.n	8000e08 <__udivmoddi4+0x294>
 8000dd2:	d017      	beq.n	8000e04 <__udivmoddi4+0x290>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x27a>
 8000dd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dda:	eb67 0701 	sbc.w	r7, r7, r1
 8000dde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000de2:	40f2      	lsrs	r2, r6
 8000de4:	ea4c 0202 	orr.w	r2, ip, r2
 8000de8:	40f7      	lsrs	r7, r6
 8000dea:	e9c5 2700 	strd	r2, r7, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	462e      	mov	r6, r5
 8000df8:	4628      	mov	r0, r5
 8000dfa:	e70b      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	e6e9      	b.n	8000bd4 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fd      	b.n	8000c00 <__udivmoddi4+0x8c>
 8000e04:	4543      	cmp	r3, r8
 8000e06:	d2e5      	bcs.n	8000dd4 <__udivmoddi4+0x260>
 8000e08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e10:	3801      	subs	r0, #1
 8000e12:	e7df      	b.n	8000dd4 <__udivmoddi4+0x260>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e7d2      	b.n	8000dbe <__udivmoddi4+0x24a>
 8000e18:	4660      	mov	r0, ip
 8000e1a:	e78d      	b.n	8000d38 <__udivmoddi4+0x1c4>
 8000e1c:	4681      	mov	r9, r0
 8000e1e:	e7b9      	b.n	8000d94 <__udivmoddi4+0x220>
 8000e20:	4666      	mov	r6, ip
 8000e22:	e775      	b.n	8000d10 <__udivmoddi4+0x19c>
 8000e24:	4630      	mov	r0, r6
 8000e26:	e74a      	b.n	8000cbe <__udivmoddi4+0x14a>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	4439      	add	r1, r7
 8000e2e:	e713      	b.n	8000c58 <__udivmoddi4+0xe4>
 8000e30:	3802      	subs	r0, #2
 8000e32:	443c      	add	r4, r7
 8000e34:	e724      	b.n	8000c80 <__udivmoddi4+0x10c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <delay_us>:
uint8_t *sentrySpotWavPointer = (uint8_t*)&__SENTRY_SPOT;
uint8_t *sentryScantWavPointer = (uint8_t*)&__SENTRY_SCAN;
uint16_t volatile wavBuffer[512];


void delay_us(uint16_t us){
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0); // Set counter start to 0
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <delay_us+0x30>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < us);
 8000e4e:	bf00      	nop
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <delay_us+0x30>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d3f9      	bcc.n	8000e50 <delay_us+0x14>
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	2000053c 	.word	0x2000053c

08000e70 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	/* Left Sensor */
	if(htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a40      	ldr	r2, [pc, #256]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d125      	bne.n	8000ecc <HAL_TIM_IC_CaptureCallback+0x5c>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7f1b      	ldrb	r3, [r3, #28]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d121      	bne.n	8000ecc <HAL_TIM_IC_CaptureCallback+0x5c>
		if(leftSensorFirstCapt == 0) leftSensorFirstCapt++;
 8000e88:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d106      	bne.n	8000e9e <HAL_TIM_IC_CaptureCallback+0x2e>
 8000e90:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	e016      	b.n	8000ecc <HAL_TIM_IC_CaptureCallback+0x5c>
		else if(leftSensorFirstCapt == 1){
 8000e9e:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d112      	bne.n	8000ecc <HAL_TIM_IC_CaptureCallback+0x5c>
			totalTimeLeft = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //Retrieves pulse width value from ultrasonic
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f004 faa5 	bl	80053f8 <HAL_TIM_ReadCapturedValue>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4a34      	ldr	r2, [pc, #208]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000eb2:	6013      	str	r3, [r2, #0]
			calcObjDist(totalTimeLeft,0);
 8000eb4:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f870 	bl	8000fa0 <calcObjDist>
			leftSensorFirstCapt--;
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000eca:	701a      	strb	r2, [r3, #0]
		}
	}
	/* Center Sensor */
	if(htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a2b      	ldr	r2, [pc, #172]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d125      	bne.n	8000f20 <HAL_TIM_IC_CaptureCallback+0xb0>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7f1b      	ldrb	r3, [r3, #28]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d121      	bne.n	8000f20 <HAL_TIM_IC_CaptureCallback+0xb0>
		if(centerSensorFirstCapt == 0) centerSensorFirstCapt++;
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d106      	bne.n	8000ef2 <HAL_TIM_IC_CaptureCallback+0x82>
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e016      	b.n	8000f20 <HAL_TIM_IC_CaptureCallback+0xb0>
		else if(centerSensorFirstCapt == 1){
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d112      	bne.n	8000f20 <HAL_TIM_IC_CaptureCallback+0xb0>
			totalTimeCenter = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); //Retrieves pulse width value from ultrasonic
 8000efa:	210c      	movs	r1, #12
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f004 fa7b 	bl	80053f8 <HAL_TIM_ReadCapturedValue>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f06:	6013      	str	r3, [r2, #0]
			calcObjDist(totalTimeCenter,1);
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f846 	bl	8000fa0 <calcObjDist>
			centerSensorFirstCapt--;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f1e:	701a      	strb	r2, [r3, #0]
		}
	}
	/* Right Sensor */
	if(htim == &htim8 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d125      	bne.n	8000f74 <HAL_TIM_IC_CaptureCallback+0x104>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7f1b      	ldrb	r3, [r3, #28]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d121      	bne.n	8000f74 <HAL_TIM_IC_CaptureCallback+0x104>
		if(rightSensorFirstCapt == 0) rightSensorFirstCapt++;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d106      	bne.n	8000f46 <HAL_TIM_IC_CaptureCallback+0xd6>
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f42:	701a      	strb	r2, [r3, #0]
			totalTimeRight = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //Retrieves pulse width value from ultrasonic
			calcObjDist(totalTimeRight,2);
			rightSensorFirstCapt--;
		}
	}
}
 8000f44:	e016      	b.n	8000f74 <HAL_TIM_IC_CaptureCallback+0x104>
		else if(rightSensorFirstCapt == 1){
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d112      	bne.n	8000f74 <HAL_TIM_IC_CaptureCallback+0x104>
			totalTimeRight = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //Retrieves pulse width value from ultrasonic
 8000f4e:	2104      	movs	r1, #4
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f004 fa51 	bl	80053f8 <HAL_TIM_ReadCapturedValue>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f5a:	6013      	str	r3, [r2, #0]
			calcObjDist(totalTimeRight,2);
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2102      	movs	r1, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f81c 	bl	8000fa0 <calcObjDist>
			rightSensorFirstCapt--;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f72:	701a      	strb	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000648 	.word	0x20000648
 8000f80:	20000048 	.word	0x20000048
 8000f84:	2000004c 	.word	0x2000004c
 8000f88:	20000049 	.word	0x20000049
 8000f8c:	20000050 	.word	0x20000050
 8000f90:	2000006c 	.word	0x2000006c
 8000f94:	2000004a 	.word	0x2000004a
 8000f98:	20000054 	.word	0x20000054
 8000f9c:	00000000 	.word	0x00000000

08000fa0 <calcObjDist>:

void calcObjDist(uint32_t totalTime, uint8_t sensorNumber){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
	totalFinal = totalTime/2;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	085b      	lsrs	r3, r3, #1
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <calcObjDist+0xd0>)
 8000fb4:	601a      	str	r2, [r3, #0]
	switch(sensorNumber){
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d036      	beq.n	800102a <calcObjDist+0x8a>
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	dc4c      	bgt.n	800105a <calcObjDist+0xba>
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <calcObjDist+0x2a>
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d018      	beq.n	8000ffa <calcObjDist+0x5a>
		case 2: // Right sensor
			distanceRight = totalFinal * velSound * pow(10,-6);
			break;
	}

}
 8000fc8:	e047      	b.n	800105a <calcObjDist+0xba>
			distanceLeft = totalFinal * velSound * pow(10,-6);
 8000fca:	4b29      	ldr	r3, [pc, #164]	; (8001070 <calcObjDist+0xd0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a29      	ldr	r2, [pc, #164]	; (8001074 <calcObjDist+0xd4>)
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	fb02 f303 	mul.w	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fa68 	bl	80004ac <__aeabi_i2d>
 8000fdc:	a322      	add	r3, pc, #136	; (adr r3, 8001068 <calcObjDist+0xc8>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff facd 	bl	8000580 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fd61 	bl	8000ab4 <__aeabi_d2iz>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <calcObjDist+0xd8>)
 8000ff6:	6013      	str	r3, [r2, #0]
			break;
 8000ff8:	e02f      	b.n	800105a <calcObjDist+0xba>
			distanceCenter = totalFinal * velSound * pow(10,-6);
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <calcObjDist+0xd0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <calcObjDist+0xd4>)
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fa50 	bl	80004ac <__aeabi_i2d>
 800100c:	a316      	add	r3, pc, #88	; (adr r3, 8001068 <calcObjDist+0xc8>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	f7ff fab5 	bl	8000580 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff fd49 	bl	8000ab4 <__aeabi_d2iz>
 8001022:	4603      	mov	r3, r0
 8001024:	4a15      	ldr	r2, [pc, #84]	; (800107c <calcObjDist+0xdc>)
 8001026:	6013      	str	r3, [r2, #0]
			break;
 8001028:	e017      	b.n	800105a <calcObjDist+0xba>
			distanceRight = totalFinal * velSound * pow(10,-6);
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <calcObjDist+0xd0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <calcObjDist+0xd4>)
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	fb02 f303 	mul.w	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa38 	bl	80004ac <__aeabi_i2d>
 800103c:	a30a      	add	r3, pc, #40	; (adr r3, 8001068 <calcObjDist+0xc8>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff fa9d 	bl	8000580 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fd31 	bl	8000ab4 <__aeabi_d2iz>
 8001052:	4603      	mov	r3, r0
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <calcObjDist+0xe0>)
 8001056:	6013      	str	r3, [r2, #0]
			break;
 8001058:	bf00      	nop
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	f3af 8000 	nop.w
 8001068:	a0b5ed8d 	.word	0xa0b5ed8d
 800106c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001070:	20000058 	.word	0x20000058
 8001074:	20000000 	.word	0x20000000
 8001078:	2000005c 	.word	0x2000005c
 800107c:	20000060 	.word	0x20000060
 8001080:	20000064 	.word	0x20000064

08001084 <sensorRoutine>:

void sensorRoutine(){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET); // Left sensor
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108e:	4814      	ldr	r0, [pc, #80]	; (80010e0 <sensorRoutine+0x5c>)
 8001090:	f002 fb5c 	bl	800374c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET); // Center sensor
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109a:	4811      	ldr	r0, [pc, #68]	; (80010e0 <sensorRoutine+0x5c>)
 800109c:	f002 fb56 	bl	800374c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET); // Right sensor
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <sensorRoutine+0x5c>)
 80010a8:	f002 fb50 	bl	800374c <HAL_GPIO_WritePin>
	delay_us(10);
 80010ac:	200a      	movs	r0, #10
 80010ae:	f7ff fec5 	bl	8000e3c <delay_us>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET); // Left sensor
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b8:	4809      	ldr	r0, [pc, #36]	; (80010e0 <sensorRoutine+0x5c>)
 80010ba:	f002 fb47 	bl	800374c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET); // Center sensor
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <sensorRoutine+0x5c>)
 80010c6:	f002 fb41 	bl	800374c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET); // Right sensor
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <sensorRoutine+0x5c>)
 80010d2:	f002 fb3b 	bl	800374c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80010d6:	2064      	movs	r0, #100	; 0x64
 80010d8:	f001 f970 	bl	80023bc <HAL_Delay>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40020c00 	.word	0x40020c00

080010e4 <sentryFireRoutine>:

void sentryFireRoutine(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  for(int i = 0; i < 12; i++){
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	e015      	b.n	800111c <sentryFireRoutine+0x38>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <sentryFireRoutine+0x48>)
 80010f6:	f002 fb42 	bl	800377e <HAL_GPIO_TogglePin>
	  playAudio(3); // Play sentry Fire sound
 80010fa:	2003      	movs	r0, #3
 80010fc:	f000 f818 	bl	8001130 <playAudio>
	  HAL_Delay(10);
 8001100:	200a      	movs	r0, #10
 8001102:	f001 f95b 	bl	80023bc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110a:	4808      	ldr	r0, [pc, #32]	; (800112c <sentryFireRoutine+0x48>)
 800110c:	f002 fb37 	bl	800377e <HAL_GPIO_TogglePin>
	  HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f001 f953 	bl	80023bc <HAL_Delay>
  for(int i = 0; i < 12; i++){
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3301      	adds	r3, #1
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b0b      	cmp	r3, #11
 8001120:	dde6      	ble.n	80010f0 <sentryFireRoutine+0xc>
	  //HAL_Delay(240);
  }
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40020400 	.word	0x40020400

08001130 <playAudio>:

void playAudio(uint8_t audioTrack){
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af02      	add	r7, sp, #8
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	switch(audioTrack){
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b03      	cmp	r3, #3
 800113e:	d018      	beq.n	8001172 <playAudio+0x42>
 8001140:	2b03      	cmp	r3, #3
 8001142:	dc1f      	bgt.n	8001184 <playAudio+0x54>
 8001144:	2b01      	cmp	r3, #1
 8001146:	d002      	beq.n	800114e <playAudio+0x1e>
 8001148:	2b02      	cmp	r3, #2
 800114a:	d009      	beq.n	8001160 <playAudio+0x30>
 800114c:	e01a      	b.n	8001184 <playAudio+0x54>
		case 1: // sentry scan sound
			tempPointer_DAC = (uint8_t *)sentryScantWavPointer;
 800114e:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <playAudio+0xc0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a28      	ldr	r2, [pc, #160]	; (80011f4 <playAudio+0xc4>)
 8001154:	6013      	str	r3, [r2, #0]
			count = sentryScan_wavSize;
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <playAudio+0xc8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a28      	ldr	r2, [pc, #160]	; (80011fc <playAudio+0xcc>)
 800115c:	6013      	str	r3, [r2, #0]
			break;
 800115e:	e011      	b.n	8001184 <playAudio+0x54>
		case 2: // sentry spot client sound
			tempPointer_DAC = (uint8_t *)sentrySpotWavPointer;
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <playAudio+0xd0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a23      	ldr	r2, [pc, #140]	; (80011f4 <playAudio+0xc4>)
 8001166:	6013      	str	r3, [r2, #0]
			count = sentrySpot_wavSize;
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <playAudio+0xd4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a23      	ldr	r2, [pc, #140]	; (80011fc <playAudio+0xcc>)
 800116e:	6013      	str	r3, [r2, #0]
			break;
 8001170:	e008      	b.n	8001184 <playAudio+0x54>
		case 3: // sentry firing sound
			tempPointer_DAC = (uint8_t *)sentryShootWavPointer;
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <playAudio+0xd8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <playAudio+0xc4>)
 8001178:	6013      	str	r3, [r2, #0]
			count = sentryShoot_wavSize;
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <playAudio+0xdc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <playAudio+0xcc>)
 8001180:	6013      	str	r3, [r2, #0]
			break;
 8001182:	bf00      	nop
	}
	for(int i = 0; i < 512; i++){
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	e011      	b.n	80011ae <playAudio+0x7e>
		wavBuffer[i] = *tempPointer_DAC << 4;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <playAudio+0xc4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	b299      	uxth	r1, r3
 8001196:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <playAudio+0xe0>)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tempPointer_DAC++;
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <playAudio+0xc4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a13      	ldr	r2, [pc, #76]	; (80011f4 <playAudio+0xc4>)
 80011a6:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 512; i++){
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3301      	adds	r3, #1
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011b4:	dbe9      	blt.n	800118a <playAudio+0x5a>
	}
	count -= 512;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <playAudio+0xcc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <playAudio+0xcc>)
 80011c0:	6013      	str	r3, [r2, #0]
	while(count > 0){
 80011c2:	e008      	b.n	80011d6 <playAudio+0xa6>
		HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)wavBuffer, 512, DAC_ALIGN_12B_R);
 80011c4:	2300      	movs	r3, #0
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011cc:	4a10      	ldr	r2, [pc, #64]	; (8001210 <playAudio+0xe0>)
 80011ce:	2100      	movs	r1, #0
 80011d0:	4810      	ldr	r0, [pc, #64]	; (8001214 <playAudio+0xe4>)
 80011d2:	f001 fa9d 	bl	8002710 <HAL_DAC_Start_DMA>
	while(count > 0){
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <playAudio+0xcc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	dcf2      	bgt.n	80011c4 <playAudio+0x94>
	}
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80011de:	2100      	movs	r1, #0
 80011e0:	480c      	ldr	r0, [pc, #48]	; (8001214 <playAudio+0xe4>)
 80011e2:	f001 fb63 	bl	80028ac <HAL_DAC_Stop_DMA>
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000001c 	.word	0x2000001c
 80011f4:	20000694 	.word	0x20000694
 80011f8:	20000010 	.word	0x20000010
 80011fc:	20000068 	.word	0x20000068
 8001200:	20000018 	.word	0x20000018
 8001204:	2000000c 	.word	0x2000000c
 8001208:	20000014 	.word	0x20000014
 800120c:	20000008 	.word	0x20000008
 8001210:	2000013c 	.word	0x2000013c
 8001214:	200005e8 	.word	0x200005e8

08001218 <getSineVal>:

void getSineVal(){
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
	for(int i = 0; i < samples; i++){
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	e040      	b.n	80012a6 <getSineVal+0x8e>
		sineVal[i] = (sin(2*i*PI/samples)+1)*((0xFFF+1)/2);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f93f 	bl	80004ac <__aeabi_i2d>
 800122e:	a328      	add	r3, pc, #160	; (adr r3, 80012d0 <getSineVal+0xb8>)
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f7ff f9a4 	bl	8000580 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4614      	mov	r4, r2
 800123e:	461d      	mov	r5, r3
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <getSineVal+0xa8>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f931 	bl	80004ac <__aeabi_i2d>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4620      	mov	r0, r4
 8001250:	4629      	mov	r1, r5
 8001252:	f7ff fabf 	bl	80007d4 <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	ec43 2b17 	vmov	d7, r2, r3
 800125e:	eeb0 0a47 	vmov.f32	s0, s14
 8001262:	eef0 0a67 	vmov.f32	s1, s15
 8001266:	f005 fb93 	bl	8006990 <sin>
 800126a:	ec51 0b10 	vmov	r0, r1, d0
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <getSineVal+0xac>)
 8001274:	f7fe ffce 	bl	8000214 <__adddf3>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <getSineVal+0xb0>)
 8001286:	f7ff f97b 	bl	8000580 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fc37 	bl	8000b04 <__aeabi_d2uiz>
 8001296:	4602      	mov	r2, r0
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <getSineVal+0xb4>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < samples; i++){
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <getSineVal+0xa8>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4293      	cmp	r3, r2
 80012b0:	dbb8      	blt.n	8001224 <getSineVal+0xc>
	}
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bdb0      	pop	{r4, r5, r7, pc}
 80012bc:	f3af 8000 	nop.w
 80012c0:	20000004 	.word	0x20000004
 80012c4:	3ff00000 	.word	0x3ff00000
 80012c8:	40a00000 	.word	0x40a00000
 80012cc:	20000698 	.word	0x20000698
 80012d0:	4d12d84a 	.word	0x4d12d84a
 80012d4:	400921fb 	.word	0x400921fb

080012d8 <stepper_set_rpm>:

void stepper_set_rpm(float rpm){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	ed87 0a01 	vstr	s0, [r7, #4]
	delay_us(60000000/stepsPerRev/rpm);
 80012e2:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001308 <stepper_set_rpm+0x30>
 80012e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80012ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f2:	ee17 3a90 	vmov	r3, s15
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fd9f 	bl	8000e3c <delay_us>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	47927c00 	.word	0x47927c00

0800130c <step>:

void step(){ // A4988 Step pin
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <step+0x28>)
 8001318:	f002 fa18 	bl	800374c <HAL_GPIO_WritePin>
	delay_us(1);
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff fd8d 	bl	8000e3c <delay_us>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <step+0x28>)
 800132a:	f002 fa0f 	bl	800374c <HAL_GPIO_WritePin>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40020800 	.word	0x40020800

08001338 <stepper_step_angle>:

void stepper_step_angle(float angle, float rpm, uint8_t direction){
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001342:	edc7 0a02 	vstr	s1, [r7, #8]
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	float anglePerStep = 1.8/4; // Quarter step
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <stepper_step_angle+0x88>)
 800134c:	61bb      	str	r3, [r7, #24]
	int numOfSteps = (int) (angle/anglePerStep);
 800134e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001352:	ed97 7a06 	vldr	s14, [r7, #24]
 8001356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800135a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135e:	ee17 3a90 	vmov	r3, s15
 8001362:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < numOfSteps; i++){
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	e020      	b.n	80013ac <stepper_step_angle+0x74>
		if(direction == 0) {// Clockwise
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10b      	bne.n	8001388 <stepper_step_angle+0x50>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001376:	4813      	ldr	r0, [pc, #76]	; (80013c4 <stepper_step_angle+0x8c>)
 8001378:	f002 f9e8 	bl	800374c <HAL_GPIO_WritePin>
			step();
 800137c:	f7ff ffc6 	bl	800130c <step>
			stepper_set_rpm(rpm);
 8001380:	ed97 0a02 	vldr	s0, [r7, #8]
 8001384:	f7ff ffa8 	bl	80012d8 <stepper_set_rpm>
		}
		if(direction == 1) {// Counter Clockwise
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d10b      	bne.n	80013a6 <stepper_step_angle+0x6e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <stepper_step_angle+0x8c>)
 8001396:	f002 f9d9 	bl	800374c <HAL_GPIO_WritePin>
			step();
 800139a:	f7ff ffb7 	bl	800130c <step>
			stepper_set_rpm(rpm);
 800139e:	ed97 0a02 	vldr	s0, [r7, #8]
 80013a2:	f7ff ff99 	bl	80012d8 <stepper_set_rpm>
	for(int i = 0; i < numOfSteps; i++){
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dbda      	blt.n	800136a <stepper_step_angle+0x32>
		}
	}
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	3ee66666 	.word	0x3ee66666
 80013c4:	40020800 	.word	0x40020800

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013cc:	f000 ff99 	bl	8002302 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d0:	f000 f8b4 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d4:	f000 fb9c 	bl	8001b10 <MX_GPIO_Init>
  MX_DMA_Init();
 80013d8:	f000 fb7c 	bl	8001ad4 <MX_DMA_Init>
  MX_TIM1_Init();
 80013dc:	f000 f968 	bl	80016b0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013e0:	f000 fa24 	bl	800182c <MX_TIM3_Init>
  MX_DAC_Init();
 80013e4:	f000 f93a 	bl	800165c <MX_DAC_Init>
  MX_USART3_UART_Init();
 80013e8:	f000 fb44 	bl	8001a74 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 80013ec:	f000 faa2 	bl	8001934 <MX_TIM8_Init>
  MX_TIM6_Init();
 80013f0:	f000 fa6a 	bl	80018c8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80013f4:	2100      	movs	r1, #0
 80013f6:	4847      	ldr	r0, [pc, #284]	; (8001514 <main+0x14c>)
 80013f8:	f003 fbf8 	bl	8004bec <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80013fc:	2104      	movs	r1, #4
 80013fe:	4845      	ldr	r0, [pc, #276]	; (8001514 <main+0x14c>)
 8001400:	f003 fbf4 	bl	8004bec <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8001404:	4844      	ldr	r0, [pc, #272]	; (8001518 <main+0x150>)
 8001406:	f003 fb1f 	bl	8004a48 <HAL_TIM_Base_Start>

  getSineVal();
 800140a:	f7ff ff05 	bl	8001218 <getSineVal>
  HAL_TIM_Base_Start(&htim6);
 800140e:	4843      	ldr	r0, [pc, #268]	; (800151c <main+0x154>)
 8001410:	f003 fb1a 	bl	8004a48 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001414:	2100      	movs	r1, #0
 8001416:	4842      	ldr	r0, [pc, #264]	; (8001520 <main+0x158>)
 8001418:	f001 f927 	bl	800266a <HAL_DAC_Start>

  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  USART3->CR1 |= (1<<5); // Enable Receive Data Interrupt
 800141c:	4b41      	ldr	r3, [pc, #260]	; (8001524 <main+0x15c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a40      	ldr	r2, [pc, #256]	; (8001524 <main+0x15c>)
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  playAudio(1); // Scanning sound
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff fe81 	bl	8001130 <playAudio>
	  stepper_step_angle(90,7.5,0); // Turn
 800142e:	2000      	movs	r0, #0
 8001430:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 8001434:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001528 <main+0x160>
 8001438:	f7ff ff7e 	bl	8001338 <stepper_step_angle>
	  playAudio(1); // Scanning sound
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff fe77 	bl	8001130 <playAudio>
	  HAL_Delay(150);
 8001442:	2096      	movs	r0, #150	; 0x96
 8001444:	f000 ffba 	bl	80023bc <HAL_Delay>
	  stepper_step_angle(90,7.5,1); // Turn
 8001448:	2001      	movs	r0, #1
 800144a:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 800144e:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8001528 <main+0x160>
 8001452:	f7ff ff71 	bl	8001338 <stepper_step_angle>
	  sensorRoutine();
 8001456:	f7ff fe15 	bl	8001084 <sensorRoutine>

	  // Sentry responds when object within 30cm/12in
	  if(distanceLeft < 22 && distanceLeft < distanceCenter && distanceLeft < distanceRight){
 800145a:	4b34      	ldr	r3, [pc, #208]	; (800152c <main+0x164>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b15      	cmp	r3, #21
 8001460:	dc1e      	bgt.n	80014a0 <main+0xd8>
 8001462:	4b32      	ldr	r3, [pc, #200]	; (800152c <main+0x164>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <main+0x168>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	da18      	bge.n	80014a0 <main+0xd8>
 800146e:	4b2f      	ldr	r3, [pc, #188]	; (800152c <main+0x164>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <main+0x16c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	da12      	bge.n	80014a0 <main+0xd8>
	   	  playAudio(2); // Spotted client sound
 800147a:	2002      	movs	r0, #2
 800147c:	f7ff fe58 	bl	8001130 <playAudio>
		  stepper_step_angle(45,15,1); // Turn left 45, at a rate of 15 RPM
 8001480:	2001      	movs	r0, #1
 8001482:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8001486:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8001538 <main+0x170>
 800148a:	f7ff ff55 	bl	8001338 <stepper_step_angle>
		  sentryFireRoutine();
 800148e:	f7ff fe29 	bl	80010e4 <sentryFireRoutine>
		  stepper_step_angle(45,7.5,0); // Return to last position
 8001492:	2000      	movs	r0, #0
 8001494:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 8001498:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001538 <main+0x170>
 800149c:	f7ff ff4c 	bl	8001338 <stepper_step_angle>
	  }
	  if(distanceCenter < 22 && distanceCenter < distanceLeft && distanceCenter < distanceRight){
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <main+0x168>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b15      	cmp	r3, #21
 80014a6:	dc10      	bgt.n	80014ca <main+0x102>
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <main+0x168>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <main+0x164>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	da0a      	bge.n	80014ca <main+0x102>
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <main+0x168>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <main+0x16c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	da04      	bge.n	80014ca <main+0x102>
	   	  playAudio(2); // Spotted client sound
 80014c0:	2002      	movs	r0, #2
 80014c2:	f7ff fe35 	bl	8001130 <playAudio>
		  //stepper_step_angle(45,15); // Do not turn, stop movement.
		  sentryFireRoutine();
 80014c6:	f7ff fe0d 	bl	80010e4 <sentryFireRoutine>
	  }
	  if(distanceRight < 22 && distanceRight < distanceCenter && distanceRight < distanceLeft){
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <main+0x16c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b15      	cmp	r3, #21
 80014d0:	dcaa      	bgt.n	8001428 <main+0x60>
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <main+0x16c>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <main+0x168>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	daa4      	bge.n	8001428 <main+0x60>
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <main+0x16c>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <main+0x164>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	da9e      	bge.n	8001428 <main+0x60>
	   	  playAudio(2); // Spotted client sound
 80014ea:	2002      	movs	r0, #2
 80014ec:	f7ff fe20 	bl	8001130 <playAudio>
		  stepper_step_angle(45,15,0); // Turn right 45, at a rate of 15 RPM
 80014f0:	2000      	movs	r0, #0
 80014f2:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 80014f6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001538 <main+0x170>
 80014fa:	f7ff ff1d 	bl	8001338 <stepper_step_angle>
		  sentryFireRoutine();
 80014fe:	f7ff fdf1 	bl	80010e4 <sentryFireRoutine>
		  stepper_step_angle(45,7.5,1); // Return to last position
 8001502:	2001      	movs	r0, #1
 8001504:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 8001508:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001538 <main+0x170>
 800150c:	f7ff ff14 	bl	8001338 <stepper_step_angle>
	  playAudio(1); // Scanning sound
 8001510:	e78a      	b.n	8001428 <main+0x60>
 8001512:	bf00      	nop
 8001514:	20000648 	.word	0x20000648
 8001518:	2000053c 	.word	0x2000053c
 800151c:	200005fc 	.word	0x200005fc
 8001520:	200005e8 	.word	0x200005e8
 8001524:	40004800 	.word	0x40004800
 8001528:	42b40000 	.word	0x42b40000
 800152c:	2000005c 	.word	0x2000005c
 8001530:	20000060 	.word	0x20000060
 8001534:	20000064 	.word	0x20000064
 8001538:	42340000 	.word	0x42340000

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0b4      	sub	sp, #208	; 0xd0
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001546:	2230      	movs	r2, #48	; 0x30
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f005 fa16 	bl	800697c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	2284      	movs	r2, #132	; 0x84
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f005 fa07 	bl	800697c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <SystemClock_Config+0x118>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a38      	ldr	r2, [pc, #224]	; (8001654 <SystemClock_Config+0x118>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b36      	ldr	r3, [pc, #216]	; (8001654 <SystemClock_Config+0x118>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001586:	4b34      	ldr	r3, [pc, #208]	; (8001658 <SystemClock_Config+0x11c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800158e:	4a32      	ldr	r2, [pc, #200]	; (8001658 <SystemClock_Config+0x11c>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <SystemClock_Config+0x11c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a8:	2301      	movs	r3, #1
 80015aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ae:	2310      	movs	r3, #16
 80015b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015c0:	2308      	movs	r3, #8
 80015c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 80;
 80015c6:	2350      	movs	r3, #80	; 0x50
 80015c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80015d2:	2305      	movs	r3, #5
 80015d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 f90d 	bl	80037fc <HAL_RCC_OscConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80015e8:	f000 fc26 	bl	8001e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ec:	230f      	movs	r3, #15
 80015ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001602:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001606:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800160a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800160e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001612:	2102      	movs	r1, #2
 8001614:	4618      	mov	r0, r3
 8001616:	f002 fb95 	bl	8003d44 <HAL_RCC_ClockConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001620:	f000 fc0a 	bl	8001e38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001628:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800162a:	2300      	movs	r3, #0
 800162c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	4618      	mov	r0, r3
 8001634:	f002 fdc0 	bl	80041b8 <HAL_RCCEx_PeriphCLKConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0x106>
  {
    Error_Handler();
 800163e:	f000 fbfb 	bl	8001e38 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2000      	movs	r0, #0
 8001648:	f002 fc68 	bl	8003f1c <HAL_RCC_MCOConfig>
}
 800164c:	bf00      	nop
 800164e:	37d0      	adds	r7, #208	; 0xd0
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	40007000 	.word	0x40007000

0800165c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_DAC_Init+0x4c>)
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <MX_DAC_Init+0x50>)
 800166e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_DAC_Init+0x4c>)
 8001672:	f000 ffd8 	bl	8002626 <HAL_DAC_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800167c:	f000 fbdc 	bl	8001e38 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001680:	2304      	movs	r3, #4
 8001682:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_DAC_Init+0x4c>)
 8001690:	f001 f9c2 	bl	8002a18 <HAL_DAC_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800169a:	f000 fbcd 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200005e8 	.word	0x200005e8
 80016ac:	40007400 	.word	0x40007400

080016b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b090      	sub	sp, #64	; 0x40
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016ec:	4b4d      	ldr	r3, [pc, #308]	; (8001824 <MX_TIM1_Init+0x174>)
 80016ee:	4a4e      	ldr	r2, [pc, #312]	; (8001828 <MX_TIM1_Init+0x178>)
 80016f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 80016f2:	4b4c      	ldr	r3, [pc, #304]	; (8001824 <MX_TIM1_Init+0x174>)
 80016f4:	2209      	movs	r2, #9
 80016f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b4a      	ldr	r3, [pc, #296]	; (8001824 <MX_TIM1_Init+0x174>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016fe:	4b49      	ldr	r3, [pc, #292]	; (8001824 <MX_TIM1_Init+0x174>)
 8001700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001704:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001706:	4b47      	ldr	r3, [pc, #284]	; (8001824 <MX_TIM1_Init+0x174>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800170c:	4b45      	ldr	r3, [pc, #276]	; (8001824 <MX_TIM1_Init+0x174>)
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001712:	4b44      	ldr	r3, [pc, #272]	; (8001824 <MX_TIM1_Init+0x174>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001718:	4842      	ldr	r0, [pc, #264]	; (8001824 <MX_TIM1_Init+0x174>)
 800171a:	f003 f93d 	bl	8004998 <HAL_TIM_Base_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001724:	f000 fb88 	bl	8001e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800172e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001732:	4619      	mov	r1, r3
 8001734:	483b      	ldr	r0, [pc, #236]	; (8001824 <MX_TIM1_Init+0x174>)
 8001736:	f003 fd57 	bl	80051e8 <HAL_TIM_ConfigClockSource>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001740:	f000 fb7a 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001744:	4837      	ldr	r0, [pc, #220]	; (8001824 <MX_TIM1_Init+0x174>)
 8001746:	f003 f9ef 	bl	8004b28 <HAL_TIM_IC_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001750:	f000 fb72 	bl	8001e38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001754:	2304      	movs	r3, #4
 8001756:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001758:	2350      	movs	r3, #80	; 0x50
 800175a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	482e      	ldr	r0, [pc, #184]	; (8001824 <MX_TIM1_Init+0x174>)
 800176c:	f003 fe02 	bl	8005374 <HAL_TIM_SlaveConfigSynchro>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001776:	f000 fb5f 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	4619      	mov	r1, r3
 800178c:	4825      	ldr	r0, [pc, #148]	; (8001824 <MX_TIM1_Init+0x174>)
 800178e:	f004 f9b9 	bl	8005b04 <HAL_TIMEx_MasterConfigSynchronization>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001798:	f000 fb4e 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800179c:	2300      	movs	r3, #0
 800179e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017a0:	2301      	movs	r3, #1
 80017a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	2200      	movs	r2, #0
 80017b0:	4619      	mov	r1, r3
 80017b2:	481c      	ldr	r0, [pc, #112]	; (8001824 <MX_TIM1_Init+0x174>)
 80017b4:	f003 fc83 	bl	80050be <HAL_TIM_IC_ConfigChannel>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80017be:	f000 fb3b 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80017c2:	2302      	movs	r3, #2
 80017c4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80017c6:	2302      	movs	r3, #2
 80017c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80017ca:	463b      	mov	r3, r7
 80017cc:	2204      	movs	r2, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4814      	ldr	r0, [pc, #80]	; (8001824 <MX_TIM1_Init+0x174>)
 80017d2:	f003 fc74 	bl	80050be <HAL_TIM_IC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80017dc:	f000 fb2c 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017e0:	2300      	movs	r3, #0
 80017e2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017e4:	2301      	movs	r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80017e8:	463b      	mov	r3, r7
 80017ea:	2208      	movs	r2, #8
 80017ec:	4619      	mov	r1, r3
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <MX_TIM1_Init+0x174>)
 80017f0:	f003 fc65 	bl	80050be <HAL_TIM_IC_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80017fa:	f000 fb1d 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80017fe:	2302      	movs	r3, #2
 8001800:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001802:	2302      	movs	r3, #2
 8001804:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	220c      	movs	r2, #12
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_TIM1_Init+0x174>)
 800180e:	f003 fc56 	bl	80050be <HAL_TIM_IC_ConfigChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001818:	f000 fb0e 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	3740      	adds	r7, #64	; 0x40
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000648 	.word	0x20000648
 8001828:	40010000 	.word	0x40010000

0800182c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_TIM3_Init+0x94>)
 800184c:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <MX_TIM3_Init+0x98>)
 800184e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <MX_TIM3_Init+0x94>)
 8001852:	224f      	movs	r2, #79	; 0x4f
 8001854:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM3_Init+0x94>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_TIM3_Init+0x94>)
 800185e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001862:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <MX_TIM3_Init+0x94>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_TIM3_Init+0x94>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <MX_TIM3_Init+0x94>)
 8001872:	f003 f891 	bl	8004998 <HAL_TIM_Base_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800187c:	f000 fadc 	bl	8001e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001884:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	4619      	mov	r1, r3
 800188c:	480c      	ldr	r0, [pc, #48]	; (80018c0 <MX_TIM3_Init+0x94>)
 800188e:	f003 fcab 	bl	80051e8 <HAL_TIM_ConfigClockSource>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001898:	f000 face 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_TIM3_Init+0x94>)
 80018aa:	f004 f92b 	bl	8005b04 <HAL_TIMEx_MasterConfigSynchronization>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018b4:	f000 fac0 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000053c 	.word	0x2000053c
 80018c4:	40000400 	.word	0x40000400

080018c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_TIM6_Init+0x64>)
 80018da:	4a15      	ldr	r2, [pc, #84]	; (8001930 <MX_TIM6_Init+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_TIM6_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_TIM6_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1814-1;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_TIM6_Init+0x64>)
 80018ec:	f240 7215 	movw	r2, #1813	; 0x715
 80018f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_TIM6_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <MX_TIM6_Init+0x64>)
 80018fa:	f003 f84d 	bl	8004998 <HAL_TIM_Base_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001904:	f000 fa98 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001908:	2320      	movs	r3, #32
 800190a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_TIM6_Init+0x64>)
 8001916:	f004 f8f5 	bl	8005b04 <HAL_TIMEx_MasterConfigSynchronization>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001920:	f000 fa8a 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200005fc 	.word	0x200005fc
 8001930:	40001000 	.word	0x40001000

08001934 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b090      	sub	sp, #64	; 0x40
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001964:	463b      	mov	r3, r7
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001970:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <MX_TIM8_Init+0x138>)
 8001972:	4a3f      	ldr	r2, [pc, #252]	; (8001a70 <MX_TIM8_Init+0x13c>)
 8001974:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 10-1;
 8001976:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <MX_TIM8_Init+0x138>)
 8001978:	2209      	movs	r2, #9
 800197a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <MX_TIM8_Init+0x138>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001982:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <MX_TIM8_Init+0x138>)
 8001984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001988:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <MX_TIM8_Init+0x138>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001990:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <MX_TIM8_Init+0x138>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001996:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <MX_TIM8_Init+0x138>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800199c:	4833      	ldr	r0, [pc, #204]	; (8001a6c <MX_TIM8_Init+0x138>)
 800199e:	f002 fffb 	bl	8004998 <HAL_TIM_Base_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80019a8:	f000 fa46 	bl	8001e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b6:	4619      	mov	r1, r3
 80019b8:	482c      	ldr	r0, [pc, #176]	; (8001a6c <MX_TIM8_Init+0x138>)
 80019ba:	f003 fc15 	bl	80051e8 <HAL_TIM_ConfigClockSource>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80019c4:	f000 fa38 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80019c8:	4828      	ldr	r0, [pc, #160]	; (8001a6c <MX_TIM8_Init+0x138>)
 80019ca:	f003 f8ad 	bl	8004b28 <HAL_TIM_IC_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80019d4:	f000 fa30 	bl	8001e38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80019d8:	2304      	movs	r3, #4
 80019da:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80019dc:	2350      	movs	r3, #80	; 0x50
 80019de:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	481f      	ldr	r0, [pc, #124]	; (8001a6c <MX_TIM8_Init+0x138>)
 80019f0:	f003 fcc0 	bl	8005374 <HAL_TIM_SlaveConfigSynchro>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80019fa:	f000 fa1d 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4816      	ldr	r0, [pc, #88]	; (8001a6c <MX_TIM8_Init+0x138>)
 8001a12:	f004 f877 	bl	8005b04 <HAL_TIMEx_MasterConfigSynchronization>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8001a1c:	f000 fa0c 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a20:	2300      	movs	r3, #0
 8001a22:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a24:	2301      	movs	r3, #1
 8001a26:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a30:	463b      	mov	r3, r7
 8001a32:	2200      	movs	r2, #0
 8001a34:	4619      	mov	r1, r3
 8001a36:	480d      	ldr	r0, [pc, #52]	; (8001a6c <MX_TIM8_Init+0x138>)
 8001a38:	f003 fb41 	bl	80050be <HAL_TIM_IC_ConfigChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8001a42:	f000 f9f9 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a46:	2302      	movs	r3, #2
 8001a48:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a4e:	463b      	mov	r3, r7
 8001a50:	2204      	movs	r2, #4
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_TIM8_Init+0x138>)
 8001a56:	f003 fb32 	bl	80050be <HAL_TIM_IC_ConfigChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001a60:	f000 f9ea 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	3740      	adds	r7, #64	; 0x40
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2000006c 	.word	0x2000006c
 8001a70:	40010400 	.word	0x40010400

08001a74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_USART3_UART_Init+0x58>)
 8001a7a:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <MX_USART3_UART_Init+0x5c>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_USART3_UART_Init+0x58>)
 8001a80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_USART3_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_USART3_UART_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_USART3_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_USART3_UART_Init+0x58>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_USART3_UART_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_USART3_UART_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_USART3_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_USART3_UART_Init+0x58>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_USART3_UART_Init+0x58>)
 8001ab8:	f004 f8d0 	bl	8005c5c <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ac2:	f000 f9b9 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200000b8 	.word	0x200000b8
 8001ad0:	40004800 	.word	0x40004800

08001ad4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <MX_DMA_Init+0x38>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <MX_DMA_Init+0x38>)
 8001ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <MX_DMA_Init+0x38>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	2010      	movs	r0, #16
 8001af8:	f000 fd5f 	bl	80025ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001afc:	2010      	movs	r0, #16
 8001afe:	f000 fd78 	bl	80025f2 <HAL_NVIC_EnableIRQ>

}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800

08001b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08e      	sub	sp, #56	; 0x38
 8001b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b26:	4b90      	ldr	r3, [pc, #576]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a8f      	ldr	r2, [pc, #572]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b8d      	ldr	r3, [pc, #564]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	623b      	str	r3, [r7, #32]
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b3e:	4b8a      	ldr	r3, [pc, #552]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a89      	ldr	r2, [pc, #548]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b87      	ldr	r3, [pc, #540]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4b84      	ldr	r3, [pc, #528]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a83      	ldr	r2, [pc, #524]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b81      	ldr	r3, [pc, #516]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	61bb      	str	r3, [r7, #24]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b7e      	ldr	r3, [pc, #504]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a7d      	ldr	r2, [pc, #500]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b7b      	ldr	r3, [pc, #492]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b86:	4b78      	ldr	r3, [pc, #480]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a77      	ldr	r2, [pc, #476]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b8c:	f043 0320 	orr.w	r3, r3, #32
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b75      	ldr	r3, [pc, #468]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9e:	4b72      	ldr	r3, [pc, #456]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a71      	ldr	r2, [pc, #452]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001ba4:	f043 0310 	orr.w	r3, r3, #16
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b6f      	ldr	r3, [pc, #444]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb6:	4b6c      	ldr	r3, [pc, #432]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a6b      	ldr	r2, [pc, #428]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b69      	ldr	r3, [pc, #420]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bce:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a65      	ldr	r2, [pc, #404]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <MX_GPIO_Init+0x258>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001be6:	2200      	movs	r2, #0
 8001be8:	f640 7101 	movw	r1, #3841	; 0xf01
 8001bec:	485f      	ldr	r0, [pc, #380]	; (8001d6c <MX_GPIO_Init+0x25c>)
 8001bee:	f001 fdad 	bl	800374c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f240 1181 	movw	r1, #385	; 0x181
 8001bf8:	485d      	ldr	r0, [pc, #372]	; (8001d70 <MX_GPIO_Init+0x260>)
 8001bfa:	f001 fda7 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c04:	485b      	ldr	r0, [pc, #364]	; (8001d74 <MX_GPIO_Init+0x264>)
 8001c06:	f001 fda1 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8001c10:	4859      	ldr	r0, [pc, #356]	; (8001d78 <MX_GPIO_Init+0x268>)
 8001c12:	f001 fd9b 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2108      	movs	r1, #8
 8001c1a:	4858      	ldr	r0, [pc, #352]	; (8001d7c <MX_GPIO_Init+0x26c>)
 8001c1c:	f001 fd96 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c26:	4b56      	ldr	r3, [pc, #344]	; (8001d80 <MX_GPIO_Init+0x270>)
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c32:	4619      	mov	r1, r3
 8001c34:	484d      	ldr	r0, [pc, #308]	; (8001d6c <MX_GPIO_Init+0x25c>)
 8001c36:	f001 fbdd 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4846      	ldr	r0, [pc, #280]	; (8001d6c <MX_GPIO_Init+0x25c>)
 8001c52:	f001 fbcf 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c56:	2308      	movs	r3, #8
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c5a:	4b49      	ldr	r3, [pc, #292]	; (8001d80 <MX_GPIO_Init+0x270>)
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	4846      	ldr	r0, [pc, #280]	; (8001d84 <MX_GPIO_Init+0x274>)
 8001c6a:	f001 fbc3 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8001c6e:	2381      	movs	r3, #129	; 0x81
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c82:	4619      	mov	r1, r3
 8001c84:	483a      	ldr	r0, [pc, #232]	; (8001d70 <MX_GPIO_Init+0x260>)
 8001c86:	f001 fbb5 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4834      	ldr	r0, [pc, #208]	; (8001d74 <MX_GPIO_Init+0x264>)
 8001ca4:	f001 fba6 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001ca8:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	482d      	ldr	r0, [pc, #180]	; (8001d78 <MX_GPIO_Init+0x268>)
 8001cc2:	f001 fb97 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4827      	ldr	r0, [pc, #156]	; (8001d7c <MX_GPIO_Init+0x26c>)
 8001cde:	f001 fb89 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001ce2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	481c      	ldr	r0, [pc, #112]	; (8001d6c <MX_GPIO_Init+0x25c>)
 8001cfc:	f001 fb7a 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4819      	ldr	r0, [pc, #100]	; (8001d84 <MX_GPIO_Init+0x274>)
 8001d1e:	f001 fb69 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d30:	2302      	movs	r3, #2
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480d      	ldr	r0, [pc, #52]	; (8001d70 <MX_GPIO_Init+0x260>)
 8001d3c:	f001 fb5a 	bl	80033f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2100      	movs	r1, #0
 8001d44:	2009      	movs	r0, #9
 8001d46:	f000 fc38 	bl	80025ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d4a:	2009      	movs	r0, #9
 8001d4c:	f000 fc51 	bl	80025f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	2028      	movs	r0, #40	; 0x28
 8001d56:	f000 fc30 	bl	80025ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d5a:	2028      	movs	r0, #40	; 0x28
 8001d5c:	f000 fc49 	bl	80025f2 <HAL_NVIC_EnableIRQ>

}
 8001d60:	bf00      	nop
 8001d62:	3738      	adds	r7, #56	; 0x38
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	40020400 	.word	0x40020400
 8001d74:	40021400 	.word	0x40021400
 8001d78:	40020c00 	.word	0x40020c00
 8001d7c:	40021800 	.word	0x40021800
 8001d80:	10110000 	.word	0x10110000
 8001d84:	40020000 	.word	0x40020000

08001d88 <HAL_DAC_ConvHalfCpltCallbackCh1>:

/* USER CODE BEGIN 4 */

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac){
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 255; i++){
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	e011      	b.n	8001dba <HAL_DAC_ConvHalfCpltCallbackCh1+0x32>
		wavBuffer[i] = *tempPointer_DAC << 4; // 12 bit data to increase volume
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x48>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	b299      	uxth	r1, r3
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x4c>)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tempPointer_DAC++;
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x48>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x48>)
 8001db2:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 255; i++){
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3301      	adds	r3, #1
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2bfe      	cmp	r3, #254	; 0xfe
 8001dbe:	ddea      	ble.n	8001d96 <HAL_DAC_ConvHalfCpltCallbackCh1+0xe>
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000694 	.word	0x20000694
 8001dd4:	2000013c 	.word	0x2000013c

08001dd8 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac){
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	for(int i = 255; i < 512; i++){
 8001de0:	23ff      	movs	r3, #255	; 0xff
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	e011      	b.n	8001e0a <HAL_DAC_ConvCpltCallbackCh1+0x32>
		wavBuffer[i] = *tempPointer_DAC << 4;
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_DAC_ConvCpltCallbackCh1+0x54>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	b299      	uxth	r1, r3
 8001df2:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <HAL_DAC_ConvCpltCallbackCh1+0x58>)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tempPointer_DAC++;
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <HAL_DAC_ConvCpltCallbackCh1+0x54>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_DAC_ConvCpltCallbackCh1+0x54>)
 8001e02:	6013      	str	r3, [r2, #0]
	for(int i = 255; i < 512; i++){
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3301      	adds	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e10:	dbe9      	blt.n	8001de6 <HAL_DAC_ConvCpltCallbackCh1+0xe>
	}
	count -= 512;
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_DAC_ConvCpltCallbackCh1+0x5c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001e1a:	4a06      	ldr	r2, [pc, #24]	; (8001e34 <HAL_DAC_ConvCpltCallbackCh1+0x5c>)
 8001e1c:	6013      	str	r3, [r2, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000694 	.word	0x20000694
 8001e30:	2000013c 	.word	0x2000013c
 8001e34:	20000068 	.word	0x20000068

08001e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <Error_Handler+0x8>
	...

08001e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_MspInit+0x44>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <HAL_MspInit+0x44>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_MspInit+0x44>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_MspInit+0x44>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <HAL_MspInit+0x44>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_MspInit+0x44>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800

08001e8c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a32      	ldr	r2, [pc, #200]	; (8001f74 <HAL_DAC_MspInit+0xe8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d15d      	bne.n	8001f6a <HAL_DAC_MspInit+0xde>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a31      	ldr	r2, [pc, #196]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001eb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a2b      	ldr	r2, [pc, #172]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ede:	2310      	movs	r3, #16
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4822      	ldr	r0, [pc, #136]	; (8001f7c <HAL_DAC_MspInit+0xf0>)
 8001ef2:	f001 fa7f 	bl	80033f4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001ef6:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <HAL_DAC_MspInit+0xf4>)
 8001ef8:	4a22      	ldr	r2, [pc, #136]	; (8001f84 <HAL_DAC_MspInit+0xf8>)
 8001efa:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001efc:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_DAC_MspInit+0xf4>)
 8001efe:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001f02:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_DAC_MspInit+0xf4>)
 8001f06:	2240      	movs	r2, #64	; 0x40
 8001f08:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_DAC_MspInit+0xf4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_DAC_MspInit+0xf4>)
 8001f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f16:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_DAC_MspInit+0xf4>)
 8001f1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f1e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_DAC_MspInit+0xf4>)
 8001f22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f26:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_DAC_MspInit+0xf4>)
 8001f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f2e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <HAL_DAC_MspInit+0xf4>)
 8001f32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f36:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_DAC_MspInit+0xf4>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001f3e:	4810      	ldr	r0, [pc, #64]	; (8001f80 <HAL_DAC_MspInit+0xf4>)
 8001f40:	f000 fe4e 	bl	8002be0 <HAL_DMA_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8001f4a:	f7ff ff75 	bl	8001e38 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <HAL_DAC_MspInit+0xf4>)
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_DAC_MspInit+0xf4>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2036      	movs	r0, #54	; 0x36
 8001f60:	f000 fb2b 	bl	80025ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f64:	2036      	movs	r0, #54	; 0x36
 8001f66:	f000 fb44 	bl	80025f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40007400 	.word	0x40007400
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	20000588 	.word	0x20000588
 8001f84:	40026088 	.word	0x40026088

08001f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08e      	sub	sp, #56	; 0x38
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a48      	ldr	r2, [pc, #288]	; (80020c8 <HAL_TIM_Base_MspInit+0x140>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d131      	bne.n	800200e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001faa:	4b48      	ldr	r3, [pc, #288]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	4a47      	ldr	r2, [pc, #284]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb6:	4b45      	ldr	r3, [pc, #276]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	623b      	str	r3, [r7, #32]
 8001fc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc2:	4b42      	ldr	r3, [pc, #264]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a41      	ldr	r2, [pc, #260]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 8001fc8:	f043 0310 	orr.w	r3, r3, #16
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 8001fda:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4836      	ldr	r0, [pc, #216]	; (80020d0 <HAL_TIM_Base_MspInit+0x148>)
 8001ff8:	f001 f9fc 	bl	80033f4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	201b      	movs	r0, #27
 8002002:	f000 fada 	bl	80025ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002006:	201b      	movs	r0, #27
 8002008:	f000 faf3 	bl	80025f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800200c:	e058      	b.n	80020c0 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM3)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a30      	ldr	r2, [pc, #192]	; (80020d4 <HAL_TIM_Base_MspInit+0x14c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d10c      	bne.n	8002032 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002018:	4b2c      	ldr	r3, [pc, #176]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	6413      	str	r3, [r2, #64]	; 0x40
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	69bb      	ldr	r3, [r7, #24]
}
 8002030:	e046      	b.n	80020c0 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM6)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a28      	ldr	r2, [pc, #160]	; (80020d8 <HAL_TIM_Base_MspInit+0x150>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d114      	bne.n	8002066 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800203c:	4b23      	ldr	r3, [pc, #140]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 8002042:	f043 0310 	orr.w	r3, r3, #16
 8002046:	6413      	str	r3, [r2, #64]	; 0x40
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2100      	movs	r1, #0
 8002058:	2036      	movs	r0, #54	; 0x36
 800205a:	f000 faae 	bl	80025ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800205e:	2036      	movs	r0, #54	; 0x36
 8002060:	f000 fac7 	bl	80025f2 <HAL_NVIC_EnableIRQ>
}
 8002064:	e02c      	b.n	80020c0 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM8)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1c      	ldr	r2, [pc, #112]	; (80020dc <HAL_TIM_Base_MspInit+0x154>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d127      	bne.n	80020c0 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	4a15      	ldr	r2, [pc, #84]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	6453      	str	r3, [r2, #68]	; 0x44
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	6313      	str	r3, [r2, #48]	; 0x30
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_TIM_Base_MspInit+0x144>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020a0:	2340      	movs	r3, #64	; 0x40
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80020b0:	2303      	movs	r3, #3
 80020b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b8:	4619      	mov	r1, r3
 80020ba:	4809      	ldr	r0, [pc, #36]	; (80020e0 <HAL_TIM_Base_MspInit+0x158>)
 80020bc:	f001 f99a 	bl	80033f4 <HAL_GPIO_Init>
}
 80020c0:	bf00      	nop
 80020c2:	3738      	adds	r7, #56	; 0x38
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40000400 	.word	0x40000400
 80020d8:	40001000 	.word	0x40001000
 80020dc:	40010400 	.word	0x40010400
 80020e0:	40020800 	.word	0x40020800

080020e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <HAL_UART_MspInit+0x8c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d130      	bne.n	8002168 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_UART_MspInit+0x90>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a1a      	ldr	r2, [pc, #104]	; (8002174 <HAL_UART_MspInit+0x90>)
 800210c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_UART_MspInit+0x90>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_UART_MspInit+0x90>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a14      	ldr	r2, [pc, #80]	; (8002174 <HAL_UART_MspInit+0x90>)
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_UART_MspInit+0x90>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002136:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800213a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002148:	2307      	movs	r3, #7
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	4619      	mov	r1, r3
 8002152:	4809      	ldr	r0, [pc, #36]	; (8002178 <HAL_UART_MspInit+0x94>)
 8002154:	f001 f94e 	bl	80033f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002158:	2200      	movs	r2, #0
 800215a:	2100      	movs	r1, #0
 800215c:	2027      	movs	r0, #39	; 0x27
 800215e:	f000 fa2c 	bl	80025ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002162:	2027      	movs	r0, #39	; 0x27
 8002164:	f000 fa45 	bl	80025f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002168:	bf00      	nop
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40004800 	.word	0x40004800
 8002174:	40023800 	.word	0x40023800
 8002178:	40020400 	.word	0x40020400

0800217c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <NMI_Handler+0x4>

08002182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <HardFault_Handler+0x4>

08002188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <MemManage_Handler+0x4>

0800218e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002192:	e7fe      	b.n	8002192 <BusFault_Handler+0x4>

08002194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002198:	e7fe      	b.n	8002198 <UsageFault_Handler+0x4>

0800219a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c8:	f000 f8d8 	bl	800237c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80021d4:	2008      	movs	r0, #8
 80021d6:	f001 faed 	bl	80037b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <DMA1_Stream5_IRQHandler+0x10>)
 80021e6:	f000 fe9b 	bl	8002f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000588 	.word	0x20000588

080021f4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <TIM1_CC_IRQHandler+0x10>)
 80021fa:	f002 fe41 	bl	8004e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000648 	.word	0x20000648

08002208 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	// Interrupt was because of a transfer?
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800220e:	4811      	ldr	r0, [pc, #68]	; (8002254 <USART3_IRQHandler+0x4c>)
 8002210:	f003 fd72 	bl	8005cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  if(USART3->ISR & (1<<5)){   // Interrupt was because of a receive
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <USART3_IRQHandler+0x50>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d015      	beq.n	800224c <USART3_IRQHandler+0x44>
	  uint8_t c;
	  c = USART3->RDR; // Clears RXNE?
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <USART3_IRQHandler+0x50>)
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	71fb      	strb	r3, [r7, #7]
	  USART3->CR1 &= ~(1 << 2); // Clear RE to finish receive
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <USART3_IRQHandler+0x50>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <USART3_IRQHandler+0x50>)
 800222c:	f023 0304 	bic.w	r3, r3, #4
 8002230:	6013      	str	r3, [r2, #0]
	  if(c == 'c'){
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	2b63      	cmp	r3, #99	; 0x63
 8002236:	d103      	bne.n	8002240 <USART3_IRQHandler+0x38>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	4808      	ldr	r0, [pc, #32]	; (800225c <USART3_IRQHandler+0x54>)
 800223c:	f001 fa9f 	bl	800377e <HAL_GPIO_TogglePin>
	  }
	  USART3->CR1 |= 1 << 2; // Set RE to be ready to receive again
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <USART3_IRQHandler+0x50>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <USART3_IRQHandler+0x50>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END USART3_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	200000b8 	.word	0x200000b8
 8002258:	40004800 	.word	0x40004800
 800225c:	40020400 	.word	0x40020400

08002260 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002264:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002268:	f001 faa4 	bl	80037b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <TIM6_DAC_IRQHandler+0x14>)
 8002276:	f000 fb61 	bl	800293c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800227a:	4803      	ldr	r0, [pc, #12]	; (8002288 <TIM6_DAC_IRQHandler+0x18>)
 800227c:	f002 fe00 	bl	8004e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200005e8 	.word	0x200005e8
 8002288:	200005fc 	.word	0x200005fc

0800228c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <SystemInit+0x20>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <SystemInit+0x20>)
 8002298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800229c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022b6:	490e      	ldr	r1, [pc, #56]	; (80022f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022bc:	e002      	b.n	80022c4 <LoopCopyDataInit>

080022be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c2:	3304      	adds	r3, #4

080022c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c8:	d3f9      	bcc.n	80022be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ca:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022cc:	4c0b      	ldr	r4, [pc, #44]	; (80022fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d0:	e001      	b.n	80022d6 <LoopFillZerobss>

080022d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d4:	3204      	adds	r2, #4

080022d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d8:	d3fb      	bcc.n	80022d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022da:	f7ff ffd7 	bl	800228c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022de:	f004 fb29 	bl	8006934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e2:	f7ff f871 	bl	80013c8 <main>
  bx  lr    
 80022e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80022f4:	08007c20 	.word	0x08007c20
  ldr r2, =_sbss
 80022f8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80022fc:	2000082c 	.word	0x2000082c

08002300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <ADC_IRQHandler>

08002302 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002306:	2003      	movs	r0, #3
 8002308:	f000 f94c 	bl	80025a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230c:	2000      	movs	r0, #0
 800230e:	f000 f805 	bl	800231c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002312:	f7ff fd97 	bl	8001e44 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_InitTick+0x54>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_InitTick+0x58>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002332:	fbb3 f3f1 	udiv	r3, r3, r1
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f967 	bl	800260e <HAL_SYSTICK_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e00e      	b.n	8002368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b0f      	cmp	r3, #15
 800234e:	d80a      	bhi.n	8002366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002350:	2200      	movs	r2, #0
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f000 f92f 	bl	80025ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800235c:	4a06      	ldr	r2, [pc, #24]	; (8002378 <HAL_InitTick+0x5c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e000      	b.n	8002368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000020 	.word	0x20000020
 8002374:	20000028 	.word	0x20000028
 8002378:	20000024 	.word	0x20000024

0800237c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_IncTick+0x20>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_IncTick+0x24>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4413      	add	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_IncTick+0x24>)
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000028 	.word	0x20000028
 80023a0:	20000828 	.word	0x20000828

080023a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <HAL_GetTick+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000828 	.word	0x20000828

080023bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff ffee 	bl	80023a4 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d005      	beq.n	80023e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <HAL_Delay+0x44>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e2:	bf00      	nop
 80023e4:	f7ff ffde 	bl	80023a4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d8f7      	bhi.n	80023e4 <HAL_Delay+0x28>
  {
  }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000028 	.word	0x20000028

08002404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <__NVIC_SetPriorityGrouping+0x40>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 800242e:	4313      	orrs	r3, r2
 8002430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002432:	4a04      	ldr	r2, [pc, #16]	; (8002444 <__NVIC_SetPriorityGrouping+0x40>)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	60d3      	str	r3, [r2, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00
 8002448:	05fa0000 	.word	0x05fa0000

0800244c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <__NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	db0b      	blt.n	8002492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4907      	ldr	r1, [pc, #28]	; (80024a0 <__NVIC_EnableIRQ+0x38>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2001      	movs	r0, #1
 800248a:	fa00 f202 	lsl.w	r2, r0, r2
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	db0a      	blt.n	80024ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	490c      	ldr	r1, [pc, #48]	; (80024f0 <__NVIC_SetPriority+0x4c>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024cc:	e00a      	b.n	80024e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4908      	ldr	r1, [pc, #32]	; (80024f4 <__NVIC_SetPriority+0x50>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3b04      	subs	r3, #4
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	761a      	strb	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	bf28      	it	cs
 8002516:	2304      	movcs	r3, #4
 8002518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3304      	adds	r3, #4
 800251e:	2b06      	cmp	r3, #6
 8002520:	d902      	bls.n	8002528 <NVIC_EncodePriority+0x30>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3b03      	subs	r3, #3
 8002526:	e000      	b.n	800252a <NVIC_EncodePriority+0x32>
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	f04f 32ff 	mov.w	r2, #4294967295
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	401a      	ands	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43d9      	mvns	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	4313      	orrs	r3, r2
         );
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	; 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002570:	d301      	bcc.n	8002576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002572:	2301      	movs	r3, #1
 8002574:	e00f      	b.n	8002596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <SysTick_Config+0x40>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800257e:	210f      	movs	r1, #15
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	f7ff ff8e 	bl	80024a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <SysTick_Config+0x40>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800258e:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <SysTick_Config+0x40>)
 8002590:	2207      	movs	r2, #7
 8002592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	e000e010 	.word	0xe000e010

080025a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff29 	bl	8002404 <__NVIC_SetPriorityGrouping>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025cc:	f7ff ff3e 	bl	800244c <__NVIC_GetPriorityGrouping>
 80025d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	6978      	ldr	r0, [r7, #20]
 80025d8:	f7ff ff8e 	bl	80024f8 <NVIC_EncodePriority>
 80025dc:	4602      	mov	r2, r0
 80025de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff5d 	bl	80024a4 <__NVIC_SetPriority>
}
 80025ea:	bf00      	nop
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4603      	mov	r3, r0
 80025fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff31 	bl	8002468 <__NVIC_EnableIRQ>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff ffa2 	bl	8002560 <SysTick_Config>
 800261c:	4603      	mov	r3, r0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e014      	b.n	8002662 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	791b      	ldrb	r3, [r3, #4]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d105      	bne.n	800264e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff fc1f 	bl	8001e8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2202      	movs	r2, #2
 8002652:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	795b      	ldrb	r3, [r3, #5]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_DAC_Start+0x16>
 800267c:	2302      	movs	r3, #2
 800267e:	e040      	b.n	8002702 <HAL_DAC_Start+0x98>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2202      	movs	r2, #2
 800268a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6819      	ldr	r1, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2201      	movs	r2, #1
 800269a:	409a      	lsls	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10f      	bne.n	80026ca <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80026b4:	2b3c      	cmp	r3, #60	; 0x3c
 80026b6:	d11d      	bne.n	80026f4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	e014      	b.n	80026f4 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	213c      	movs	r1, #60	; 0x3c
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d107      	bne.n	80026f4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0202 	orr.w	r2, r2, #2
 80026f2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	795b      	ldrb	r3, [r3, #5]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_DAC_Start_DMA+0x22>
 800272e:	2302      	movs	r3, #2
 8002730:	e0ab      	b.n	800288a <HAL_DAC_Start_DMA+0x17a>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2201      	movs	r2, #1
 8002736:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2202      	movs	r2, #2
 800273c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d12f      	bne.n	80027a4 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a52      	ldr	r2, [pc, #328]	; (8002894 <HAL_DAC_Start_DMA+0x184>)
 800274a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a51      	ldr	r2, [pc, #324]	; (8002898 <HAL_DAC_Start_DMA+0x188>)
 8002752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4a50      	ldr	r2, [pc, #320]	; (800289c <HAL_DAC_Start_DMA+0x18c>)
 800275a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800276a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	2b08      	cmp	r3, #8
 8002770:	d013      	beq.n	800279a <HAL_DAC_Start_DMA+0x8a>
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	2b08      	cmp	r3, #8
 8002776:	d845      	bhi.n	8002804 <HAL_DAC_Start_DMA+0xf4>
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_DAC_Start_DMA+0x76>
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d005      	beq.n	8002790 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002784:	e03e      	b.n	8002804 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3308      	adds	r3, #8
 800278c:	613b      	str	r3, [r7, #16]
        break;
 800278e:	e03c      	b.n	800280a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	613b      	str	r3, [r7, #16]
        break;
 8002798:	e037      	b.n	800280a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3310      	adds	r3, #16
 80027a0:	613b      	str	r3, [r7, #16]
        break;
 80027a2:	e032      	b.n	800280a <HAL_DAC_Start_DMA+0xfa>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a3d      	ldr	r2, [pc, #244]	; (80028a0 <HAL_DAC_Start_DMA+0x190>)
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a3c      	ldr	r2, [pc, #240]	; (80028a4 <HAL_DAC_Start_DMA+0x194>)
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a3b      	ldr	r2, [pc, #236]	; (80028a8 <HAL_DAC_Start_DMA+0x198>)
 80027ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027ca:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d013      	beq.n	80027fa <HAL_DAC_Start_DMA+0xea>
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d817      	bhi.n	8002808 <HAL_DAC_Start_DMA+0xf8>
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_DAC_Start_DMA+0xd6>
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d005      	beq.n	80027f0 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80027e4:	e010      	b.n	8002808 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3314      	adds	r3, #20
 80027ec:	613b      	str	r3, [r7, #16]
        break;
 80027ee:	e00c      	b.n	800280a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3318      	adds	r3, #24
 80027f6:	613b      	str	r3, [r7, #16]
        break;
 80027f8:	e007      	b.n	800280a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	331c      	adds	r3, #28
 8002800:	613b      	str	r3, [r7, #16]
        break;
 8002802:	e002      	b.n	800280a <HAL_DAC_Start_DMA+0xfa>
        break;
 8002804:	bf00      	nop
 8002806:	e000      	b.n	800280a <HAL_DAC_Start_DMA+0xfa>
        break;
 8002808:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d111      	bne.n	8002834 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800281e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6898      	ldr	r0, [r3, #8]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	f000 fa87 	bl	8002d3c <HAL_DMA_Start_IT>
 800282e:	4603      	mov	r3, r0
 8002830:	75fb      	strb	r3, [r7, #23]
 8002832:	e010      	b.n	8002856 <HAL_DAC_Start_DMA+0x146>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002842:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68d8      	ldr	r0, [r3, #12]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	f000 fa75 	bl	8002d3c <HAL_DMA_Start_IT>
 8002852:	4603      	mov	r3, r0
 8002854:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10c      	bne.n	800287c <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6819      	ldr	r1, [r3, #0]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2201      	movs	r2, #1
 8002870:	409a      	lsls	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e005      	b.n	8002888 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f043 0204 	orr.w	r2, r3, #4
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002888:	7dfb      	ldrb	r3, [r7, #23]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	08002ab7 	.word	0x08002ab7
 8002898:	08002ad9 	.word	0x08002ad9
 800289c:	08002af5 	.word	0x08002af5
 80028a0:	08002b73 	.word	0x08002b73
 80028a4:	08002b95 	.word	0x08002b95
 80028a8:	08002bb1 	.word	0x08002bb1

080028ac <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	400a      	ands	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2201      	movs	r2, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	400a      	ands	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10d      	bne.n	8002912 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fa7e 	bl	8002dfc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e00c      	b.n	800292c <HAL_DAC_Stop_DMA+0x80>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fa70 	bl	8002dfc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800292a:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800294e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002952:	d120      	bne.n	8002996 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800295e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002962:	d118      	bne.n	8002996 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2204      	movs	r2, #4
 8002968:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800297e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800298e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f837 	bl	8002a04 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a4:	d120      	bne.n	80029e8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b4:	d118      	bne.n	80029e8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2204      	movs	r2, #4
 80029ba:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f043 0202 	orr.w	r2, r3, #2
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80029d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80029e0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f8bb 	bl	8002b5e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	795b      	ldrb	r3, [r3, #5]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_DAC_ConfigChannel+0x18>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e03c      	b.n	8002aaa <HAL_DAC_ConfigChannel+0x92>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4013      	ands	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6819      	ldr	r1, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	22c0      	movs	r2, #192	; 0xc0
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43da      	mvns	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	400a      	ands	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f7ff f987 	bl	8001dd8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	711a      	strb	r2, [r3, #4]
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f7ff f94e 	bl	8001d88 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f043 0204 	orr.w	r2, r3, #4
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f7ff ff6e 	bl	80029f0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	711a      	strb	r2, [r3, #4]
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff ffce 	bl	8002b22 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	711a      	strb	r2, [r3, #4]
}
 8002b8c:	bf00      	nop
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f7ff ffc7 	bl	8002b36 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f043 0204 	orr.w	r2, r3, #4
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f7ff ffbd 	bl	8002b4a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	711a      	strb	r2, [r3, #4]
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bec:	f7ff fbda 	bl	80023a4 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e099      	b.n	8002d30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c1c:	e00f      	b.n	8002c3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c1e:	f7ff fbc1 	bl	80023a4 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d908      	bls.n	8002c3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2203      	movs	r2, #3
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e078      	b.n	8002d30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e8      	bne.n	8002c1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <HAL_DMA_Init+0x158>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d107      	bne.n	8002ca8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f023 0307 	bic.w	r3, r3, #7
 8002cbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d117      	bne.n	8002d02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00e      	beq.n	8002d02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fb09 	bl	80032fc <DMA_CheckFifoParam>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2240      	movs	r2, #64	; 0x40
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e016      	b.n	8002d30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fac0 	bl	8003290 <DMA_CalcBaseAndBitshift>
 8002d10:	4603      	mov	r3, r0
 8002d12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	223f      	movs	r2, #63	; 0x3f
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	f010803f 	.word	0xf010803f

08002d3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_DMA_Start_IT+0x26>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e048      	b.n	8002df4 <HAL_DMA_Start_IT+0xb8>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d137      	bne.n	8002de6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fa52 	bl	8003234 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	223f      	movs	r2, #63	; 0x3f
 8002d96:	409a      	lsls	r2, r3
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0216 	orr.w	r2, r2, #22
 8002daa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d007      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0208 	orr.w	r2, r2, #8
 8002dd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e005      	b.n	8002df2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
 8002df0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e0a:	f7ff facb 	bl	80023a4 <HAL_GetTick>
 8002e0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d008      	beq.n	8002e2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e052      	b.n	8002ed4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0216 	bic.w	r2, r2, #22
 8002e3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <HAL_DMA_Abort+0x62>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0208 	bic.w	r2, r2, #8
 8002e6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0201 	bic.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e7e:	e013      	b.n	8002ea8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e80:	f7ff fa90 	bl	80023a4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d90c      	bls.n	8002ea8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2220      	movs	r2, #32
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e015      	b.n	8002ed4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e4      	bne.n	8002e80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	223f      	movs	r2, #63	; 0x3f
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d004      	beq.n	8002efa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e00c      	b.n	8002f14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2205      	movs	r2, #5
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f2c:	4b92      	ldr	r3, [pc, #584]	; (8003178 <HAL_DMA_IRQHandler+0x258>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a92      	ldr	r2, [pc, #584]	; (800317c <HAL_DMA_IRQHandler+0x25c>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	0a9b      	lsrs	r3, r3, #10
 8002f38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01a      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0204 	bic.w	r2, r2, #4
 8002f72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	2208      	movs	r2, #8
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f043 0201 	orr.w	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	2201      	movs	r2, #1
 8002f92:	409a      	lsls	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d012      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00b      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	2201      	movs	r2, #1
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f043 0202 	orr.w	r2, r3, #2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d012      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	f043 0204 	orr.w	r2, r3, #4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	409a      	lsls	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d043      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d03c      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301a:	2210      	movs	r2, #16
 800301c:	409a      	lsls	r2, r3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d018      	beq.n	8003062 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d108      	bne.n	8003050 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d024      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
 800304e:	e01f      	b.n	8003090 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01b      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
 8003060:	e016      	b.n	8003090 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0208 	bic.w	r2, r2, #8
 800307e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	2220      	movs	r2, #32
 8003096:	409a      	lsls	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 808e 	beq.w	80031be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8086 	beq.w	80031be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	2220      	movs	r2, #32
 80030b8:	409a      	lsls	r2, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d136      	bne.n	8003138 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0216 	bic.w	r2, r2, #22
 80030d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <HAL_DMA_IRQHandler+0x1da>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0208 	bic.w	r2, r2, #8
 8003108:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310e:	223f      	movs	r2, #63	; 0x3f
 8003110:	409a      	lsls	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312a:	2b00      	cmp	r3, #0
 800312c:	d07d      	beq.n	800322a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
        }
        return;
 8003136:	e078      	b.n	800322a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01c      	beq.n	8003180 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d108      	bne.n	8003166 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	2b00      	cmp	r3, #0
 800315a:	d030      	beq.n	80031be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
 8003164:	e02b      	b.n	80031be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d027      	beq.n	80031be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
 8003176:	e022      	b.n	80031be <HAL_DMA_IRQHandler+0x29e>
 8003178:	20000020 	.word	0x20000020
 800317c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10f      	bne.n	80031ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0210 	bic.w	r2, r2, #16
 800319c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d032      	beq.n	800322c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d022      	beq.n	8003218 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2205      	movs	r2, #5
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0201 	bic.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	3301      	adds	r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d307      	bcc.n	8003206 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f2      	bne.n	80031ea <HAL_DMA_IRQHandler+0x2ca>
 8003204:	e000      	b.n	8003208 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003206:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
 8003228:	e000      	b.n	800322c <HAL_DMA_IRQHandler+0x30c>
        return;
 800322a:	bf00      	nop
    }
  }
}
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop

08003234 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003250:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d108      	bne.n	8003274 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003272:	e007      	b.n	8003284 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	3b10      	subs	r3, #16
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <DMA_CalcBaseAndBitshift+0x60>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032aa:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <DMA_CalcBaseAndBitshift+0x64>)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d908      	bls.n	80032d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <DMA_CalcBaseAndBitshift+0x68>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	1d1a      	adds	r2, r3, #4
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	659a      	str	r2, [r3, #88]	; 0x58
 80032ce:	e006      	b.n	80032de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <DMA_CalcBaseAndBitshift+0x68>)
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	aaaaaaab 	.word	0xaaaaaaab
 80032f4:	08007a30 	.word	0x08007a30
 80032f8:	fffffc00 	.word	0xfffffc00

080032fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d11f      	bne.n	8003356 <DMA_CheckFifoParam+0x5a>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d856      	bhi.n	80033ca <DMA_CheckFifoParam+0xce>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <DMA_CheckFifoParam+0x28>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003335 	.word	0x08003335
 8003328:	08003347 	.word	0x08003347
 800332c:	08003335 	.word	0x08003335
 8003330:	080033cb 	.word	0x080033cb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d046      	beq.n	80033ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003344:	e043      	b.n	80033ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800334e:	d140      	bne.n	80033d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003354:	e03d      	b.n	80033d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335e:	d121      	bne.n	80033a4 <DMA_CheckFifoParam+0xa8>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d837      	bhi.n	80033d6 <DMA_CheckFifoParam+0xda>
 8003366:	a201      	add	r2, pc, #4	; (adr r2, 800336c <DMA_CheckFifoParam+0x70>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	0800337d 	.word	0x0800337d
 8003370:	08003383 	.word	0x08003383
 8003374:	0800337d 	.word	0x0800337d
 8003378:	08003395 	.word	0x08003395
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      break;
 8003380:	e030      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d025      	beq.n	80033da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003392:	e022      	b.n	80033da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800339c:	d11f      	bne.n	80033de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033a2:	e01c      	b.n	80033de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d903      	bls.n	80033b2 <DMA_CheckFifoParam+0xb6>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d003      	beq.n	80033b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033b0:	e018      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
      break;
 80033b6:	e015      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00e      	beq.n	80033e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      break;
 80033c8:	e00b      	b.n	80033e2 <DMA_CheckFifoParam+0xe6>
      break;
 80033ca:	bf00      	nop
 80033cc:	e00a      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
 80033d0:	e008      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
 80033d4:	e006      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033d6:	bf00      	nop
 80033d8:	e004      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033da:	bf00      	nop
 80033dc:	e002      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033e2:	bf00      	nop
    }
  } 
  
  return status; 
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	e175      	b.n	8003700 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003414:	2201      	movs	r2, #1
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	429a      	cmp	r2, r3
 800342e:	f040 8164 	bne.w	80036fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d00b      	beq.n	8003452 <HAL_GPIO_Init+0x5e>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d007      	beq.n	8003452 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003446:	2b11      	cmp	r3, #17
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b12      	cmp	r3, #18
 8003450:	d130      	bne.n	80034b4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	2203      	movs	r2, #3
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003488:	2201      	movs	r2, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 0201 	and.w	r2, r3, #1
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	2203      	movs	r2, #3
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x100>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b12      	cmp	r3, #18
 80034f2:	d123      	bne.n	800353c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	08da      	lsrs	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3208      	adds	r2, #8
 80034fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	220f      	movs	r2, #15
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	08da      	lsrs	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3208      	adds	r2, #8
 8003536:	69b9      	ldr	r1, [r7, #24]
 8003538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	2203      	movs	r2, #3
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0203 	and.w	r2, r3, #3
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80be 	beq.w	80036fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357e:	4b66      	ldr	r3, [pc, #408]	; (8003718 <HAL_GPIO_Init+0x324>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	4a65      	ldr	r2, [pc, #404]	; (8003718 <HAL_GPIO_Init+0x324>)
 8003584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003588:	6453      	str	r3, [r2, #68]	; 0x44
 800358a:	4b63      	ldr	r3, [pc, #396]	; (8003718 <HAL_GPIO_Init+0x324>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003596:	4a61      	ldr	r2, [pc, #388]	; (800371c <HAL_GPIO_Init+0x328>)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	3302      	adds	r3, #2
 800359e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	220f      	movs	r2, #15
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_GPIO_Init+0x32c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d037      	beq.n	8003632 <HAL_GPIO_Init+0x23e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a57      	ldr	r2, [pc, #348]	; (8003724 <HAL_GPIO_Init+0x330>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_GPIO_Init+0x23a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a56      	ldr	r2, [pc, #344]	; (8003728 <HAL_GPIO_Init+0x334>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d02b      	beq.n	800362a <HAL_GPIO_Init+0x236>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a55      	ldr	r2, [pc, #340]	; (800372c <HAL_GPIO_Init+0x338>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d025      	beq.n	8003626 <HAL_GPIO_Init+0x232>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a54      	ldr	r2, [pc, #336]	; (8003730 <HAL_GPIO_Init+0x33c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01f      	beq.n	8003622 <HAL_GPIO_Init+0x22e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a53      	ldr	r2, [pc, #332]	; (8003734 <HAL_GPIO_Init+0x340>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d019      	beq.n	800361e <HAL_GPIO_Init+0x22a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a52      	ldr	r2, [pc, #328]	; (8003738 <HAL_GPIO_Init+0x344>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_GPIO_Init+0x226>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a51      	ldr	r2, [pc, #324]	; (800373c <HAL_GPIO_Init+0x348>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00d      	beq.n	8003616 <HAL_GPIO_Init+0x222>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a50      	ldr	r2, [pc, #320]	; (8003740 <HAL_GPIO_Init+0x34c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <HAL_GPIO_Init+0x21e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4f      	ldr	r2, [pc, #316]	; (8003744 <HAL_GPIO_Init+0x350>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_GPIO_Init+0x21a>
 800360a:	2309      	movs	r3, #9
 800360c:	e012      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800360e:	230a      	movs	r3, #10
 8003610:	e010      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003612:	2308      	movs	r3, #8
 8003614:	e00e      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003616:	2307      	movs	r3, #7
 8003618:	e00c      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800361a:	2306      	movs	r3, #6
 800361c:	e00a      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800361e:	2305      	movs	r3, #5
 8003620:	e008      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003622:	2304      	movs	r3, #4
 8003624:	e006      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003626:	2303      	movs	r3, #3
 8003628:	e004      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800362a:	2302      	movs	r3, #2
 800362c:	e002      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003632:	2300      	movs	r3, #0
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	f002 0203 	and.w	r2, r2, #3
 800363a:	0092      	lsls	r2, r2, #2
 800363c:	4093      	lsls	r3, r2
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003644:	4935      	ldr	r1, [pc, #212]	; (800371c <HAL_GPIO_Init+0x328>)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	089b      	lsrs	r3, r3, #2
 800364a:	3302      	adds	r3, #2
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_GPIO_Init+0x354>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003676:	4a34      	ldr	r2, [pc, #208]	; (8003748 <HAL_GPIO_Init+0x354>)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800367c:	4b32      	ldr	r3, [pc, #200]	; (8003748 <HAL_GPIO_Init+0x354>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036a0:	4a29      	ldr	r2, [pc, #164]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3301      	adds	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b0f      	cmp	r3, #15
 8003704:	f67f ae86 	bls.w	8003414 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	3724      	adds	r7, #36	; 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40013800 	.word	0x40013800
 8003720:	40020000 	.word	0x40020000
 8003724:	40020400 	.word	0x40020400
 8003728:	40020800 	.word	0x40020800
 800372c:	40020c00 	.word	0x40020c00
 8003730:	40021000 	.word	0x40021000
 8003734:	40021400 	.word	0x40021400
 8003738:	40021800 	.word	0x40021800
 800373c:	40021c00 	.word	0x40021c00
 8003740:	40022000 	.word	0x40022000
 8003744:	40022400 	.word	0x40022400
 8003748:	40013c00 	.word	0x40013c00

0800374c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
 8003758:	4613      	mov	r3, r2
 800375a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800375c:	787b      	ldrb	r3, [r7, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003768:	e003      	b.n	8003772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800376a:	887b      	ldrh	r3, [r7, #2]
 800376c:	041a      	lsls	r2, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	619a      	str	r2, [r3, #24]
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	460b      	mov	r3, r1
 8003788:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003790:	887a      	ldrh	r2, [r7, #2]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4013      	ands	r3, r2
 8003796:	041a      	lsls	r2, r3, #16
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	43d9      	mvns	r1, r3
 800379c:	887b      	ldrh	r3, [r7, #2]
 800379e:	400b      	ands	r3, r1
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	619a      	str	r2, [r3, #24]
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d006      	beq.n	80037d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037ca:	4a05      	ldr	r2, [pc, #20]	; (80037e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f806 	bl	80037e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40013c00 	.word	0x40013c00

080037e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003804:	2300      	movs	r3, #0
 8003806:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e291      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8087 	beq.w	800392e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003820:	4b96      	ldr	r3, [pc, #600]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b04      	cmp	r3, #4
 800382a:	d00c      	beq.n	8003846 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382c:	4b93      	ldr	r3, [pc, #588]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b08      	cmp	r3, #8
 8003836:	d112      	bne.n	800385e <HAL_RCC_OscConfig+0x62>
 8003838:	4b90      	ldr	r3, [pc, #576]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003844:	d10b      	bne.n	800385e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003846:	4b8d      	ldr	r3, [pc, #564]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d06c      	beq.n	800392c <HAL_RCC_OscConfig+0x130>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d168      	bne.n	800392c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e26b      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003866:	d106      	bne.n	8003876 <HAL_RCC_OscConfig+0x7a>
 8003868:	4b84      	ldr	r3, [pc, #528]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a83      	ldr	r2, [pc, #524]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 800386e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	e02e      	b.n	80038d4 <HAL_RCC_OscConfig+0xd8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x9c>
 800387e:	4b7f      	ldr	r3, [pc, #508]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a7e      	ldr	r2, [pc, #504]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b7c      	ldr	r3, [pc, #496]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a7b      	ldr	r2, [pc, #492]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	e01d      	b.n	80038d4 <HAL_RCC_OscConfig+0xd8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a0:	d10c      	bne.n	80038bc <HAL_RCC_OscConfig+0xc0>
 80038a2:	4b76      	ldr	r3, [pc, #472]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a75      	ldr	r2, [pc, #468]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	4b73      	ldr	r3, [pc, #460]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a72      	ldr	r2, [pc, #456]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e00b      	b.n	80038d4 <HAL_RCC_OscConfig+0xd8>
 80038bc:	4b6f      	ldr	r3, [pc, #444]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a6e      	ldr	r2, [pc, #440]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b6c      	ldr	r3, [pc, #432]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a6b      	ldr	r2, [pc, #428]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fe fd62 	bl	80023a4 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e4:	f7fe fd5e 	bl	80023a4 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	; 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e21f      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	4b61      	ldr	r3, [pc, #388]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0xe8>
 8003902:	e014      	b.n	800392e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fe fd4e 	bl	80023a4 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800390c:	f7fe fd4a 	bl	80023a4 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	; 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e20b      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391e:	4b57      	ldr	r3, [pc, #348]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x110>
 800392a:	e000      	b.n	800392e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d069      	beq.n	8003a0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800393a:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003946:	4b4d      	ldr	r3, [pc, #308]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b08      	cmp	r3, #8
 8003950:	d11c      	bne.n	800398c <HAL_RCC_OscConfig+0x190>
 8003952:	4b4a      	ldr	r3, [pc, #296]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d116      	bne.n	800398c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395e:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_RCC_OscConfig+0x17a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e1df      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003976:	4b41      	ldr	r3, [pc, #260]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	493d      	ldr	r1, [pc, #244]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398a:	e040      	b.n	8003a0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d023      	beq.n	80039dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003994:	4b39      	ldr	r3, [pc, #228]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a38      	ldr	r2, [pc, #224]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fe fd00 	bl	80023a4 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a8:	f7fe fcfc 	bl	80023a4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e1bd      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ba:	4b30      	ldr	r3, [pc, #192]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c6:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4929      	ldr	r1, [pc, #164]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
 80039da:	e018      	b.n	8003a0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039dc:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a26      	ldr	r2, [pc, #152]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fe fcdc 	bl	80023a4 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f0:	f7fe fcd8 	bl	80023a4 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e199      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d038      	beq.n	8003a8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d019      	beq.n	8003a56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a22:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a26:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2e:	f7fe fcb9 	bl	80023a4 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a36:	f7fe fcb5 	bl	80023a4 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e176      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x23a>
 8003a54:	e01a      	b.n	8003a8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5a:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a62:	f7fe fc9f 	bl	80023a4 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6a:	f7fe fc9b 	bl	80023a4 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d903      	bls.n	8003a80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e15c      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
 8003a7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a80:	4b91      	ldr	r3, [pc, #580]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1ee      	bne.n	8003a6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80a4 	beq.w	8003be2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9a:	4b8b      	ldr	r3, [pc, #556]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10d      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa6:	4b88      	ldr	r3, [pc, #544]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	4a87      	ldr	r2, [pc, #540]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab2:	4b85      	ldr	r3, [pc, #532]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac2:	4b82      	ldr	r3, [pc, #520]	; (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d118      	bne.n	8003b00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ace:	4b7f      	ldr	r3, [pc, #508]	; (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7e      	ldr	r2, [pc, #504]	; (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ada:	f7fe fc63 	bl	80023a4 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae2:	f7fe fc5f 	bl	80023a4 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b64      	cmp	r3, #100	; 0x64
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e120      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af4:	4b75      	ldr	r3, [pc, #468]	; (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d106      	bne.n	8003b16 <HAL_RCC_OscConfig+0x31a>
 8003b08:	4b6f      	ldr	r3, [pc, #444]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a6e      	ldr	r2, [pc, #440]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	e02d      	b.n	8003b72 <HAL_RCC_OscConfig+0x376>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCC_OscConfig+0x33c>
 8003b1e:	4b6a      	ldr	r3, [pc, #424]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4a69      	ldr	r2, [pc, #420]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2a:	4b67      	ldr	r3, [pc, #412]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	4a66      	ldr	r2, [pc, #408]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b30:	f023 0304 	bic.w	r3, r3, #4
 8003b34:	6713      	str	r3, [r2, #112]	; 0x70
 8003b36:	e01c      	b.n	8003b72 <HAL_RCC_OscConfig+0x376>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d10c      	bne.n	8003b5a <HAL_RCC_OscConfig+0x35e>
 8003b40:	4b61      	ldr	r3, [pc, #388]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	4a60      	ldr	r2, [pc, #384]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b46:	f043 0304 	orr.w	r3, r3, #4
 8003b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4c:	4b5e      	ldr	r3, [pc, #376]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	4a5d      	ldr	r2, [pc, #372]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6713      	str	r3, [r2, #112]	; 0x70
 8003b58:	e00b      	b.n	8003b72 <HAL_RCC_OscConfig+0x376>
 8003b5a:	4b5b      	ldr	r3, [pc, #364]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4a5a      	ldr	r2, [pc, #360]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70
 8003b66:	4b58      	ldr	r3, [pc, #352]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	4a57      	ldr	r2, [pc, #348]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b6c:	f023 0304 	bic.w	r3, r3, #4
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d015      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7fe fc13 	bl	80023a4 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fe fc0f 	bl	80023a4 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e0ce      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	4b4b      	ldr	r3, [pc, #300]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ee      	beq.n	8003b82 <HAL_RCC_OscConfig+0x386>
 8003ba4:	e014      	b.n	8003bd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fe fbfd 	bl	80023a4 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fe fbf9 	bl	80023a4 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0b8      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc4:	4b40      	ldr	r3, [pc, #256]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ee      	bne.n	8003bae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d105      	bne.n	8003be2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd6:	4b3c      	ldr	r3, [pc, #240]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a3b      	ldr	r2, [pc, #236]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80a4 	beq.w	8003d34 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bec:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d06b      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d149      	bne.n	8003c94 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c00:	4b31      	ldr	r3, [pc, #196]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a30      	ldr	r2, [pc, #192]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fbca 	bl	80023a4 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fe fbc6 	bl	80023a4 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e087      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69da      	ldr	r2, [r3, #28]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	019b      	lsls	r3, r3, #6
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	041b      	lsls	r3, r3, #16
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	061b      	lsls	r3, r3, #24
 8003c56:	4313      	orrs	r3, r2
 8003c58:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003c5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c5e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fb9a 	bl	80023a4 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fe fb96 	bl	80023a4 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e057      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x478>
 8003c92:	e04f      	b.n	8003d34 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0b      	ldr	r2, [pc, #44]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fb80 	bl	80023a4 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fe fb7c 	bl	80023a4 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e03d      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cba:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4ac>
 8003cc6:	e035      	b.n	8003d34 <HAL_RCC_OscConfig+0x538>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <HAL_RCC_OscConfig+0x544>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d028      	beq.n	8003d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d121      	bne.n	8003d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d11a      	bne.n	8003d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d00:	4013      	ands	r3, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d111      	bne.n	8003d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	085b      	lsrs	r3, r3, #1
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800

08003d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0d0      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b6a      	ldr	r3, [pc, #424]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d910      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b67      	ldr	r3, [pc, #412]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 020f 	bic.w	r2, r3, #15
 8003d72:	4965      	ldr	r1, [pc, #404]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b63      	ldr	r3, [pc, #396]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0b8      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d020      	beq.n	8003dda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da4:	4b59      	ldr	r3, [pc, #356]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a58      	ldr	r2, [pc, #352]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dbc:	4b53      	ldr	r3, [pc, #332]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4a52      	ldr	r2, [pc, #328]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc8:	4b50      	ldr	r3, [pc, #320]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	494d      	ldr	r1, [pc, #308]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d040      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	4b47      	ldr	r3, [pc, #284]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d115      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e07f      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e06:	4b41      	ldr	r3, [pc, #260]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e073      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e16:	4b3d      	ldr	r3, [pc, #244]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e06b      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e26:	4b39      	ldr	r3, [pc, #228]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f023 0203 	bic.w	r2, r3, #3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4936      	ldr	r1, [pc, #216]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e38:	f7fe fab4 	bl	80023a4 <HAL_GetTick>
 8003e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e40:	f7fe fab0 	bl	80023a4 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e053      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 020c 	and.w	r2, r3, #12
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d1eb      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e68:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d210      	bcs.n	8003e98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 020f 	bic.w	r2, r3, #15
 8003e7e:	4922      	ldr	r1, [pc, #136]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e032      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea4:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4916      	ldr	r1, [pc, #88]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ec2:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	490e      	ldr	r1, [pc, #56]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ed6:	f000 f885 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 8003eda:	4602      	mov	r2, r0
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	490a      	ldr	r1, [pc, #40]	; (8003f10 <HAL_RCC_ClockConfig+0x1cc>)
 8003ee8:	5ccb      	ldrb	r3, [r1, r3]
 8003eea:	fa22 f303 	lsr.w	r3, r2, r3
 8003eee:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <HAL_RCC_ClockConfig+0x1d0>)
 8003ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ef2:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <HAL_RCC_ClockConfig+0x1d4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fa10 	bl	800231c <HAL_InitTick>

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40023c00 	.word	0x40023c00
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	08007a18 	.word	0x08007a18
 8003f14:	20000020 	.word	0x20000020
 8003f18:	20000024 	.word	0x20000024

08003f1c <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08c      	sub	sp, #48	; 0x30
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d127      	bne.n	8003f7e <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003f2e:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <HAL_RCC_MCOConfig+0xbc>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	4a29      	ldr	r2, [pc, #164]	; (8003fd8 <HAL_RCC_MCOConfig+0xbc>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3a:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_RCC_MCOConfig+0xbc>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003f50:	2303      	movs	r3, #3
 8003f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003f5c:	f107 031c 	add.w	r3, r7, #28
 8003f60:	4619      	mov	r1, r3
 8003f62:	481e      	ldr	r0, [pc, #120]	; (8003fdc <HAL_RCC_MCOConfig+0xc0>)
 8003f64:	f7ff fa46 	bl	80033f4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003f68:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <HAL_RCC_MCOConfig+0xbc>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	430b      	orrs	r3, r1
 8003f76:	4918      	ldr	r1, [pc, #96]	; (8003fd8 <HAL_RCC_MCOConfig+0xbc>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8003f7c:	e027      	b.n	8003fce <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8003f7e:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <HAL_RCC_MCOConfig+0xbc>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <HAL_RCC_MCOConfig+0xbc>)
 8003f84:	f043 0304 	orr.w	r3, r3, #4
 8003f88:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_RCC_MCOConfig+0xbc>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003fac:	f107 031c 	add.w	r3, r7, #28
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	480b      	ldr	r0, [pc, #44]	; (8003fe0 <HAL_RCC_MCOConfig+0xc4>)
 8003fb4:	f7ff fa1e 	bl	80033f4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 8003fb8:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <HAL_RCC_MCOConfig+0xbc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	00d9      	lsls	r1, r3, #3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	4903      	ldr	r1, [pc, #12]	; (8003fd8 <HAL_RCC_MCOConfig+0xbc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
}
 8003fce:	bf00      	nop
 8003fd0:	3730      	adds	r7, #48	; 0x30
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40020000 	.word	0x40020000
 8003fe0:	40020800 	.word	0x40020800

08003fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe4:	b5b0      	push	{r4, r5, r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003fea:	2100      	movs	r1, #0
 8003fec:	6079      	str	r1, [r7, #4]
 8003fee:	2100      	movs	r1, #0
 8003ff0:	60f9      	str	r1, [r7, #12]
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ffa:	4952      	ldr	r1, [pc, #328]	; (8004144 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ffc:	6889      	ldr	r1, [r1, #8]
 8003ffe:	f001 010c 	and.w	r1, r1, #12
 8004002:	2908      	cmp	r1, #8
 8004004:	d00d      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0x3e>
 8004006:	2908      	cmp	r1, #8
 8004008:	f200 8094 	bhi.w	8004134 <HAL_RCC_GetSysClockFreq+0x150>
 800400c:	2900      	cmp	r1, #0
 800400e:	d002      	beq.n	8004016 <HAL_RCC_GetSysClockFreq+0x32>
 8004010:	2904      	cmp	r1, #4
 8004012:	d003      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x38>
 8004014:	e08e      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004016:	4b4c      	ldr	r3, [pc, #304]	; (8004148 <HAL_RCC_GetSysClockFreq+0x164>)
 8004018:	60bb      	str	r3, [r7, #8]
      break;
 800401a:	e08e      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800401c:	4b4b      	ldr	r3, [pc, #300]	; (800414c <HAL_RCC_GetSysClockFreq+0x168>)
 800401e:	60bb      	str	r3, [r7, #8]
      break;
 8004020:	e08b      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004022:	4948      	ldr	r1, [pc, #288]	; (8004144 <HAL_RCC_GetSysClockFreq+0x160>)
 8004024:	6849      	ldr	r1, [r1, #4]
 8004026:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800402a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800402c:	4945      	ldr	r1, [pc, #276]	; (8004144 <HAL_RCC_GetSysClockFreq+0x160>)
 800402e:	6849      	ldr	r1, [r1, #4]
 8004030:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004034:	2900      	cmp	r1, #0
 8004036:	d024      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004038:	4942      	ldr	r1, [pc, #264]	; (8004144 <HAL_RCC_GetSysClockFreq+0x160>)
 800403a:	6849      	ldr	r1, [r1, #4]
 800403c:	0989      	lsrs	r1, r1, #6
 800403e:	4608      	mov	r0, r1
 8004040:	f04f 0100 	mov.w	r1, #0
 8004044:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004048:	f04f 0500 	mov.w	r5, #0
 800404c:	ea00 0204 	and.w	r2, r0, r4
 8004050:	ea01 0305 	and.w	r3, r1, r5
 8004054:	493d      	ldr	r1, [pc, #244]	; (800414c <HAL_RCC_GetSysClockFreq+0x168>)
 8004056:	fb01 f003 	mul.w	r0, r1, r3
 800405a:	2100      	movs	r1, #0
 800405c:	fb01 f102 	mul.w	r1, r1, r2
 8004060:	1844      	adds	r4, r0, r1
 8004062:	493a      	ldr	r1, [pc, #232]	; (800414c <HAL_RCC_GetSysClockFreq+0x168>)
 8004064:	fba2 0101 	umull	r0, r1, r2, r1
 8004068:	1863      	adds	r3, r4, r1
 800406a:	4619      	mov	r1, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	461a      	mov	r2, r3
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	f7fc fd66 	bl	8000b44 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4613      	mov	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	e04a      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004082:	4b30      	ldr	r3, [pc, #192]	; (8004144 <HAL_RCC_GetSysClockFreq+0x160>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	099b      	lsrs	r3, r3, #6
 8004088:	461a      	mov	r2, r3
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004092:	f04f 0100 	mov.w	r1, #0
 8004096:	ea02 0400 	and.w	r4, r2, r0
 800409a:	ea03 0501 	and.w	r5, r3, r1
 800409e:	4620      	mov	r0, r4
 80040a0:	4629      	mov	r1, r5
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	014b      	lsls	r3, r1, #5
 80040ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040b0:	0142      	lsls	r2, r0, #5
 80040b2:	4610      	mov	r0, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	1b00      	subs	r0, r0, r4
 80040b8:	eb61 0105 	sbc.w	r1, r1, r5
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	018b      	lsls	r3, r1, #6
 80040c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040ca:	0182      	lsls	r2, r0, #6
 80040cc:	1a12      	subs	r2, r2, r0
 80040ce:	eb63 0301 	sbc.w	r3, r3, r1
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f04f 0100 	mov.w	r1, #0
 80040da:	00d9      	lsls	r1, r3, #3
 80040dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040e0:	00d0      	lsls	r0, r2, #3
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	1912      	adds	r2, r2, r4
 80040e8:	eb45 0303 	adc.w	r3, r5, r3
 80040ec:	f04f 0000 	mov.w	r0, #0
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	0299      	lsls	r1, r3, #10
 80040f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040fa:	0290      	lsls	r0, r2, #10
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	461a      	mov	r2, r3
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	f7fc fd1a 	bl	8000b44 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4613      	mov	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <HAL_RCC_GetSysClockFreq+0x160>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	3301      	adds	r3, #1
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	60bb      	str	r3, [r7, #8]
      break;
 8004132:	e002      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <HAL_RCC_GetSysClockFreq+0x164>)
 8004136:	60bb      	str	r3, [r7, #8]
      break;
 8004138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413a:	68bb      	ldr	r3, [r7, #8]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bdb0      	pop	{r4, r5, r7, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	00f42400 	.word	0x00f42400
 800414c:	017d7840 	.word	0x017d7840

08004150 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <HAL_RCC_GetHCLKFreq+0x14>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000020 	.word	0x20000020

08004168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800416c:	f7ff fff0 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0a9b      	lsrs	r3, r3, #10
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4903      	ldr	r1, [pc, #12]	; (800418c <HAL_RCC_GetPCLK1Freq+0x24>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800
 800418c:	08007a28 	.word	0x08007a28

08004190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004194:	f7ff ffdc 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	0b5b      	lsrs	r3, r3, #13
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	4903      	ldr	r1, [pc, #12]	; (80041b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40023800 	.word	0x40023800
 80041b4:	08007a28 	.word	0x08007a28

080041b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d012      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041e0:	4b69      	ldr	r3, [pc, #420]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a68      	ldr	r2, [pc, #416]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041ea:	6093      	str	r3, [r2, #8]
 80041ec:	4b66      	ldr	r3, [pc, #408]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	4964      	ldr	r1, [pc, #400]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d017      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004212:	4b5d      	ldr	r3, [pc, #372]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004218:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004220:	4959      	ldr	r1, [pc, #356]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004230:	d101      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004232:	2301      	movs	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800423e:	2301      	movs	r3, #1
 8004240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d017      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800424e:	4b4e      	ldr	r3, [pc, #312]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004254:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	494a      	ldr	r1, [pc, #296]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800426c:	d101      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800426e:	2301      	movs	r3, #1
 8004270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800428a:	2301      	movs	r3, #1
 800428c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 808b 	beq.w	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800429c:	4b3a      	ldr	r3, [pc, #232]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	4a39      	ldr	r2, [pc, #228]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a6:	6413      	str	r3, [r2, #64]	; 0x40
 80042a8:	4b37      	ldr	r3, [pc, #220]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042b4:	4b35      	ldr	r3, [pc, #212]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a34      	ldr	r2, [pc, #208]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c0:	f7fe f870 	bl	80023a4 <HAL_GetTick>
 80042c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c8:	f7fe f86c 	bl	80023a4 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e357      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042da:	4b2c      	ldr	r3, [pc, #176]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042e6:	4b28      	ldr	r3, [pc, #160]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d035      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	429a      	cmp	r2, r3
 8004302:	d02e      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004304:	4b20      	ldr	r3, [pc, #128]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800430e:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800431a:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431e:	4a1a      	ldr	r2, [pc, #104]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004324:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004326:	4a18      	ldr	r2, [pc, #96]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800432c:	4b16      	ldr	r3, [pc, #88]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d114      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fe f834 	bl	80023a4 <HAL_GetTick>
 800433c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433e:	e00a      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004340:	f7fe f830 	bl	80023a4 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f241 3288 	movw	r2, #5000	; 0x1388
 800434e:	4293      	cmp	r3, r2
 8004350:	d901      	bls.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e319      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004356:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0ee      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800436e:	d111      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800437e:	400b      	ands	r3, r1
 8004380:	4901      	ldr	r1, [pc, #4]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
 8004386:	e00b      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004388:	40023800 	.word	0x40023800
 800438c:	40007000 	.word	0x40007000
 8004390:	0ffffcff 	.word	0x0ffffcff
 8004394:	4bb1      	ldr	r3, [pc, #708]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4ab0      	ldr	r2, [pc, #704]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800439a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800439e:	6093      	str	r3, [r2, #8]
 80043a0:	4bae      	ldr	r3, [pc, #696]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	49ab      	ldr	r1, [pc, #684]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d010      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043be:	4ba7      	ldr	r3, [pc, #668]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c4:	4aa5      	ldr	r2, [pc, #660]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043ce:	4ba3      	ldr	r3, [pc, #652]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	49a0      	ldr	r1, [pc, #640]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ec:	4b9b      	ldr	r3, [pc, #620]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043fa:	4998      	ldr	r1, [pc, #608]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800440e:	4b93      	ldr	r3, [pc, #588]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800441c:	498f      	ldr	r1, [pc, #572]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004430:	4b8a      	ldr	r3, [pc, #552]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443e:	4987      	ldr	r1, [pc, #540]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004452:	4b82      	ldr	r3, [pc, #520]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004458:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	497e      	ldr	r1, [pc, #504]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004474:	4b79      	ldr	r3, [pc, #484]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f023 0203 	bic.w	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	4976      	ldr	r1, [pc, #472]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004496:	4b71      	ldr	r3, [pc, #452]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	f023 020c 	bic.w	r2, r3, #12
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a4:	496d      	ldr	r1, [pc, #436]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044b8:	4b68      	ldr	r3, [pc, #416]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c6:	4965      	ldr	r1, [pc, #404]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044da:	4b60      	ldr	r3, [pc, #384]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e8:	495c      	ldr	r1, [pc, #368]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044fc:	4b57      	ldr	r3, [pc, #348]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450a:	4954      	ldr	r1, [pc, #336]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800451e:	4b4f      	ldr	r3, [pc, #316]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004524:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	494b      	ldr	r1, [pc, #300]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004540:	4b46      	ldr	r3, [pc, #280]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454e:	4943      	ldr	r1, [pc, #268]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004562:	4b3e      	ldr	r3, [pc, #248]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004570:	493a      	ldr	r1, [pc, #232]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004584:	4b35      	ldr	r3, [pc, #212]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004592:	4932      	ldr	r1, [pc, #200]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d011      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045a6:	4b2d      	ldr	r3, [pc, #180]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b4:	4929      	ldr	r1, [pc, #164]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c4:	d101      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045d6:	2301      	movs	r3, #1
 80045d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045e6:	4b1d      	ldr	r3, [pc, #116]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f4:	4919      	ldr	r1, [pc, #100]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004608:	4b14      	ldr	r3, [pc, #80]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004618:	4910      	ldr	r1, [pc, #64]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d006      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80d9 	beq.w	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a08      	ldr	r2, [pc, #32]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800463a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800463e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004640:	f7fd feb0 	bl	80023a4 <HAL_GetTick>
 8004644:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004646:	e00b      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004648:	f7fd feac 	bl	80023a4 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	; 0x64
 8004654:	d904      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e197      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004660:	4b6c      	ldr	r3, [pc, #432]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1ed      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d021      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467c:	2b00      	cmp	r3, #0
 800467e:	d11d      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004680:	4b64      	ldr	r3, [pc, #400]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004686:	0c1b      	lsrs	r3, r3, #16
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800468e:	4b61      	ldr	r3, [pc, #388]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004694:	0e1b      	lsrs	r3, r3, #24
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	019a      	lsls	r2, r3, #6
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	041b      	lsls	r3, r3, #16
 80046a6:	431a      	orrs	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	061b      	lsls	r3, r3, #24
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	071b      	lsls	r3, r3, #28
 80046b4:	4957      	ldr	r1, [pc, #348]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d02e      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e6:	d129      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046e8:	4b4a      	ldr	r3, [pc, #296]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046f6:	4b47      	ldr	r3, [pc, #284]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fc:	0f1b      	lsrs	r3, r3, #28
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	019a      	lsls	r2, r3, #6
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	061b      	lsls	r3, r3, #24
 8004716:	431a      	orrs	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	071b      	lsls	r3, r3, #28
 800471c:	493d      	ldr	r1, [pc, #244]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004724:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800472a:	f023 021f 	bic.w	r2, r3, #31
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	3b01      	subs	r3, #1
 8004734:	4937      	ldr	r1, [pc, #220]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01d      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004748:	4b32      	ldr	r3, [pc, #200]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800474a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800474e:	0e1b      	lsrs	r3, r3, #24
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004756:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475c:	0f1b      	lsrs	r3, r3, #28
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	019a      	lsls	r2, r3, #6
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	431a      	orrs	r2, r3
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	431a      	orrs	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	071b      	lsls	r3, r3, #28
 800477c:	4925      	ldr	r1, [pc, #148]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d011      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	019a      	lsls	r2, r3, #6
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	041b      	lsls	r3, r3, #16
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	061b      	lsls	r3, r3, #24
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	071b      	lsls	r3, r3, #28
 80047ac:	4919      	ldr	r1, [pc, #100]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047b4:	4b17      	ldr	r3, [pc, #92]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a16      	ldr	r2, [pc, #88]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c0:	f7fd fdf0 	bl	80023a4 <HAL_GetTick>
 80047c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047c8:	f7fd fdec 	bl	80023a4 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	; 0x64
 80047d4:	d901      	bls.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e0d7      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047da:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	f040 80cd 	bne.w	8004988 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047ee:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a08      	ldr	r2, [pc, #32]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fa:	f7fd fdd3 	bl	80023a4 <HAL_GetTick>
 80047fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004800:	e00a      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004802:	f7fd fdcf 	bl	80023a4 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b64      	cmp	r3, #100	; 0x64
 800480e:	d903      	bls.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e0ba      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004814:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004818:	4b5e      	ldr	r3, [pc, #376]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004824:	d0ed      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004842:	2b00      	cmp	r3, #0
 8004844:	d02e      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d12a      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800484e:	4b51      	ldr	r3, [pc, #324]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800485c:	4b4d      	ldr	r3, [pc, #308]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	0f1b      	lsrs	r3, r3, #28
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	019a      	lsls	r2, r3, #6
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	061b      	lsls	r3, r3, #24
 800487c:	431a      	orrs	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	071b      	lsls	r3, r3, #28
 8004882:	4944      	ldr	r1, [pc, #272]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800488a:	4b42      	ldr	r3, [pc, #264]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800488c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004890:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	3b01      	subs	r3, #1
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	493d      	ldr	r1, [pc, #244]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d022      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048b8:	d11d      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048ba:	4b36      	ldr	r3, [pc, #216]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	0e1b      	lsrs	r3, r3, #24
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048c8:	4b32      	ldr	r3, [pc, #200]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	0f1b      	lsrs	r3, r3, #28
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	019a      	lsls	r2, r3, #6
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	431a      	orrs	r2, r3
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	061b      	lsls	r3, r3, #24
 80048e8:	431a      	orrs	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	071b      	lsls	r3, r3, #28
 80048ee:	4929      	ldr	r1, [pc, #164]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d028      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004902:	4b24      	ldr	r3, [pc, #144]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004908:	0e1b      	lsrs	r3, r3, #24
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004910:	4b20      	ldr	r3, [pc, #128]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	0c1b      	lsrs	r3, r3, #16
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	019a      	lsls	r2, r3, #6
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	041b      	lsls	r3, r3, #16
 8004928:	431a      	orrs	r2, r3
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	071b      	lsls	r3, r3, #28
 8004936:	4917      	ldr	r1, [pc, #92]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800493e:	4b15      	ldr	r3, [pc, #84]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	4911      	ldr	r1, [pc, #68]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004954:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0e      	ldr	r2, [pc, #56]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800495a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004960:	f7fd fd20 	bl	80023a4 <HAL_GetTick>
 8004964:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004966:	e008      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004968:	f7fd fd1c 	bl	80023a4 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	; 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e007      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004986:	d1ef      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3720      	adds	r7, #32
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40023800 	.word	0x40023800

08004998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e049      	b.n	8004a3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fd fae2 	bl	8001f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4619      	mov	r1, r3
 80049d6:	4610      	mov	r0, r2
 80049d8:	f000 fd7a 	bl	80054d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d001      	beq.n	8004a60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e04c      	b.n	8004afa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a26      	ldr	r2, [pc, #152]	; (8004b08 <HAL_TIM_Base_Start+0xc0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d022      	beq.n	8004ab8 <HAL_TIM_Base_Start+0x70>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7a:	d01d      	beq.n	8004ab8 <HAL_TIM_Base_Start+0x70>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a22      	ldr	r2, [pc, #136]	; (8004b0c <HAL_TIM_Base_Start+0xc4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d018      	beq.n	8004ab8 <HAL_TIM_Base_Start+0x70>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a21      	ldr	r2, [pc, #132]	; (8004b10 <HAL_TIM_Base_Start+0xc8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d013      	beq.n	8004ab8 <HAL_TIM_Base_Start+0x70>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <HAL_TIM_Base_Start+0xcc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00e      	beq.n	8004ab8 <HAL_TIM_Base_Start+0x70>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1e      	ldr	r2, [pc, #120]	; (8004b18 <HAL_TIM_Base_Start+0xd0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d009      	beq.n	8004ab8 <HAL_TIM_Base_Start+0x70>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1c      	ldr	r2, [pc, #112]	; (8004b1c <HAL_TIM_Base_Start+0xd4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_TIM_Base_Start+0x70>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1b      	ldr	r2, [pc, #108]	; (8004b20 <HAL_TIM_Base_Start+0xd8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d115      	bne.n	8004ae4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	4b19      	ldr	r3, [pc, #100]	; (8004b24 <HAL_TIM_Base_Start+0xdc>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b06      	cmp	r3, #6
 8004ac8:	d015      	beq.n	8004af6 <HAL_TIM_Base_Start+0xae>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad0:	d011      	beq.n	8004af6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae2:	e008      	b.n	8004af6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	e000      	b.n	8004af8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40000800 	.word	0x40000800
 8004b14:	40000c00 	.word	0x40000c00
 8004b18:	40010400 	.word	0x40010400
 8004b1c:	40014000 	.word	0x40014000
 8004b20:	40001800 	.word	0x40001800
 8004b24:	00010007 	.word	0x00010007

08004b28 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e049      	b.n	8004bce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f841 	bl	8004bd6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3304      	adds	r3, #4
 8004b64:	4619      	mov	r1, r3
 8004b66:	4610      	mov	r0, r2
 8004b68:	f000 fcb2 	bl	80054d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_IC_Start_IT+0x1a>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	e023      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x62>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d104      	bne.n	8004c16 <HAL_TIM_IC_Start_IT+0x2a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	e01b      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x62>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d104      	bne.n	8004c26 <HAL_TIM_IC_Start_IT+0x3a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	e013      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x62>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	d104      	bne.n	8004c36 <HAL_TIM_IC_Start_IT+0x4a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	e00b      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x62>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d104      	bne.n	8004c46 <HAL_TIM_IC_Start_IT+0x5a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	e003      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x62>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d104      	bne.n	8004c60 <HAL_TIM_IC_Start_IT+0x74>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	e013      	b.n	8004c88 <HAL_TIM_IC_Start_IT+0x9c>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d104      	bne.n	8004c70 <HAL_TIM_IC_Start_IT+0x84>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	e00b      	b.n	8004c88 <HAL_TIM_IC_Start_IT+0x9c>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d104      	bne.n	8004c80 <HAL_TIM_IC_Start_IT+0x94>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	e003      	b.n	8004c88 <HAL_TIM_IC_Start_IT+0x9c>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d102      	bne.n	8004c96 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c90:	7bbb      	ldrb	r3, [r7, #14]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d001      	beq.n	8004c9a <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e0dd      	b.n	8004e56 <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d104      	bne.n	8004caa <HAL_TIM_IC_Start_IT+0xbe>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca8:	e023      	b.n	8004cf2 <HAL_TIM_IC_Start_IT+0x106>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d104      	bne.n	8004cba <HAL_TIM_IC_Start_IT+0xce>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb8:	e01b      	b.n	8004cf2 <HAL_TIM_IC_Start_IT+0x106>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d104      	bne.n	8004cca <HAL_TIM_IC_Start_IT+0xde>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cc8:	e013      	b.n	8004cf2 <HAL_TIM_IC_Start_IT+0x106>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b0c      	cmp	r3, #12
 8004cce:	d104      	bne.n	8004cda <HAL_TIM_IC_Start_IT+0xee>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cd8:	e00b      	b.n	8004cf2 <HAL_TIM_IC_Start_IT+0x106>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d104      	bne.n	8004cea <HAL_TIM_IC_Start_IT+0xfe>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce8:	e003      	b.n	8004cf2 <HAL_TIM_IC_Start_IT+0x106>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2202      	movs	r2, #2
 8004cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d104      	bne.n	8004d02 <HAL_TIM_IC_Start_IT+0x116>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d00:	e013      	b.n	8004d2a <HAL_TIM_IC_Start_IT+0x13e>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d104      	bne.n	8004d12 <HAL_TIM_IC_Start_IT+0x126>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d10:	e00b      	b.n	8004d2a <HAL_TIM_IC_Start_IT+0x13e>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d104      	bne.n	8004d22 <HAL_TIM_IC_Start_IT+0x136>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d20:	e003      	b.n	8004d2a <HAL_TIM_IC_Start_IT+0x13e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b0c      	cmp	r3, #12
 8004d2e:	d841      	bhi.n	8004db4 <HAL_TIM_IC_Start_IT+0x1c8>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <HAL_TIM_IC_Start_IT+0x14c>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d6d 	.word	0x08004d6d
 8004d3c:	08004db5 	.word	0x08004db5
 8004d40:	08004db5 	.word	0x08004db5
 8004d44:	08004db5 	.word	0x08004db5
 8004d48:	08004d7f 	.word	0x08004d7f
 8004d4c:	08004db5 	.word	0x08004db5
 8004d50:	08004db5 	.word	0x08004db5
 8004d54:	08004db5 	.word	0x08004db5
 8004d58:	08004d91 	.word	0x08004d91
 8004d5c:	08004db5 	.word	0x08004db5
 8004d60:	08004db5 	.word	0x08004db5
 8004d64:	08004db5 	.word	0x08004db5
 8004d68:	08004da3 	.word	0x08004da3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0202 	orr.w	r2, r2, #2
 8004d7a:	60da      	str	r2, [r3, #12]
      break;
 8004d7c:	e01b      	b.n	8004db6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0204 	orr.w	r2, r2, #4
 8004d8c:	60da      	str	r2, [r3, #12]
      break;
 8004d8e:	e012      	b.n	8004db6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0208 	orr.w	r2, r2, #8
 8004d9e:	60da      	str	r2, [r3, #12]
      break;
 8004da0:	e009      	b.n	8004db6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0210 	orr.w	r2, r2, #16
 8004db0:	60da      	str	r2, [r3, #12]
      break;
 8004db2:	e000      	b.n	8004db6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8004db4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	6839      	ldr	r1, [r7, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fe7a 	bl	8005ab8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a25      	ldr	r2, [pc, #148]	; (8004e60 <HAL_TIM_IC_Start_IT+0x274>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d022      	beq.n	8004e14 <HAL_TIM_IC_Start_IT+0x228>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd6:	d01d      	beq.n	8004e14 <HAL_TIM_IC_Start_IT+0x228>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a21      	ldr	r2, [pc, #132]	; (8004e64 <HAL_TIM_IC_Start_IT+0x278>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d018      	beq.n	8004e14 <HAL_TIM_IC_Start_IT+0x228>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a20      	ldr	r2, [pc, #128]	; (8004e68 <HAL_TIM_IC_Start_IT+0x27c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <HAL_TIM_IC_Start_IT+0x228>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1e      	ldr	r2, [pc, #120]	; (8004e6c <HAL_TIM_IC_Start_IT+0x280>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00e      	beq.n	8004e14 <HAL_TIM_IC_Start_IT+0x228>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1d      	ldr	r2, [pc, #116]	; (8004e70 <HAL_TIM_IC_Start_IT+0x284>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <HAL_TIM_IC_Start_IT+0x228>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1b      	ldr	r2, [pc, #108]	; (8004e74 <HAL_TIM_IC_Start_IT+0x288>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_TIM_IC_Start_IT+0x228>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1a      	ldr	r2, [pc, #104]	; (8004e78 <HAL_TIM_IC_Start_IT+0x28c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d115      	bne.n	8004e40 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <HAL_TIM_IC_Start_IT+0x290>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b06      	cmp	r3, #6
 8004e24:	d015      	beq.n	8004e52 <HAL_TIM_IC_Start_IT+0x266>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2c:	d011      	beq.n	8004e52 <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0201 	orr.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3e:	e008      	b.n	8004e52 <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0201 	orr.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e000      	b.n	8004e54 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40010000 	.word	0x40010000
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800
 8004e6c:	40000c00 	.word	0x40000c00
 8004e70:	40010400 	.word	0x40010400
 8004e74:	40014000 	.word	0x40014000
 8004e78:	40001800 	.word	0x40001800
 8004e7c:	00010007 	.word	0x00010007

08004e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d122      	bne.n	8004edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d11b      	bne.n	8004edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0202 	mvn.w	r2, #2
 8004eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fb ffd4 	bl	8000e70 <HAL_TIM_IC_CaptureCallback>
 8004ec8:	e005      	b.n	8004ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fae2 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fae9 	bl	80054a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d122      	bne.n	8004f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d11b      	bne.n	8004f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0204 	mvn.w	r2, #4
 8004f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fb ffaa 	bl	8000e70 <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fab8 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fabf 	bl	80054a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d122      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d11b      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0208 	mvn.w	r2, #8
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2204      	movs	r2, #4
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fb ff80 	bl	8000e70 <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fa8e 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fa95 	bl	80054a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b10      	cmp	r3, #16
 8004f90:	d122      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0210 	mvn.w	r2, #16
 8004fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2208      	movs	r2, #8
 8004fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fb ff56 	bl	8000e70 <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fa64 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fa6b 	bl	80054a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10e      	bne.n	8005004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d107      	bne.n	8005004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0201 	mvn.w	r2, #1
 8004ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa3e 	bl	8005480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b80      	cmp	r3, #128	; 0x80
 8005010:	d10e      	bne.n	8005030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501c:	2b80      	cmp	r3, #128	; 0x80
 800501e:	d107      	bne.n	8005030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fe02 	bl	8005c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503e:	d10e      	bne.n	800505e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504a:	2b80      	cmp	r3, #128	; 0x80
 800504c:	d107      	bne.n	800505e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fdf5 	bl	8005c48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	d10e      	bne.n	800508a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005076:	2b40      	cmp	r3, #64	; 0x40
 8005078:	d107      	bne.n	800508a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fa19 	bl	80054bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b20      	cmp	r3, #32
 8005096:	d10e      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d107      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f06f 0220 	mvn.w	r2, #32
 80050ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fdb5 	bl	8005c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_TIM_IC_ConfigChannel+0x1a>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e082      	b.n	80051de <HAL_TIM_IC_ConfigChannel+0x120>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d11b      	bne.n	800511e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	6819      	ldr	r1, [r3, #0]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f000 fb1b 	bl	8005730 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699a      	ldr	r2, [r3, #24]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 020c 	bic.w	r2, r2, #12
 8005108:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6999      	ldr	r1, [r3, #24]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	619a      	str	r2, [r3, #24]
 800511c:	e05a      	b.n	80051d4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b04      	cmp	r3, #4
 8005122:	d11c      	bne.n	800515e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6819      	ldr	r1, [r3, #0]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f000 fb9f 	bl	8005876 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005146:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6999      	ldr	r1, [r3, #24]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	021a      	lsls	r2, r3, #8
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	619a      	str	r2, [r3, #24]
 800515c:	e03a      	b.n	80051d4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b08      	cmp	r3, #8
 8005162:	d11b      	bne.n	800519c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	6819      	ldr	r1, [r3, #0]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f000 fbec 	bl	8005950 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69da      	ldr	r2, [r3, #28]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 020c 	bic.w	r2, r2, #12
 8005186:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69d9      	ldr	r1, [r3, #28]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	61da      	str	r2, [r3, #28]
 800519a:	e01b      	b.n	80051d4 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6819      	ldr	r1, [r3, #0]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f000 fc0c 	bl	80059c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69da      	ldr	r2, [r3, #28]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69d9      	ldr	r1, [r3, #28]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	021a      	lsls	r2, r3, #8
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIM_ConfigClockSource+0x18>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e0b3      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x180>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4b55      	ldr	r3, [pc, #340]	; (8005370 <HAL_TIM_ConfigClockSource+0x188>)
 800521c:	4013      	ands	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005226:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005238:	d03e      	beq.n	80052b8 <HAL_TIM_ConfigClockSource+0xd0>
 800523a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523e:	f200 8087 	bhi.w	8005350 <HAL_TIM_ConfigClockSource+0x168>
 8005242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005246:	f000 8085 	beq.w	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 800524a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524e:	d87f      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x168>
 8005250:	2b70      	cmp	r3, #112	; 0x70
 8005252:	d01a      	beq.n	800528a <HAL_TIM_ConfigClockSource+0xa2>
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d87b      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x168>
 8005258:	2b60      	cmp	r3, #96	; 0x60
 800525a:	d050      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x116>
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d877      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x168>
 8005260:	2b50      	cmp	r3, #80	; 0x50
 8005262:	d03c      	beq.n	80052de <HAL_TIM_ConfigClockSource+0xf6>
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d873      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x168>
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d058      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x136>
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d86f      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x168>
 8005270:	2b30      	cmp	r3, #48	; 0x30
 8005272:	d064      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x156>
 8005274:	2b30      	cmp	r3, #48	; 0x30
 8005276:	d86b      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x168>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d060      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x156>
 800527c:	2b20      	cmp	r3, #32
 800527e:	d867      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x168>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d05c      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x156>
 8005284:	2b10      	cmp	r3, #16
 8005286:	d05a      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005288:	e062      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6899      	ldr	r1, [r3, #8]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f000 fbed 	bl	8005a78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	609a      	str	r2, [r3, #8]
      break;
 80052b6:	e04e      	b.n	8005356 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	6899      	ldr	r1, [r3, #8]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f000 fbd6 	bl	8005a78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052da:	609a      	str	r2, [r3, #8]
      break;
 80052dc:	e03b      	b.n	8005356 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6859      	ldr	r1, [r3, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f000 fa94 	bl	8005818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2150      	movs	r1, #80	; 0x50
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fba3 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 80052fc:	e02b      	b.n	8005356 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6859      	ldr	r1, [r3, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	461a      	mov	r2, r3
 800530c:	f000 faf0 	bl	80058f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2160      	movs	r1, #96	; 0x60
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fb93 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 800531c:	e01b      	b.n	8005356 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6859      	ldr	r1, [r3, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	461a      	mov	r2, r3
 800532c:	f000 fa74 	bl	8005818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2140      	movs	r1, #64	; 0x40
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fb83 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 800533c:	e00b      	b.n	8005356 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4619      	mov	r1, r3
 8005348:	4610      	mov	r0, r2
 800534a:	f000 fb7a 	bl	8005a42 <TIM_ITRx_SetConfig>
        break;
 800534e:	e002      	b.n	8005356 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005350:	bf00      	nop
 8005352:	e000      	b.n	8005356 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005354:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	fffeff88 	.word	0xfffeff88

08005374 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005388:	2302      	movs	r3, #2
 800538a:	e031      	b.n	80053f0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f936 	bl	8005610 <TIM_SlaveTimer_SetConfig>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e018      	b.n	80053f0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053cc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053dc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b0c      	cmp	r3, #12
 800540a:	d831      	bhi.n	8005470 <HAL_TIM_ReadCapturedValue+0x78>
 800540c:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <HAL_TIM_ReadCapturedValue+0x1c>)
 800540e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005412:	bf00      	nop
 8005414:	08005449 	.word	0x08005449
 8005418:	08005471 	.word	0x08005471
 800541c:	08005471 	.word	0x08005471
 8005420:	08005471 	.word	0x08005471
 8005424:	08005453 	.word	0x08005453
 8005428:	08005471 	.word	0x08005471
 800542c:	08005471 	.word	0x08005471
 8005430:	08005471 	.word	0x08005471
 8005434:	0800545d 	.word	0x0800545d
 8005438:	08005471 	.word	0x08005471
 800543c:	08005471 	.word	0x08005471
 8005440:	08005471 	.word	0x08005471
 8005444:	08005467 	.word	0x08005467
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544e:	60fb      	str	r3, [r7, #12]

      break;
 8005450:	e00f      	b.n	8005472 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	60fb      	str	r3, [r7, #12]

      break;
 800545a:	e00a      	b.n	8005472 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005462:	60fb      	str	r3, [r7, #12]

      break;
 8005464:	e005      	b.n	8005472 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	60fb      	str	r3, [r7, #12]

      break;
 800546e:	e000      	b.n	8005472 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005470:	bf00      	nop
  }

  return tmpreg;
 8005472:	68fb      	ldr	r3, [r7, #12]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a40      	ldr	r2, [pc, #256]	; (80055e4 <TIM_Base_SetConfig+0x114>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d013      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ee:	d00f      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a3d      	ldr	r2, [pc, #244]	; (80055e8 <TIM_Base_SetConfig+0x118>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00b      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a3c      	ldr	r2, [pc, #240]	; (80055ec <TIM_Base_SetConfig+0x11c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d007      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a3b      	ldr	r2, [pc, #236]	; (80055f0 <TIM_Base_SetConfig+0x120>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a3a      	ldr	r2, [pc, #232]	; (80055f4 <TIM_Base_SetConfig+0x124>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d108      	bne.n	8005522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a2f      	ldr	r2, [pc, #188]	; (80055e4 <TIM_Base_SetConfig+0x114>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d02b      	beq.n	8005582 <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005530:	d027      	beq.n	8005582 <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a2c      	ldr	r2, [pc, #176]	; (80055e8 <TIM_Base_SetConfig+0x118>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d023      	beq.n	8005582 <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a2b      	ldr	r2, [pc, #172]	; (80055ec <TIM_Base_SetConfig+0x11c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01f      	beq.n	8005582 <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a2a      	ldr	r2, [pc, #168]	; (80055f0 <TIM_Base_SetConfig+0x120>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01b      	beq.n	8005582 <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a29      	ldr	r2, [pc, #164]	; (80055f4 <TIM_Base_SetConfig+0x124>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d017      	beq.n	8005582 <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a28      	ldr	r2, [pc, #160]	; (80055f8 <TIM_Base_SetConfig+0x128>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d013      	beq.n	8005582 <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a27      	ldr	r2, [pc, #156]	; (80055fc <TIM_Base_SetConfig+0x12c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00f      	beq.n	8005582 <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a26      	ldr	r2, [pc, #152]	; (8005600 <TIM_Base_SetConfig+0x130>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00b      	beq.n	8005582 <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a25      	ldr	r2, [pc, #148]	; (8005604 <TIM_Base_SetConfig+0x134>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d007      	beq.n	8005582 <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a24      	ldr	r2, [pc, #144]	; (8005608 <TIM_Base_SetConfig+0x138>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d003      	beq.n	8005582 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a23      	ldr	r2, [pc, #140]	; (800560c <TIM_Base_SetConfig+0x13c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d108      	bne.n	8005594 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a0a      	ldr	r2, [pc, #40]	; (80055e4 <TIM_Base_SetConfig+0x114>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_Base_SetConfig+0xf8>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a0c      	ldr	r2, [pc, #48]	; (80055f4 <TIM_Base_SetConfig+0x124>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d103      	bne.n	80055d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	615a      	str	r2, [r3, #20]
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800
 80055f0:	40000c00 	.word	0x40000c00
 80055f4:	40010400 	.word	0x40010400
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40014400 	.word	0x40014400
 8005600:	40014800 	.word	0x40014800
 8005604:	40001800 	.word	0x40001800
 8005608:	40001c00 	.word	0x40001c00
 800560c:	40002000 	.word	0x40002000

08005610 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005628:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4b3d      	ldr	r3, [pc, #244]	; (800572c <TIM_SlaveTimer_SetConfig+0x11c>)
 8005638:	4013      	ands	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b70      	cmp	r3, #112	; 0x70
 8005654:	d01a      	beq.n	800568c <TIM_SlaveTimer_SetConfig+0x7c>
 8005656:	2b70      	cmp	r3, #112	; 0x70
 8005658:	d860      	bhi.n	800571c <TIM_SlaveTimer_SetConfig+0x10c>
 800565a:	2b60      	cmp	r3, #96	; 0x60
 800565c:	d054      	beq.n	8005708 <TIM_SlaveTimer_SetConfig+0xf8>
 800565e:	2b60      	cmp	r3, #96	; 0x60
 8005660:	d85c      	bhi.n	800571c <TIM_SlaveTimer_SetConfig+0x10c>
 8005662:	2b50      	cmp	r3, #80	; 0x50
 8005664:	d046      	beq.n	80056f4 <TIM_SlaveTimer_SetConfig+0xe4>
 8005666:	2b50      	cmp	r3, #80	; 0x50
 8005668:	d858      	bhi.n	800571c <TIM_SlaveTimer_SetConfig+0x10c>
 800566a:	2b40      	cmp	r3, #64	; 0x40
 800566c:	d019      	beq.n	80056a2 <TIM_SlaveTimer_SetConfig+0x92>
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d854      	bhi.n	800571c <TIM_SlaveTimer_SetConfig+0x10c>
 8005672:	2b30      	cmp	r3, #48	; 0x30
 8005674:	d054      	beq.n	8005720 <TIM_SlaveTimer_SetConfig+0x110>
 8005676:	2b30      	cmp	r3, #48	; 0x30
 8005678:	d850      	bhi.n	800571c <TIM_SlaveTimer_SetConfig+0x10c>
 800567a:	2b20      	cmp	r3, #32
 800567c:	d050      	beq.n	8005720 <TIM_SlaveTimer_SetConfig+0x110>
 800567e:	2b20      	cmp	r3, #32
 8005680:	d84c      	bhi.n	800571c <TIM_SlaveTimer_SetConfig+0x10c>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d04c      	beq.n	8005720 <TIM_SlaveTimer_SetConfig+0x110>
 8005686:	2b10      	cmp	r3, #16
 8005688:	d04a      	beq.n	8005720 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800568a:	e047      	b.n	800571c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68d9      	ldr	r1, [r3, #12]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f000 f9ec 	bl	8005a78 <TIM_ETR_SetConfig>
      break;
 80056a0:	e03f      	b.n	8005722 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	d101      	bne.n	80056ae <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e03a      	b.n	8005724 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6a1a      	ldr	r2, [r3, #32]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0201 	bic.w	r2, r2, #1
 80056c4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056d4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	621a      	str	r2, [r3, #32]
      break;
 80056f2:	e016      	b.n	8005722 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	6899      	ldr	r1, [r3, #8]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	461a      	mov	r2, r3
 8005702:	f000 f889 	bl	8005818 <TIM_TI1_ConfigInputStage>
      break;
 8005706:	e00c      	b.n	8005722 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	6899      	ldr	r1, [r3, #8]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	461a      	mov	r2, r3
 8005716:	f000 f8eb 	bl	80058f0 <TIM_TI2_ConfigInputStage>
      break;
 800571a:	e002      	b.n	8005722 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800571c:	bf00      	nop
 800571e:	e000      	b.n	8005722 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8005720:	bf00      	nop
  }
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	fffefff8 	.word	0xfffefff8

08005730 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f023 0201 	bic.w	r2, r3, #1
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4a28      	ldr	r2, [pc, #160]	; (80057fc <TIM_TI1_SetConfig+0xcc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d01b      	beq.n	8005796 <TIM_TI1_SetConfig+0x66>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005764:	d017      	beq.n	8005796 <TIM_TI1_SetConfig+0x66>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4a25      	ldr	r2, [pc, #148]	; (8005800 <TIM_TI1_SetConfig+0xd0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <TIM_TI1_SetConfig+0x66>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4a24      	ldr	r2, [pc, #144]	; (8005804 <TIM_TI1_SetConfig+0xd4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00f      	beq.n	8005796 <TIM_TI1_SetConfig+0x66>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4a23      	ldr	r2, [pc, #140]	; (8005808 <TIM_TI1_SetConfig+0xd8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00b      	beq.n	8005796 <TIM_TI1_SetConfig+0x66>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4a22      	ldr	r2, [pc, #136]	; (800580c <TIM_TI1_SetConfig+0xdc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <TIM_TI1_SetConfig+0x66>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4a21      	ldr	r2, [pc, #132]	; (8005810 <TIM_TI1_SetConfig+0xe0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <TIM_TI1_SetConfig+0x66>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a20      	ldr	r2, [pc, #128]	; (8005814 <TIM_TI1_SetConfig+0xe4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d101      	bne.n	800579a <TIM_TI1_SetConfig+0x6a>
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <TIM_TI1_SetConfig+0x6c>
 800579a:	2300      	movs	r3, #0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f023 0303 	bic.w	r3, r3, #3
 80057a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	e003      	b.n	80057ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f023 030a 	bic.w	r3, r3, #10
 80057d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f003 030a 	and.w	r3, r3, #10
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	621a      	str	r2, [r3, #32]
}
 80057ee:	bf00      	nop
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40010000 	.word	0x40010000
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800
 8005808:	40000c00 	.word	0x40000c00
 800580c:	40010400 	.word	0x40010400
 8005810:	40014000 	.word	0x40014000
 8005814:	40001800 	.word	0x40001800

08005818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	f023 0201 	bic.w	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 030a 	bic.w	r3, r3, #10
 8005854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005876:	b480      	push	{r7}
 8005878:	b087      	sub	sp, #28
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
 8005882:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f023 0210 	bic.w	r2, r3, #16
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	031b      	lsls	r3, r3, #12
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	621a      	str	r2, [r3, #32]
}
 80058e4:	bf00      	nop
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f023 0210 	bic.w	r2, r3, #16
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800591a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	031b      	lsls	r3, r3, #12
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800592c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	621a      	str	r2, [r3, #32]
}
 8005944:	bf00      	nop
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f023 0303 	bic.w	r3, r3, #3
 800597c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800598c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	b2db      	uxtb	r3, r3
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80059a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	621a      	str	r2, [r3, #32]
}
 80059bc:	bf00      	nop
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	031b      	lsls	r3, r3, #12
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005a1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	031b      	lsls	r3, r3, #12
 8005a20:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f043 0307 	orr.w	r3, r3, #7
 8005a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	609a      	str	r2, [r3, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	021a      	lsls	r2, r3, #8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	609a      	str	r2, [r3, #8]
}
 8005aac:	bf00      	nop
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	2201      	movs	r2, #1
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1a      	ldr	r2, [r3, #32]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	401a      	ands	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 031f 	and.w	r3, r3, #31
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	fa01 f303 	lsl.w	r3, r1, r3
 8005af0:	431a      	orrs	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e06d      	b.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a30      	ldr	r2, [pc, #192]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d004      	beq.n	8005b50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2f      	ldr	r2, [pc, #188]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d108      	bne.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a20      	ldr	r2, [pc, #128]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d022      	beq.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8e:	d01d      	beq.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1d      	ldr	r2, [pc, #116]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d018      	beq.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1c      	ldr	r2, [pc, #112]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d013      	beq.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1a      	ldr	r2, [pc, #104]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00e      	beq.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d009      	beq.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a16      	ldr	r2, [pc, #88]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a15      	ldr	r2, [pc, #84]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d10c      	bne.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	40010000 	.word	0x40010000
 8005c08:	40010400 	.word	0x40010400
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40000c00 	.word	0x40000c00
 8005c18:	40014000 	.word	0x40014000
 8005c1c:	40001800 	.word	0x40001800

08005c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e040      	b.n	8005cf0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fc fa30 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2224      	movs	r2, #36	; 0x24
 8005c88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0201 	bic.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fa38 	bl	8006110 <UART_SetConfig>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e022      	b.n	8005cf0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fc8e 	bl	80065d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fd15 	bl	8006718 <UART_CheckIdleState>
 8005cee:	4603      	mov	r3, r0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d1e:	4013      	ands	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d113      	bne.n	8005d50 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f003 0320 	and.w	r3, r3, #32
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00e      	beq.n	8005d50 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d009      	beq.n	8005d50 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 81b9 	beq.w	80060b8 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
      }
      return;
 8005d4e:	e1b3      	b.n	80060b8 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 80e3 	beq.w	8005f1e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d105      	bne.n	8005d6e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4ba5      	ldr	r3, [pc, #660]	; (8005ffc <HAL_UART_IRQHandler+0x304>)
 8005d66:	4013      	ands	r3, r2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80d8 	beq.w	8005f1e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d010      	beq.n	8005d9a <HAL_UART_IRQHandler+0xa2>
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00b      	beq.n	8005d9a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2201      	movs	r2, #1
 8005d88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d90:	f043 0201 	orr.w	r2, r3, #1
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d010      	beq.n	8005dc6 <HAL_UART_IRQHandler+0xce>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2202      	movs	r2, #2
 8005db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dbc:	f043 0204 	orr.w	r2, r3, #4
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d010      	beq.n	8005df2 <HAL_UART_IRQHandler+0xfa>
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2204      	movs	r2, #4
 8005de0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de8:	f043 0202 	orr.w	r2, r3, #2
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d015      	beq.n	8005e28 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d104      	bne.n	8005e10 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2208      	movs	r2, #8
 8005e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e1e:	f043 0208 	orr.w	r2, r3, #8
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d011      	beq.n	8005e56 <HAL_UART_IRQHandler+0x15e>
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00c      	beq.n	8005e56 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e4c:	f043 0220 	orr.w	r2, r3, #32
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 812d 	beq.w	80060bc <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00c      	beq.n	8005e86 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e8c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d004      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d031      	beq.n	8005f0a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fce5 	bl	8006876 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb6:	2b40      	cmp	r3, #64	; 0x40
 8005eb8:	d123      	bne.n	8005f02 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d013      	beq.n	8005efa <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed6:	4a4a      	ldr	r2, [pc, #296]	; (8006000 <HAL_UART_IRQHandler+0x308>)
 8005ed8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fc fffc 	bl	8002edc <HAL_DMA_Abort_IT>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d017      	beq.n	8005f1a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef8:	e00f      	b.n	8005f1a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f8f2 	bl	80060e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f00:	e00b      	b.n	8005f1a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f8ee 	bl	80060e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f08:	e007      	b.n	8005f1a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f8ea 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005f18:	e0d0      	b.n	80060bc <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1a:	bf00      	nop
    return;
 8005f1c:	e0ce      	b.n	80060bc <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	f040 80a7 	bne.w	8006076 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f003 0310 	and.w	r3, r3, #16
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80a1 	beq.w	8006076 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f003 0310 	and.w	r3, r3, #16
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 809b 	beq.w	8006076 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2210      	movs	r2, #16
 8005f46:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b40      	cmp	r3, #64	; 0x40
 8005f54:	d156      	bne.n	8006004 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005f60:	893b      	ldrh	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80ac 	beq.w	80060c0 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f6e:	893a      	ldrh	r2, [r7, #8]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	f080 80a5 	bcs.w	80060c0 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	893a      	ldrh	r2, [r7, #8]
 8005f7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f88:	d02a      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f98:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0201 	bic.w	r2, r2, #1
 8005fa8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0210 	bic.w	r2, r2, #16
 8005fd4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fc ff0e 	bl	8002dfc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f87f 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ffa:	e061      	b.n	80060c0 <HAL_UART_IRQHandler+0x3c8>
 8005ffc:	04000120 	.word	0x04000120
 8006000:	080068d5 	.word	0x080068d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006010:	b29b      	uxth	r3, r3
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d050      	beq.n	80060c4 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8006022:	897b      	ldrh	r3, [r7, #10]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d04d      	beq.n	80060c4 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006036:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0201 	bic.w	r2, r2, #1
 8006046:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0210 	bic.w	r2, r2, #16
 8006068:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800606a:	897b      	ldrh	r3, [r7, #10]
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f842 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006074:	e026      	b.n	80060c4 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00d      	beq.n	800609c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006086:	2b00      	cmp	r3, #0
 8006088:	d008      	beq.n	800609c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800608e:	2b00      	cmp	r3, #0
 8006090:	d01a      	beq.n	80060c8 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
    }
    return;
 800609a:	e015      	b.n	80060c8 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d011      	beq.n	80060ca <HAL_UART_IRQHandler+0x3d2>
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00c      	beq.n	80060ca <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fc25 	bl	8006900 <UART_EndTransmit_IT>
    return;
 80060b6:	e008      	b.n	80060ca <HAL_UART_IRQHandler+0x3d2>
      return;
 80060b8:	bf00      	nop
 80060ba:	e006      	b.n	80060ca <HAL_UART_IRQHandler+0x3d2>
    return;
 80060bc:	bf00      	nop
 80060be:	e004      	b.n	80060ca <HAL_UART_IRQHandler+0x3d2>
      return;
 80060c0:	bf00      	nop
 80060c2:	e002      	b.n	80060ca <HAL_UART_IRQHandler+0x3d2>
      return;
 80060c4:	bf00      	nop
 80060c6:	e000      	b.n	80060ca <HAL_UART_IRQHandler+0x3d2>
    return;
 80060c8:	bf00      	nop
  }

}
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	4ba7      	ldr	r3, [pc, #668]	; (80063d8 <UART_SetConfig+0x2c8>)
 800613c:	4013      	ands	r3, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6812      	ldr	r2, [r2, #0]
 8006142:	6979      	ldr	r1, [r7, #20]
 8006144:	430b      	orrs	r3, r1
 8006146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	430a      	orrs	r2, r1
 8006180:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a95      	ldr	r2, [pc, #596]	; (80063dc <UART_SetConfig+0x2cc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d120      	bne.n	80061ce <UART_SetConfig+0xbe>
 800618c:	4b94      	ldr	r3, [pc, #592]	; (80063e0 <UART_SetConfig+0x2d0>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	2b03      	cmp	r3, #3
 8006198:	d816      	bhi.n	80061c8 <UART_SetConfig+0xb8>
 800619a:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <UART_SetConfig+0x90>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061b1 	.word	0x080061b1
 80061a4:	080061bd 	.word	0x080061bd
 80061a8:	080061b7 	.word	0x080061b7
 80061ac:	080061c3 	.word	0x080061c3
 80061b0:	2301      	movs	r3, #1
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e14f      	b.n	8006456 <UART_SetConfig+0x346>
 80061b6:	2302      	movs	r3, #2
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e14c      	b.n	8006456 <UART_SetConfig+0x346>
 80061bc:	2304      	movs	r3, #4
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e149      	b.n	8006456 <UART_SetConfig+0x346>
 80061c2:	2308      	movs	r3, #8
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e146      	b.n	8006456 <UART_SetConfig+0x346>
 80061c8:	2310      	movs	r3, #16
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e143      	b.n	8006456 <UART_SetConfig+0x346>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a84      	ldr	r2, [pc, #528]	; (80063e4 <UART_SetConfig+0x2d4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d132      	bne.n	800623e <UART_SetConfig+0x12e>
 80061d8:	4b81      	ldr	r3, [pc, #516]	; (80063e0 <UART_SetConfig+0x2d0>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	f003 030c 	and.w	r3, r3, #12
 80061e2:	2b0c      	cmp	r3, #12
 80061e4:	d828      	bhi.n	8006238 <UART_SetConfig+0x128>
 80061e6:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <UART_SetConfig+0xdc>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	08006221 	.word	0x08006221
 80061f0:	08006239 	.word	0x08006239
 80061f4:	08006239 	.word	0x08006239
 80061f8:	08006239 	.word	0x08006239
 80061fc:	0800622d 	.word	0x0800622d
 8006200:	08006239 	.word	0x08006239
 8006204:	08006239 	.word	0x08006239
 8006208:	08006239 	.word	0x08006239
 800620c:	08006227 	.word	0x08006227
 8006210:	08006239 	.word	0x08006239
 8006214:	08006239 	.word	0x08006239
 8006218:	08006239 	.word	0x08006239
 800621c:	08006233 	.word	0x08006233
 8006220:	2300      	movs	r3, #0
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e117      	b.n	8006456 <UART_SetConfig+0x346>
 8006226:	2302      	movs	r3, #2
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e114      	b.n	8006456 <UART_SetConfig+0x346>
 800622c:	2304      	movs	r3, #4
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e111      	b.n	8006456 <UART_SetConfig+0x346>
 8006232:	2308      	movs	r3, #8
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e10e      	b.n	8006456 <UART_SetConfig+0x346>
 8006238:	2310      	movs	r3, #16
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e10b      	b.n	8006456 <UART_SetConfig+0x346>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a69      	ldr	r2, [pc, #420]	; (80063e8 <UART_SetConfig+0x2d8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d120      	bne.n	800628a <UART_SetConfig+0x17a>
 8006248:	4b65      	ldr	r3, [pc, #404]	; (80063e0 <UART_SetConfig+0x2d0>)
 800624a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006252:	2b30      	cmp	r3, #48	; 0x30
 8006254:	d013      	beq.n	800627e <UART_SetConfig+0x16e>
 8006256:	2b30      	cmp	r3, #48	; 0x30
 8006258:	d814      	bhi.n	8006284 <UART_SetConfig+0x174>
 800625a:	2b20      	cmp	r3, #32
 800625c:	d009      	beq.n	8006272 <UART_SetConfig+0x162>
 800625e:	2b20      	cmp	r3, #32
 8006260:	d810      	bhi.n	8006284 <UART_SetConfig+0x174>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <UART_SetConfig+0x15c>
 8006266:	2b10      	cmp	r3, #16
 8006268:	d006      	beq.n	8006278 <UART_SetConfig+0x168>
 800626a:	e00b      	b.n	8006284 <UART_SetConfig+0x174>
 800626c:	2300      	movs	r3, #0
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	e0f1      	b.n	8006456 <UART_SetConfig+0x346>
 8006272:	2302      	movs	r3, #2
 8006274:	77fb      	strb	r3, [r7, #31]
 8006276:	e0ee      	b.n	8006456 <UART_SetConfig+0x346>
 8006278:	2304      	movs	r3, #4
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e0eb      	b.n	8006456 <UART_SetConfig+0x346>
 800627e:	2308      	movs	r3, #8
 8006280:	77fb      	strb	r3, [r7, #31]
 8006282:	e0e8      	b.n	8006456 <UART_SetConfig+0x346>
 8006284:	2310      	movs	r3, #16
 8006286:	77fb      	strb	r3, [r7, #31]
 8006288:	e0e5      	b.n	8006456 <UART_SetConfig+0x346>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a57      	ldr	r2, [pc, #348]	; (80063ec <UART_SetConfig+0x2dc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d120      	bne.n	80062d6 <UART_SetConfig+0x1c6>
 8006294:	4b52      	ldr	r3, [pc, #328]	; (80063e0 <UART_SetConfig+0x2d0>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800629e:	2bc0      	cmp	r3, #192	; 0xc0
 80062a0:	d013      	beq.n	80062ca <UART_SetConfig+0x1ba>
 80062a2:	2bc0      	cmp	r3, #192	; 0xc0
 80062a4:	d814      	bhi.n	80062d0 <UART_SetConfig+0x1c0>
 80062a6:	2b80      	cmp	r3, #128	; 0x80
 80062a8:	d009      	beq.n	80062be <UART_SetConfig+0x1ae>
 80062aa:	2b80      	cmp	r3, #128	; 0x80
 80062ac:	d810      	bhi.n	80062d0 <UART_SetConfig+0x1c0>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <UART_SetConfig+0x1a8>
 80062b2:	2b40      	cmp	r3, #64	; 0x40
 80062b4:	d006      	beq.n	80062c4 <UART_SetConfig+0x1b4>
 80062b6:	e00b      	b.n	80062d0 <UART_SetConfig+0x1c0>
 80062b8:	2300      	movs	r3, #0
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e0cb      	b.n	8006456 <UART_SetConfig+0x346>
 80062be:	2302      	movs	r3, #2
 80062c0:	77fb      	strb	r3, [r7, #31]
 80062c2:	e0c8      	b.n	8006456 <UART_SetConfig+0x346>
 80062c4:	2304      	movs	r3, #4
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e0c5      	b.n	8006456 <UART_SetConfig+0x346>
 80062ca:	2308      	movs	r3, #8
 80062cc:	77fb      	strb	r3, [r7, #31]
 80062ce:	e0c2      	b.n	8006456 <UART_SetConfig+0x346>
 80062d0:	2310      	movs	r3, #16
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	e0bf      	b.n	8006456 <UART_SetConfig+0x346>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a45      	ldr	r2, [pc, #276]	; (80063f0 <UART_SetConfig+0x2e0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d125      	bne.n	800632c <UART_SetConfig+0x21c>
 80062e0:	4b3f      	ldr	r3, [pc, #252]	; (80063e0 <UART_SetConfig+0x2d0>)
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ee:	d017      	beq.n	8006320 <UART_SetConfig+0x210>
 80062f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062f4:	d817      	bhi.n	8006326 <UART_SetConfig+0x216>
 80062f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062fa:	d00b      	beq.n	8006314 <UART_SetConfig+0x204>
 80062fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006300:	d811      	bhi.n	8006326 <UART_SetConfig+0x216>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <UART_SetConfig+0x1fe>
 8006306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630a:	d006      	beq.n	800631a <UART_SetConfig+0x20a>
 800630c:	e00b      	b.n	8006326 <UART_SetConfig+0x216>
 800630e:	2300      	movs	r3, #0
 8006310:	77fb      	strb	r3, [r7, #31]
 8006312:	e0a0      	b.n	8006456 <UART_SetConfig+0x346>
 8006314:	2302      	movs	r3, #2
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e09d      	b.n	8006456 <UART_SetConfig+0x346>
 800631a:	2304      	movs	r3, #4
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e09a      	b.n	8006456 <UART_SetConfig+0x346>
 8006320:	2308      	movs	r3, #8
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e097      	b.n	8006456 <UART_SetConfig+0x346>
 8006326:	2310      	movs	r3, #16
 8006328:	77fb      	strb	r3, [r7, #31]
 800632a:	e094      	b.n	8006456 <UART_SetConfig+0x346>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a30      	ldr	r2, [pc, #192]	; (80063f4 <UART_SetConfig+0x2e4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d125      	bne.n	8006382 <UART_SetConfig+0x272>
 8006336:	4b2a      	ldr	r3, [pc, #168]	; (80063e0 <UART_SetConfig+0x2d0>)
 8006338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006344:	d017      	beq.n	8006376 <UART_SetConfig+0x266>
 8006346:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800634a:	d817      	bhi.n	800637c <UART_SetConfig+0x26c>
 800634c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006350:	d00b      	beq.n	800636a <UART_SetConfig+0x25a>
 8006352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006356:	d811      	bhi.n	800637c <UART_SetConfig+0x26c>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <UART_SetConfig+0x254>
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006360:	d006      	beq.n	8006370 <UART_SetConfig+0x260>
 8006362:	e00b      	b.n	800637c <UART_SetConfig+0x26c>
 8006364:	2301      	movs	r3, #1
 8006366:	77fb      	strb	r3, [r7, #31]
 8006368:	e075      	b.n	8006456 <UART_SetConfig+0x346>
 800636a:	2302      	movs	r3, #2
 800636c:	77fb      	strb	r3, [r7, #31]
 800636e:	e072      	b.n	8006456 <UART_SetConfig+0x346>
 8006370:	2304      	movs	r3, #4
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e06f      	b.n	8006456 <UART_SetConfig+0x346>
 8006376:	2308      	movs	r3, #8
 8006378:	77fb      	strb	r3, [r7, #31]
 800637a:	e06c      	b.n	8006456 <UART_SetConfig+0x346>
 800637c:	2310      	movs	r3, #16
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e069      	b.n	8006456 <UART_SetConfig+0x346>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1c      	ldr	r2, [pc, #112]	; (80063f8 <UART_SetConfig+0x2e8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d137      	bne.n	80063fc <UART_SetConfig+0x2ec>
 800638c:	4b14      	ldr	r3, [pc, #80]	; (80063e0 <UART_SetConfig+0x2d0>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006396:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800639a:	d017      	beq.n	80063cc <UART_SetConfig+0x2bc>
 800639c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063a0:	d817      	bhi.n	80063d2 <UART_SetConfig+0x2c2>
 80063a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a6:	d00b      	beq.n	80063c0 <UART_SetConfig+0x2b0>
 80063a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ac:	d811      	bhi.n	80063d2 <UART_SetConfig+0x2c2>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <UART_SetConfig+0x2aa>
 80063b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b6:	d006      	beq.n	80063c6 <UART_SetConfig+0x2b6>
 80063b8:	e00b      	b.n	80063d2 <UART_SetConfig+0x2c2>
 80063ba:	2300      	movs	r3, #0
 80063bc:	77fb      	strb	r3, [r7, #31]
 80063be:	e04a      	b.n	8006456 <UART_SetConfig+0x346>
 80063c0:	2302      	movs	r3, #2
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e047      	b.n	8006456 <UART_SetConfig+0x346>
 80063c6:	2304      	movs	r3, #4
 80063c8:	77fb      	strb	r3, [r7, #31]
 80063ca:	e044      	b.n	8006456 <UART_SetConfig+0x346>
 80063cc:	2308      	movs	r3, #8
 80063ce:	77fb      	strb	r3, [r7, #31]
 80063d0:	e041      	b.n	8006456 <UART_SetConfig+0x346>
 80063d2:	2310      	movs	r3, #16
 80063d4:	77fb      	strb	r3, [r7, #31]
 80063d6:	e03e      	b.n	8006456 <UART_SetConfig+0x346>
 80063d8:	efff69f3 	.word	0xefff69f3
 80063dc:	40011000 	.word	0x40011000
 80063e0:	40023800 	.word	0x40023800
 80063e4:	40004400 	.word	0x40004400
 80063e8:	40004800 	.word	0x40004800
 80063ec:	40004c00 	.word	0x40004c00
 80063f0:	40005000 	.word	0x40005000
 80063f4:	40011400 	.word	0x40011400
 80063f8:	40007800 	.word	0x40007800
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a71      	ldr	r2, [pc, #452]	; (80065c8 <UART_SetConfig+0x4b8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d125      	bne.n	8006452 <UART_SetConfig+0x342>
 8006406:	4b71      	ldr	r3, [pc, #452]	; (80065cc <UART_SetConfig+0x4bc>)
 8006408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006410:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006414:	d017      	beq.n	8006446 <UART_SetConfig+0x336>
 8006416:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800641a:	d817      	bhi.n	800644c <UART_SetConfig+0x33c>
 800641c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006420:	d00b      	beq.n	800643a <UART_SetConfig+0x32a>
 8006422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006426:	d811      	bhi.n	800644c <UART_SetConfig+0x33c>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <UART_SetConfig+0x324>
 800642c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006430:	d006      	beq.n	8006440 <UART_SetConfig+0x330>
 8006432:	e00b      	b.n	800644c <UART_SetConfig+0x33c>
 8006434:	2300      	movs	r3, #0
 8006436:	77fb      	strb	r3, [r7, #31]
 8006438:	e00d      	b.n	8006456 <UART_SetConfig+0x346>
 800643a:	2302      	movs	r3, #2
 800643c:	77fb      	strb	r3, [r7, #31]
 800643e:	e00a      	b.n	8006456 <UART_SetConfig+0x346>
 8006440:	2304      	movs	r3, #4
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	e007      	b.n	8006456 <UART_SetConfig+0x346>
 8006446:	2308      	movs	r3, #8
 8006448:	77fb      	strb	r3, [r7, #31]
 800644a:	e004      	b.n	8006456 <UART_SetConfig+0x346>
 800644c:	2310      	movs	r3, #16
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e001      	b.n	8006456 <UART_SetConfig+0x346>
 8006452:	2310      	movs	r3, #16
 8006454:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800645e:	d15b      	bne.n	8006518 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006460:	7ffb      	ldrb	r3, [r7, #31]
 8006462:	2b08      	cmp	r3, #8
 8006464:	d827      	bhi.n	80064b6 <UART_SetConfig+0x3a6>
 8006466:	a201      	add	r2, pc, #4	; (adr r2, 800646c <UART_SetConfig+0x35c>)
 8006468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646c:	08006491 	.word	0x08006491
 8006470:	08006499 	.word	0x08006499
 8006474:	080064a1 	.word	0x080064a1
 8006478:	080064b7 	.word	0x080064b7
 800647c:	080064a7 	.word	0x080064a7
 8006480:	080064b7 	.word	0x080064b7
 8006484:	080064b7 	.word	0x080064b7
 8006488:	080064b7 	.word	0x080064b7
 800648c:	080064af 	.word	0x080064af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006490:	f7fd fe6a 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 8006494:	61b8      	str	r0, [r7, #24]
        break;
 8006496:	e013      	b.n	80064c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006498:	f7fd fe7a 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 800649c:	61b8      	str	r0, [r7, #24]
        break;
 800649e:	e00f      	b.n	80064c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a0:	4b4b      	ldr	r3, [pc, #300]	; (80065d0 <UART_SetConfig+0x4c0>)
 80064a2:	61bb      	str	r3, [r7, #24]
        break;
 80064a4:	e00c      	b.n	80064c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064a6:	f7fd fd9d 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 80064aa:	61b8      	str	r0, [r7, #24]
        break;
 80064ac:	e008      	b.n	80064c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b2:	61bb      	str	r3, [r7, #24]
        break;
 80064b4:	e004      	b.n	80064c0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	77bb      	strb	r3, [r7, #30]
        break;
 80064be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d074      	beq.n	80065b0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	005a      	lsls	r2, r3, #1
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	085b      	lsrs	r3, r3, #1
 80064d0:	441a      	add	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064da:	b29b      	uxth	r3, r3
 80064dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b0f      	cmp	r3, #15
 80064e2:	d916      	bls.n	8006512 <UART_SetConfig+0x402>
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ea:	d212      	bcs.n	8006512 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f023 030f 	bic.w	r3, r3, #15
 80064f4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	085b      	lsrs	r3, r3, #1
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	b29a      	uxth	r2, r3
 8006502:	89fb      	ldrh	r3, [r7, #14]
 8006504:	4313      	orrs	r3, r2
 8006506:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	89fa      	ldrh	r2, [r7, #14]
 800650e:	60da      	str	r2, [r3, #12]
 8006510:	e04e      	b.n	80065b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	77bb      	strb	r3, [r7, #30]
 8006516:	e04b      	b.n	80065b0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006518:	7ffb      	ldrb	r3, [r7, #31]
 800651a:	2b08      	cmp	r3, #8
 800651c:	d827      	bhi.n	800656e <UART_SetConfig+0x45e>
 800651e:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <UART_SetConfig+0x414>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	08006549 	.word	0x08006549
 8006528:	08006551 	.word	0x08006551
 800652c:	08006559 	.word	0x08006559
 8006530:	0800656f 	.word	0x0800656f
 8006534:	0800655f 	.word	0x0800655f
 8006538:	0800656f 	.word	0x0800656f
 800653c:	0800656f 	.word	0x0800656f
 8006540:	0800656f 	.word	0x0800656f
 8006544:	08006567 	.word	0x08006567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006548:	f7fd fe0e 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 800654c:	61b8      	str	r0, [r7, #24]
        break;
 800654e:	e013      	b.n	8006578 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006550:	f7fd fe1e 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 8006554:	61b8      	str	r0, [r7, #24]
        break;
 8006556:	e00f      	b.n	8006578 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006558:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <UART_SetConfig+0x4c0>)
 800655a:	61bb      	str	r3, [r7, #24]
        break;
 800655c:	e00c      	b.n	8006578 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800655e:	f7fd fd41 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 8006562:	61b8      	str	r0, [r7, #24]
        break;
 8006564:	e008      	b.n	8006578 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656a:	61bb      	str	r3, [r7, #24]
        break;
 800656c:	e004      	b.n	8006578 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	77bb      	strb	r3, [r7, #30]
        break;
 8006576:	bf00      	nop
    }

    if (pclk != 0U)
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d018      	beq.n	80065b0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	085a      	lsrs	r2, r3, #1
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	441a      	add	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006590:	b29b      	uxth	r3, r3
 8006592:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2b0f      	cmp	r3, #15
 8006598:	d908      	bls.n	80065ac <UART_SetConfig+0x49c>
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a0:	d204      	bcs.n	80065ac <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	60da      	str	r2, [r3, #12]
 80065aa:	e001      	b.n	80065b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80065bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40007c00 	.word	0x40007c00
 80065cc:	40023800 	.word	0x40023800
 80065d0:	00f42400 	.word	0x00f42400

080065d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00a      	beq.n	8006686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d01a      	beq.n	80066ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066d2:	d10a      	bne.n	80066ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	605a      	str	r2, [r3, #4]
  }
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af02      	add	r7, sp, #8
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006728:	f7fb fe3c 	bl	80023a4 <HAL_GetTick>
 800672c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0308 	and.w	r3, r3, #8
 8006738:	2b08      	cmp	r3, #8
 800673a:	d10e      	bne.n	800675a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800673c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f817 	bl	800677e <UART_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e00d      	b.n	8006776 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2220      	movs	r2, #32
 8006764:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	603b      	str	r3, [r7, #0]
 800678a:	4613      	mov	r3, r2
 800678c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800678e:	e05e      	b.n	800684e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006796:	d05a      	beq.n	800684e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006798:	f7fb fe04 	bl	80023a4 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d302      	bcc.n	80067ae <UART_WaitOnFlagUntilTimeout+0x30>
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d11b      	bne.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0201 	bic.w	r2, r2, #1
 80067cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e043      	b.n	800686e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d02c      	beq.n	800684e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006802:	d124      	bne.n	800684e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800680c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800681c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0201 	bic.w	r2, r2, #1
 800682c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2220      	movs	r2, #32
 8006838:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2220      	movs	r2, #32
 800683e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e00f      	b.n	800686e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69da      	ldr	r2, [r3, #28]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4013      	ands	r3, r2
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	429a      	cmp	r2, r3
 800685c:	bf0c      	ite	eq
 800685e:	2301      	moveq	r3, #1
 8006860:	2300      	movne	r3, #0
 8006862:	b2db      	uxtb	r3, r3
 8006864:	461a      	mov	r2, r3
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	429a      	cmp	r2, r3
 800686a:	d091      	beq.n	8006790 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800688c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0201 	bic.w	r2, r2, #1
 800689c:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d107      	bne.n	80068b6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0210 	bic.w	r2, r2, #16
 80068b4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff fbf6 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068f8:	bf00      	nop
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006916:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff fbd3 	bl	80060d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <__libc_init_array>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	4d0d      	ldr	r5, [pc, #52]	; (800696c <__libc_init_array+0x38>)
 8006938:	4c0d      	ldr	r4, [pc, #52]	; (8006970 <__libc_init_array+0x3c>)
 800693a:	1b64      	subs	r4, r4, r5
 800693c:	10a4      	asrs	r4, r4, #2
 800693e:	2600      	movs	r6, #0
 8006940:	42a6      	cmp	r6, r4
 8006942:	d109      	bne.n	8006958 <__libc_init_array+0x24>
 8006944:	4d0b      	ldr	r5, [pc, #44]	; (8006974 <__libc_init_array+0x40>)
 8006946:	4c0c      	ldr	r4, [pc, #48]	; (8006978 <__libc_init_array+0x44>)
 8006948:	f001 f858 	bl	80079fc <_init>
 800694c:	1b64      	subs	r4, r4, r5
 800694e:	10a4      	asrs	r4, r4, #2
 8006950:	2600      	movs	r6, #0
 8006952:	42a6      	cmp	r6, r4
 8006954:	d105      	bne.n	8006962 <__libc_init_array+0x2e>
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	f855 3b04 	ldr.w	r3, [r5], #4
 800695c:	4798      	blx	r3
 800695e:	3601      	adds	r6, #1
 8006960:	e7ee      	b.n	8006940 <__libc_init_array+0xc>
 8006962:	f855 3b04 	ldr.w	r3, [r5], #4
 8006966:	4798      	blx	r3
 8006968:	3601      	adds	r6, #1
 800696a:	e7f2      	b.n	8006952 <__libc_init_array+0x1e>
 800696c:	08007c18 	.word	0x08007c18
 8006970:	08007c18 	.word	0x08007c18
 8006974:	08007c18 	.word	0x08007c18
 8006978:	08007c1c 	.word	0x08007c1c

0800697c <memset>:
 800697c:	4402      	add	r2, r0
 800697e:	4603      	mov	r3, r0
 8006980:	4293      	cmp	r3, r2
 8006982:	d100      	bne.n	8006986 <memset+0xa>
 8006984:	4770      	bx	lr
 8006986:	f803 1b01 	strb.w	r1, [r3], #1
 800698a:	e7f9      	b.n	8006980 <memset+0x4>
 800698c:	0000      	movs	r0, r0
	...

08006990 <sin>:
 8006990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006992:	ec53 2b10 	vmov	r2, r3, d0
 8006996:	4826      	ldr	r0, [pc, #152]	; (8006a30 <sin+0xa0>)
 8006998:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800699c:	4281      	cmp	r1, r0
 800699e:	dc07      	bgt.n	80069b0 <sin+0x20>
 80069a0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006a28 <sin+0x98>
 80069a4:	2000      	movs	r0, #0
 80069a6:	f000 fe5b 	bl	8007660 <__kernel_sin>
 80069aa:	ec51 0b10 	vmov	r0, r1, d0
 80069ae:	e007      	b.n	80069c0 <sin+0x30>
 80069b0:	4820      	ldr	r0, [pc, #128]	; (8006a34 <sin+0xa4>)
 80069b2:	4281      	cmp	r1, r0
 80069b4:	dd09      	ble.n	80069ca <sin+0x3a>
 80069b6:	ee10 0a10 	vmov	r0, s0
 80069ba:	4619      	mov	r1, r3
 80069bc:	f7f9 fc28 	bl	8000210 <__aeabi_dsub>
 80069c0:	ec41 0b10 	vmov	d0, r0, r1
 80069c4:	b005      	add	sp, #20
 80069c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80069ca:	4668      	mov	r0, sp
 80069cc:	f000 f834 	bl	8006a38 <__ieee754_rem_pio2>
 80069d0:	f000 0003 	and.w	r0, r0, #3
 80069d4:	2801      	cmp	r0, #1
 80069d6:	d008      	beq.n	80069ea <sin+0x5a>
 80069d8:	2802      	cmp	r0, #2
 80069da:	d00d      	beq.n	80069f8 <sin+0x68>
 80069dc:	b9d0      	cbnz	r0, 8006a14 <sin+0x84>
 80069de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069e2:	ed9d 0b00 	vldr	d0, [sp]
 80069e6:	2001      	movs	r0, #1
 80069e8:	e7dd      	b.n	80069a6 <sin+0x16>
 80069ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069ee:	ed9d 0b00 	vldr	d0, [sp]
 80069f2:	f000 fa2d 	bl	8006e50 <__kernel_cos>
 80069f6:	e7d8      	b.n	80069aa <sin+0x1a>
 80069f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069fc:	ed9d 0b00 	vldr	d0, [sp]
 8006a00:	2001      	movs	r0, #1
 8006a02:	f000 fe2d 	bl	8007660 <__kernel_sin>
 8006a06:	ec53 2b10 	vmov	r2, r3, d0
 8006a0a:	ee10 0a10 	vmov	r0, s0
 8006a0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a12:	e7d5      	b.n	80069c0 <sin+0x30>
 8006a14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a18:	ed9d 0b00 	vldr	d0, [sp]
 8006a1c:	f000 fa18 	bl	8006e50 <__kernel_cos>
 8006a20:	e7f1      	b.n	8006a06 <sin+0x76>
 8006a22:	bf00      	nop
 8006a24:	f3af 8000 	nop.w
	...
 8006a30:	3fe921fb 	.word	0x3fe921fb
 8006a34:	7fefffff 	.word	0x7fefffff

08006a38 <__ieee754_rem_pio2>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	ed2d 8b02 	vpush	{d8}
 8006a40:	ec55 4b10 	vmov	r4, r5, d0
 8006a44:	4bca      	ldr	r3, [pc, #808]	; (8006d70 <__ieee754_rem_pio2+0x338>)
 8006a46:	b08b      	sub	sp, #44	; 0x2c
 8006a48:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006a4c:	4598      	cmp	r8, r3
 8006a4e:	4682      	mov	sl, r0
 8006a50:	9502      	str	r5, [sp, #8]
 8006a52:	dc08      	bgt.n	8006a66 <__ieee754_rem_pio2+0x2e>
 8006a54:	2200      	movs	r2, #0
 8006a56:	2300      	movs	r3, #0
 8006a58:	ed80 0b00 	vstr	d0, [r0]
 8006a5c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006a60:	f04f 0b00 	mov.w	fp, #0
 8006a64:	e028      	b.n	8006ab8 <__ieee754_rem_pio2+0x80>
 8006a66:	4bc3      	ldr	r3, [pc, #780]	; (8006d74 <__ieee754_rem_pio2+0x33c>)
 8006a68:	4598      	cmp	r8, r3
 8006a6a:	dc78      	bgt.n	8006b5e <__ieee754_rem_pio2+0x126>
 8006a6c:	9b02      	ldr	r3, [sp, #8]
 8006a6e:	4ec2      	ldr	r6, [pc, #776]	; (8006d78 <__ieee754_rem_pio2+0x340>)
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	ee10 0a10 	vmov	r0, s0
 8006a76:	a3b0      	add	r3, pc, #704	; (adr r3, 8006d38 <__ieee754_rem_pio2+0x300>)
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	dd39      	ble.n	8006af4 <__ieee754_rem_pio2+0xbc>
 8006a80:	f7f9 fbc6 	bl	8000210 <__aeabi_dsub>
 8006a84:	45b0      	cmp	r8, r6
 8006a86:	4604      	mov	r4, r0
 8006a88:	460d      	mov	r5, r1
 8006a8a:	d01b      	beq.n	8006ac4 <__ieee754_rem_pio2+0x8c>
 8006a8c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006d40 <__ieee754_rem_pio2+0x308>)
 8006a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a92:	f7f9 fbbd 	bl	8000210 <__aeabi_dsub>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	e9ca 2300 	strd	r2, r3, [sl]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	f7f9 fbb5 	bl	8000210 <__aeabi_dsub>
 8006aa6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006d40 <__ieee754_rem_pio2+0x308>)
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	f7f9 fbb0 	bl	8000210 <__aeabi_dsub>
 8006ab0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ab4:	f04f 0b01 	mov.w	fp, #1
 8006ab8:	4658      	mov	r0, fp
 8006aba:	b00b      	add	sp, #44	; 0x2c
 8006abc:	ecbd 8b02 	vpop	{d8}
 8006ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac4:	a3a0      	add	r3, pc, #640	; (adr r3, 8006d48 <__ieee754_rem_pio2+0x310>)
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	f7f9 fba1 	bl	8000210 <__aeabi_dsub>
 8006ace:	a3a0      	add	r3, pc, #640	; (adr r3, 8006d50 <__ieee754_rem_pio2+0x318>)
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	460d      	mov	r5, r1
 8006ad8:	f7f9 fb9a 	bl	8000210 <__aeabi_dsub>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	e9ca 2300 	strd	r2, r3, [sl]
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	f7f9 fb92 	bl	8000210 <__aeabi_dsub>
 8006aec:	a398      	add	r3, pc, #608	; (adr r3, 8006d50 <__ieee754_rem_pio2+0x318>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	e7db      	b.n	8006aac <__ieee754_rem_pio2+0x74>
 8006af4:	f7f9 fb8e 	bl	8000214 <__adddf3>
 8006af8:	45b0      	cmp	r8, r6
 8006afa:	4604      	mov	r4, r0
 8006afc:	460d      	mov	r5, r1
 8006afe:	d016      	beq.n	8006b2e <__ieee754_rem_pio2+0xf6>
 8006b00:	a38f      	add	r3, pc, #572	; (adr r3, 8006d40 <__ieee754_rem_pio2+0x308>)
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	f7f9 fb85 	bl	8000214 <__adddf3>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	e9ca 2300 	strd	r2, r3, [sl]
 8006b12:	4620      	mov	r0, r4
 8006b14:	4629      	mov	r1, r5
 8006b16:	f7f9 fb7b 	bl	8000210 <__aeabi_dsub>
 8006b1a:	a389      	add	r3, pc, #548	; (adr r3, 8006d40 <__ieee754_rem_pio2+0x308>)
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f7f9 fb78 	bl	8000214 <__adddf3>
 8006b24:	f04f 3bff 	mov.w	fp, #4294967295
 8006b28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006b2c:	e7c4      	b.n	8006ab8 <__ieee754_rem_pio2+0x80>
 8006b2e:	a386      	add	r3, pc, #536	; (adr r3, 8006d48 <__ieee754_rem_pio2+0x310>)
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f7f9 fb6e 	bl	8000214 <__adddf3>
 8006b38:	a385      	add	r3, pc, #532	; (adr r3, 8006d50 <__ieee754_rem_pio2+0x318>)
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	4604      	mov	r4, r0
 8006b40:	460d      	mov	r5, r1
 8006b42:	f7f9 fb67 	bl	8000214 <__adddf3>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	e9ca 2300 	strd	r2, r3, [sl]
 8006b4e:	4620      	mov	r0, r4
 8006b50:	4629      	mov	r1, r5
 8006b52:	f7f9 fb5d 	bl	8000210 <__aeabi_dsub>
 8006b56:	a37e      	add	r3, pc, #504	; (adr r3, 8006d50 <__ieee754_rem_pio2+0x318>)
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	e7e0      	b.n	8006b20 <__ieee754_rem_pio2+0xe8>
 8006b5e:	4b87      	ldr	r3, [pc, #540]	; (8006d7c <__ieee754_rem_pio2+0x344>)
 8006b60:	4598      	cmp	r8, r3
 8006b62:	f300 80d9 	bgt.w	8006d18 <__ieee754_rem_pio2+0x2e0>
 8006b66:	f000 fe39 	bl	80077dc <fabs>
 8006b6a:	ec55 4b10 	vmov	r4, r5, d0
 8006b6e:	ee10 0a10 	vmov	r0, s0
 8006b72:	a379      	add	r3, pc, #484	; (adr r3, 8006d58 <__ieee754_rem_pio2+0x320>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	4629      	mov	r1, r5
 8006b7a:	f7f9 fd01 	bl	8000580 <__aeabi_dmul>
 8006b7e:	4b80      	ldr	r3, [pc, #512]	; (8006d80 <__ieee754_rem_pio2+0x348>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	f7f9 fb47 	bl	8000214 <__adddf3>
 8006b86:	f7f9 ff95 	bl	8000ab4 <__aeabi_d2iz>
 8006b8a:	4683      	mov	fp, r0
 8006b8c:	f7f9 fc8e 	bl	80004ac <__aeabi_i2d>
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	ec43 2b18 	vmov	d8, r2, r3
 8006b98:	a367      	add	r3, pc, #412	; (adr r3, 8006d38 <__ieee754_rem_pio2+0x300>)
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	f7f9 fcef 	bl	8000580 <__aeabi_dmul>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	4629      	mov	r1, r5
 8006baa:	f7f9 fb31 	bl	8000210 <__aeabi_dsub>
 8006bae:	a364      	add	r3, pc, #400	; (adr r3, 8006d40 <__ieee754_rem_pio2+0x308>)
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	460f      	mov	r7, r1
 8006bb8:	ec51 0b18 	vmov	r0, r1, d8
 8006bbc:	f7f9 fce0 	bl	8000580 <__aeabi_dmul>
 8006bc0:	f1bb 0f1f 	cmp.w	fp, #31
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	460d      	mov	r5, r1
 8006bc8:	dc0d      	bgt.n	8006be6 <__ieee754_rem_pio2+0x1ae>
 8006bca:	4b6e      	ldr	r3, [pc, #440]	; (8006d84 <__ieee754_rem_pio2+0x34c>)
 8006bcc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd4:	4543      	cmp	r3, r8
 8006bd6:	d006      	beq.n	8006be6 <__ieee754_rem_pio2+0x1ae>
 8006bd8:	4622      	mov	r2, r4
 8006bda:	462b      	mov	r3, r5
 8006bdc:	4630      	mov	r0, r6
 8006bde:	4639      	mov	r1, r7
 8006be0:	f7f9 fb16 	bl	8000210 <__aeabi_dsub>
 8006be4:	e00f      	b.n	8006c06 <__ieee754_rem_pio2+0x1ce>
 8006be6:	462b      	mov	r3, r5
 8006be8:	4622      	mov	r2, r4
 8006bea:	4630      	mov	r0, r6
 8006bec:	4639      	mov	r1, r7
 8006bee:	f7f9 fb0f 	bl	8000210 <__aeabi_dsub>
 8006bf2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006bf6:	9303      	str	r3, [sp, #12]
 8006bf8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006bfc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006c00:	f1b8 0f10 	cmp.w	r8, #16
 8006c04:	dc02      	bgt.n	8006c0c <__ieee754_rem_pio2+0x1d4>
 8006c06:	e9ca 0100 	strd	r0, r1, [sl]
 8006c0a:	e039      	b.n	8006c80 <__ieee754_rem_pio2+0x248>
 8006c0c:	a34e      	add	r3, pc, #312	; (adr r3, 8006d48 <__ieee754_rem_pio2+0x310>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	ec51 0b18 	vmov	r0, r1, d8
 8006c16:	f7f9 fcb3 	bl	8000580 <__aeabi_dmul>
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	460d      	mov	r5, r1
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4630      	mov	r0, r6
 8006c24:	4639      	mov	r1, r7
 8006c26:	f7f9 faf3 	bl	8000210 <__aeabi_dsub>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4680      	mov	r8, r0
 8006c30:	4689      	mov	r9, r1
 8006c32:	4630      	mov	r0, r6
 8006c34:	4639      	mov	r1, r7
 8006c36:	f7f9 faeb 	bl	8000210 <__aeabi_dsub>
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	f7f9 fae7 	bl	8000210 <__aeabi_dsub>
 8006c42:	a343      	add	r3, pc, #268	; (adr r3, 8006d50 <__ieee754_rem_pio2+0x318>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	4604      	mov	r4, r0
 8006c4a:	460d      	mov	r5, r1
 8006c4c:	ec51 0b18 	vmov	r0, r1, d8
 8006c50:	f7f9 fc96 	bl	8000580 <__aeabi_dmul>
 8006c54:	4622      	mov	r2, r4
 8006c56:	462b      	mov	r3, r5
 8006c58:	f7f9 fada 	bl	8000210 <__aeabi_dsub>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4604      	mov	r4, r0
 8006c62:	460d      	mov	r5, r1
 8006c64:	4640      	mov	r0, r8
 8006c66:	4649      	mov	r1, r9
 8006c68:	f7f9 fad2 	bl	8000210 <__aeabi_dsub>
 8006c6c:	9a03      	ldr	r2, [sp, #12]
 8006c6e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b31      	cmp	r3, #49	; 0x31
 8006c76:	dc24      	bgt.n	8006cc2 <__ieee754_rem_pio2+0x28a>
 8006c78:	e9ca 0100 	strd	r0, r1, [sl]
 8006c7c:	4646      	mov	r6, r8
 8006c7e:	464f      	mov	r7, r9
 8006c80:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c84:	4630      	mov	r0, r6
 8006c86:	4642      	mov	r2, r8
 8006c88:	464b      	mov	r3, r9
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	f7f9 fac0 	bl	8000210 <__aeabi_dsub>
 8006c90:	462b      	mov	r3, r5
 8006c92:	4622      	mov	r2, r4
 8006c94:	f7f9 fabc 	bl	8000210 <__aeabi_dsub>
 8006c98:	9b02      	ldr	r3, [sp, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ca0:	f6bf af0a 	bge.w	8006ab8 <__ieee754_rem_pio2+0x80>
 8006ca4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ca8:	f8ca 3004 	str.w	r3, [sl, #4]
 8006cac:	f8ca 8000 	str.w	r8, [sl]
 8006cb0:	f8ca 0008 	str.w	r0, [sl, #8]
 8006cb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cb8:	f8ca 300c 	str.w	r3, [sl, #12]
 8006cbc:	f1cb 0b00 	rsb	fp, fp, #0
 8006cc0:	e6fa      	b.n	8006ab8 <__ieee754_rem_pio2+0x80>
 8006cc2:	a327      	add	r3, pc, #156	; (adr r3, 8006d60 <__ieee754_rem_pio2+0x328>)
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	ec51 0b18 	vmov	r0, r1, d8
 8006ccc:	f7f9 fc58 	bl	8000580 <__aeabi_dmul>
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	460d      	mov	r5, r1
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4640      	mov	r0, r8
 8006cda:	4649      	mov	r1, r9
 8006cdc:	f7f9 fa98 	bl	8000210 <__aeabi_dsub>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	460f      	mov	r7, r1
 8006ce8:	4640      	mov	r0, r8
 8006cea:	4649      	mov	r1, r9
 8006cec:	f7f9 fa90 	bl	8000210 <__aeabi_dsub>
 8006cf0:	4622      	mov	r2, r4
 8006cf2:	462b      	mov	r3, r5
 8006cf4:	f7f9 fa8c 	bl	8000210 <__aeabi_dsub>
 8006cf8:	a31b      	add	r3, pc, #108	; (adr r3, 8006d68 <__ieee754_rem_pio2+0x330>)
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	4604      	mov	r4, r0
 8006d00:	460d      	mov	r5, r1
 8006d02:	ec51 0b18 	vmov	r0, r1, d8
 8006d06:	f7f9 fc3b 	bl	8000580 <__aeabi_dmul>
 8006d0a:	4622      	mov	r2, r4
 8006d0c:	462b      	mov	r3, r5
 8006d0e:	f7f9 fa7f 	bl	8000210 <__aeabi_dsub>
 8006d12:	4604      	mov	r4, r0
 8006d14:	460d      	mov	r5, r1
 8006d16:	e75f      	b.n	8006bd8 <__ieee754_rem_pio2+0x1a0>
 8006d18:	4b1b      	ldr	r3, [pc, #108]	; (8006d88 <__ieee754_rem_pio2+0x350>)
 8006d1a:	4598      	cmp	r8, r3
 8006d1c:	dd36      	ble.n	8006d8c <__ieee754_rem_pio2+0x354>
 8006d1e:	ee10 2a10 	vmov	r2, s0
 8006d22:	462b      	mov	r3, r5
 8006d24:	4620      	mov	r0, r4
 8006d26:	4629      	mov	r1, r5
 8006d28:	f7f9 fa72 	bl	8000210 <__aeabi_dsub>
 8006d2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d30:	e9ca 0100 	strd	r0, r1, [sl]
 8006d34:	e694      	b.n	8006a60 <__ieee754_rem_pio2+0x28>
 8006d36:	bf00      	nop
 8006d38:	54400000 	.word	0x54400000
 8006d3c:	3ff921fb 	.word	0x3ff921fb
 8006d40:	1a626331 	.word	0x1a626331
 8006d44:	3dd0b461 	.word	0x3dd0b461
 8006d48:	1a600000 	.word	0x1a600000
 8006d4c:	3dd0b461 	.word	0x3dd0b461
 8006d50:	2e037073 	.word	0x2e037073
 8006d54:	3ba3198a 	.word	0x3ba3198a
 8006d58:	6dc9c883 	.word	0x6dc9c883
 8006d5c:	3fe45f30 	.word	0x3fe45f30
 8006d60:	2e000000 	.word	0x2e000000
 8006d64:	3ba3198a 	.word	0x3ba3198a
 8006d68:	252049c1 	.word	0x252049c1
 8006d6c:	397b839a 	.word	0x397b839a
 8006d70:	3fe921fb 	.word	0x3fe921fb
 8006d74:	4002d97b 	.word	0x4002d97b
 8006d78:	3ff921fb 	.word	0x3ff921fb
 8006d7c:	413921fb 	.word	0x413921fb
 8006d80:	3fe00000 	.word	0x3fe00000
 8006d84:	08007a38 	.word	0x08007a38
 8006d88:	7fefffff 	.word	0x7fefffff
 8006d8c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006d90:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006d94:	ee10 0a10 	vmov	r0, s0
 8006d98:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006d9c:	ee10 6a10 	vmov	r6, s0
 8006da0:	460f      	mov	r7, r1
 8006da2:	f7f9 fe87 	bl	8000ab4 <__aeabi_d2iz>
 8006da6:	f7f9 fb81 	bl	80004ac <__aeabi_i2d>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4630      	mov	r0, r6
 8006db0:	4639      	mov	r1, r7
 8006db2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006db6:	f7f9 fa2b 	bl	8000210 <__aeabi_dsub>
 8006dba:	4b22      	ldr	r3, [pc, #136]	; (8006e44 <__ieee754_rem_pio2+0x40c>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f7f9 fbdf 	bl	8000580 <__aeabi_dmul>
 8006dc2:	460f      	mov	r7, r1
 8006dc4:	4606      	mov	r6, r0
 8006dc6:	f7f9 fe75 	bl	8000ab4 <__aeabi_d2iz>
 8006dca:	f7f9 fb6f 	bl	80004ac <__aeabi_i2d>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006dda:	f7f9 fa19 	bl	8000210 <__aeabi_dsub>
 8006dde:	4b19      	ldr	r3, [pc, #100]	; (8006e44 <__ieee754_rem_pio2+0x40c>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	f7f9 fbcd 	bl	8000580 <__aeabi_dmul>
 8006de6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006dea:	ad04      	add	r5, sp, #16
 8006dec:	f04f 0803 	mov.w	r8, #3
 8006df0:	46a9      	mov	r9, r5
 8006df2:	2600      	movs	r6, #0
 8006df4:	2700      	movs	r7, #0
 8006df6:	4632      	mov	r2, r6
 8006df8:	463b      	mov	r3, r7
 8006dfa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006dfe:	46c3      	mov	fp, r8
 8006e00:	3d08      	subs	r5, #8
 8006e02:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e06:	f7f9 fe23 	bl	8000a50 <__aeabi_dcmpeq>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d1f3      	bne.n	8006df6 <__ieee754_rem_pio2+0x3be>
 8006e0e:	4b0e      	ldr	r3, [pc, #56]	; (8006e48 <__ieee754_rem_pio2+0x410>)
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	2302      	movs	r3, #2
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4622      	mov	r2, r4
 8006e18:	465b      	mov	r3, fp
 8006e1a:	4651      	mov	r1, sl
 8006e1c:	4648      	mov	r0, r9
 8006e1e:	f000 f8df 	bl	8006fe0 <__kernel_rem_pio2>
 8006e22:	9b02      	ldr	r3, [sp, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	4683      	mov	fp, r0
 8006e28:	f6bf ae46 	bge.w	8006ab8 <__ieee754_rem_pio2+0x80>
 8006e2c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006e30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006e34:	f8ca 3004 	str.w	r3, [sl, #4]
 8006e38:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006e3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006e40:	e73a      	b.n	8006cb8 <__ieee754_rem_pio2+0x280>
 8006e42:	bf00      	nop
 8006e44:	41700000 	.word	0x41700000
 8006e48:	08007ab8 	.word	0x08007ab8
 8006e4c:	00000000 	.word	0x00000000

08006e50 <__kernel_cos>:
 8006e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e54:	ec57 6b10 	vmov	r6, r7, d0
 8006e58:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006e5c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006e60:	ed8d 1b00 	vstr	d1, [sp]
 8006e64:	da07      	bge.n	8006e76 <__kernel_cos+0x26>
 8006e66:	ee10 0a10 	vmov	r0, s0
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f7f9 fe22 	bl	8000ab4 <__aeabi_d2iz>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	f000 8088 	beq.w	8006f86 <__kernel_cos+0x136>
 8006e76:	4632      	mov	r2, r6
 8006e78:	463b      	mov	r3, r7
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	f7f9 fb7f 	bl	8000580 <__aeabi_dmul>
 8006e82:	4b51      	ldr	r3, [pc, #324]	; (8006fc8 <__kernel_cos+0x178>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	4604      	mov	r4, r0
 8006e88:	460d      	mov	r5, r1
 8006e8a:	f7f9 fb79 	bl	8000580 <__aeabi_dmul>
 8006e8e:	a340      	add	r3, pc, #256	; (adr r3, 8006f90 <__kernel_cos+0x140>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	4682      	mov	sl, r0
 8006e96:	468b      	mov	fp, r1
 8006e98:	4620      	mov	r0, r4
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	f7f9 fb70 	bl	8000580 <__aeabi_dmul>
 8006ea0:	a33d      	add	r3, pc, #244	; (adr r3, 8006f98 <__kernel_cos+0x148>)
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f7f9 f9b5 	bl	8000214 <__adddf3>
 8006eaa:	4622      	mov	r2, r4
 8006eac:	462b      	mov	r3, r5
 8006eae:	f7f9 fb67 	bl	8000580 <__aeabi_dmul>
 8006eb2:	a33b      	add	r3, pc, #236	; (adr r3, 8006fa0 <__kernel_cos+0x150>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f7f9 f9aa 	bl	8000210 <__aeabi_dsub>
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	462b      	mov	r3, r5
 8006ec0:	f7f9 fb5e 	bl	8000580 <__aeabi_dmul>
 8006ec4:	a338      	add	r3, pc, #224	; (adr r3, 8006fa8 <__kernel_cos+0x158>)
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	f7f9 f9a3 	bl	8000214 <__adddf3>
 8006ece:	4622      	mov	r2, r4
 8006ed0:	462b      	mov	r3, r5
 8006ed2:	f7f9 fb55 	bl	8000580 <__aeabi_dmul>
 8006ed6:	a336      	add	r3, pc, #216	; (adr r3, 8006fb0 <__kernel_cos+0x160>)
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	f7f9 f998 	bl	8000210 <__aeabi_dsub>
 8006ee0:	4622      	mov	r2, r4
 8006ee2:	462b      	mov	r3, r5
 8006ee4:	f7f9 fb4c 	bl	8000580 <__aeabi_dmul>
 8006ee8:	a333      	add	r3, pc, #204	; (adr r3, 8006fb8 <__kernel_cos+0x168>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	f7f9 f991 	bl	8000214 <__adddf3>
 8006ef2:	4622      	mov	r2, r4
 8006ef4:	462b      	mov	r3, r5
 8006ef6:	f7f9 fb43 	bl	8000580 <__aeabi_dmul>
 8006efa:	4622      	mov	r2, r4
 8006efc:	462b      	mov	r3, r5
 8006efe:	f7f9 fb3f 	bl	8000580 <__aeabi_dmul>
 8006f02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f06:	4604      	mov	r4, r0
 8006f08:	460d      	mov	r5, r1
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	4639      	mov	r1, r7
 8006f0e:	f7f9 fb37 	bl	8000580 <__aeabi_dmul>
 8006f12:	460b      	mov	r3, r1
 8006f14:	4602      	mov	r2, r0
 8006f16:	4629      	mov	r1, r5
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f7f9 f979 	bl	8000210 <__aeabi_dsub>
 8006f1e:	4b2b      	ldr	r3, [pc, #172]	; (8006fcc <__kernel_cos+0x17c>)
 8006f20:	4598      	cmp	r8, r3
 8006f22:	4606      	mov	r6, r0
 8006f24:	460f      	mov	r7, r1
 8006f26:	dc10      	bgt.n	8006f4a <__kernel_cos+0xfa>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4650      	mov	r0, sl
 8006f2e:	4659      	mov	r1, fp
 8006f30:	f7f9 f96e 	bl	8000210 <__aeabi_dsub>
 8006f34:	460b      	mov	r3, r1
 8006f36:	4926      	ldr	r1, [pc, #152]	; (8006fd0 <__kernel_cos+0x180>)
 8006f38:	4602      	mov	r2, r0
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	f7f9 f968 	bl	8000210 <__aeabi_dsub>
 8006f40:	ec41 0b10 	vmov	d0, r0, r1
 8006f44:	b003      	add	sp, #12
 8006f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4a:	4b22      	ldr	r3, [pc, #136]	; (8006fd4 <__kernel_cos+0x184>)
 8006f4c:	4920      	ldr	r1, [pc, #128]	; (8006fd0 <__kernel_cos+0x180>)
 8006f4e:	4598      	cmp	r8, r3
 8006f50:	bfcc      	ite	gt
 8006f52:	4d21      	ldrgt	r5, [pc, #132]	; (8006fd8 <__kernel_cos+0x188>)
 8006f54:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006f58:	2400      	movs	r4, #0
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	2000      	movs	r0, #0
 8006f60:	f7f9 f956 	bl	8000210 <__aeabi_dsub>
 8006f64:	4622      	mov	r2, r4
 8006f66:	4680      	mov	r8, r0
 8006f68:	4689      	mov	r9, r1
 8006f6a:	462b      	mov	r3, r5
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	4659      	mov	r1, fp
 8006f70:	f7f9 f94e 	bl	8000210 <__aeabi_dsub>
 8006f74:	4632      	mov	r2, r6
 8006f76:	463b      	mov	r3, r7
 8006f78:	f7f9 f94a 	bl	8000210 <__aeabi_dsub>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4640      	mov	r0, r8
 8006f82:	4649      	mov	r1, r9
 8006f84:	e7da      	b.n	8006f3c <__kernel_cos+0xec>
 8006f86:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006fc0 <__kernel_cos+0x170>
 8006f8a:	e7db      	b.n	8006f44 <__kernel_cos+0xf4>
 8006f8c:	f3af 8000 	nop.w
 8006f90:	be8838d4 	.word	0xbe8838d4
 8006f94:	bda8fae9 	.word	0xbda8fae9
 8006f98:	bdb4b1c4 	.word	0xbdb4b1c4
 8006f9c:	3e21ee9e 	.word	0x3e21ee9e
 8006fa0:	809c52ad 	.word	0x809c52ad
 8006fa4:	3e927e4f 	.word	0x3e927e4f
 8006fa8:	19cb1590 	.word	0x19cb1590
 8006fac:	3efa01a0 	.word	0x3efa01a0
 8006fb0:	16c15177 	.word	0x16c15177
 8006fb4:	3f56c16c 	.word	0x3f56c16c
 8006fb8:	5555554c 	.word	0x5555554c
 8006fbc:	3fa55555 	.word	0x3fa55555
 8006fc0:	00000000 	.word	0x00000000
 8006fc4:	3ff00000 	.word	0x3ff00000
 8006fc8:	3fe00000 	.word	0x3fe00000
 8006fcc:	3fd33332 	.word	0x3fd33332
 8006fd0:	3ff00000 	.word	0x3ff00000
 8006fd4:	3fe90000 	.word	0x3fe90000
 8006fd8:	3fd20000 	.word	0x3fd20000
 8006fdc:	00000000 	.word	0x00000000

08006fe0 <__kernel_rem_pio2>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	ed2d 8b02 	vpush	{d8}
 8006fe8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006fec:	f112 0f14 	cmn.w	r2, #20
 8006ff0:	9308      	str	r3, [sp, #32]
 8006ff2:	9101      	str	r1, [sp, #4]
 8006ff4:	4bc6      	ldr	r3, [pc, #792]	; (8007310 <__kernel_rem_pio2+0x330>)
 8006ff6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006ff8:	9009      	str	r0, [sp, #36]	; 0x24
 8006ffa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ffe:	9304      	str	r3, [sp, #16]
 8007000:	9b08      	ldr	r3, [sp, #32]
 8007002:	f103 33ff 	add.w	r3, r3, #4294967295
 8007006:	bfa8      	it	ge
 8007008:	1ed4      	subge	r4, r2, #3
 800700a:	9306      	str	r3, [sp, #24]
 800700c:	bfb2      	itee	lt
 800700e:	2400      	movlt	r4, #0
 8007010:	2318      	movge	r3, #24
 8007012:	fb94 f4f3 	sdivge	r4, r4, r3
 8007016:	f06f 0317 	mvn.w	r3, #23
 800701a:	fb04 3303 	mla	r3, r4, r3, r3
 800701e:	eb03 0a02 	add.w	sl, r3, r2
 8007022:	9b04      	ldr	r3, [sp, #16]
 8007024:	9a06      	ldr	r2, [sp, #24]
 8007026:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007300 <__kernel_rem_pio2+0x320>
 800702a:	eb03 0802 	add.w	r8, r3, r2
 800702e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007030:	1aa7      	subs	r7, r4, r2
 8007032:	ae20      	add	r6, sp, #128	; 0x80
 8007034:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007038:	2500      	movs	r5, #0
 800703a:	4545      	cmp	r5, r8
 800703c:	dd18      	ble.n	8007070 <__kernel_rem_pio2+0x90>
 800703e:	9b08      	ldr	r3, [sp, #32]
 8007040:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007044:	aa20      	add	r2, sp, #128	; 0x80
 8007046:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007300 <__kernel_rem_pio2+0x320>
 800704a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800704e:	f1c3 0301 	rsb	r3, r3, #1
 8007052:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007056:	9307      	str	r3, [sp, #28]
 8007058:	9b07      	ldr	r3, [sp, #28]
 800705a:	9a04      	ldr	r2, [sp, #16]
 800705c:	4443      	add	r3, r8
 800705e:	429a      	cmp	r2, r3
 8007060:	db2f      	blt.n	80070c2 <__kernel_rem_pio2+0xe2>
 8007062:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007066:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800706a:	462f      	mov	r7, r5
 800706c:	2600      	movs	r6, #0
 800706e:	e01b      	b.n	80070a8 <__kernel_rem_pio2+0xc8>
 8007070:	42ef      	cmn	r7, r5
 8007072:	d407      	bmi.n	8007084 <__kernel_rem_pio2+0xa4>
 8007074:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007078:	f7f9 fa18 	bl	80004ac <__aeabi_i2d>
 800707c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007080:	3501      	adds	r5, #1
 8007082:	e7da      	b.n	800703a <__kernel_rem_pio2+0x5a>
 8007084:	ec51 0b18 	vmov	r0, r1, d8
 8007088:	e7f8      	b.n	800707c <__kernel_rem_pio2+0x9c>
 800708a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800708e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007092:	f7f9 fa75 	bl	8000580 <__aeabi_dmul>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800709e:	f7f9 f8b9 	bl	8000214 <__adddf3>
 80070a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070a6:	3601      	adds	r6, #1
 80070a8:	9b06      	ldr	r3, [sp, #24]
 80070aa:	429e      	cmp	r6, r3
 80070ac:	f1a7 0708 	sub.w	r7, r7, #8
 80070b0:	ddeb      	ble.n	800708a <__kernel_rem_pio2+0xaa>
 80070b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070b6:	3508      	adds	r5, #8
 80070b8:	ecab 7b02 	vstmia	fp!, {d7}
 80070bc:	f108 0801 	add.w	r8, r8, #1
 80070c0:	e7ca      	b.n	8007058 <__kernel_rem_pio2+0x78>
 80070c2:	9b04      	ldr	r3, [sp, #16]
 80070c4:	aa0c      	add	r2, sp, #48	; 0x30
 80070c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80070ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80070cc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80070ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80070d2:	9c04      	ldr	r4, [sp, #16]
 80070d4:	930a      	str	r3, [sp, #40]	; 0x28
 80070d6:	ab98      	add	r3, sp, #608	; 0x260
 80070d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070dc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80070e0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80070e4:	f8cd b008 	str.w	fp, [sp, #8]
 80070e8:	4625      	mov	r5, r4
 80070ea:	2d00      	cmp	r5, #0
 80070ec:	dc78      	bgt.n	80071e0 <__kernel_rem_pio2+0x200>
 80070ee:	ec47 6b10 	vmov	d0, r6, r7
 80070f2:	4650      	mov	r0, sl
 80070f4:	f000 fbfc 	bl	80078f0 <scalbn>
 80070f8:	ec57 6b10 	vmov	r6, r7, d0
 80070fc:	2200      	movs	r2, #0
 80070fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007102:	ee10 0a10 	vmov	r0, s0
 8007106:	4639      	mov	r1, r7
 8007108:	f7f9 fa3a 	bl	8000580 <__aeabi_dmul>
 800710c:	ec41 0b10 	vmov	d0, r0, r1
 8007110:	f000 fb6e 	bl	80077f0 <floor>
 8007114:	4b7f      	ldr	r3, [pc, #508]	; (8007314 <__kernel_rem_pio2+0x334>)
 8007116:	ec51 0b10 	vmov	r0, r1, d0
 800711a:	2200      	movs	r2, #0
 800711c:	f7f9 fa30 	bl	8000580 <__aeabi_dmul>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	4630      	mov	r0, r6
 8007126:	4639      	mov	r1, r7
 8007128:	f7f9 f872 	bl	8000210 <__aeabi_dsub>
 800712c:	460f      	mov	r7, r1
 800712e:	4606      	mov	r6, r0
 8007130:	f7f9 fcc0 	bl	8000ab4 <__aeabi_d2iz>
 8007134:	9007      	str	r0, [sp, #28]
 8007136:	f7f9 f9b9 	bl	80004ac <__aeabi_i2d>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4630      	mov	r0, r6
 8007140:	4639      	mov	r1, r7
 8007142:	f7f9 f865 	bl	8000210 <__aeabi_dsub>
 8007146:	f1ba 0f00 	cmp.w	sl, #0
 800714a:	4606      	mov	r6, r0
 800714c:	460f      	mov	r7, r1
 800714e:	dd70      	ble.n	8007232 <__kernel_rem_pio2+0x252>
 8007150:	1e62      	subs	r2, r4, #1
 8007152:	ab0c      	add	r3, sp, #48	; 0x30
 8007154:	9d07      	ldr	r5, [sp, #28]
 8007156:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800715a:	f1ca 0118 	rsb	r1, sl, #24
 800715e:	fa40 f301 	asr.w	r3, r0, r1
 8007162:	441d      	add	r5, r3
 8007164:	408b      	lsls	r3, r1
 8007166:	1ac0      	subs	r0, r0, r3
 8007168:	ab0c      	add	r3, sp, #48	; 0x30
 800716a:	9507      	str	r5, [sp, #28]
 800716c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007170:	f1ca 0317 	rsb	r3, sl, #23
 8007174:	fa40 f303 	asr.w	r3, r0, r3
 8007178:	9302      	str	r3, [sp, #8]
 800717a:	9b02      	ldr	r3, [sp, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	dd66      	ble.n	800724e <__kernel_rem_pio2+0x26e>
 8007180:	9b07      	ldr	r3, [sp, #28]
 8007182:	2200      	movs	r2, #0
 8007184:	3301      	adds	r3, #1
 8007186:	9307      	str	r3, [sp, #28]
 8007188:	4615      	mov	r5, r2
 800718a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800718e:	4294      	cmp	r4, r2
 8007190:	f300 8099 	bgt.w	80072c6 <__kernel_rem_pio2+0x2e6>
 8007194:	f1ba 0f00 	cmp.w	sl, #0
 8007198:	dd07      	ble.n	80071aa <__kernel_rem_pio2+0x1ca>
 800719a:	f1ba 0f01 	cmp.w	sl, #1
 800719e:	f000 80a5 	beq.w	80072ec <__kernel_rem_pio2+0x30c>
 80071a2:	f1ba 0f02 	cmp.w	sl, #2
 80071a6:	f000 80c1 	beq.w	800732c <__kernel_rem_pio2+0x34c>
 80071aa:	9b02      	ldr	r3, [sp, #8]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d14e      	bne.n	800724e <__kernel_rem_pio2+0x26e>
 80071b0:	4632      	mov	r2, r6
 80071b2:	463b      	mov	r3, r7
 80071b4:	4958      	ldr	r1, [pc, #352]	; (8007318 <__kernel_rem_pio2+0x338>)
 80071b6:	2000      	movs	r0, #0
 80071b8:	f7f9 f82a 	bl	8000210 <__aeabi_dsub>
 80071bc:	4606      	mov	r6, r0
 80071be:	460f      	mov	r7, r1
 80071c0:	2d00      	cmp	r5, #0
 80071c2:	d044      	beq.n	800724e <__kernel_rem_pio2+0x26e>
 80071c4:	4650      	mov	r0, sl
 80071c6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007308 <__kernel_rem_pio2+0x328>
 80071ca:	f000 fb91 	bl	80078f0 <scalbn>
 80071ce:	4630      	mov	r0, r6
 80071d0:	4639      	mov	r1, r7
 80071d2:	ec53 2b10 	vmov	r2, r3, d0
 80071d6:	f7f9 f81b 	bl	8000210 <__aeabi_dsub>
 80071da:	4606      	mov	r6, r0
 80071dc:	460f      	mov	r7, r1
 80071de:	e036      	b.n	800724e <__kernel_rem_pio2+0x26e>
 80071e0:	4b4e      	ldr	r3, [pc, #312]	; (800731c <__kernel_rem_pio2+0x33c>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	4630      	mov	r0, r6
 80071e6:	4639      	mov	r1, r7
 80071e8:	f7f9 f9ca 	bl	8000580 <__aeabi_dmul>
 80071ec:	f7f9 fc62 	bl	8000ab4 <__aeabi_d2iz>
 80071f0:	f7f9 f95c 	bl	80004ac <__aeabi_i2d>
 80071f4:	4b4a      	ldr	r3, [pc, #296]	; (8007320 <__kernel_rem_pio2+0x340>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	4680      	mov	r8, r0
 80071fa:	4689      	mov	r9, r1
 80071fc:	f7f9 f9c0 	bl	8000580 <__aeabi_dmul>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4630      	mov	r0, r6
 8007206:	4639      	mov	r1, r7
 8007208:	f7f9 f802 	bl	8000210 <__aeabi_dsub>
 800720c:	f7f9 fc52 	bl	8000ab4 <__aeabi_d2iz>
 8007210:	9b02      	ldr	r3, [sp, #8]
 8007212:	f843 0b04 	str.w	r0, [r3], #4
 8007216:	3d01      	subs	r5, #1
 8007218:	9302      	str	r3, [sp, #8]
 800721a:	ab70      	add	r3, sp, #448	; 0x1c0
 800721c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	4640      	mov	r0, r8
 8007226:	4649      	mov	r1, r9
 8007228:	f7f8 fff4 	bl	8000214 <__adddf3>
 800722c:	4606      	mov	r6, r0
 800722e:	460f      	mov	r7, r1
 8007230:	e75b      	b.n	80070ea <__kernel_rem_pio2+0x10a>
 8007232:	d105      	bne.n	8007240 <__kernel_rem_pio2+0x260>
 8007234:	1e63      	subs	r3, r4, #1
 8007236:	aa0c      	add	r2, sp, #48	; 0x30
 8007238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800723c:	15c3      	asrs	r3, r0, #23
 800723e:	e79b      	b.n	8007178 <__kernel_rem_pio2+0x198>
 8007240:	4b38      	ldr	r3, [pc, #224]	; (8007324 <__kernel_rem_pio2+0x344>)
 8007242:	2200      	movs	r2, #0
 8007244:	f7f9 fc22 	bl	8000a8c <__aeabi_dcmpge>
 8007248:	2800      	cmp	r0, #0
 800724a:	d139      	bne.n	80072c0 <__kernel_rem_pio2+0x2e0>
 800724c:	9002      	str	r0, [sp, #8]
 800724e:	2200      	movs	r2, #0
 8007250:	2300      	movs	r3, #0
 8007252:	4630      	mov	r0, r6
 8007254:	4639      	mov	r1, r7
 8007256:	f7f9 fbfb 	bl	8000a50 <__aeabi_dcmpeq>
 800725a:	2800      	cmp	r0, #0
 800725c:	f000 80b4 	beq.w	80073c8 <__kernel_rem_pio2+0x3e8>
 8007260:	f104 3bff 	add.w	fp, r4, #4294967295
 8007264:	465b      	mov	r3, fp
 8007266:	2200      	movs	r2, #0
 8007268:	9904      	ldr	r1, [sp, #16]
 800726a:	428b      	cmp	r3, r1
 800726c:	da65      	bge.n	800733a <__kernel_rem_pio2+0x35a>
 800726e:	2a00      	cmp	r2, #0
 8007270:	d07b      	beq.n	800736a <__kernel_rem_pio2+0x38a>
 8007272:	ab0c      	add	r3, sp, #48	; 0x30
 8007274:	f1aa 0a18 	sub.w	sl, sl, #24
 8007278:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 80a0 	beq.w	80073c2 <__kernel_rem_pio2+0x3e2>
 8007282:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007308 <__kernel_rem_pio2+0x328>
 8007286:	4650      	mov	r0, sl
 8007288:	f000 fb32 	bl	80078f0 <scalbn>
 800728c:	4f23      	ldr	r7, [pc, #140]	; (800731c <__kernel_rem_pio2+0x33c>)
 800728e:	ec55 4b10 	vmov	r4, r5, d0
 8007292:	46d8      	mov	r8, fp
 8007294:	2600      	movs	r6, #0
 8007296:	f1b8 0f00 	cmp.w	r8, #0
 800729a:	f280 80cf 	bge.w	800743c <__kernel_rem_pio2+0x45c>
 800729e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007300 <__kernel_rem_pio2+0x320>
 80072a2:	465f      	mov	r7, fp
 80072a4:	f04f 0800 	mov.w	r8, #0
 80072a8:	2f00      	cmp	r7, #0
 80072aa:	f2c0 80fd 	blt.w	80074a8 <__kernel_rem_pio2+0x4c8>
 80072ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80072b0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007328 <__kernel_rem_pio2+0x348>
 80072b4:	ec55 4b18 	vmov	r4, r5, d8
 80072b8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80072bc:	2600      	movs	r6, #0
 80072be:	e0e5      	b.n	800748c <__kernel_rem_pio2+0x4ac>
 80072c0:	2302      	movs	r3, #2
 80072c2:	9302      	str	r3, [sp, #8]
 80072c4:	e75c      	b.n	8007180 <__kernel_rem_pio2+0x1a0>
 80072c6:	f8db 3000 	ldr.w	r3, [fp]
 80072ca:	b955      	cbnz	r5, 80072e2 <__kernel_rem_pio2+0x302>
 80072cc:	b123      	cbz	r3, 80072d8 <__kernel_rem_pio2+0x2f8>
 80072ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80072d2:	f8cb 3000 	str.w	r3, [fp]
 80072d6:	2301      	movs	r3, #1
 80072d8:	3201      	adds	r2, #1
 80072da:	f10b 0b04 	add.w	fp, fp, #4
 80072de:	461d      	mov	r5, r3
 80072e0:	e755      	b.n	800718e <__kernel_rem_pio2+0x1ae>
 80072e2:	1acb      	subs	r3, r1, r3
 80072e4:	f8cb 3000 	str.w	r3, [fp]
 80072e8:	462b      	mov	r3, r5
 80072ea:	e7f5      	b.n	80072d8 <__kernel_rem_pio2+0x2f8>
 80072ec:	1e62      	subs	r2, r4, #1
 80072ee:	ab0c      	add	r3, sp, #48	; 0x30
 80072f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80072f8:	a90c      	add	r1, sp, #48	; 0x30
 80072fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80072fe:	e754      	b.n	80071aa <__kernel_rem_pio2+0x1ca>
	...
 800730c:	3ff00000 	.word	0x3ff00000
 8007310:	08007c00 	.word	0x08007c00
 8007314:	40200000 	.word	0x40200000
 8007318:	3ff00000 	.word	0x3ff00000
 800731c:	3e700000 	.word	0x3e700000
 8007320:	41700000 	.word	0x41700000
 8007324:	3fe00000 	.word	0x3fe00000
 8007328:	08007bc0 	.word	0x08007bc0
 800732c:	1e62      	subs	r2, r4, #1
 800732e:	ab0c      	add	r3, sp, #48	; 0x30
 8007330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007334:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007338:	e7de      	b.n	80072f8 <__kernel_rem_pio2+0x318>
 800733a:	a90c      	add	r1, sp, #48	; 0x30
 800733c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007340:	3b01      	subs	r3, #1
 8007342:	430a      	orrs	r2, r1
 8007344:	e790      	b.n	8007268 <__kernel_rem_pio2+0x288>
 8007346:	3301      	adds	r3, #1
 8007348:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800734c:	2900      	cmp	r1, #0
 800734e:	d0fa      	beq.n	8007346 <__kernel_rem_pio2+0x366>
 8007350:	9a08      	ldr	r2, [sp, #32]
 8007352:	18e3      	adds	r3, r4, r3
 8007354:	18a6      	adds	r6, r4, r2
 8007356:	aa20      	add	r2, sp, #128	; 0x80
 8007358:	1c65      	adds	r5, r4, #1
 800735a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800735e:	9302      	str	r3, [sp, #8]
 8007360:	9b02      	ldr	r3, [sp, #8]
 8007362:	42ab      	cmp	r3, r5
 8007364:	da04      	bge.n	8007370 <__kernel_rem_pio2+0x390>
 8007366:	461c      	mov	r4, r3
 8007368:	e6b5      	b.n	80070d6 <__kernel_rem_pio2+0xf6>
 800736a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800736c:	2301      	movs	r3, #1
 800736e:	e7eb      	b.n	8007348 <__kernel_rem_pio2+0x368>
 8007370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007372:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007376:	f7f9 f899 	bl	80004ac <__aeabi_i2d>
 800737a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800737e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007380:	46b3      	mov	fp, r6
 8007382:	461c      	mov	r4, r3
 8007384:	2700      	movs	r7, #0
 8007386:	f04f 0800 	mov.w	r8, #0
 800738a:	f04f 0900 	mov.w	r9, #0
 800738e:	9b06      	ldr	r3, [sp, #24]
 8007390:	429f      	cmp	r7, r3
 8007392:	dd06      	ble.n	80073a2 <__kernel_rem_pio2+0x3c2>
 8007394:	ab70      	add	r3, sp, #448	; 0x1c0
 8007396:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800739a:	e9c3 8900 	strd	r8, r9, [r3]
 800739e:	3501      	adds	r5, #1
 80073a0:	e7de      	b.n	8007360 <__kernel_rem_pio2+0x380>
 80073a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80073a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80073aa:	f7f9 f8e9 	bl	8000580 <__aeabi_dmul>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4640      	mov	r0, r8
 80073b4:	4649      	mov	r1, r9
 80073b6:	f7f8 ff2d 	bl	8000214 <__adddf3>
 80073ba:	3701      	adds	r7, #1
 80073bc:	4680      	mov	r8, r0
 80073be:	4689      	mov	r9, r1
 80073c0:	e7e5      	b.n	800738e <__kernel_rem_pio2+0x3ae>
 80073c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073c6:	e754      	b.n	8007272 <__kernel_rem_pio2+0x292>
 80073c8:	ec47 6b10 	vmov	d0, r6, r7
 80073cc:	f1ca 0000 	rsb	r0, sl, #0
 80073d0:	f000 fa8e 	bl	80078f0 <scalbn>
 80073d4:	ec57 6b10 	vmov	r6, r7, d0
 80073d8:	4b9f      	ldr	r3, [pc, #636]	; (8007658 <__kernel_rem_pio2+0x678>)
 80073da:	ee10 0a10 	vmov	r0, s0
 80073de:	2200      	movs	r2, #0
 80073e0:	4639      	mov	r1, r7
 80073e2:	f7f9 fb53 	bl	8000a8c <__aeabi_dcmpge>
 80073e6:	b300      	cbz	r0, 800742a <__kernel_rem_pio2+0x44a>
 80073e8:	4b9c      	ldr	r3, [pc, #624]	; (800765c <__kernel_rem_pio2+0x67c>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	4630      	mov	r0, r6
 80073ee:	4639      	mov	r1, r7
 80073f0:	f7f9 f8c6 	bl	8000580 <__aeabi_dmul>
 80073f4:	f7f9 fb5e 	bl	8000ab4 <__aeabi_d2iz>
 80073f8:	4605      	mov	r5, r0
 80073fa:	f7f9 f857 	bl	80004ac <__aeabi_i2d>
 80073fe:	4b96      	ldr	r3, [pc, #600]	; (8007658 <__kernel_rem_pio2+0x678>)
 8007400:	2200      	movs	r2, #0
 8007402:	f7f9 f8bd 	bl	8000580 <__aeabi_dmul>
 8007406:	460b      	mov	r3, r1
 8007408:	4602      	mov	r2, r0
 800740a:	4639      	mov	r1, r7
 800740c:	4630      	mov	r0, r6
 800740e:	f7f8 feff 	bl	8000210 <__aeabi_dsub>
 8007412:	f7f9 fb4f 	bl	8000ab4 <__aeabi_d2iz>
 8007416:	f104 0b01 	add.w	fp, r4, #1
 800741a:	ab0c      	add	r3, sp, #48	; 0x30
 800741c:	f10a 0a18 	add.w	sl, sl, #24
 8007420:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007424:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007428:	e72b      	b.n	8007282 <__kernel_rem_pio2+0x2a2>
 800742a:	4630      	mov	r0, r6
 800742c:	4639      	mov	r1, r7
 800742e:	f7f9 fb41 	bl	8000ab4 <__aeabi_d2iz>
 8007432:	ab0c      	add	r3, sp, #48	; 0x30
 8007434:	46a3      	mov	fp, r4
 8007436:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800743a:	e722      	b.n	8007282 <__kernel_rem_pio2+0x2a2>
 800743c:	ab70      	add	r3, sp, #448	; 0x1c0
 800743e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007442:	ab0c      	add	r3, sp, #48	; 0x30
 8007444:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007448:	f7f9 f830 	bl	80004ac <__aeabi_i2d>
 800744c:	4622      	mov	r2, r4
 800744e:	462b      	mov	r3, r5
 8007450:	f7f9 f896 	bl	8000580 <__aeabi_dmul>
 8007454:	4632      	mov	r2, r6
 8007456:	e9c9 0100 	strd	r0, r1, [r9]
 800745a:	463b      	mov	r3, r7
 800745c:	4620      	mov	r0, r4
 800745e:	4629      	mov	r1, r5
 8007460:	f7f9 f88e 	bl	8000580 <__aeabi_dmul>
 8007464:	f108 38ff 	add.w	r8, r8, #4294967295
 8007468:	4604      	mov	r4, r0
 800746a:	460d      	mov	r5, r1
 800746c:	e713      	b.n	8007296 <__kernel_rem_pio2+0x2b6>
 800746e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007472:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007476:	f7f9 f883 	bl	8000580 <__aeabi_dmul>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4620      	mov	r0, r4
 8007480:	4629      	mov	r1, r5
 8007482:	f7f8 fec7 	bl	8000214 <__adddf3>
 8007486:	3601      	adds	r6, #1
 8007488:	4604      	mov	r4, r0
 800748a:	460d      	mov	r5, r1
 800748c:	9b04      	ldr	r3, [sp, #16]
 800748e:	429e      	cmp	r6, r3
 8007490:	dc01      	bgt.n	8007496 <__kernel_rem_pio2+0x4b6>
 8007492:	45b0      	cmp	r8, r6
 8007494:	daeb      	bge.n	800746e <__kernel_rem_pio2+0x48e>
 8007496:	ab48      	add	r3, sp, #288	; 0x120
 8007498:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800749c:	e9c3 4500 	strd	r4, r5, [r3]
 80074a0:	3f01      	subs	r7, #1
 80074a2:	f108 0801 	add.w	r8, r8, #1
 80074a6:	e6ff      	b.n	80072a8 <__kernel_rem_pio2+0x2c8>
 80074a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	dc0b      	bgt.n	80074c6 <__kernel_rem_pio2+0x4e6>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	dc6e      	bgt.n	8007590 <__kernel_rem_pio2+0x5b0>
 80074b2:	d045      	beq.n	8007540 <__kernel_rem_pio2+0x560>
 80074b4:	9b07      	ldr	r3, [sp, #28]
 80074b6:	f003 0007 	and.w	r0, r3, #7
 80074ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80074be:	ecbd 8b02 	vpop	{d8}
 80074c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d1f3      	bne.n	80074b4 <__kernel_rem_pio2+0x4d4>
 80074cc:	ab48      	add	r3, sp, #288	; 0x120
 80074ce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80074d2:	46d0      	mov	r8, sl
 80074d4:	46d9      	mov	r9, fp
 80074d6:	f1b9 0f00 	cmp.w	r9, #0
 80074da:	f1a8 0808 	sub.w	r8, r8, #8
 80074de:	dc64      	bgt.n	80075aa <__kernel_rem_pio2+0x5ca>
 80074e0:	465c      	mov	r4, fp
 80074e2:	2c01      	cmp	r4, #1
 80074e4:	f1aa 0a08 	sub.w	sl, sl, #8
 80074e8:	dc7e      	bgt.n	80075e8 <__kernel_rem_pio2+0x608>
 80074ea:	2000      	movs	r0, #0
 80074ec:	2100      	movs	r1, #0
 80074ee:	f1bb 0f01 	cmp.w	fp, #1
 80074f2:	f300 8097 	bgt.w	8007624 <__kernel_rem_pio2+0x644>
 80074f6:	9b02      	ldr	r3, [sp, #8]
 80074f8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80074fc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007500:	2b00      	cmp	r3, #0
 8007502:	f040 8099 	bne.w	8007638 <__kernel_rem_pio2+0x658>
 8007506:	9b01      	ldr	r3, [sp, #4]
 8007508:	e9c3 5600 	strd	r5, r6, [r3]
 800750c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007510:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007514:	e7ce      	b.n	80074b4 <__kernel_rem_pio2+0x4d4>
 8007516:	ab48      	add	r3, sp, #288	; 0x120
 8007518:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f7f8 fe78 	bl	8000214 <__adddf3>
 8007524:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007528:	f1bb 0f00 	cmp.w	fp, #0
 800752c:	daf3      	bge.n	8007516 <__kernel_rem_pio2+0x536>
 800752e:	9b02      	ldr	r3, [sp, #8]
 8007530:	b113      	cbz	r3, 8007538 <__kernel_rem_pio2+0x558>
 8007532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007536:	4619      	mov	r1, r3
 8007538:	9b01      	ldr	r3, [sp, #4]
 800753a:	e9c3 0100 	strd	r0, r1, [r3]
 800753e:	e7b9      	b.n	80074b4 <__kernel_rem_pio2+0x4d4>
 8007540:	2000      	movs	r0, #0
 8007542:	2100      	movs	r1, #0
 8007544:	e7f0      	b.n	8007528 <__kernel_rem_pio2+0x548>
 8007546:	ab48      	add	r3, sp, #288	; 0x120
 8007548:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	f7f8 fe60 	bl	8000214 <__adddf3>
 8007554:	3c01      	subs	r4, #1
 8007556:	2c00      	cmp	r4, #0
 8007558:	daf5      	bge.n	8007546 <__kernel_rem_pio2+0x566>
 800755a:	9b02      	ldr	r3, [sp, #8]
 800755c:	b1e3      	cbz	r3, 8007598 <__kernel_rem_pio2+0x5b8>
 800755e:	4602      	mov	r2, r0
 8007560:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007564:	9c01      	ldr	r4, [sp, #4]
 8007566:	e9c4 2300 	strd	r2, r3, [r4]
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007572:	f7f8 fe4d 	bl	8000210 <__aeabi_dsub>
 8007576:	ad4a      	add	r5, sp, #296	; 0x128
 8007578:	2401      	movs	r4, #1
 800757a:	45a3      	cmp	fp, r4
 800757c:	da0f      	bge.n	800759e <__kernel_rem_pio2+0x5be>
 800757e:	9b02      	ldr	r3, [sp, #8]
 8007580:	b113      	cbz	r3, 8007588 <__kernel_rem_pio2+0x5a8>
 8007582:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007586:	4619      	mov	r1, r3
 8007588:	9b01      	ldr	r3, [sp, #4]
 800758a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800758e:	e791      	b.n	80074b4 <__kernel_rem_pio2+0x4d4>
 8007590:	465c      	mov	r4, fp
 8007592:	2000      	movs	r0, #0
 8007594:	2100      	movs	r1, #0
 8007596:	e7de      	b.n	8007556 <__kernel_rem_pio2+0x576>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	e7e2      	b.n	8007564 <__kernel_rem_pio2+0x584>
 800759e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80075a2:	f7f8 fe37 	bl	8000214 <__adddf3>
 80075a6:	3401      	adds	r4, #1
 80075a8:	e7e7      	b.n	800757a <__kernel_rem_pio2+0x59a>
 80075aa:	e9d8 4500 	ldrd	r4, r5, [r8]
 80075ae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80075b2:	4620      	mov	r0, r4
 80075b4:	4632      	mov	r2, r6
 80075b6:	463b      	mov	r3, r7
 80075b8:	4629      	mov	r1, r5
 80075ba:	f7f8 fe2b 	bl	8000214 <__adddf3>
 80075be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4620      	mov	r0, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	f7f8 fe21 	bl	8000210 <__aeabi_dsub>
 80075ce:	4632      	mov	r2, r6
 80075d0:	463b      	mov	r3, r7
 80075d2:	f7f8 fe1f 	bl	8000214 <__adddf3>
 80075d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80075da:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80075de:	ed88 7b00 	vstr	d7, [r8]
 80075e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80075e6:	e776      	b.n	80074d6 <__kernel_rem_pio2+0x4f6>
 80075e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80075ec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80075f0:	4640      	mov	r0, r8
 80075f2:	4632      	mov	r2, r6
 80075f4:	463b      	mov	r3, r7
 80075f6:	4649      	mov	r1, r9
 80075f8:	f7f8 fe0c 	bl	8000214 <__adddf3>
 80075fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4640      	mov	r0, r8
 8007606:	4649      	mov	r1, r9
 8007608:	f7f8 fe02 	bl	8000210 <__aeabi_dsub>
 800760c:	4632      	mov	r2, r6
 800760e:	463b      	mov	r3, r7
 8007610:	f7f8 fe00 	bl	8000214 <__adddf3>
 8007614:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007618:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800761c:	ed8a 7b00 	vstr	d7, [sl]
 8007620:	3c01      	subs	r4, #1
 8007622:	e75e      	b.n	80074e2 <__kernel_rem_pio2+0x502>
 8007624:	ab48      	add	r3, sp, #288	; 0x120
 8007626:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f7f8 fdf1 	bl	8000214 <__adddf3>
 8007632:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007636:	e75a      	b.n	80074ee <__kernel_rem_pio2+0x50e>
 8007638:	9b01      	ldr	r3, [sp, #4]
 800763a:	9a01      	ldr	r2, [sp, #4]
 800763c:	601d      	str	r5, [r3, #0]
 800763e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007642:	605c      	str	r4, [r3, #4]
 8007644:	609f      	str	r7, [r3, #8]
 8007646:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800764a:	60d3      	str	r3, [r2, #12]
 800764c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007650:	6110      	str	r0, [r2, #16]
 8007652:	6153      	str	r3, [r2, #20]
 8007654:	e72e      	b.n	80074b4 <__kernel_rem_pio2+0x4d4>
 8007656:	bf00      	nop
 8007658:	41700000 	.word	0x41700000
 800765c:	3e700000 	.word	0x3e700000

08007660 <__kernel_sin>:
 8007660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	ed2d 8b04 	vpush	{d8-d9}
 8007668:	eeb0 8a41 	vmov.f32	s16, s2
 800766c:	eef0 8a61 	vmov.f32	s17, s3
 8007670:	ec55 4b10 	vmov	r4, r5, d0
 8007674:	b083      	sub	sp, #12
 8007676:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800767a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800767e:	9001      	str	r0, [sp, #4]
 8007680:	da06      	bge.n	8007690 <__kernel_sin+0x30>
 8007682:	ee10 0a10 	vmov	r0, s0
 8007686:	4629      	mov	r1, r5
 8007688:	f7f9 fa14 	bl	8000ab4 <__aeabi_d2iz>
 800768c:	2800      	cmp	r0, #0
 800768e:	d051      	beq.n	8007734 <__kernel_sin+0xd4>
 8007690:	4622      	mov	r2, r4
 8007692:	462b      	mov	r3, r5
 8007694:	4620      	mov	r0, r4
 8007696:	4629      	mov	r1, r5
 8007698:	f7f8 ff72 	bl	8000580 <__aeabi_dmul>
 800769c:	4682      	mov	sl, r0
 800769e:	468b      	mov	fp, r1
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4620      	mov	r0, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	f7f8 ff6a 	bl	8000580 <__aeabi_dmul>
 80076ac:	a341      	add	r3, pc, #260	; (adr r3, 80077b4 <__kernel_sin+0x154>)
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	4680      	mov	r8, r0
 80076b4:	4689      	mov	r9, r1
 80076b6:	4650      	mov	r0, sl
 80076b8:	4659      	mov	r1, fp
 80076ba:	f7f8 ff61 	bl	8000580 <__aeabi_dmul>
 80076be:	a33f      	add	r3, pc, #252	; (adr r3, 80077bc <__kernel_sin+0x15c>)
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	f7f8 fda4 	bl	8000210 <__aeabi_dsub>
 80076c8:	4652      	mov	r2, sl
 80076ca:	465b      	mov	r3, fp
 80076cc:	f7f8 ff58 	bl	8000580 <__aeabi_dmul>
 80076d0:	a33c      	add	r3, pc, #240	; (adr r3, 80077c4 <__kernel_sin+0x164>)
 80076d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d6:	f7f8 fd9d 	bl	8000214 <__adddf3>
 80076da:	4652      	mov	r2, sl
 80076dc:	465b      	mov	r3, fp
 80076de:	f7f8 ff4f 	bl	8000580 <__aeabi_dmul>
 80076e2:	a33a      	add	r3, pc, #232	; (adr r3, 80077cc <__kernel_sin+0x16c>)
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	f7f8 fd92 	bl	8000210 <__aeabi_dsub>
 80076ec:	4652      	mov	r2, sl
 80076ee:	465b      	mov	r3, fp
 80076f0:	f7f8 ff46 	bl	8000580 <__aeabi_dmul>
 80076f4:	a337      	add	r3, pc, #220	; (adr r3, 80077d4 <__kernel_sin+0x174>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	f7f8 fd8b 	bl	8000214 <__adddf3>
 80076fe:	9b01      	ldr	r3, [sp, #4]
 8007700:	4606      	mov	r6, r0
 8007702:	460f      	mov	r7, r1
 8007704:	b9eb      	cbnz	r3, 8007742 <__kernel_sin+0xe2>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	4650      	mov	r0, sl
 800770c:	4659      	mov	r1, fp
 800770e:	f7f8 ff37 	bl	8000580 <__aeabi_dmul>
 8007712:	a325      	add	r3, pc, #148	; (adr r3, 80077a8 <__kernel_sin+0x148>)
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f7f8 fd7a 	bl	8000210 <__aeabi_dsub>
 800771c:	4642      	mov	r2, r8
 800771e:	464b      	mov	r3, r9
 8007720:	f7f8 ff2e 	bl	8000580 <__aeabi_dmul>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4620      	mov	r0, r4
 800772a:	4629      	mov	r1, r5
 800772c:	f7f8 fd72 	bl	8000214 <__adddf3>
 8007730:	4604      	mov	r4, r0
 8007732:	460d      	mov	r5, r1
 8007734:	ec45 4b10 	vmov	d0, r4, r5
 8007738:	b003      	add	sp, #12
 800773a:	ecbd 8b04 	vpop	{d8-d9}
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007742:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <__kernel_sin+0x150>)
 8007744:	ec51 0b18 	vmov	r0, r1, d8
 8007748:	2200      	movs	r2, #0
 800774a:	f7f8 ff19 	bl	8000580 <__aeabi_dmul>
 800774e:	4632      	mov	r2, r6
 8007750:	ec41 0b19 	vmov	d9, r0, r1
 8007754:	463b      	mov	r3, r7
 8007756:	4640      	mov	r0, r8
 8007758:	4649      	mov	r1, r9
 800775a:	f7f8 ff11 	bl	8000580 <__aeabi_dmul>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	ec51 0b19 	vmov	r0, r1, d9
 8007766:	f7f8 fd53 	bl	8000210 <__aeabi_dsub>
 800776a:	4652      	mov	r2, sl
 800776c:	465b      	mov	r3, fp
 800776e:	f7f8 ff07 	bl	8000580 <__aeabi_dmul>
 8007772:	ec53 2b18 	vmov	r2, r3, d8
 8007776:	f7f8 fd4b 	bl	8000210 <__aeabi_dsub>
 800777a:	a30b      	add	r3, pc, #44	; (adr r3, 80077a8 <__kernel_sin+0x148>)
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	4606      	mov	r6, r0
 8007782:	460f      	mov	r7, r1
 8007784:	4640      	mov	r0, r8
 8007786:	4649      	mov	r1, r9
 8007788:	f7f8 fefa 	bl	8000580 <__aeabi_dmul>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4630      	mov	r0, r6
 8007792:	4639      	mov	r1, r7
 8007794:	f7f8 fd3e 	bl	8000214 <__adddf3>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4620      	mov	r0, r4
 800779e:	4629      	mov	r1, r5
 80077a0:	f7f8 fd36 	bl	8000210 <__aeabi_dsub>
 80077a4:	e7c4      	b.n	8007730 <__kernel_sin+0xd0>
 80077a6:	bf00      	nop
 80077a8:	55555549 	.word	0x55555549
 80077ac:	3fc55555 	.word	0x3fc55555
 80077b0:	3fe00000 	.word	0x3fe00000
 80077b4:	5acfd57c 	.word	0x5acfd57c
 80077b8:	3de5d93a 	.word	0x3de5d93a
 80077bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80077c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80077c4:	57b1fe7d 	.word	0x57b1fe7d
 80077c8:	3ec71de3 	.word	0x3ec71de3
 80077cc:	19c161d5 	.word	0x19c161d5
 80077d0:	3f2a01a0 	.word	0x3f2a01a0
 80077d4:	1110f8a6 	.word	0x1110f8a6
 80077d8:	3f811111 	.word	0x3f811111

080077dc <fabs>:
 80077dc:	ec51 0b10 	vmov	r0, r1, d0
 80077e0:	ee10 2a10 	vmov	r2, s0
 80077e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80077e8:	ec43 2b10 	vmov	d0, r2, r3
 80077ec:	4770      	bx	lr
	...

080077f0 <floor>:
 80077f0:	ec51 0b10 	vmov	r0, r1, d0
 80077f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80077fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007800:	2e13      	cmp	r6, #19
 8007802:	ee10 5a10 	vmov	r5, s0
 8007806:	ee10 8a10 	vmov	r8, s0
 800780a:	460c      	mov	r4, r1
 800780c:	dc32      	bgt.n	8007874 <floor+0x84>
 800780e:	2e00      	cmp	r6, #0
 8007810:	da14      	bge.n	800783c <floor+0x4c>
 8007812:	a333      	add	r3, pc, #204	; (adr r3, 80078e0 <floor+0xf0>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f7f8 fcfc 	bl	8000214 <__adddf3>
 800781c:	2200      	movs	r2, #0
 800781e:	2300      	movs	r3, #0
 8007820:	f7f9 f93e 	bl	8000aa0 <__aeabi_dcmpgt>
 8007824:	b138      	cbz	r0, 8007836 <floor+0x46>
 8007826:	2c00      	cmp	r4, #0
 8007828:	da57      	bge.n	80078da <floor+0xea>
 800782a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800782e:	431d      	orrs	r5, r3
 8007830:	d001      	beq.n	8007836 <floor+0x46>
 8007832:	4c2d      	ldr	r4, [pc, #180]	; (80078e8 <floor+0xf8>)
 8007834:	2500      	movs	r5, #0
 8007836:	4621      	mov	r1, r4
 8007838:	4628      	mov	r0, r5
 800783a:	e025      	b.n	8007888 <floor+0x98>
 800783c:	4f2b      	ldr	r7, [pc, #172]	; (80078ec <floor+0xfc>)
 800783e:	4137      	asrs	r7, r6
 8007840:	ea01 0307 	and.w	r3, r1, r7
 8007844:	4303      	orrs	r3, r0
 8007846:	d01f      	beq.n	8007888 <floor+0x98>
 8007848:	a325      	add	r3, pc, #148	; (adr r3, 80078e0 <floor+0xf0>)
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	f7f8 fce1 	bl	8000214 <__adddf3>
 8007852:	2200      	movs	r2, #0
 8007854:	2300      	movs	r3, #0
 8007856:	f7f9 f923 	bl	8000aa0 <__aeabi_dcmpgt>
 800785a:	2800      	cmp	r0, #0
 800785c:	d0eb      	beq.n	8007836 <floor+0x46>
 800785e:	2c00      	cmp	r4, #0
 8007860:	bfbe      	ittt	lt
 8007862:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007866:	fa43 f606 	asrlt.w	r6, r3, r6
 800786a:	19a4      	addlt	r4, r4, r6
 800786c:	ea24 0407 	bic.w	r4, r4, r7
 8007870:	2500      	movs	r5, #0
 8007872:	e7e0      	b.n	8007836 <floor+0x46>
 8007874:	2e33      	cmp	r6, #51	; 0x33
 8007876:	dd0b      	ble.n	8007890 <floor+0xa0>
 8007878:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800787c:	d104      	bne.n	8007888 <floor+0x98>
 800787e:	ee10 2a10 	vmov	r2, s0
 8007882:	460b      	mov	r3, r1
 8007884:	f7f8 fcc6 	bl	8000214 <__adddf3>
 8007888:	ec41 0b10 	vmov	d0, r0, r1
 800788c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007890:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007894:	f04f 33ff 	mov.w	r3, #4294967295
 8007898:	fa23 f707 	lsr.w	r7, r3, r7
 800789c:	4207      	tst	r7, r0
 800789e:	d0f3      	beq.n	8007888 <floor+0x98>
 80078a0:	a30f      	add	r3, pc, #60	; (adr r3, 80078e0 <floor+0xf0>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f8 fcb5 	bl	8000214 <__adddf3>
 80078aa:	2200      	movs	r2, #0
 80078ac:	2300      	movs	r3, #0
 80078ae:	f7f9 f8f7 	bl	8000aa0 <__aeabi_dcmpgt>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d0bf      	beq.n	8007836 <floor+0x46>
 80078b6:	2c00      	cmp	r4, #0
 80078b8:	da02      	bge.n	80078c0 <floor+0xd0>
 80078ba:	2e14      	cmp	r6, #20
 80078bc:	d103      	bne.n	80078c6 <floor+0xd6>
 80078be:	3401      	adds	r4, #1
 80078c0:	ea25 0507 	bic.w	r5, r5, r7
 80078c4:	e7b7      	b.n	8007836 <floor+0x46>
 80078c6:	2301      	movs	r3, #1
 80078c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80078cc:	fa03 f606 	lsl.w	r6, r3, r6
 80078d0:	4435      	add	r5, r6
 80078d2:	4545      	cmp	r5, r8
 80078d4:	bf38      	it	cc
 80078d6:	18e4      	addcc	r4, r4, r3
 80078d8:	e7f2      	b.n	80078c0 <floor+0xd0>
 80078da:	2500      	movs	r5, #0
 80078dc:	462c      	mov	r4, r5
 80078de:	e7aa      	b.n	8007836 <floor+0x46>
 80078e0:	8800759c 	.word	0x8800759c
 80078e4:	7e37e43c 	.word	0x7e37e43c
 80078e8:	bff00000 	.word	0xbff00000
 80078ec:	000fffff 	.word	0x000fffff

080078f0 <scalbn>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	ec55 4b10 	vmov	r4, r5, d0
 80078f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80078fa:	4606      	mov	r6, r0
 80078fc:	462b      	mov	r3, r5
 80078fe:	b99a      	cbnz	r2, 8007928 <scalbn+0x38>
 8007900:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007904:	4323      	orrs	r3, r4
 8007906:	d036      	beq.n	8007976 <scalbn+0x86>
 8007908:	4b39      	ldr	r3, [pc, #228]	; (80079f0 <scalbn+0x100>)
 800790a:	4629      	mov	r1, r5
 800790c:	ee10 0a10 	vmov	r0, s0
 8007910:	2200      	movs	r2, #0
 8007912:	f7f8 fe35 	bl	8000580 <__aeabi_dmul>
 8007916:	4b37      	ldr	r3, [pc, #220]	; (80079f4 <scalbn+0x104>)
 8007918:	429e      	cmp	r6, r3
 800791a:	4604      	mov	r4, r0
 800791c:	460d      	mov	r5, r1
 800791e:	da10      	bge.n	8007942 <scalbn+0x52>
 8007920:	a32b      	add	r3, pc, #172	; (adr r3, 80079d0 <scalbn+0xe0>)
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	e03a      	b.n	800799e <scalbn+0xae>
 8007928:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800792c:	428a      	cmp	r2, r1
 800792e:	d10c      	bne.n	800794a <scalbn+0x5a>
 8007930:	ee10 2a10 	vmov	r2, s0
 8007934:	4620      	mov	r0, r4
 8007936:	4629      	mov	r1, r5
 8007938:	f7f8 fc6c 	bl	8000214 <__adddf3>
 800793c:	4604      	mov	r4, r0
 800793e:	460d      	mov	r5, r1
 8007940:	e019      	b.n	8007976 <scalbn+0x86>
 8007942:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007946:	460b      	mov	r3, r1
 8007948:	3a36      	subs	r2, #54	; 0x36
 800794a:	4432      	add	r2, r6
 800794c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007950:	428a      	cmp	r2, r1
 8007952:	dd08      	ble.n	8007966 <scalbn+0x76>
 8007954:	2d00      	cmp	r5, #0
 8007956:	a120      	add	r1, pc, #128	; (adr r1, 80079d8 <scalbn+0xe8>)
 8007958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800795c:	da1c      	bge.n	8007998 <scalbn+0xa8>
 800795e:	a120      	add	r1, pc, #128	; (adr r1, 80079e0 <scalbn+0xf0>)
 8007960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007964:	e018      	b.n	8007998 <scalbn+0xa8>
 8007966:	2a00      	cmp	r2, #0
 8007968:	dd08      	ble.n	800797c <scalbn+0x8c>
 800796a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800796e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007972:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007976:	ec45 4b10 	vmov	d0, r4, r5
 800797a:	bd70      	pop	{r4, r5, r6, pc}
 800797c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007980:	da19      	bge.n	80079b6 <scalbn+0xc6>
 8007982:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007986:	429e      	cmp	r6, r3
 8007988:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800798c:	dd0a      	ble.n	80079a4 <scalbn+0xb4>
 800798e:	a112      	add	r1, pc, #72	; (adr r1, 80079d8 <scalbn+0xe8>)
 8007990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e2      	bne.n	800795e <scalbn+0x6e>
 8007998:	a30f      	add	r3, pc, #60	; (adr r3, 80079d8 <scalbn+0xe8>)
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f7f8 fdef 	bl	8000580 <__aeabi_dmul>
 80079a2:	e7cb      	b.n	800793c <scalbn+0x4c>
 80079a4:	a10a      	add	r1, pc, #40	; (adr r1, 80079d0 <scalbn+0xe0>)
 80079a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0b8      	beq.n	8007920 <scalbn+0x30>
 80079ae:	a10e      	add	r1, pc, #56	; (adr r1, 80079e8 <scalbn+0xf8>)
 80079b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079b4:	e7b4      	b.n	8007920 <scalbn+0x30>
 80079b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80079ba:	3236      	adds	r2, #54	; 0x36
 80079bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80079c4:	4620      	mov	r0, r4
 80079c6:	4b0c      	ldr	r3, [pc, #48]	; (80079f8 <scalbn+0x108>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	e7e8      	b.n	800799e <scalbn+0xae>
 80079cc:	f3af 8000 	nop.w
 80079d0:	c2f8f359 	.word	0xc2f8f359
 80079d4:	01a56e1f 	.word	0x01a56e1f
 80079d8:	8800759c 	.word	0x8800759c
 80079dc:	7e37e43c 	.word	0x7e37e43c
 80079e0:	8800759c 	.word	0x8800759c
 80079e4:	fe37e43c 	.word	0xfe37e43c
 80079e8:	c2f8f359 	.word	0xc2f8f359
 80079ec:	81a56e1f 	.word	0x81a56e1f
 80079f0:	43500000 	.word	0x43500000
 80079f4:	ffff3cb0 	.word	0xffff3cb0
 80079f8:	3c900000 	.word	0x3c900000

080079fc <_init>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	bf00      	nop
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr

08007a08 <_fini>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	bf00      	nop
 8007a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0e:	bc08      	pop	{r3}
 8007a10:	469e      	mov	lr, r3
 8007a12:	4770      	bx	lr
