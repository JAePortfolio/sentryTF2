
sentryTF2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b3c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08007d08  08007d08  00017d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f00  08007f00  0004f2f0  2**0
                  CONTENTS
  4 .ARM          00000008  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f08  08007f08  0004f2f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f0c  08007f0c  00017f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  20000014  08007f24  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c18  08007f24  00020c18  2**0
                  ALLOC
 11 .sentry_shoot 0000f37c  080f0000  080f0000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .sentry_spot  00000000  080ff37c  080ff37c  0004f2f0  2**0
                  CONTENTS
 13 .sentry_scan  00008a44  081068ac  081068ac  000468ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .ARM.attributes 00000030  00000000  00000000  0004f2f0  2**0
                  CONTENTS, READONLY
 15 .debug_info   00014354  00000000  00000000  0004f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002a22  00000000  00000000  00063674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001218  00000000  00000000  00066098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000010f0  00000000  00000000  000672b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026c7a  00000000  00000000  000683a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00014203  00000000  00000000  0008f01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f2ec3  00000000  00000000  000a321d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  001960e0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000050a0  00000000  00000000  00196134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007cec 	.word	0x08007cec

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	08007cec 	.word	0x08007cec

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b96e 	b.w	8000e38 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8083 	bne.w	8000c8a <__udivmoddi4+0x116>
 8000b84:	428a      	cmp	r2, r1
 8000b86:	4617      	mov	r7, r2
 8000b88:	d947      	bls.n	8000c1a <__udivmoddi4+0xa6>
 8000b8a:	fab2 f282 	clz	r2, r2
 8000b8e:	b142      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b90:	f1c2 0020 	rsb	r0, r2, #32
 8000b94:	fa24 f000 	lsr.w	r0, r4, r0
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	4097      	lsls	r7, r2
 8000b9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba6:	0c23      	lsrs	r3, r4, #16
 8000ba8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bac:	fa1f fe87 	uxth.w	lr, r7
 8000bb0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x60>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc6:	f080 8119 	bcs.w	8000dfc <__udivmoddi4+0x288>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 8116 	bls.w	8000dfc <__udivmoddi4+0x288>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	443b      	add	r3, r7
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x8c>
 8000bec:	193c      	adds	r4, r7, r4
 8000bee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf2:	f080 8105 	bcs.w	8000e00 <__udivmoddi4+0x28c>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	f240 8102 	bls.w	8000e00 <__udivmoddi4+0x28c>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	443c      	add	r4, r7
 8000c00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c04:	eba4 040e 	sub.w	r4, r4, lr
 8000c08:	2600      	movs	r6, #0
 8000c0a:	b11d      	cbz	r5, 8000c14 <__udivmoddi4+0xa0>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c5 4300 	strd	r4, r3, [r5]
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	b902      	cbnz	r2, 8000c1e <__udivmoddi4+0xaa>
 8000c1c:	deff      	udf	#255	; 0xff
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d150      	bne.n	8000cc8 <__udivmoddi4+0x154>
 8000c26:	1bcb      	subs	r3, r1, r7
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f f887 	uxth.w	r8, r7
 8000c30:	2601      	movs	r6, #1
 8000c32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c36:	0c21      	lsrs	r1, r4, #16
 8000c38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c40:	fb08 f30c 	mul.w	r3, r8, ip
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0xe4>
 8000c48:	1879      	adds	r1, r7, r1
 8000c4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0xe2>
 8000c50:	428b      	cmp	r3, r1
 8000c52:	f200 80e9 	bhi.w	8000e28 <__udivmoddi4+0x2b4>
 8000c56:	4684      	mov	ip, r0
 8000c58:	1ac9      	subs	r1, r1, r3
 8000c5a:	b2a3      	uxth	r3, r4
 8000c5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c68:	fb08 f800 	mul.w	r8, r8, r0
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x10c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x10a>
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	f200 80d9 	bhi.w	8000e30 <__udivmoddi4+0x2bc>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eba4 0408 	sub.w	r4, r4, r8
 8000c84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c88:	e7bf      	b.n	8000c0a <__udivmoddi4+0x96>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d909      	bls.n	8000ca2 <__udivmoddi4+0x12e>
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	f000 80b1 	beq.w	8000df6 <__udivmoddi4+0x282>
 8000c94:	2600      	movs	r6, #0
 8000c96:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	fab3 f683 	clz	r6, r3
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d14a      	bne.n	8000d40 <__udivmoddi4+0x1cc>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0x140>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 80b8 	bhi.w	8000e24 <__udivmoddi4+0x2b0>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	468c      	mov	ip, r1
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0a8      	beq.n	8000c14 <__udivmoddi4+0xa0>
 8000cc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc6:	e7a5      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f603 	lsr.w	r6, r0, r3
 8000cd0:	4097      	lsls	r7, r2
 8000cd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cda:	40d9      	lsrs	r1, r3
 8000cdc:	4330      	orrs	r0, r6
 8000cde:	0c03      	lsrs	r3, r0, #16
 8000ce0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf0:	fb06 f108 	mul.w	r1, r6, r8
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x19c>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d02:	f080 808d 	bcs.w	8000e20 <__udivmoddi4+0x2ac>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 808a 	bls.w	8000e20 <__udivmoddi4+0x2ac>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	443b      	add	r3, r7
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b281      	uxth	r1, r0
 8000d14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d20:	fb00 f308 	mul.w	r3, r0, r8
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x1c4>
 8000d28:	1879      	adds	r1, r7, r1
 8000d2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2e:	d273      	bcs.n	8000e18 <__udivmoddi4+0x2a4>
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d971      	bls.n	8000e18 <__udivmoddi4+0x2a4>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4439      	add	r1, r7
 8000d38:	1acb      	subs	r3, r1, r3
 8000d3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3e:	e778      	b.n	8000c32 <__udivmoddi4+0xbe>
 8000d40:	f1c6 0c20 	rsb	ip, r6, #32
 8000d44:	fa03 f406 	lsl.w	r4, r3, r6
 8000d48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d4c:	431c      	orrs	r4, r3
 8000d4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d52:	fa01 f306 	lsl.w	r3, r1, r6
 8000d56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	0c3b      	lsrs	r3, r7, #16
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fa1f f884 	uxth.w	r8, r4
 8000d6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d72:	fb09 fa08 	mul.w	sl, r9, r8
 8000d76:	458a      	cmp	sl, r1
 8000d78:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x220>
 8000d82:	1861      	adds	r1, r4, r1
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	d248      	bcs.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	d946      	bls.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d92:	4421      	add	r1, r4
 8000d94:	eba1 010a 	sub.w	r1, r1, sl
 8000d98:	b2bf      	uxth	r7, r7
 8000d9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da6:	fb00 f808 	mul.w	r8, r0, r8
 8000daa:	45b8      	cmp	r8, r7
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x24a>
 8000dae:	19e7      	adds	r7, r4, r7
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d22e      	bcs.n	8000e14 <__udivmoddi4+0x2a0>
 8000db6:	45b8      	cmp	r8, r7
 8000db8:	d92c      	bls.n	8000e14 <__udivmoddi4+0x2a0>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4427      	add	r7, r4
 8000dbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc2:	eba7 0708 	sub.w	r7, r7, r8
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	454f      	cmp	r7, r9
 8000dcc:	46c6      	mov	lr, r8
 8000dce:	4649      	mov	r1, r9
 8000dd0:	d31a      	bcc.n	8000e08 <__udivmoddi4+0x294>
 8000dd2:	d017      	beq.n	8000e04 <__udivmoddi4+0x290>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x27a>
 8000dd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dda:	eb67 0701 	sbc.w	r7, r7, r1
 8000dde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000de2:	40f2      	lsrs	r2, r6
 8000de4:	ea4c 0202 	orr.w	r2, ip, r2
 8000de8:	40f7      	lsrs	r7, r6
 8000dea:	e9c5 2700 	strd	r2, r7, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	462e      	mov	r6, r5
 8000df8:	4628      	mov	r0, r5
 8000dfa:	e70b      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	e6e9      	b.n	8000bd4 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fd      	b.n	8000c00 <__udivmoddi4+0x8c>
 8000e04:	4543      	cmp	r3, r8
 8000e06:	d2e5      	bcs.n	8000dd4 <__udivmoddi4+0x260>
 8000e08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e10:	3801      	subs	r0, #1
 8000e12:	e7df      	b.n	8000dd4 <__udivmoddi4+0x260>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e7d2      	b.n	8000dbe <__udivmoddi4+0x24a>
 8000e18:	4660      	mov	r0, ip
 8000e1a:	e78d      	b.n	8000d38 <__udivmoddi4+0x1c4>
 8000e1c:	4681      	mov	r9, r0
 8000e1e:	e7b9      	b.n	8000d94 <__udivmoddi4+0x220>
 8000e20:	4666      	mov	r6, ip
 8000e22:	e775      	b.n	8000d10 <__udivmoddi4+0x19c>
 8000e24:	4630      	mov	r0, r6
 8000e26:	e74a      	b.n	8000cbe <__udivmoddi4+0x14a>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	4439      	add	r1, r7
 8000e2e:	e713      	b.n	8000c58 <__udivmoddi4+0xe4>
 8000e30:	3802      	subs	r0, #2
 8000e32:	443c      	add	r4, r7
 8000e34:	e724      	b.n	8000c80 <__udivmoddi4+0x10c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <delay_us>:
uint8_t *sentrySpotWavPointer = (uint8_t*)&__SENTRY_SPOT;
uint8_t *sentryScantWavPointer = (uint8_t*)&__SENTRY_SCAN;
uint16_t volatile wavBuffer[512];


void delay_us(uint16_t us){
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0); // Set counter start to 0
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <delay_us+0x30>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < us);
 8000e4e:	bf00      	nop
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <delay_us+0x30>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d3f9      	bcc.n	8000e50 <delay_us+0x14>
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000928 	.word	0x20000928

08000e70 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	/* Left Sensor */
	if(htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a40      	ldr	r2, [pc, #256]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d125      	bne.n	8000ecc <HAL_TIM_IC_CaptureCallback+0x5c>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7f1b      	ldrb	r3, [r3, #28]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d121      	bne.n	8000ecc <HAL_TIM_IC_CaptureCallback+0x5c>
		if(leftSensorFirstCapt == 0) leftSensorFirstCapt++;
 8000e88:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d106      	bne.n	8000e9e <HAL_TIM_IC_CaptureCallback+0x2e>
 8000e90:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	e016      	b.n	8000ecc <HAL_TIM_IC_CaptureCallback+0x5c>
		else if(leftSensorFirstCapt == 1){
 8000e9e:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d112      	bne.n	8000ecc <HAL_TIM_IC_CaptureCallback+0x5c>
			totalTimeLeft = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //Retrieves pulse width value from ultrasonic
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f004 f965 	bl	8005178 <HAL_TIM_ReadCapturedValue>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4a34      	ldr	r2, [pc, #208]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000eb2:	6013      	str	r3, [r2, #0]
			calcObjDist(totalTimeLeft,0);
 8000eb4:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f870 	bl	8000fa0 <calcObjDist>
			leftSensorFirstCapt--;
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000eca:	701a      	strb	r2, [r3, #0]
		}
	}
	/* Center Sensor */
	if(htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a2b      	ldr	r2, [pc, #172]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d125      	bne.n	8000f20 <HAL_TIM_IC_CaptureCallback+0xb0>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7f1b      	ldrb	r3, [r3, #28]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d121      	bne.n	8000f20 <HAL_TIM_IC_CaptureCallback+0xb0>
		if(centerSensorFirstCapt == 0) centerSensorFirstCapt++;
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d106      	bne.n	8000ef2 <HAL_TIM_IC_CaptureCallback+0x82>
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e016      	b.n	8000f20 <HAL_TIM_IC_CaptureCallback+0xb0>
		else if(centerSensorFirstCapt == 1){
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d112      	bne.n	8000f20 <HAL_TIM_IC_CaptureCallback+0xb0>
			totalTimeCenter = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); //Retrieves pulse width value from ultrasonic
 8000efa:	210c      	movs	r1, #12
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f004 f93b 	bl	8005178 <HAL_TIM_ReadCapturedValue>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f06:	6013      	str	r3, [r2, #0]
			calcObjDist(totalTimeCenter,1);
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f846 	bl	8000fa0 <calcObjDist>
			centerSensorFirstCapt--;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f1e:	701a      	strb	r2, [r3, #0]
		}
	}
	/* Right Sensor */
	if(htim == &htim8 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d125      	bne.n	8000f74 <HAL_TIM_IC_CaptureCallback+0x104>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7f1b      	ldrb	r3, [r3, #28]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d121      	bne.n	8000f74 <HAL_TIM_IC_CaptureCallback+0x104>
		if(rightSensorFirstCapt == 0) rightSensorFirstCapt++;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d106      	bne.n	8000f46 <HAL_TIM_IC_CaptureCallback+0xd6>
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f42:	701a      	strb	r2, [r3, #0]
			totalTimeRight = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //Retrieves pulse width value from ultrasonic
			calcObjDist(totalTimeRight,2);
			rightSensorFirstCapt--;
		}
	}
}
 8000f44:	e016      	b.n	8000f74 <HAL_TIM_IC_CaptureCallback+0x104>
		else if(rightSensorFirstCapt == 1){
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d112      	bne.n	8000f74 <HAL_TIM_IC_CaptureCallback+0x104>
			totalTimeRight = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //Retrieves pulse width value from ultrasonic
 8000f4e:	2104      	movs	r1, #4
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f004 f911 	bl	8005178 <HAL_TIM_ReadCapturedValue>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f5a:	6013      	str	r3, [r2, #0]
			calcObjDist(totalTimeRight,2);
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2102      	movs	r1, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f81c 	bl	8000fa0 <calcObjDist>
			rightSensorFirstCapt--;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f72:	701a      	strb	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000a34 	.word	0x20000a34
 8000f80:	20000030 	.word	0x20000030
 8000f84:	20000034 	.word	0x20000034
 8000f88:	20000031 	.word	0x20000031
 8000f8c:	20000038 	.word	0x20000038
 8000f90:	20000054 	.word	0x20000054
 8000f94:	20000032 	.word	0x20000032
 8000f98:	2000003c 	.word	0x2000003c
 8000f9c:	00000000 	.word	0x00000000

08000fa0 <calcObjDist>:

void calcObjDist(uint32_t totalTime, uint8_t sensorNumber){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
	totalFinal = totalTime/2;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	085b      	lsrs	r3, r3, #1
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <calcObjDist+0xd0>)
 8000fb4:	601a      	str	r2, [r3, #0]
	switch(sensorNumber){
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d036      	beq.n	800102a <calcObjDist+0x8a>
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	dc4c      	bgt.n	800105a <calcObjDist+0xba>
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <calcObjDist+0x2a>
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d018      	beq.n	8000ffa <calcObjDist+0x5a>
		case 2: // Right sensor
			distanceRight = totalFinal * velSound * pow(10,-6);
			break;
	}

}
 8000fc8:	e047      	b.n	800105a <calcObjDist+0xba>
			distanceLeft = totalFinal * velSound * pow(10,-6);
 8000fca:	4b29      	ldr	r3, [pc, #164]	; (8001070 <calcObjDist+0xd0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a29      	ldr	r2, [pc, #164]	; (8001074 <calcObjDist+0xd4>)
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	fb02 f303 	mul.w	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fa68 	bl	80004ac <__aeabi_i2d>
 8000fdc:	a322      	add	r3, pc, #136	; (adr r3, 8001068 <calcObjDist+0xc8>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff facd 	bl	8000580 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fd61 	bl	8000ab4 <__aeabi_d2iz>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <calcObjDist+0xd8>)
 8000ff6:	6013      	str	r3, [r2, #0]
			break;
 8000ff8:	e02f      	b.n	800105a <calcObjDist+0xba>
			distanceCenter = totalFinal * velSound * pow(10,-6);
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <calcObjDist+0xd0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <calcObjDist+0xd4>)
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fa50 	bl	80004ac <__aeabi_i2d>
 800100c:	a316      	add	r3, pc, #88	; (adr r3, 8001068 <calcObjDist+0xc8>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	f7ff fab5 	bl	8000580 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff fd49 	bl	8000ab4 <__aeabi_d2iz>
 8001022:	4603      	mov	r3, r0
 8001024:	4a15      	ldr	r2, [pc, #84]	; (800107c <calcObjDist+0xdc>)
 8001026:	6013      	str	r3, [r2, #0]
			break;
 8001028:	e017      	b.n	800105a <calcObjDist+0xba>
			distanceRight = totalFinal * velSound * pow(10,-6);
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <calcObjDist+0xd0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <calcObjDist+0xd4>)
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	fb02 f303 	mul.w	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa38 	bl	80004ac <__aeabi_i2d>
 800103c:	a30a      	add	r3, pc, #40	; (adr r3, 8001068 <calcObjDist+0xc8>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff fa9d 	bl	8000580 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fd31 	bl	8000ab4 <__aeabi_d2iz>
 8001052:	4603      	mov	r3, r0
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <calcObjDist+0xe0>)
 8001056:	6013      	str	r3, [r2, #0]
			break;
 8001058:	bf00      	nop
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	f3af 8000 	nop.w
 8001068:	a0b5ed8d 	.word	0xa0b5ed8d
 800106c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001070:	20000040 	.word	0x20000040
 8001074:	20000000 	.word	0x20000000
 8001078:	20000044 	.word	0x20000044
 800107c:	20000048 	.word	0x20000048
 8001080:	2000004c 	.word	0x2000004c

08001084 <sentrySapped>:
	if(shells <= 0){
		//playAudio(4); // Sentry out of shells firing sound
	}
}

void sentrySapped(){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	UART3_TransferChar('2'); // Tell PDA App the sentry has been sapped
 8001088:	2032      	movs	r0, #50	; 0x32
 800108a:	f000 f919 	bl	80012c0 <UART3_TransferChar>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); // A4988 ENABLE Pin trigger, will disable motor
 800108e:	2201      	movs	r2, #1
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <sentrySapped+0x18>)
 8001094:	f002 f8ce 	bl	8003234 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020800 	.word	0x40020800

080010a0 <getSineVal>:
		HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)wavBuffer, 512, DAC_ALIGN_12B_R);
	}
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
}

void getSineVal(){
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < samples; i++){
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	e040      	b.n	800112e <getSineVal+0x8e>
		sineVal[i] = (sin(2*i*PI/samples)+1)*((0xFFF+1)/2);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f9fb 	bl	80004ac <__aeabi_i2d>
 80010b6:	a328      	add	r3, pc, #160	; (adr r3, 8001158 <getSineVal+0xb8>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa60 	bl	8000580 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4614      	mov	r4, r2
 80010c6:	461d      	mov	r5, r3
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <getSineVal+0xa8>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f9ed 	bl	80004ac <__aeabi_i2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4620      	mov	r0, r4
 80010d8:	4629      	mov	r1, r5
 80010da:	f7ff fb7b 	bl	80007d4 <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	ec43 2b17 	vmov	d7, r2, r3
 80010e6:	eeb0 0a47 	vmov.f32	s0, s14
 80010ea:	eef0 0a67 	vmov.f32	s1, s15
 80010ee:	f005 fdc7 	bl	8006c80 <sin>
 80010f2:	ec51 0b10 	vmov	r0, r1, d0
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <getSineVal+0xac>)
 80010fc:	f7ff f88a 	bl	8000214 <__adddf3>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <getSineVal+0xb0>)
 800110e:	f7ff fa37 	bl	8000580 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fcf3 	bl	8000b04 <__aeabi_d2uiz>
 800111e:	4602      	mov	r2, r0
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <getSineVal+0xb4>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < samples; i++){
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3301      	adds	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <getSineVal+0xa8>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4293      	cmp	r3, r2
 8001138:	dbb8      	blt.n	80010ac <getSineVal+0xc>
	}
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	f3af 8000 	nop.w
 8001148:	20000004 	.word	0x20000004
 800114c:	3ff00000 	.word	0x3ff00000
 8001150:	40a00000 	.word	0x40a00000
 8001154:	20000a84 	.word	0x20000a84
 8001158:	4d12d84a 	.word	0x4d12d84a
 800115c:	400921fb 	.word	0x400921fb

08001160 <stepper_set_rpm>:

void stepper_set_rpm(float rpm){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	ed87 0a01 	vstr	s0, [r7, #4]
	delay_us(60000000/stepsPerRev/rpm);
 800116a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001190 <stepper_set_rpm+0x30>
 800116e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800117a:	ee17 3a90 	vmov	r3, s15
 800117e:	b29b      	uxth	r3, r3
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fe5b 	bl	8000e3c <delay_us>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	47927c00 	.word	0x47927c00

08001194 <step>:

void step(){ // A4988 Step pin
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119e:	4807      	ldr	r0, [pc, #28]	; (80011bc <step+0x28>)
 80011a0:	f002 f848 	bl	8003234 <HAL_GPIO_WritePin>
	delay_us(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f7ff fe49 	bl	8000e3c <delay_us>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <step+0x28>)
 80011b2:	f002 f83f 	bl	8003234 <HAL_GPIO_WritePin>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020800 	.word	0x40020800

080011c0 <stepper_step_angle>:

void stepper_step_angle(float angle, float rpm, uint8_t direction){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80011ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	float anglePerStep = 1.8/4; // Quarter step
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <stepper_step_angle+0x88>)
 80011d4:	61bb      	str	r3, [r7, #24]
	int numOfSteps = (int) (angle/anglePerStep);
 80011d6:	edd7 6a03 	vldr	s13, [r7, #12]
 80011da:	ed97 7a06 	vldr	s14, [r7, #24]
 80011de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e6:	ee17 3a90 	vmov	r3, s15
 80011ea:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < numOfSteps; i++){
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	e020      	b.n	8001234 <stepper_step_angle+0x74>
		if(direction == 0) {// Clockwise
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10b      	bne.n	8001210 <stepper_step_angle+0x50>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fe:	4813      	ldr	r0, [pc, #76]	; (800124c <stepper_step_angle+0x8c>)
 8001200:	f002 f818 	bl	8003234 <HAL_GPIO_WritePin>
			step();
 8001204:	f7ff ffc6 	bl	8001194 <step>
			stepper_set_rpm(rpm);
 8001208:	ed97 0a02 	vldr	s0, [r7, #8]
 800120c:	f7ff ffa8 	bl	8001160 <stepper_set_rpm>
		}
		if(direction == 1) {// Counter Clockwise
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d10b      	bne.n	800122e <stepper_step_angle+0x6e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <stepper_step_angle+0x8c>)
 800121e:	f002 f809 	bl	8003234 <HAL_GPIO_WritePin>
			step();
 8001222:	f7ff ffb7 	bl	8001194 <step>
			stepper_set_rpm(rpm);
 8001226:	ed97 0a02 	vldr	s0, [r7, #8]
 800122a:	f7ff ff99 	bl	8001160 <stepper_set_rpm>
	for(int i = 0; i < numOfSteps; i++){
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3301      	adds	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	dbda      	blt.n	80011f2 <stepper_step_angle+0x32>
		}
	}
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	3ee66666 	.word	0x3ee66666
 800124c:	40020800 	.word	0x40020800

08001250 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin = GPIO_PIN_10){
 800125a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125e:	80fb      	strh	r3, [r7, #6]
		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_10) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_11) == GPIO_PIN_RESET){ // Hall sensors go low
 8001260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001264:	4814      	ldr	r0, [pc, #80]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001266:	f001 ffcd 	bl	8003204 <HAL_GPIO_ReadPin>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10a      	bne.n	8001286 <HAL_GPIO_EXTI_Callback+0x36>
 8001270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001274:	4810      	ldr	r0, [pc, #64]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001276:	f001 ffc5 	bl	8003204 <HAL_GPIO_ReadPin>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <HAL_GPIO_EXTI_Callback+0x36>
			sentrySapped();
 8001280:	f7ff ff00 	bl	8001084 <sentrySapped>
		}
		else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_10) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_11) == GPIO_PIN_SET){ // Hall sensors go back to high
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); // A4988 ENABLE Pin trigger, will re-enable motor
		}
	}
}
 8001284:	e014      	b.n	80012b0 <HAL_GPIO_EXTI_Callback+0x60>
		else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_10) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_11) == GPIO_PIN_SET){ // Hall sensors go back to high
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	480b      	ldr	r0, [pc, #44]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x68>)
 800128c:	f001 ffba 	bl	8003204 <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	2b01      	cmp	r3, #1
 8001294:	d10c      	bne.n	80012b0 <HAL_GPIO_EXTI_Callback+0x60>
 8001296:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x68>)
 800129c:	f001 ffb2 	bl	8003204 <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d104      	bne.n	80012b0 <HAL_GPIO_EXTI_Callback+0x60>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); // A4988 ENABLE Pin trigger, will re-enable motor
 80012a6:	2200      	movs	r2, #0
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	4804      	ldr	r0, [pc, #16]	; (80012bc <HAL_GPIO_EXTI_Callback+0x6c>)
 80012ac:	f001 ffc2 	bl	8003234 <HAL_GPIO_WritePin>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021800 	.word	0x40021800
 80012bc:	40020800 	.word	0x40020800

080012c0 <UART3_TransferChar>:

/* My UART functions below and in the interrupt handler write directly to the registers because I struggled with the HAL functions and read online that
 * the HAL UART functions are not that great and most people seem to say just write your own.
 */
void UART3_TransferChar(char c){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	USART3->CR1 |= 1 << 3; //Set TE to 1t
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <UART3_TransferChar+0x44>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <UART3_TransferChar+0x44>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6013      	str	r3, [r2, #0]
	USART3->TDR = c;
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <UART3_TransferChar+0x44>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	6293      	str	r3, [r2, #40]	; 0x28
	while(!(USART3->ISR & (1<<6))); // Wait for TC bit
 80012dc:	bf00      	nop
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <UART3_TransferChar+0x44>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f9      	beq.n	80012de <UART3_TransferChar+0x1e>
	USART3->CR1 &= ~(1<<3); //Set TE to 0
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <UART3_TransferChar+0x44>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <UART3_TransferChar+0x44>)
 80012f0:	f023 0308 	bic.w	r3, r3, #8
 80012f4:	6013      	str	r3, [r2, #0]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40004800 	.word	0x40004800

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130c:	f000 ff8f 	bl	800222e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001310:	f000 f84a 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001314:	f000 fb68 	bl	80019e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001318:	f000 fb48 	bl	80019ac <MX_DMA_Init>
  MX_TIM1_Init();
 800131c:	f000 f906 	bl	800152c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001320:	f000 f9c2 	bl	80016a8 <MX_TIM3_Init>
  MX_DAC_Init();
 8001324:	f000 f8d8 	bl	80014d8 <MX_DAC_Init>
  MX_USART3_UART_Init();
 8001328:	f000 fae2 	bl	80018f0 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 800132c:	f000 fa40 	bl	80017b0 <MX_TIM8_Init>
  MX_TIM6_Init();
 8001330:	f000 fa08 	bl	8001744 <MX_TIM6_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001334:	f000 fb0c 	bl	8001950 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001338:	2100      	movs	r1, #0
 800133a:	4815      	ldr	r0, [pc, #84]	; (8001390 <main+0x88>)
 800133c:	f003 fb16 	bl	800496c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001340:	2104      	movs	r1, #4
 8001342:	4813      	ldr	r0, [pc, #76]	; (8001390 <main+0x88>)
 8001344:	f003 fb12 	bl	800496c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8001348:	4812      	ldr	r0, [pc, #72]	; (8001394 <main+0x8c>)
 800134a:	f003 fa3d 	bl	80047c8 <HAL_TIM_Base_Start>

  getSineVal();
 800134e:	f7ff fea7 	bl	80010a0 <getSineVal>
  HAL_TIM_Base_Start(&htim6);
 8001352:	4811      	ldr	r0, [pc, #68]	; (8001398 <main+0x90>)
 8001354:	f003 fa38 	bl	80047c8 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001358:	2100      	movs	r1, #0
 800135a:	4810      	ldr	r0, [pc, #64]	; (800139c <main+0x94>)
 800135c:	f001 f91b 	bl	8002596 <HAL_DAC_Start>

  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  USART3->CR1 |= (1<<5); // Enable Receive Data Interrupt
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <main+0x98>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <main+0x98>)
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //playAudio(1); // Scanning sound
	  stepper_step_angle(90,7.5,0); // Turn
 800136c:	2000      	movs	r0, #0
 800136e:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 8001372:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80013a4 <main+0x9c>
 8001376:	f7ff ff23 	bl	80011c0 <stepper_step_angle>
	  //playAudio(1); // Scanning sound
	  HAL_Delay(150);
 800137a:	2096      	movs	r0, #150	; 0x96
 800137c:	f000 ffb4 	bl	80022e8 <HAL_Delay>
	  stepper_step_angle(90,7.5,1); // Turn
 8001380:	2001      	movs	r0, #1
 8001382:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 8001386:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80013a4 <main+0x9c>
 800138a:	f7ff ff19 	bl	80011c0 <stepper_step_angle>
	  stepper_step_angle(90,7.5,0); // Turn
 800138e:	e7ed      	b.n	800136c <main+0x64>
 8001390:	20000a34 	.word	0x20000a34
 8001394:	20000928 	.word	0x20000928
 8001398:	200009e8 	.word	0x200009e8
 800139c:	200009d4 	.word	0x200009d4
 80013a0:	40004800 	.word	0x40004800
 80013a4:	42b40000 	.word	0x42b40000

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0b4      	sub	sp, #208	; 0xd0
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013b2:	2230      	movs	r2, #48	; 0x30
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f005 fc58 	bl	8006c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	2284      	movs	r2, #132	; 0x84
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f005 fc49 	bl	8006c6c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <SystemClock_Config+0x124>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a3b      	ldr	r2, [pc, #236]	; (80014cc <SystemClock_Config+0x124>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
 80013e6:	4b39      	ldr	r3, [pc, #228]	; (80014cc <SystemClock_Config+0x124>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013f2:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <SystemClock_Config+0x128>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013fa:	4a35      	ldr	r2, [pc, #212]	; (80014d0 <SystemClock_Config+0x128>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <SystemClock_Config+0x128>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800140e:	2303      	movs	r3, #3
 8001410:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001418:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141c:	2301      	movs	r3, #1
 800141e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001422:	2310      	movs	r3, #16
 8001424:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2302      	movs	r3, #2
 800142a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800142e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001432:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001436:	2308      	movs	r3, #8
 8001438:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800143c:	2348      	movs	r3, #72	; 0x48
 800143e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001442:	2302      	movs	r3, #2
 8001444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001448:	2303      	movs	r3, #3
 800144a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001452:	4618      	mov	r0, r3
 8001454:	f002 f868 	bl	8003528 <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800145e:	f000 fc13 	bl	8001c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001468:	2302      	movs	r3, #2
 800146a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001482:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001486:	2102      	movs	r1, #2
 8001488:	4618      	mov	r0, r3
 800148a:	f002 faf1 	bl	8003a70 <HAL_RCC_ClockConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001494:	f000 fbf8 	bl	8001c88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <SystemClock_Config+0x12c>)
 800149a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800149c:	2300      	movs	r3, #0
 800149e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fd44 	bl	8003f38 <HAL_RCCEx_PeriphCLKConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x112>
  {
    Error_Handler();
 80014b6:	f000 fbe7 	bl	8001c88 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2000      	movs	r0, #0
 80014c0:	f002 fbc2 	bl	8003c48 <HAL_RCC_MCOConfig>
}
 80014c4:	bf00      	nop
 80014c6:	37d0      	adds	r7, #208	; 0xd0
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40007000 	.word	0x40007000
 80014d4:	00200100 	.word	0x00200100

080014d8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014de:	463b      	mov	r3, r7
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_DAC_Init+0x4c>)
 80014e8:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <MX_DAC_Init+0x50>)
 80014ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <MX_DAC_Init+0x4c>)
 80014ee:	f001 f830 	bl	8002552 <HAL_DAC_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80014f8:	f000 fbc6 	bl	8001c88 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80014fc:	2304      	movs	r3, #4
 80014fe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <MX_DAC_Init+0x4c>)
 800150c:	f001 f8f9 	bl	8002702 <HAL_DAC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001516:	f000 fbb7 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200009d4 	.word	0x200009d4
 8001528:	40007400 	.word	0x40007400

0800152c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b090      	sub	sp, #64	; 0x40
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001568:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <MX_TIM1_Init+0x174>)
 800156a:	4a4e      	ldr	r2, [pc, #312]	; (80016a4 <MX_TIM1_Init+0x178>)
 800156c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 800156e:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <MX_TIM1_Init+0x174>)
 8001570:	2209      	movs	r2, #9
 8001572:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <MX_TIM1_Init+0x174>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800157a:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <MX_TIM1_Init+0x174>)
 800157c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001580:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b47      	ldr	r3, [pc, #284]	; (80016a0 <MX_TIM1_Init+0x174>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <MX_TIM1_Init+0x174>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <MX_TIM1_Init+0x174>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001594:	4842      	ldr	r0, [pc, #264]	; (80016a0 <MX_TIM1_Init+0x174>)
 8001596:	f003 f8bf 	bl	8004718 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80015a0:	f000 fb72 	bl	8001c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ae:	4619      	mov	r1, r3
 80015b0:	483b      	ldr	r0, [pc, #236]	; (80016a0 <MX_TIM1_Init+0x174>)
 80015b2:	f003 fcd9 	bl	8004f68 <HAL_TIM_ConfigClockSource>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80015bc:	f000 fb64 	bl	8001c88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80015c0:	4837      	ldr	r0, [pc, #220]	; (80016a0 <MX_TIM1_Init+0x174>)
 80015c2:	f003 f971 	bl	80048a8 <HAL_TIM_IC_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80015cc:	f000 fb5c 	bl	8001c88 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80015d0:	2304      	movs	r3, #4
 80015d2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80015d4:	2350      	movs	r3, #80	; 0x50
 80015d6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	482e      	ldr	r0, [pc, #184]	; (80016a0 <MX_TIM1_Init+0x174>)
 80015e8:	f003 fd84 	bl	80050f4 <HAL_TIM_SlaveConfigSynchro>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80015f2:	f000 fb49 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4619      	mov	r1, r3
 8001608:	4825      	ldr	r0, [pc, #148]	; (80016a0 <MX_TIM1_Init+0x174>)
 800160a:	f004 f93b 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001614:	f000 fb38 	bl	8001c88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001618:	2300      	movs	r3, #0
 800161a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800161c:	2301      	movs	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	481c      	ldr	r0, [pc, #112]	; (80016a0 <MX_TIM1_Init+0x174>)
 8001630:	f003 fc05 	bl	8004e3e <HAL_TIM_IC_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800163a:	f000 fb25 	bl	8001c88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800163e:	2302      	movs	r3, #2
 8001640:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001642:	2302      	movs	r3, #2
 8001644:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	2204      	movs	r2, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4814      	ldr	r0, [pc, #80]	; (80016a0 <MX_TIM1_Init+0x174>)
 800164e:	f003 fbf6 	bl	8004e3e <HAL_TIM_IC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001658:	f000 fb16 	bl	8001c88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001660:	2301      	movs	r3, #1
 8001662:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	2208      	movs	r2, #8
 8001668:	4619      	mov	r1, r3
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <MX_TIM1_Init+0x174>)
 800166c:	f003 fbe7 	bl	8004e3e <HAL_TIM_IC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001676:	f000 fb07 	bl	8001c88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800167a:	2302      	movs	r3, #2
 800167c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800167e:	2302      	movs	r3, #2
 8001680:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001682:	463b      	mov	r3, r7
 8001684:	220c      	movs	r2, #12
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_TIM1_Init+0x174>)
 800168a:	f003 fbd8 	bl	8004e3e <HAL_TIM_IC_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001694:	f000 faf8 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3740      	adds	r7, #64	; 0x40
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000a34 	.word	0x20000a34
 80016a4:	40010000 	.word	0x40010000

080016a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <MX_TIM3_Init+0x94>)
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <MX_TIM3_Init+0x98>)
 80016ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_TIM3_Init+0x94>)
 80016ce:	224f      	movs	r2, #79	; 0x4f
 80016d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_TIM3_Init+0x94>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_TIM3_Init+0x94>)
 80016da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <MX_TIM3_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_TIM3_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ec:	4813      	ldr	r0, [pc, #76]	; (800173c <MX_TIM3_Init+0x94>)
 80016ee:	f003 f813 	bl	8004718 <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016f8:	f000 fac6 	bl	8001c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001700:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_TIM3_Init+0x94>)
 800170a:	f003 fc2d 	bl	8004f68 <HAL_TIM_ConfigClockSource>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001714:	f000 fab8 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_TIM3_Init+0x94>)
 8001726:	f004 f8ad 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001730:	f000 faaa 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000928 	.word	0x20000928
 8001740:	40000400 	.word	0x40000400

08001744 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_TIM6_Init+0x64>)
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <MX_TIM6_Init+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <MX_TIM6_Init+0x64>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_TIM6_Init+0x64>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1814-1;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_TIM6_Init+0x64>)
 8001768:	f240 7215 	movw	r2, #1813	; 0x715
 800176c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_TIM6_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <MX_TIM6_Init+0x64>)
 8001776:	f002 ffcf 	bl	8004718 <HAL_TIM_Base_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001780:	f000 fa82 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001784:	2320      	movs	r3, #32
 8001786:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_TIM6_Init+0x64>)
 8001792:	f004 f877 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800179c:	f000 fa74 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200009e8 	.word	0x200009e8
 80017ac:	40001000 	.word	0x40001000

080017b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b090      	sub	sp, #64	; 0x40
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017e0:	463b      	mov	r3, r7
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017ec:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <MX_TIM8_Init+0x138>)
 80017ee:	4a3f      	ldr	r2, [pc, #252]	; (80018ec <MX_TIM8_Init+0x13c>)
 80017f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 10-1;
 80017f2:	4b3d      	ldr	r3, [pc, #244]	; (80018e8 <MX_TIM8_Init+0x138>)
 80017f4:	2209      	movs	r2, #9
 80017f6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <MX_TIM8_Init+0x138>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80017fe:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <MX_TIM8_Init+0x138>)
 8001800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001804:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <MX_TIM8_Init+0x138>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800180c:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <MX_TIM8_Init+0x138>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <MX_TIM8_Init+0x138>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001818:	4833      	ldr	r0, [pc, #204]	; (80018e8 <MX_TIM8_Init+0x138>)
 800181a:	f002 ff7d 	bl	8004718 <HAL_TIM_Base_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001824:	f000 fa30 	bl	8001c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800182e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001832:	4619      	mov	r1, r3
 8001834:	482c      	ldr	r0, [pc, #176]	; (80018e8 <MX_TIM8_Init+0x138>)
 8001836:	f003 fb97 	bl	8004f68 <HAL_TIM_ConfigClockSource>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001840:	f000 fa22 	bl	8001c88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001844:	4828      	ldr	r0, [pc, #160]	; (80018e8 <MX_TIM8_Init+0x138>)
 8001846:	f003 f82f 	bl	80048a8 <HAL_TIM_IC_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001850:	f000 fa1a 	bl	8001c88 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001854:	2304      	movs	r3, #4
 8001856:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001858:	2350      	movs	r3, #80	; 0x50
 800185a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4619      	mov	r1, r3
 800186a:	481f      	ldr	r0, [pc, #124]	; (80018e8 <MX_TIM8_Init+0x138>)
 800186c:	f003 fc42 	bl	80050f4 <HAL_TIM_SlaveConfigSynchro>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001876:	f000 fa07 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	4619      	mov	r1, r3
 800188c:	4816      	ldr	r0, [pc, #88]	; (80018e8 <MX_TIM8_Init+0x138>)
 800188e:	f003 fff9 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8001898:	f000 f9f6 	bl	8001c88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800189c:	2300      	movs	r3, #0
 800189e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018a0:	2301      	movs	r3, #1
 80018a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018ac:	463b      	mov	r3, r7
 80018ae:	2200      	movs	r2, #0
 80018b0:	4619      	mov	r1, r3
 80018b2:	480d      	ldr	r0, [pc, #52]	; (80018e8 <MX_TIM8_Init+0x138>)
 80018b4:	f003 fac3 	bl	8004e3e <HAL_TIM_IC_ConfigChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 80018be:	f000 f9e3 	bl	8001c88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80018c2:	2302      	movs	r3, #2
 80018c4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80018c6:	2302      	movs	r3, #2
 80018c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80018ca:	463b      	mov	r3, r7
 80018cc:	2204      	movs	r2, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_TIM8_Init+0x138>)
 80018d2:	f003 fab4 	bl	8004e3e <HAL_TIM_IC_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 80018dc:	f000 f9d4 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	3740      	adds	r7, #64	; 0x40
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000054 	.word	0x20000054
 80018ec:	40010400 	.word	0x40010400

080018f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_USART3_UART_Init+0x58>)
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <MX_USART3_UART_Init+0x5c>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <MX_USART3_UART_Init+0x58>)
 80018fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_USART3_UART_Init+0x58>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_USART3_UART_Init+0x58>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_USART3_UART_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_USART3_UART_Init+0x58>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MX_USART3_UART_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_USART3_UART_Init+0x58>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <MX_USART3_UART_Init+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_USART3_UART_Init+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_USART3_UART_Init+0x58>)
 8001934:	f004 f852 	bl	80059dc <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800193e:	f000 f9a3 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200000a0 	.word	0x200000a0
 800194c:	40004800 	.word	0x40004800

08001950 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001956:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800195a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800195e:	2206      	movs	r2, #6
 8001960:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001964:	2202      	movs	r2, #2
 8001966:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001970:	2202      	movs	r2, #2
 8001972:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001994:	f001 fc80 	bl	8003298 <HAL_PCD_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800199e:	f000 f973 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000124 	.word	0x20000124

080019ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_DMA_Init+0x38>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <MX_DMA_Init+0x38>)
 80019b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_DMA_Init+0x38>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	2010      	movs	r0, #16
 80019d0:	f000 fd89 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019d4:	2010      	movs	r0, #16
 80019d6:	f000 fda2 	bl	800251e <HAL_NVIC_EnableIRQ>

}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08e      	sub	sp, #56	; 0x38
 80019ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019fe:	4b98      	ldr	r3, [pc, #608]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a97      	ldr	r2, [pc, #604]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a04:	f043 0310 	orr.w	r3, r3, #16
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b95      	ldr	r3, [pc, #596]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	623b      	str	r3, [r7, #32]
 8001a14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a16:	4b92      	ldr	r3, [pc, #584]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a91      	ldr	r2, [pc, #580]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b8f      	ldr	r3, [pc, #572]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2e:	4b8c      	ldr	r3, [pc, #560]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a8b      	ldr	r2, [pc, #556]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a34:	f043 0320 	orr.w	r3, r3, #32
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b89      	ldr	r3, [pc, #548]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a46:	4b86      	ldr	r3, [pc, #536]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a85      	ldr	r2, [pc, #532]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b83      	ldr	r3, [pc, #524]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	4b80      	ldr	r3, [pc, #512]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a7f      	ldr	r2, [pc, #508]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b7d      	ldr	r3, [pc, #500]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	4b7a      	ldr	r3, [pc, #488]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a79      	ldr	r2, [pc, #484]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b77      	ldr	r3, [pc, #476]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8e:	4b74      	ldr	r3, [pc, #464]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a73      	ldr	r2, [pc, #460]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a94:	f043 0308 	orr.w	r3, r3, #8
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b71      	ldr	r3, [pc, #452]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aa6:	4b6e      	ldr	r3, [pc, #440]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a6d      	ldr	r2, [pc, #436]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b6b      	ldr	r3, [pc, #428]	; (8001c60 <MX_GPIO_Init+0x278>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	4868      	ldr	r0, [pc, #416]	; (8001c64 <MX_GPIO_Init+0x27c>)
 8001ac4:	f001 fbb6 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f242 010f 	movw	r1, #8207	; 0x200f
 8001ace:	4866      	ldr	r0, [pc, #408]	; (8001c68 <MX_GPIO_Init+0x280>)
 8001ad0:	f001 fbb0 	bl	8003234 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f640 7181 	movw	r1, #3969	; 0xf81
 8001ada:	4864      	ldr	r0, [pc, #400]	; (8001c6c <MX_GPIO_Init+0x284>)
 8001adc:	f001 fbaa 	bl	8003234 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2181      	movs	r1, #129	; 0x81
 8001ae4:	4862      	ldr	r0, [pc, #392]	; (8001c70 <MX_GPIO_Init+0x288>)
 8001ae6:	f001 fba5 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8001af0:	4860      	ldr	r0, [pc, #384]	; (8001c74 <MX_GPIO_Init+0x28c>)
 8001af2:	f001 fb9f 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2108      	movs	r1, #8
 8001afa:	485f      	ldr	r0, [pc, #380]	; (8001c78 <MX_GPIO_Init+0x290>)
 8001afc:	f001 fb9a 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b00:	2320      	movs	r3, #32
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b14:	4619      	mov	r1, r3
 8001b16:	4853      	ldr	r0, [pc, #332]	; (8001c64 <MX_GPIO_Init+0x27c>)
 8001b18:	f001 f9c8 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b22:	4b56      	ldr	r3, [pc, #344]	; (8001c7c <MX_GPIO_Init+0x294>)
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	484e      	ldr	r0, [pc, #312]	; (8001c6c <MX_GPIO_Init+0x284>)
 8001b32:	f001 f9bb 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b36:	f242 030f 	movw	r3, #8207	; 0x200f
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4846      	ldr	r0, [pc, #280]	; (8001c68 <MX_GPIO_Init+0x280>)
 8001b50:	f001 f9ac 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b54:	2301      	movs	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4840      	ldr	r0, [pc, #256]	; (8001c6c <MX_GPIO_Init+0x284>)
 8001b6c:	f001 f99e 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b70:	2308      	movs	r3, #8
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b74:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <MX_GPIO_Init+0x294>)
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b80:	4619      	mov	r1, r3
 8001b82:	483f      	ldr	r0, [pc, #252]	; (8001c80 <MX_GPIO_Init+0x298>)
 8001b84:	f001 f992 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8001b88:	2381      	movs	r3, #129	; 0x81
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4834      	ldr	r0, [pc, #208]	; (8001c70 <MX_GPIO_Init+0x288>)
 8001ba0:	f001 f984 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001ba4:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bba:	4619      	mov	r1, r3
 8001bbc:	482d      	ldr	r0, [pc, #180]	; (8001c74 <MX_GPIO_Init+0x28c>)
 8001bbe:	f001 f975 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4827      	ldr	r0, [pc, #156]	; (8001c78 <MX_GPIO_Init+0x290>)
 8001bda:	f001 f967 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001bde:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	481d      	ldr	r0, [pc, #116]	; (8001c6c <MX_GPIO_Init+0x284>)
 8001bf8:	f001 f958 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c16:	4619      	mov	r1, r3
 8001c18:	4819      	ldr	r0, [pc, #100]	; (8001c80 <MX_GPIO_Init+0x298>)
 8001c1a:	f001 f947 	bl	8002eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <MX_GPIO_Init+0x29c>)
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c30:	4619      	mov	r1, r3
 8001c32:	4811      	ldr	r0, [pc, #68]	; (8001c78 <MX_GPIO_Init+0x290>)
 8001c34:	f001 f93a 	bl	8002eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2009      	movs	r0, #9
 8001c3e:	f000 fc52 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c42:	2009      	movs	r0, #9
 8001c44:	f000 fc6b 	bl	800251e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	2028      	movs	r0, #40	; 0x28
 8001c4e:	f000 fc4a 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c52:	2028      	movs	r0, #40	; 0x28
 8001c54:	f000 fc63 	bl	800251e <HAL_NVIC_EnableIRQ>

}
 8001c58:	bf00      	nop
 8001c5a:	3738      	adds	r7, #56	; 0x38
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40021400 	.word	0x40021400
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40020400 	.word	0x40020400
 8001c74:	40020c00 	.word	0x40020c00
 8001c78:	40021800 	.word	0x40021800
 8001c7c:	10110000 	.word	0x10110000
 8001c80:	40020000 	.word	0x40020000
 8001c84:	10310000 	.word	0x10310000

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <Error_Handler+0x8>
	...

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_MspInit+0x44>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a32      	ldr	r2, [pc, #200]	; (8001dc4 <HAL_DAC_MspInit+0xe8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d15d      	bne.n	8001dba <HAL_DAC_MspInit+0xde>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001cfe:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_DAC_MspInit+0xec>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a31      	ldr	r2, [pc, #196]	; (8001dc8 <HAL_DAC_MspInit+0xec>)
 8001d04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_DAC_MspInit+0xec>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <HAL_DAC_MspInit+0xec>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a2b      	ldr	r2, [pc, #172]	; (8001dc8 <HAL_DAC_MspInit+0xec>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_DAC_MspInit+0xec>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d2e:	2310      	movs	r3, #16
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d32:	2303      	movs	r3, #3
 8001d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4822      	ldr	r0, [pc, #136]	; (8001dcc <HAL_DAC_MspInit+0xf0>)
 8001d42:	f001 f8b3 	bl	8002eac <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <HAL_DAC_MspInit+0xf4>)
 8001d48:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <HAL_DAC_MspInit+0xf8>)
 8001d4a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_DAC_MspInit+0xf4>)
 8001d4e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001d52:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_DAC_MspInit+0xf4>)
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_DAC_MspInit+0xf4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_DAC_MspInit+0xf4>)
 8001d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d66:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_DAC_MspInit+0xf4>)
 8001d6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d6e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_DAC_MspInit+0xf4>)
 8001d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d76:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_DAC_MspInit+0xf4>)
 8001d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d7e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_DAC_MspInit+0xf4>)
 8001d82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d86:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_DAC_MspInit+0xf4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001d8e:	4810      	ldr	r0, [pc, #64]	; (8001dd0 <HAL_DAC_MspInit+0xf4>)
 8001d90:	f000 fd10 	bl	80027b4 <HAL_DMA_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8001d9a:	f7ff ff75 	bl	8001c88 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <HAL_DAC_MspInit+0xf4>)
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <HAL_DAC_MspInit+0xf4>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	2036      	movs	r0, #54	; 0x36
 8001db0:	f000 fb99 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001db4:	2036      	movs	r0, #54	; 0x36
 8001db6:	f000 fbb2 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	; 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40007400 	.word	0x40007400
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	20000974 	.word	0x20000974
 8001dd4:	40026088 	.word	0x40026088

08001dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08e      	sub	sp, #56	; 0x38
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a48      	ldr	r2, [pc, #288]	; (8001f18 <HAL_TIM_Base_MspInit+0x140>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d131      	bne.n	8001e5e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dfa:	4b48      	ldr	r3, [pc, #288]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a47      	ldr	r2, [pc, #284]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b45      	ldr	r3, [pc, #276]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	623b      	str	r3, [r7, #32]
 8001e10:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e12:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a41      	ldr	r2, [pc, #260]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001e18:	f043 0310 	orr.w	r3, r3, #16
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 8001e2a:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e44:	4619      	mov	r1, r3
 8001e46:	4836      	ldr	r0, [pc, #216]	; (8001f20 <HAL_TIM_Base_MspInit+0x148>)
 8001e48:	f001 f830 	bl	8002eac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2100      	movs	r1, #0
 8001e50:	201b      	movs	r0, #27
 8001e52:	f000 fb48 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e56:	201b      	movs	r0, #27
 8001e58:	f000 fb61 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001e5c:	e058      	b.n	8001f10 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM3)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a30      	ldr	r2, [pc, #192]	; (8001f24 <HAL_TIM_Base_MspInit+0x14c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d10c      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	4a2b      	ldr	r2, [pc, #172]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	6413      	str	r3, [r2, #64]	; 0x40
 8001e74:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
}
 8001e80:	e046      	b.n	8001f10 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM6)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a28      	ldr	r2, [pc, #160]	; (8001f28 <HAL_TIM_Base_MspInit+0x150>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d114      	bne.n	8001eb6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e8c:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001e92:	f043 0310 	orr.w	r3, r3, #16
 8001e96:	6413      	str	r3, [r2, #64]	; 0x40
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2036      	movs	r0, #54	; 0x36
 8001eaa:	f000 fb1c 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001eae:	2036      	movs	r0, #54	; 0x36
 8001eb0:	f000 fb35 	bl	800251e <HAL_NVIC_EnableIRQ>
}
 8001eb4:	e02c      	b.n	8001f10 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM8)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <HAL_TIM_Base_MspInit+0x154>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d127      	bne.n	8001f10 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001ec6:	f043 0302 	orr.w	r3, r3, #2
 8001eca:	6453      	str	r3, [r2, #68]	; 0x44
 8001ecc:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_TIM_Base_MspInit+0x144>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f00:	2303      	movs	r3, #3
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4809      	ldr	r0, [pc, #36]	; (8001f30 <HAL_TIM_Base_MspInit+0x158>)
 8001f0c:	f000 ffce 	bl	8002eac <HAL_GPIO_Init>
}
 8001f10:	bf00      	nop
 8001f12:	3738      	adds	r7, #56	; 0x38
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40001000 	.word	0x40001000
 8001f2c:	40010400 	.word	0x40010400
 8001f30:	40020800 	.word	0x40020800

08001f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_UART_MspInit+0x8c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d130      	bne.n	8001fb8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_UART_MspInit+0x90>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <HAL_UART_MspInit+0x90>)
 8001f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <HAL_UART_MspInit+0x90>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_UART_MspInit+0x90>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <HAL_UART_MspInit+0x90>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_UART_MspInit+0x90>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f98:	2307      	movs	r3, #7
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <HAL_UART_MspInit+0x94>)
 8001fa4:	f000 ff82 	bl	8002eac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2027      	movs	r0, #39	; 0x27
 8001fae:	f000 fa9a 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fb2:	2027      	movs	r0, #39	; 0x27
 8001fb4:	f000 fab3 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40004800 	.word	0x40004800
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020400 	.word	0x40020400

08001fcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fec:	d134      	bne.n	8002058 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <HAL_PCD_MspInit+0x94>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <HAL_PCD_MspInit+0x94>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_PCD_MspInit+0x94>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002006:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002018:	230a      	movs	r3, #10
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	4810      	ldr	r0, [pc, #64]	; (8002064 <HAL_PCD_MspInit+0x98>)
 8002024:	f000 ff42 	bl	8002eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_PCD_MspInit+0x94>)
 800202a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202c:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <HAL_PCD_MspInit+0x94>)
 800202e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002032:	6353      	str	r3, [r2, #52]	; 0x34
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_PCD_MspInit+0x94>)
 8002036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <HAL_PCD_MspInit+0x94>)
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	4a06      	ldr	r2, [pc, #24]	; (8002060 <HAL_PCD_MspInit+0x94>)
 8002046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204a:	6453      	str	r3, [r2, #68]	; 0x44
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <HAL_PCD_MspInit+0x94>)
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	3728      	adds	r7, #40	; 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	40020000 	.word	0x40020000

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800206c:	e7fe      	b.n	800206c <NMI_Handler+0x4>

0800206e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <MemManage_Handler+0x4>

0800207a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <UsageFault_Handler+0x4>

08002086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b4:	f000 f8f8 	bl	80022a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80020c0:	2008      	movs	r0, #8
 80020c2:	f001 f8d1 	bl	8003268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <DMA1_Stream5_IRQHandler+0x10>)
 80020d2:	f000 fcaf 	bl	8002a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000974 	.word	0x20000974

080020e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <TIM1_CC_IRQHandler+0x10>)
 80020e6:	f002 fd8b 	bl	8004c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000a34 	.word	0x20000a34

080020f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	// Interrupt was because of a transfer?
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020fa:	481c      	ldr	r0, [pc, #112]	; (800216c <USART3_IRQHandler+0x78>)
 80020fc:	f003 fcbc 	bl	8005a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  if(USART3->ISR & (1<<5)){   // Interrupt was because of a receive
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <USART3_IRQHandler+0x7c>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b00      	cmp	r3, #0
 800210a:	d02b      	beq.n	8002164 <USART3_IRQHandler+0x70>
	  uint8_t c;
	  c = USART3->RDR; // Clears RXNE?
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <USART3_IRQHandler+0x7c>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	71fb      	strb	r3, [r7, #7]
	  USART3->CR1 &= ~(1 << 2); // Clear RE to finish receive
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <USART3_IRQHandler+0x7c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a16      	ldr	r2, [pc, #88]	; (8002170 <USART3_IRQHandler+0x7c>)
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	6013      	str	r3, [r2, #0]
	  if(c == '4'){ // Tell STM to refill the ammo
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	2b34      	cmp	r3, #52	; 0x34
 8002122:	d102      	bne.n	800212a <USART3_IRQHandler+0x36>
		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
		  shells = 100;
 8002124:	4b13      	ldr	r3, [pc, #76]	; (8002174 <USART3_IRQHandler+0x80>)
 8002126:	2264      	movs	r2, #100	; 0x64
 8002128:	701a      	strb	r2, [r3, #0]
	  }
	  if(c == '5') { // Sentry lost all HP from being sapped, "destroyed"
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2b35      	cmp	r3, #53	; 0x35
 800212e:	d113      	bne.n	8002158 <USART3_IRQHandler+0x64>
		  sentryDestroyed = !sentryDestroyed;
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <USART3_IRQHandler+0x84>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf14      	ite	ne
 8002138:	2301      	movne	r3, #1
 800213a:	2300      	moveq	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f083 0301 	eor.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <USART3_IRQHandler+0x84>)
 800214c:	701a      	strb	r2, [r3, #0]
		  while(sentryDestroyed); // Sentry lost all hp, wait until reset
 800214e:	bf00      	nop
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <USART3_IRQHandler+0x84>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1fb      	bne.n	8002150 <USART3_IRQHandler+0x5c>
	  }
	  USART3->CR1 |= 1 << 2; // Set RE to be ready to receive again
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <USART3_IRQHandler+0x7c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <USART3_IRQHandler+0x7c>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END USART3_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	200000a0 	.word	0x200000a0
 8002170:	40004800 	.word	0x40004800
 8002174:	20000006 	.word	0x20000006
 8002178:	20000050 	.word	0x20000050

0800217c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002180:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002184:	f001 f870 	bl	8003268 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002188:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800218c:	f001 f86c 	bl	8003268 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002190:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002194:	f001 f868 	bl	8003268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80021a0:	4803      	ldr	r0, [pc, #12]	; (80021b0 <TIM6_DAC_IRQHandler+0x14>)
 80021a2:	f000 fa4a 	bl	800263a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80021a6:	4803      	ldr	r0, [pc, #12]	; (80021b4 <TIM6_DAC_IRQHandler+0x18>)
 80021a8:	f002 fd2a 	bl	8004c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	200009d4 	.word	0x200009d4
 80021b4:	200009e8 	.word	0x200009e8

080021b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <SystemInit+0x20>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <SystemInit+0x20>)
 80021c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002214 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021e0:	480d      	ldr	r0, [pc, #52]	; (8002218 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021e2:	490e      	ldr	r1, [pc, #56]	; (800221c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021e4:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e8:	e002      	b.n	80021f0 <LoopCopyDataInit>

080021ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ee:	3304      	adds	r3, #4

080021f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f4:	d3f9      	bcc.n	80021ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f6:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021f8:	4c0b      	ldr	r4, [pc, #44]	; (8002228 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021fc:	e001      	b.n	8002202 <LoopFillZerobss>

080021fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002200:	3204      	adds	r2, #4

08002202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002204:	d3fb      	bcc.n	80021fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002206:	f7ff ffd7 	bl	80021b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800220a:	f004 fd0b 	bl	8006c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800220e:	f7ff f87b 	bl	8001308 <main>
  bx  lr    
 8002212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002214:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800221c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002220:	08007f10 	.word	0x08007f10
  ldr r2, =_sbss
 8002224:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002228:	20000c18 	.word	0x20000c18

0800222c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800222c:	e7fe      	b.n	800222c <ADC_IRQHandler>

0800222e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002232:	2003      	movs	r0, #3
 8002234:	f000 f94c 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002238:	2000      	movs	r0, #0
 800223a:	f000 f805 	bl	8002248 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800223e:	f7ff fd29 	bl	8001c94 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_InitTick+0x54>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_InitTick+0x58>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f967 	bl	800253a <HAL_SYSTICK_Config>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e00e      	b.n	8002294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b0f      	cmp	r3, #15
 800227a:	d80a      	bhi.n	8002292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800227c:	2200      	movs	r2, #0
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f000 f92f 	bl	80024e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002288:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <HAL_InitTick+0x5c>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e000      	b.n	8002294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000008 	.word	0x20000008
 80022a0:	20000010 	.word	0x20000010
 80022a4:	2000000c 	.word	0x2000000c

080022a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_IncTick+0x20>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_IncTick+0x24>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_IncTick+0x24>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000010 	.word	0x20000010
 80022cc:	20000c14 	.word	0x20000c14

080022d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return uwTick;
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_GetTick+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000c14 	.word	0x20000c14

080022e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff ffee 	bl	80022d0 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002300:	d005      	beq.n	800230e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_Delay+0x44>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230e:	bf00      	nop
 8002310:	f7ff ffde 	bl	80022d0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	429a      	cmp	r2, r3
 800231e:	d8f7      	bhi.n	8002310 <HAL_Delay+0x28>
  {
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000010 	.word	0x20000010

08002330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <__NVIC_SetPriorityGrouping+0x40>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 800235a:	4313      	orrs	r3, r2
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	; (8002370 <__NVIC_SetPriorityGrouping+0x40>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00
 8002374:	05fa0000 	.word	0x05fa0000

08002378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	; (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	; (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ff8e 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff29 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff3e 	bl	8002378 <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff8e 	bl	8002424 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5d 	bl	80023d0 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff31 	bl	8002394 <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffa2 	bl	800248c <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e014      	b.n	800258e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	791b      	ldrb	r3, [r3, #4]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d105      	bne.n	800257a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff fbb1 	bl	8001cdc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2202      	movs	r2, #2
 800257e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	795b      	ldrb	r3, [r3, #5]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_DAC_Start+0x16>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e040      	b.n	800262e <HAL_DAC_Start+0x98>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2201      	movs	r2, #1
 80025c6:	409a      	lsls	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10f      	bne.n	80025f6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80025e0:	2b3c      	cmp	r3, #60	; 0x3c
 80025e2:	d11d      	bne.n	8002620 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	e014      	b.n	8002620 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	213c      	movs	r1, #60	; 0x3c
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	429a      	cmp	r2, r3
 800260e:	d107      	bne.n	8002620 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0202 	orr.w	r2, r2, #2
 800261e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002650:	d120      	bne.n	8002694 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002660:	d118      	bne.n	8002694 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2204      	movs	r2, #4
 8002666:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800267c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800268c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f82d 	bl	80026ee <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800269e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026a2:	d120      	bne.n	80026e6 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026b2:	d118      	bne.n	80026e6 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2204      	movs	r2, #4
 80026b8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f043 0202 	orr.w	r2, r3, #2
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80026ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80026de:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f85d 	bl	80027a0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002702:	b480      	push	{r7}
 8002704:	b087      	sub	sp, #28
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	795b      	ldrb	r3, [r3, #5]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_DAC_ConfigChannel+0x18>
 8002716:	2302      	movs	r3, #2
 8002718:	e03c      	b.n	8002794 <HAL_DAC_ConfigChannel+0x92>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2202      	movs	r2, #2
 8002724:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4013      	ands	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	22c0      	movs	r2, #192	; 0xc0
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43da      	mvns	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	400a      	ands	r2, r1
 8002784:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027c0:	f7ff fd86 	bl	80022d0 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e099      	b.n	8002904 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f0:	e00f      	b.n	8002812 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027f2:	f7ff fd6d 	bl	80022d0 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	d908      	bls.n	8002812 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2203      	movs	r2, #3
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e078      	b.n	8002904 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e8      	bne.n	80027f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4b38      	ldr	r3, [pc, #224]	; (800290c <HAL_DMA_Init+0x158>)
 800282c:	4013      	ands	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800283e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	2b04      	cmp	r3, #4
 800286a:	d107      	bne.n	800287c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	4313      	orrs	r3, r2
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f023 0307 	bic.w	r3, r3, #7
 8002892:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d117      	bne.n	80028d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00e      	beq.n	80028d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fa7b 	bl	8002db4 <DMA_CheckFifoParam>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2240      	movs	r2, #64	; 0x40
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028d2:	2301      	movs	r3, #1
 80028d4:	e016      	b.n	8002904 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fa32 	bl	8002d48 <DMA_CalcBaseAndBitshift>
 80028e4:	4603      	mov	r3, r0
 80028e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	223f      	movs	r2, #63	; 0x3f
 80028ee:	409a      	lsls	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	f010803f 	.word	0xf010803f

08002910 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800291e:	f7ff fcd7 	bl	80022d0 <HAL_GetTick>
 8002922:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d008      	beq.n	8002942 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2280      	movs	r2, #128	; 0x80
 8002934:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e052      	b.n	80029e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0216 	bic.w	r2, r2, #22
 8002950:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002960:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d103      	bne.n	8002972 <HAL_DMA_Abort+0x62>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0208 	bic.w	r2, r2, #8
 8002980:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0201 	bic.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002992:	e013      	b.n	80029bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002994:	f7ff fc9c 	bl	80022d0 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b05      	cmp	r3, #5
 80029a0:	d90c      	bls.n	80029bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2203      	movs	r2, #3
 80029b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e015      	b.n	80029e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1e4      	bne.n	8002994 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	223f      	movs	r2, #63	; 0x3f
 80029d0:	409a      	lsls	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d004      	beq.n	8002a0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e00c      	b.n	8002a28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2205      	movs	r2, #5
 8002a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0201 	bic.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002a40:	4b92      	ldr	r3, [pc, #584]	; (8002c8c <HAL_DMA_IRQHandler+0x258>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a92      	ldr	r2, [pc, #584]	; (8002c90 <HAL_DMA_IRQHandler+0x25c>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	0a9b      	lsrs	r3, r3, #10
 8002a4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	2208      	movs	r2, #8
 8002a60:	409a      	lsls	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d01a      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0204 	bic.w	r2, r2, #4
 8002a86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d012      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00b      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ace:	f043 0202 	orr.w	r2, r3, #2
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	2204      	movs	r2, #4
 8002adc:	409a      	lsls	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d012      	beq.n	8002b0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00b      	beq.n	8002b0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af8:	2204      	movs	r2, #4
 8002afa:	409a      	lsls	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f043 0204 	orr.w	r2, r3, #4
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	2210      	movs	r2, #16
 8002b12:	409a      	lsls	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d043      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d03c      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2e:	2210      	movs	r2, #16
 8002b30:	409a      	lsls	r2, r3
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d018      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d108      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d024      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4798      	blx	r3
 8002b62:	e01f      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01b      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
 8002b74:	e016      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d107      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0208 	bic.w	r2, r2, #8
 8002b92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	2220      	movs	r2, #32
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 808e 	beq.w	8002cd2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8086 	beq.w	8002cd2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	2220      	movs	r2, #32
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d136      	bne.n	8002c4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0216 	bic.w	r2, r2, #22
 8002bec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d103      	bne.n	8002c0e <HAL_DMA_IRQHandler+0x1da>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0208 	bic.w	r2, r2, #8
 8002c1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	223f      	movs	r2, #63	; 0x3f
 8002c24:	409a      	lsls	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d07d      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
        }
        return;
 8002c4a:	e078      	b.n	8002d3e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01c      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d108      	bne.n	8002c7a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d030      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
 8002c78:	e02b      	b.n	8002cd2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d027      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
 8002c8a:	e022      	b.n	8002cd2 <HAL_DMA_IRQHandler+0x29e>
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0210 	bic.w	r2, r2, #16
 8002cb0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d032      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d022      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2205      	movs	r2, #5
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3301      	adds	r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d307      	bcc.n	8002d1a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f2      	bne.n	8002cfe <HAL_DMA_IRQHandler+0x2ca>
 8002d18:	e000      	b.n	8002d1c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d1a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
 8002d3c:	e000      	b.n	8002d40 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d3e:	bf00      	nop
    }
  }
}
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop

08002d48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	3b10      	subs	r3, #16
 8002d58:	4a13      	ldr	r2, [pc, #76]	; (8002da8 <DMA_CalcBaseAndBitshift+0x60>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <DMA_CalcBaseAndBitshift+0x64>)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d908      	bls.n	8002d88 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	1d1a      	adds	r2, r3, #4
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	659a      	str	r2, [r3, #88]	; 0x58
 8002d86:	e006      	b.n	8002d96 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	aaaaaaab 	.word	0xaaaaaaab
 8002dac:	08007d20 	.word	0x08007d20
 8002db0:	fffffc00 	.word	0xfffffc00

08002db4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d11f      	bne.n	8002e0e <DMA_CheckFifoParam+0x5a>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d856      	bhi.n	8002e82 <DMA_CheckFifoParam+0xce>
 8002dd4:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <DMA_CheckFifoParam+0x28>)
 8002dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dda:	bf00      	nop
 8002ddc:	08002ded 	.word	0x08002ded
 8002de0:	08002dff 	.word	0x08002dff
 8002de4:	08002ded 	.word	0x08002ded
 8002de8:	08002e83 	.word	0x08002e83
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d046      	beq.n	8002e86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dfc:	e043      	b.n	8002e86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e06:	d140      	bne.n	8002e8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0c:	e03d      	b.n	8002e8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e16:	d121      	bne.n	8002e5c <DMA_CheckFifoParam+0xa8>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d837      	bhi.n	8002e8e <DMA_CheckFifoParam+0xda>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <DMA_CheckFifoParam+0x70>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e3b 	.word	0x08002e3b
 8002e2c:	08002e35 	.word	0x08002e35
 8002e30:	08002e4d 	.word	0x08002e4d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	e030      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d025      	beq.n	8002e92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e4a:	e022      	b.n	8002e92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e54:	d11f      	bne.n	8002e96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e5a:	e01c      	b.n	8002e96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d903      	bls.n	8002e6a <DMA_CheckFifoParam+0xb6>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d003      	beq.n	8002e70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e68:	e018      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e6e:	e015      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00e      	beq.n	8002e9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e80:	e00b      	b.n	8002e9a <DMA_CheckFifoParam+0xe6>
      break;
 8002e82:	bf00      	nop
 8002e84:	e00a      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      break;
 8002e86:	bf00      	nop
 8002e88:	e008      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      break;
 8002e8a:	bf00      	nop
 8002e8c:	e006      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      break;
 8002e8e:	bf00      	nop
 8002e90:	e004      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      break;
 8002e92:	bf00      	nop
 8002e94:	e002      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002e96:	bf00      	nop
 8002e98:	e000      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      break;
 8002e9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop

08002eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b089      	sub	sp, #36	; 0x24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	e175      	b.n	80031b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ecc:	2201      	movs	r2, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	f040 8164 	bne.w	80031b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d00b      	beq.n	8002f0a <HAL_GPIO_Init+0x5e>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d007      	beq.n	8002f0a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002efe:	2b11      	cmp	r3, #17
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b12      	cmp	r3, #18
 8002f08:	d130      	bne.n	8002f6c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2203      	movs	r2, #3
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f40:	2201      	movs	r2, #1
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 0201 	and.w	r2, r3, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	2203      	movs	r2, #3
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x100>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b12      	cmp	r3, #18
 8002faa:	d123      	bne.n	8002ff4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	08da      	lsrs	r2, r3, #3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3208      	adds	r2, #8
 8002fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	220f      	movs	r2, #15
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	69b9      	ldr	r1, [r7, #24]
 8002ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	2203      	movs	r2, #3
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0203 	and.w	r2, r3, #3
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80be 	beq.w	80031b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003036:	4b66      	ldr	r3, [pc, #408]	; (80031d0 <HAL_GPIO_Init+0x324>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	4a65      	ldr	r2, [pc, #404]	; (80031d0 <HAL_GPIO_Init+0x324>)
 800303c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003040:	6453      	str	r3, [r2, #68]	; 0x44
 8003042:	4b63      	ldr	r3, [pc, #396]	; (80031d0 <HAL_GPIO_Init+0x324>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800304e:	4a61      	ldr	r2, [pc, #388]	; (80031d4 <HAL_GPIO_Init+0x328>)
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	220f      	movs	r2, #15
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a58      	ldr	r2, [pc, #352]	; (80031d8 <HAL_GPIO_Init+0x32c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d037      	beq.n	80030ea <HAL_GPIO_Init+0x23e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a57      	ldr	r2, [pc, #348]	; (80031dc <HAL_GPIO_Init+0x330>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d031      	beq.n	80030e6 <HAL_GPIO_Init+0x23a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a56      	ldr	r2, [pc, #344]	; (80031e0 <HAL_GPIO_Init+0x334>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d02b      	beq.n	80030e2 <HAL_GPIO_Init+0x236>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a55      	ldr	r2, [pc, #340]	; (80031e4 <HAL_GPIO_Init+0x338>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d025      	beq.n	80030de <HAL_GPIO_Init+0x232>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a54      	ldr	r2, [pc, #336]	; (80031e8 <HAL_GPIO_Init+0x33c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01f      	beq.n	80030da <HAL_GPIO_Init+0x22e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a53      	ldr	r2, [pc, #332]	; (80031ec <HAL_GPIO_Init+0x340>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d019      	beq.n	80030d6 <HAL_GPIO_Init+0x22a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a52      	ldr	r2, [pc, #328]	; (80031f0 <HAL_GPIO_Init+0x344>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <HAL_GPIO_Init+0x226>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a51      	ldr	r2, [pc, #324]	; (80031f4 <HAL_GPIO_Init+0x348>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00d      	beq.n	80030ce <HAL_GPIO_Init+0x222>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a50      	ldr	r2, [pc, #320]	; (80031f8 <HAL_GPIO_Init+0x34c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d007      	beq.n	80030ca <HAL_GPIO_Init+0x21e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a4f      	ldr	r2, [pc, #316]	; (80031fc <HAL_GPIO_Init+0x350>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d101      	bne.n	80030c6 <HAL_GPIO_Init+0x21a>
 80030c2:	2309      	movs	r3, #9
 80030c4:	e012      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030c6:	230a      	movs	r3, #10
 80030c8:	e010      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030ca:	2308      	movs	r3, #8
 80030cc:	e00e      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030ce:	2307      	movs	r3, #7
 80030d0:	e00c      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030d2:	2306      	movs	r3, #6
 80030d4:	e00a      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030d6:	2305      	movs	r3, #5
 80030d8:	e008      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030da:	2304      	movs	r3, #4
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030de:	2303      	movs	r3, #3
 80030e0:	e004      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030ea:	2300      	movs	r3, #0
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	4093      	lsls	r3, r2
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030fc:	4935      	ldr	r1, [pc, #212]	; (80031d4 <HAL_GPIO_Init+0x328>)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310a:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <HAL_GPIO_Init+0x354>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800312e:	4a34      	ldr	r2, [pc, #208]	; (8003200 <HAL_GPIO_Init+0x354>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003134:	4b32      	ldr	r3, [pc, #200]	; (8003200 <HAL_GPIO_Init+0x354>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003158:	4a29      	ldr	r2, [pc, #164]	; (8003200 <HAL_GPIO_Init+0x354>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315e:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_GPIO_Init+0x354>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003182:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <HAL_GPIO_Init+0x354>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_GPIO_Init+0x354>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031ac:	4a14      	ldr	r2, [pc, #80]	; (8003200 <HAL_GPIO_Init+0x354>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	f67f ae86 	bls.w	8002ecc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40021400 	.word	0x40021400
 80031f0:	40021800 	.word	0x40021800
 80031f4:	40021c00 	.word	0x40021c00
 80031f8:	40022000 	.word	0x40022000
 80031fc:	40022400 	.word	0x40022400
 8003200:	40013c00 	.word	0x40013c00

08003204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
 8003220:	e001      	b.n	8003226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
 8003240:	4613      	mov	r3, r2
 8003242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003244:	787b      	ldrb	r3, [r7, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003250:	e003      	b.n	800325a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	041a      	lsls	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d006      	beq.n	800328c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800327e:	4a05      	ldr	r2, [pc, #20]	; (8003294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd ffe2 	bl	8001250 <HAL_GPIO_EXTI_Callback>
  }
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40013c00 	.word	0x40013c00

08003298 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800329a:	b08f      	sub	sp, #60	; 0x3c
 800329c:	af0a      	add	r7, sp, #40	; 0x28
 800329e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e116      	b.n	80034d8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7fe fe81 	bl	8001fcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2203      	movs	r2, #3
 80032ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f003 fa3b 	bl	8006764 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	687e      	ldr	r6, [r7, #4]
 80032f6:	466d      	mov	r5, sp
 80032f8:	f106 0410 	add.w	r4, r6, #16
 80032fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003304:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003308:	e885 0003 	stmia.w	r5, {r0, r1}
 800330c:	1d33      	adds	r3, r6, #4
 800330e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003310:	6838      	ldr	r0, [r7, #0]
 8003312:	f003 f9cf 	bl	80066b4 <USB_CoreInit>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0d7      	b.n	80034d8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f003 fa29 	bl	8006786 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003334:	2300      	movs	r3, #0
 8003336:	73fb      	strb	r3, [r7, #15]
 8003338:	e04a      	b.n	80033d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800333a:	7bfa      	ldrb	r2, [r7, #15]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	333d      	adds	r3, #61	; 0x3d
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	333c      	adds	r3, #60	; 0x3c
 800335e:	7bfa      	ldrb	r2, [r7, #15]
 8003360:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003362:	7bfa      	ldrb	r2, [r7, #15]
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	b298      	uxth	r0, r3
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	3342      	adds	r3, #66	; 0x42
 8003376:	4602      	mov	r2, r0
 8003378:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	333f      	adds	r3, #63	; 0x3f
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	3344      	adds	r3, #68	; 0x44
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033a2:	7bfa      	ldrb	r2, [r7, #15]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	3348      	adds	r3, #72	; 0x48
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	3350      	adds	r3, #80	; 0x50
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	3301      	adds	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d3af      	bcc.n	800333a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
 80033de:	e044      	b.n	800346a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033e0:	7bfa      	ldrb	r2, [r7, #15]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003422:	7bfa      	ldrb	r2, [r7, #15]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	3301      	adds	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	429a      	cmp	r2, r3
 8003472:	d3b5      	bcc.n	80033e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	603b      	str	r3, [r7, #0]
 800347a:	687e      	ldr	r6, [r7, #4]
 800347c:	466d      	mov	r5, sp
 800347e:	f106 0410 	add.w	r4, r6, #16
 8003482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800348a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800348e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003492:	1d33      	adds	r3, r6, #4
 8003494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003496:	6838      	ldr	r0, [r7, #0]
 8003498:	f003 f9a0 	bl	80067dc <USB_DevInit>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e014      	b.n	80034d8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f80a 	bl	80034e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f003 fb52 	bl	8006b7a <USB_DevDisconnect>

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800350e:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_PCDEx_ActivateLPM+0x44>)
 8003510:	4313      	orrs	r3, r2
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	10000003 	.word	0x10000003

08003528 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003530:	2300      	movs	r3, #0
 8003532:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e291      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8087 	beq.w	800365a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800354c:	4b96      	ldr	r3, [pc, #600]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b04      	cmp	r3, #4
 8003556:	d00c      	beq.n	8003572 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003558:	4b93      	ldr	r3, [pc, #588]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b08      	cmp	r3, #8
 8003562:	d112      	bne.n	800358a <HAL_RCC_OscConfig+0x62>
 8003564:	4b90      	ldr	r3, [pc, #576]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003570:	d10b      	bne.n	800358a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003572:	4b8d      	ldr	r3, [pc, #564]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d06c      	beq.n	8003658 <HAL_RCC_OscConfig+0x130>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d168      	bne.n	8003658 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e26b      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003592:	d106      	bne.n	80035a2 <HAL_RCC_OscConfig+0x7a>
 8003594:	4b84      	ldr	r3, [pc, #528]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a83      	ldr	r2, [pc, #524]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 800359a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	e02e      	b.n	8003600 <HAL_RCC_OscConfig+0xd8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x9c>
 80035aa:	4b7f      	ldr	r3, [pc, #508]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a7e      	ldr	r2, [pc, #504]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80035b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b7c      	ldr	r3, [pc, #496]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a7b      	ldr	r2, [pc, #492]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80035bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e01d      	b.n	8003600 <HAL_RCC_OscConfig+0xd8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0xc0>
 80035ce:	4b76      	ldr	r3, [pc, #472]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a75      	ldr	r2, [pc, #468]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80035d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b73      	ldr	r3, [pc, #460]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a72      	ldr	r2, [pc, #456]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e00b      	b.n	8003600 <HAL_RCC_OscConfig+0xd8>
 80035e8:	4b6f      	ldr	r3, [pc, #444]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80035ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	4b6c      	ldr	r3, [pc, #432]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6b      	ldr	r2, [pc, #428]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80035fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fe fe62 	bl	80022d0 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003610:	f7fe fe5e 	bl	80022d0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e21f      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0xe8>
 800362e:	e014      	b.n	800365a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fe fe4e 	bl	80022d0 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe fe4a 	bl	80022d0 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e20b      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364a:	4b57      	ldr	r3, [pc, #348]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x110>
 8003656:	e000      	b.n	800365a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d069      	beq.n	800373a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003666:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003672:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b08      	cmp	r3, #8
 800367c:	d11c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x190>
 800367e:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d116      	bne.n	80036b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_RCC_OscConfig+0x17a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e1df      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a2:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	493d      	ldr	r1, [pc, #244]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	e040      	b.n	800373a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d023      	beq.n	8003708 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c0:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a38      	ldr	r2, [pc, #224]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fe00 	bl	80022d0 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d4:	f7fe fdfc 	bl	80022d0 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e1bd      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e6:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f2:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4929      	ldr	r1, [pc, #164]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
 8003706:	e018      	b.n	800373a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003708:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a26      	ldr	r2, [pc, #152]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 800370e:	f023 0301 	bic.w	r3, r3, #1
 8003712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fe fddc 	bl	80022d0 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371c:	f7fe fdd8 	bl	80022d0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e199      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d038      	beq.n	80037b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d019      	beq.n	8003782 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374e:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003752:	4a15      	ldr	r2, [pc, #84]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fe fdb9 	bl	80022d0 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003762:	f7fe fdb5 	bl	80022d0 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e176      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x23a>
 8003780:	e01a      	b.n	80037b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003786:	4a08      	ldr	r2, [pc, #32]	; (80037a8 <HAL_RCC_OscConfig+0x280>)
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378e:	f7fe fd9f 	bl	80022d0 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003794:	e00a      	b.n	80037ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003796:	f7fe fd9b 	bl	80022d0 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d903      	bls.n	80037ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e15c      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
 80037a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ac:	4b91      	ldr	r3, [pc, #580]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 80037ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ee      	bne.n	8003796 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80a4 	beq.w	800390e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b8b      	ldr	r3, [pc, #556]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	4b88      	ldr	r3, [pc, #544]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	4a87      	ldr	r2, [pc, #540]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037dc:	6413      	str	r3, [r2, #64]	; 0x40
 80037de:	4b85      	ldr	r3, [pc, #532]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ee:	4b82      	ldr	r3, [pc, #520]	; (80039f8 <HAL_RCC_OscConfig+0x4d0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d118      	bne.n	800382c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037fa:	4b7f      	ldr	r3, [pc, #508]	; (80039f8 <HAL_RCC_OscConfig+0x4d0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7e      	ldr	r2, [pc, #504]	; (80039f8 <HAL_RCC_OscConfig+0x4d0>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003806:	f7fe fd63 	bl	80022d0 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fe fd5f 	bl	80022d0 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b64      	cmp	r3, #100	; 0x64
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e120      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003820:	4b75      	ldr	r3, [pc, #468]	; (80039f8 <HAL_RCC_OscConfig+0x4d0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x31a>
 8003834:	4b6f      	ldr	r3, [pc, #444]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a6e      	ldr	r2, [pc, #440]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
 8003840:	e02d      	b.n	800389e <HAL_RCC_OscConfig+0x376>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x33c>
 800384a:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	4a69      	ldr	r2, [pc, #420]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	6713      	str	r3, [r2, #112]	; 0x70
 8003856:	4b67      	ldr	r3, [pc, #412]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	4a66      	ldr	r2, [pc, #408]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
 8003862:	e01c      	b.n	800389e <HAL_RCC_OscConfig+0x376>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b05      	cmp	r3, #5
 800386a:	d10c      	bne.n	8003886 <HAL_RCC_OscConfig+0x35e>
 800386c:	4b61      	ldr	r3, [pc, #388]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	4a60      	ldr	r2, [pc, #384]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	6713      	str	r3, [r2, #112]	; 0x70
 8003878:	4b5e      	ldr	r3, [pc, #376]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	4a5d      	ldr	r2, [pc, #372]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6713      	str	r3, [r2, #112]	; 0x70
 8003884:	e00b      	b.n	800389e <HAL_RCC_OscConfig+0x376>
 8003886:	4b5b      	ldr	r3, [pc, #364]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	4a5a      	ldr	r2, [pc, #360]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	6713      	str	r3, [r2, #112]	; 0x70
 8003892:	4b58      	ldr	r3, [pc, #352]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	4a57      	ldr	r2, [pc, #348]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d015      	beq.n	80038d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a6:	f7fe fd13 	bl	80022d0 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fe fd0f 	bl	80022d0 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0ce      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c4:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ee      	beq.n	80038ae <HAL_RCC_OscConfig+0x386>
 80038d0:	e014      	b.n	80038fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d2:	f7fe fcfd 	bl	80022d0 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d8:	e00a      	b.n	80038f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fe fcf9 	bl	80022d0 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e0b8      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f0:	4b40      	ldr	r3, [pc, #256]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ee      	bne.n	80038da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d105      	bne.n	800390e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003902:	4b3c      	ldr	r3, [pc, #240]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4a3b      	ldr	r2, [pc, #236]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 80a4 	beq.w	8003a60 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003918:	4b36      	ldr	r3, [pc, #216]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b08      	cmp	r3, #8
 8003922:	d06b      	beq.n	80039fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d149      	bne.n	80039c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392c:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a30      	ldr	r2, [pc, #192]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fcca 	bl	80022d0 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003940:	f7fe fcc6 	bl	80022d0 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e087      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	3b01      	subs	r3, #1
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	4313      	orrs	r3, r2
 8003984:	4a1b      	ldr	r2, [pc, #108]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003986:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800398a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a18      	ldr	r2, [pc, #96]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fe fc9a 	bl	80022d0 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fe fc96 	bl	80022d0 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e057      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x478>
 80039be:	e04f      	b.n	8003a60 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 80039c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fe fc80 	bl	80022d0 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d4:	f7fe fc7c 	bl	80022d0 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e03d      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e6:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4ac>
 80039f2:	e035      	b.n	8003a60 <HAL_RCC_OscConfig+0x538>
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80039fc:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <HAL_RCC_OscConfig+0x544>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d028      	beq.n	8003a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d121      	bne.n	8003a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d11a      	bne.n	8003a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d111      	bne.n	8003a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	3b01      	subs	r3, #1
 8003a46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800

08003a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0d0      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a88:	4b6a      	ldr	r3, [pc, #424]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d910      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b67      	ldr	r3, [pc, #412]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 020f 	bic.w	r2, r3, #15
 8003a9e:	4965      	ldr	r1, [pc, #404]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0b8      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad0:	4b59      	ldr	r3, [pc, #356]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a58      	ldr	r2, [pc, #352]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ada:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003af2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b50      	ldr	r3, [pc, #320]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	494d      	ldr	r1, [pc, #308]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d040      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d115      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b32:	4b41      	ldr	r3, [pc, #260]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e073      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b42:	4b3d      	ldr	r3, [pc, #244]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e06b      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b52:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f023 0203 	bic.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4936      	ldr	r1, [pc, #216]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b64:	f7fe fbb4 	bl	80022d0 <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7fe fbb0 	bl	80022d0 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e053      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 020c 	and.w	r2, r3, #12
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d1eb      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b94:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d210      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 020f 	bic.w	r2, r3, #15
 8003baa:	4922      	ldr	r1, [pc, #136]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e032      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd0:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4916      	ldr	r1, [pc, #88]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	490e      	ldr	r1, [pc, #56]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c02:	f000 f885 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8003c06:	4602      	mov	r2, r0
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	490a      	ldr	r1, [pc, #40]	; (8003c3c <HAL_RCC_ClockConfig+0x1cc>)
 8003c14:	5ccb      	ldrb	r3, [r1, r3]
 8003c16:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <HAL_RCC_ClockConfig+0x1d0>)
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <HAL_RCC_ClockConfig+0x1d4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fb10 	bl	8002248 <HAL_InitTick>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023c00 	.word	0x40023c00
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	08007d08 	.word	0x08007d08
 8003c40:	20000008 	.word	0x20000008
 8003c44:	2000000c 	.word	0x2000000c

08003c48 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08c      	sub	sp, #48	; 0x30
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d127      	bne.n	8003caa <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003c5a:	4b2a      	ldr	r3, [pc, #168]	; (8003d04 <HAL_RCC_MCOConfig+0xbc>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	4a29      	ldr	r2, [pc, #164]	; (8003d04 <HAL_RCC_MCOConfig+0xbc>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6313      	str	r3, [r2, #48]	; 0x30
 8003c66:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <HAL_RCC_MCOConfig+0xbc>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	61bb      	str	r3, [r7, #24]
 8003c70:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003c84:	2300      	movs	r3, #0
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003c88:	f107 031c 	add.w	r3, r7, #28
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	481e      	ldr	r0, [pc, #120]	; (8003d08 <HAL_RCC_MCOConfig+0xc0>)
 8003c90:	f7ff f90c 	bl	8002eac <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_RCC_MCOConfig+0xbc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	4918      	ldr	r1, [pc, #96]	; (8003d04 <HAL_RCC_MCOConfig+0xbc>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8003ca8:	e027      	b.n	8003cfa <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8003caa:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <HAL_RCC_MCOConfig+0xbc>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <HAL_RCC_MCOConfig+0xbc>)
 8003cb0:	f043 0304 	orr.w	r3, r3, #4
 8003cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb6:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <HAL_RCC_MCOConfig+0xbc>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003cd8:	f107 031c 	add.w	r3, r7, #28
 8003cdc:	4619      	mov	r1, r3
 8003cde:	480b      	ldr	r0, [pc, #44]	; (8003d0c <HAL_RCC_MCOConfig+0xc4>)
 8003ce0:	f7ff f8e4 	bl	8002eac <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <HAL_RCC_MCOConfig+0xbc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	00d9      	lsls	r1, r3, #3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	4903      	ldr	r1, [pc, #12]	; (8003d04 <HAL_RCC_MCOConfig+0xbc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
}
 8003cfa:	bf00      	nop
 8003cfc:	3730      	adds	r7, #48	; 0x30
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40020000 	.word	0x40020000
 8003d0c:	40020800 	.word	0x40020800

08003d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	607b      	str	r3, [r7, #4]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	2300      	movs	r3, #0
 8003d22:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d28:	4b67      	ldr	r3, [pc, #412]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d00d      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x40>
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	f200 80bd 	bhi.w	8003eb4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x34>
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d42:	e0b7      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b61      	ldr	r3, [pc, #388]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d46:	60bb      	str	r3, [r7, #8]
      break;
 8003d48:	e0b7      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d4a:	4b60      	ldr	r3, [pc, #384]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d4c:	60bb      	str	r3, [r7, #8]
      break;
 8003d4e:	e0b4      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d50:	4b5d      	ldr	r3, [pc, #372]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d58:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d5a:	4b5b      	ldr	r3, [pc, #364]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d04d      	beq.n	8003e02 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d66:	4b58      	ldr	r3, [pc, #352]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	099b      	lsrs	r3, r3, #6
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	ea02 0800 	and.w	r8, r2, r0
 8003d7e:	ea03 0901 	and.w	r9, r3, r1
 8003d82:	4640      	mov	r0, r8
 8003d84:	4649      	mov	r1, r9
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	014b      	lsls	r3, r1, #5
 8003d90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d94:	0142      	lsls	r2, r0, #5
 8003d96:	4610      	mov	r0, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	ebb0 0008 	subs.w	r0, r0, r8
 8003d9e:	eb61 0109 	sbc.w	r1, r1, r9
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	018b      	lsls	r3, r1, #6
 8003dac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003db0:	0182      	lsls	r2, r0, #6
 8003db2:	1a12      	subs	r2, r2, r0
 8003db4:	eb63 0301 	sbc.w	r3, r3, r1
 8003db8:	f04f 0000 	mov.w	r0, #0
 8003dbc:	f04f 0100 	mov.w	r1, #0
 8003dc0:	00d9      	lsls	r1, r3, #3
 8003dc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dc6:	00d0      	lsls	r0, r2, #3
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	eb12 0208 	adds.w	r2, r2, r8
 8003dd0:	eb43 0309 	adc.w	r3, r3, r9
 8003dd4:	f04f 0000 	mov.w	r0, #0
 8003dd8:	f04f 0100 	mov.w	r1, #0
 8003ddc:	0299      	lsls	r1, r3, #10
 8003dde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003de2:	0290      	lsls	r0, r2, #10
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	f7fc fea6 	bl	8000b44 <__aeabi_uldivmod>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e04a      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e02:	4b31      	ldr	r3, [pc, #196]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	099b      	lsrs	r3, r3, #6
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	ea02 0400 	and.w	r4, r2, r0
 8003e1a:	ea03 0501 	and.w	r5, r3, r1
 8003e1e:	4620      	mov	r0, r4
 8003e20:	4629      	mov	r1, r5
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	014b      	lsls	r3, r1, #5
 8003e2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e30:	0142      	lsls	r2, r0, #5
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	1b00      	subs	r0, r0, r4
 8003e38:	eb61 0105 	sbc.w	r1, r1, r5
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	018b      	lsls	r3, r1, #6
 8003e46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e4a:	0182      	lsls	r2, r0, #6
 8003e4c:	1a12      	subs	r2, r2, r0
 8003e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	00d9      	lsls	r1, r3, #3
 8003e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e60:	00d0      	lsls	r0, r2, #3
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	1912      	adds	r2, r2, r4
 8003e68:	eb45 0303 	adc.w	r3, r5, r3
 8003e6c:	f04f 0000 	mov.w	r0, #0
 8003e70:	f04f 0100 	mov.w	r1, #0
 8003e74:	0299      	lsls	r1, r3, #10
 8003e76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e7a:	0290      	lsls	r0, r2, #10
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	f7fc fe5a 	bl	8000b44 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4613      	mov	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	60bb      	str	r3, [r7, #8]
      break;
 8003eb2:	e002      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003eb6:	60bb      	str	r3, [r7, #8]
      break;
 8003eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eba:	68bb      	ldr	r3, [r7, #8]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	00f42400 	.word	0x00f42400

08003ed0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20000008 	.word	0x20000008

08003ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eec:	f7ff fff0 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0a9b      	lsrs	r3, r3, #10
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4903      	ldr	r1, [pc, #12]	; (8003f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	08007d18 	.word	0x08007d18

08003f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f14:	f7ff ffdc 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	0b5b      	lsrs	r3, r3, #13
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4903      	ldr	r1, [pc, #12]	; (8003f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40023800 	.word	0x40023800
 8003f34:	08007d18 	.word	0x08007d18

08003f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d012      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f60:	4b69      	ldr	r3, [pc, #420]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	4a68      	ldr	r2, [pc, #416]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f6a:	6093      	str	r3, [r2, #8]
 8003f6c:	4b66      	ldr	r3, [pc, #408]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	4964      	ldr	r1, [pc, #400]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f82:	2301      	movs	r3, #1
 8003f84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d017      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f92:	4b5d      	ldr	r3, [pc, #372]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	4959      	ldr	r1, [pc, #356]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d017      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fce:	4b4e      	ldr	r3, [pc, #312]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	494a      	ldr	r1, [pc, #296]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800400a:	2301      	movs	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 808b 	beq.w	8004132 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800401c:	4b3a      	ldr	r3, [pc, #232]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	4a39      	ldr	r2, [pc, #228]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004026:	6413      	str	r3, [r2, #64]	; 0x40
 8004028:	4b37      	ldr	r3, [pc, #220]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004034:	4b35      	ldr	r3, [pc, #212]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a34      	ldr	r2, [pc, #208]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800403a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004040:	f7fe f946 	bl	80022d0 <HAL_GetTick>
 8004044:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004046:	e008      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004048:	f7fe f942 	bl	80022d0 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e357      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800405a:	4b2c      	ldr	r3, [pc, #176]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004066:	4b28      	ldr	r3, [pc, #160]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d035      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	429a      	cmp	r2, r3
 8004082:	d02e      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004084:	4b20      	ldr	r3, [pc, #128]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800408e:	4b1e      	ldr	r3, [pc, #120]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	4a1d      	ldr	r2, [pc, #116]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004098:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800409a:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a1a      	ldr	r2, [pc, #104]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040a6:	4a18      	ldr	r2, [pc, #96]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040ac:	4b16      	ldr	r3, [pc, #88]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d114      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7fe f90a 	bl	80022d0 <HAL_GetTick>
 80040bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040be:	e00a      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c0:	f7fe f906 	bl	80022d0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e319      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0ee      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ee:	d111      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040fc:	4b04      	ldr	r3, [pc, #16]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040fe:	400b      	ands	r3, r1
 8004100:	4901      	ldr	r1, [pc, #4]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
 8004106:	e00b      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004108:	40023800 	.word	0x40023800
 800410c:	40007000 	.word	0x40007000
 8004110:	0ffffcff 	.word	0x0ffffcff
 8004114:	4bb1      	ldr	r3, [pc, #708]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4ab0      	ldr	r2, [pc, #704]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800411a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800411e:	6093      	str	r3, [r2, #8]
 8004120:	4bae      	ldr	r3, [pc, #696]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004122:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412c:	49ab      	ldr	r1, [pc, #684]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b00      	cmp	r3, #0
 800413c:	d010      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800413e:	4ba7      	ldr	r3, [pc, #668]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004144:	4aa5      	ldr	r2, [pc, #660]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800414a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800414e:	4ba3      	ldr	r3, [pc, #652]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004150:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	49a0      	ldr	r1, [pc, #640]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800416c:	4b9b      	ldr	r3, [pc, #620]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800417a:	4998      	ldr	r1, [pc, #608]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800418e:	4b93      	ldr	r3, [pc, #588]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800419c:	498f      	ldr	r1, [pc, #572]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041b0:	4b8a      	ldr	r3, [pc, #552]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041be:	4987      	ldr	r1, [pc, #540]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041d2:	4b82      	ldr	r3, [pc, #520]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	497e      	ldr	r1, [pc, #504]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041f4:	4b79      	ldr	r3, [pc, #484]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	4976      	ldr	r1, [pc, #472]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004216:	4b71      	ldr	r3, [pc, #452]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	f023 020c 	bic.w	r2, r3, #12
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004224:	496d      	ldr	r1, [pc, #436]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004238:	4b68      	ldr	r3, [pc, #416]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004246:	4965      	ldr	r1, [pc, #404]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800425a:	4b60      	ldr	r3, [pc, #384]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004268:	495c      	ldr	r1, [pc, #368]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800427c:	4b57      	ldr	r3, [pc, #348]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	4954      	ldr	r1, [pc, #336]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800429e:	4b4f      	ldr	r3, [pc, #316]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	494b      	ldr	r1, [pc, #300]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80042c0:	4b46      	ldr	r3, [pc, #280]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ce:	4943      	ldr	r1, [pc, #268]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042e2:	4b3e      	ldr	r3, [pc, #248]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f0:	493a      	ldr	r1, [pc, #232]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004304:	4b35      	ldr	r3, [pc, #212]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004312:	4932      	ldr	r1, [pc, #200]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d011      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004326:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004334:	4929      	ldr	r1, [pc, #164]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004344:	d101      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004346:	2301      	movs	r3, #1
 8004348:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004356:	2301      	movs	r3, #1
 8004358:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004374:	4919      	ldr	r1, [pc, #100]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00b      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004398:	4910      	ldr	r1, [pc, #64]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d006      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80d9 	beq.w	8004566 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043b4:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a08      	ldr	r2, [pc, #32]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c0:	f7fd ff86 	bl	80022d0 <HAL_GetTick>
 80043c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043c6:	e00b      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043c8:	f7fd ff82 	bl	80022d0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d904      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e197      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80043da:	bf00      	nop
 80043dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043e0:	4b6c      	ldr	r3, [pc, #432]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ed      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d021      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d11d      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004400:	4b64      	ldr	r3, [pc, #400]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004406:	0c1b      	lsrs	r3, r3, #16
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800440e:	4b61      	ldr	r3, [pc, #388]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004414:	0e1b      	lsrs	r3, r3, #24
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	019a      	lsls	r2, r3, #6
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	431a      	orrs	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	061b      	lsls	r3, r3, #24
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	071b      	lsls	r3, r3, #28
 8004434:	4957      	ldr	r1, [pc, #348]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d004      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800445a:	2b00      	cmp	r3, #0
 800445c:	d02e      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004466:	d129      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004468:	4b4a      	ldr	r3, [pc, #296]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446e:	0c1b      	lsrs	r3, r3, #16
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004476:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447c:	0f1b      	lsrs	r3, r3, #28
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	019a      	lsls	r2, r3, #6
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	041b      	lsls	r3, r3, #16
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	061b      	lsls	r3, r3, #24
 8004496:	431a      	orrs	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	071b      	lsls	r3, r3, #28
 800449c:	493d      	ldr	r1, [pc, #244]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044a4:	4b3b      	ldr	r3, [pc, #236]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044aa:	f023 021f 	bic.w	r2, r3, #31
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	3b01      	subs	r3, #1
 80044b4:	4937      	ldr	r1, [pc, #220]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01d      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044c8:	4b32      	ldr	r3, [pc, #200]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ce:	0e1b      	lsrs	r3, r3, #24
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044d6:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044dc:	0f1b      	lsrs	r3, r3, #28
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	019a      	lsls	r2, r3, #6
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	041b      	lsls	r3, r3, #16
 80044f0:	431a      	orrs	r2, r3
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	431a      	orrs	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	071b      	lsls	r3, r3, #28
 80044fc:	4925      	ldr	r1, [pc, #148]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d011      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	019a      	lsls	r2, r3, #6
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	041b      	lsls	r3, r3, #16
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	061b      	lsls	r3, r3, #24
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	071b      	lsls	r3, r3, #28
 800452c:	4919      	ldr	r1, [pc, #100]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004534:	4b17      	ldr	r3, [pc, #92]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a16      	ldr	r2, [pc, #88]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800453a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800453e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004540:	f7fd fec6 	bl	80022d0 <HAL_GetTick>
 8004544:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004548:	f7fd fec2 	bl	80022d0 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e0d7      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800455a:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b01      	cmp	r3, #1
 800456a:	f040 80cd 	bne.w	8004708 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a08      	ldr	r2, [pc, #32]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457a:	f7fd fea9 	bl	80022d0 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004580:	e00a      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004582:	f7fd fea5 	bl	80022d0 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b64      	cmp	r3, #100	; 0x64
 800458e:	d903      	bls.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e0ba      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004594:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004598:	4b5e      	ldr	r3, [pc, #376]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045a4:	d0ed      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d02e      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d12a      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045dc:	4b4d      	ldr	r3, [pc, #308]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	0f1b      	lsrs	r3, r3, #28
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	019a      	lsls	r2, r3, #6
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	041b      	lsls	r3, r3, #16
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	071b      	lsls	r3, r3, #28
 8004602:	4944      	ldr	r1, [pc, #272]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800460a:	4b42      	ldr	r3, [pc, #264]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800460c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004610:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	493d      	ldr	r1, [pc, #244]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d022      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004638:	d11d      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800463a:	4b36      	ldr	r3, [pc, #216]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	0e1b      	lsrs	r3, r3, #24
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004648:	4b32      	ldr	r3, [pc, #200]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	0f1b      	lsrs	r3, r3, #28
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	019a      	lsls	r2, r3, #6
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	431a      	orrs	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	061b      	lsls	r3, r3, #24
 8004668:	431a      	orrs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	071b      	lsls	r3, r3, #28
 800466e:	4929      	ldr	r1, [pc, #164]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d028      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004682:	4b24      	ldr	r3, [pc, #144]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	0e1b      	lsrs	r3, r3, #24
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	019a      	lsls	r2, r3, #6
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	431a      	orrs	r2, r3
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	061b      	lsls	r3, r3, #24
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	071b      	lsls	r3, r3, #28
 80046b6:	4917      	ldr	r1, [pc, #92]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	4911      	ldr	r1, [pc, #68]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046d4:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0e      	ldr	r2, [pc, #56]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e0:	f7fd fdf6 	bl	80022d0 <HAL_GetTick>
 80046e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046e8:	f7fd fdf2 	bl	80022d0 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	; 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e007      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004706:	d1ef      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800

08004718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e049      	b.n	80047be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fd fb4a 	bl	8001dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 fd7a 	bl	8005250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d001      	beq.n	80047e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e04c      	b.n	800487a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a26      	ldr	r2, [pc, #152]	; (8004888 <HAL_TIM_Base_Start+0xc0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fa:	d01d      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a22      	ldr	r2, [pc, #136]	; (800488c <HAL_TIM_Base_Start+0xc4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a21      	ldr	r2, [pc, #132]	; (8004890 <HAL_TIM_Base_Start+0xc8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1f      	ldr	r2, [pc, #124]	; (8004894 <HAL_TIM_Base_Start+0xcc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1e      	ldr	r2, [pc, #120]	; (8004898 <HAL_TIM_Base_Start+0xd0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1c      	ldr	r2, [pc, #112]	; (800489c <HAL_TIM_Base_Start+0xd4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <HAL_TIM_Base_Start+0xd8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d115      	bne.n	8004864 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <HAL_TIM_Base_Start+0xdc>)
 8004840:	4013      	ands	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b06      	cmp	r3, #6
 8004848:	d015      	beq.n	8004876 <HAL_TIM_Base_Start+0xae>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004850:	d011      	beq.n	8004876 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004862:	e008      	b.n	8004876 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e000      	b.n	8004878 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004876:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40010400 	.word	0x40010400
 800489c:	40014000 	.word	0x40014000
 80048a0:	40001800 	.word	0x40001800
 80048a4:	00010007 	.word	0x00010007

080048a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e049      	b.n	800494e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f841 	bl	8004956 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f000 fcb2 	bl	8005250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d104      	bne.n	8004986 <HAL_TIM_IC_Start_IT+0x1a>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004982:	b2db      	uxtb	r3, r3
 8004984:	e023      	b.n	80049ce <HAL_TIM_IC_Start_IT+0x62>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b04      	cmp	r3, #4
 800498a:	d104      	bne.n	8004996 <HAL_TIM_IC_Start_IT+0x2a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004992:	b2db      	uxtb	r3, r3
 8004994:	e01b      	b.n	80049ce <HAL_TIM_IC_Start_IT+0x62>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d104      	bne.n	80049a6 <HAL_TIM_IC_Start_IT+0x3a>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	e013      	b.n	80049ce <HAL_TIM_IC_Start_IT+0x62>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	d104      	bne.n	80049b6 <HAL_TIM_IC_Start_IT+0x4a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	e00b      	b.n	80049ce <HAL_TIM_IC_Start_IT+0x62>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_IC_Start_IT+0x5a>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	e003      	b.n	80049ce <HAL_TIM_IC_Start_IT+0x62>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <HAL_TIM_IC_Start_IT+0x74>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e013      	b.n	8004a08 <HAL_TIM_IC_Start_IT+0x9c>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d104      	bne.n	80049f0 <HAL_TIM_IC_Start_IT+0x84>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e00b      	b.n	8004a08 <HAL_TIM_IC_Start_IT+0x9c>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d104      	bne.n	8004a00 <HAL_TIM_IC_Start_IT+0x94>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e003      	b.n	8004a08 <HAL_TIM_IC_Start_IT+0x9c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d102      	bne.n	8004a16 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a10:	7bbb      	ldrb	r3, [r7, #14]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d001      	beq.n	8004a1a <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e0dd      	b.n	8004bd6 <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d104      	bne.n	8004a2a <HAL_TIM_IC_Start_IT+0xbe>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a28:	e023      	b.n	8004a72 <HAL_TIM_IC_Start_IT+0x106>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d104      	bne.n	8004a3a <HAL_TIM_IC_Start_IT+0xce>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a38:	e01b      	b.n	8004a72 <HAL_TIM_IC_Start_IT+0x106>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d104      	bne.n	8004a4a <HAL_TIM_IC_Start_IT+0xde>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a48:	e013      	b.n	8004a72 <HAL_TIM_IC_Start_IT+0x106>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	d104      	bne.n	8004a5a <HAL_TIM_IC_Start_IT+0xee>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a58:	e00b      	b.n	8004a72 <HAL_TIM_IC_Start_IT+0x106>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d104      	bne.n	8004a6a <HAL_TIM_IC_Start_IT+0xfe>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a68:	e003      	b.n	8004a72 <HAL_TIM_IC_Start_IT+0x106>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_IC_Start_IT+0x116>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a80:	e013      	b.n	8004aaa <HAL_TIM_IC_Start_IT+0x13e>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_IC_Start_IT+0x126>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a90:	e00b      	b.n	8004aaa <HAL_TIM_IC_Start_IT+0x13e>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_IC_Start_IT+0x136>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa0:	e003      	b.n	8004aaa <HAL_TIM_IC_Start_IT+0x13e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b0c      	cmp	r3, #12
 8004aae:	d841      	bhi.n	8004b34 <HAL_TIM_IC_Start_IT+0x1c8>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <HAL_TIM_IC_Start_IT+0x14c>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004aed 	.word	0x08004aed
 8004abc:	08004b35 	.word	0x08004b35
 8004ac0:	08004b35 	.word	0x08004b35
 8004ac4:	08004b35 	.word	0x08004b35
 8004ac8:	08004aff 	.word	0x08004aff
 8004acc:	08004b35 	.word	0x08004b35
 8004ad0:	08004b35 	.word	0x08004b35
 8004ad4:	08004b35 	.word	0x08004b35
 8004ad8:	08004b11 	.word	0x08004b11
 8004adc:	08004b35 	.word	0x08004b35
 8004ae0:	08004b35 	.word	0x08004b35
 8004ae4:	08004b35 	.word	0x08004b35
 8004ae8:	08004b23 	.word	0x08004b23
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0202 	orr.w	r2, r2, #2
 8004afa:	60da      	str	r2, [r3, #12]
      break;
 8004afc:	e01b      	b.n	8004b36 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0204 	orr.w	r2, r2, #4
 8004b0c:	60da      	str	r2, [r3, #12]
      break;
 8004b0e:	e012      	b.n	8004b36 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0208 	orr.w	r2, r2, #8
 8004b1e:	60da      	str	r2, [r3, #12]
      break;
 8004b20:	e009      	b.n	8004b36 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0210 	orr.w	r2, r2, #16
 8004b30:	60da      	str	r2, [r3, #12]
      break;
 8004b32:	e000      	b.n	8004b36 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8004b34:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	6839      	ldr	r1, [r7, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fe7a 	bl	8005838 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a25      	ldr	r2, [pc, #148]	; (8004be0 <HAL_TIM_IC_Start_IT+0x274>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d022      	beq.n	8004b94 <HAL_TIM_IC_Start_IT+0x228>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d01d      	beq.n	8004b94 <HAL_TIM_IC_Start_IT+0x228>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a21      	ldr	r2, [pc, #132]	; (8004be4 <HAL_TIM_IC_Start_IT+0x278>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <HAL_TIM_IC_Start_IT+0x228>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a20      	ldr	r2, [pc, #128]	; (8004be8 <HAL_TIM_IC_Start_IT+0x27c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <HAL_TIM_IC_Start_IT+0x228>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <HAL_TIM_IC_Start_IT+0x280>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <HAL_TIM_IC_Start_IT+0x228>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	; (8004bf0 <HAL_TIM_IC_Start_IT+0x284>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <HAL_TIM_IC_Start_IT+0x228>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1b      	ldr	r2, [pc, #108]	; (8004bf4 <HAL_TIM_IC_Start_IT+0x288>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_TIM_IC_Start_IT+0x228>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1a      	ldr	r2, [pc, #104]	; (8004bf8 <HAL_TIM_IC_Start_IT+0x28c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d115      	bne.n	8004bc0 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	4b18      	ldr	r3, [pc, #96]	; (8004bfc <HAL_TIM_IC_Start_IT+0x290>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b06      	cmp	r3, #6
 8004ba4:	d015      	beq.n	8004bd2 <HAL_TIM_IC_Start_IT+0x266>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bac:	d011      	beq.n	8004bd2 <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbe:	e008      	b.n	8004bd2 <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e000      	b.n	8004bd4 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40010000 	.word	0x40010000
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40000800 	.word	0x40000800
 8004bec:	40000c00 	.word	0x40000c00
 8004bf0:	40010400 	.word	0x40010400
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40001800 	.word	0x40001800
 8004bfc:	00010007 	.word	0x00010007

08004c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d122      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d11b      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0202 	mvn.w	r2, #2
 8004c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fc f914 	bl	8000e70 <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fae2 	bl	8005214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fae9 	bl	8005228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d122      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d11b      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0204 	mvn.w	r2, #4
 8004c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc f8ea 	bl	8000e70 <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fab8 	bl	8005214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fabf 	bl	8005228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d122      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d11b      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0208 	mvn.w	r2, #8
 8004cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2204      	movs	r2, #4
 8004cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fc f8c0 	bl	8000e70 <HAL_TIM_IC_CaptureCallback>
 8004cf0:	e005      	b.n	8004cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fa8e 	bl	8005214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fa95 	bl	8005228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b10      	cmp	r3, #16
 8004d10:	d122      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d11b      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0210 	mvn.w	r2, #16
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fc f896 	bl	8000e70 <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fa64 	bl	8005214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fa6b 	bl	8005228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d10e      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d107      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0201 	mvn.w	r2, #1
 8004d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fa3e 	bl	8005200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8e:	2b80      	cmp	r3, #128	; 0x80
 8004d90:	d10e      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9c:	2b80      	cmp	r3, #128	; 0x80
 8004d9e:	d107      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fe02 	bl	80059b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dbe:	d10e      	bne.n	8004dde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dca:	2b80      	cmp	r3, #128	; 0x80
 8004dcc:	d107      	bne.n	8004dde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fdf5 	bl	80059c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d10e      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	d107      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fa19 	bl	800523c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d10e      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d107      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0220 	mvn.w	r2, #32
 8004e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fdb5 	bl	80059a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e082      	b.n	8004f5e <HAL_TIM_IC_ConfigChannel+0x120>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d11b      	bne.n	8004e9e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6819      	ldr	r1, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f000 fb1b 	bl	80054b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699a      	ldr	r2, [r3, #24]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 020c 	bic.w	r2, r2, #12
 8004e88:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6999      	ldr	r1, [r3, #24]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	619a      	str	r2, [r3, #24]
 8004e9c:	e05a      	b.n	8004f54 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d11c      	bne.n	8004ede <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	6819      	ldr	r1, [r3, #0]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f000 fb9f 	bl	80055f6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ec6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6999      	ldr	r1, [r3, #24]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	021a      	lsls	r2, r3, #8
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	619a      	str	r2, [r3, #24]
 8004edc:	e03a      	b.n	8004f54 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d11b      	bne.n	8004f1c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	6819      	ldr	r1, [r3, #0]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f000 fbec 	bl	80056d0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69da      	ldr	r2, [r3, #28]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 020c 	bic.w	r2, r2, #12
 8004f06:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69d9      	ldr	r1, [r3, #28]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	61da      	str	r2, [r3, #28]
 8004f1a:	e01b      	b.n	8004f54 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f000 fc0c 	bl	8005748 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69da      	ldr	r2, [r3, #28]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f3e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69d9      	ldr	r1, [r3, #28]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	021a      	lsls	r2, r3, #8
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_TIM_ConfigClockSource+0x18>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e0b3      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x180>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4b55      	ldr	r3, [pc, #340]	; (80050f0 <HAL_TIM_ConfigClockSource+0x188>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fa6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb8:	d03e      	beq.n	8005038 <HAL_TIM_ConfigClockSource+0xd0>
 8004fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fbe:	f200 8087 	bhi.w	80050d0 <HAL_TIM_ConfigClockSource+0x168>
 8004fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc6:	f000 8085 	beq.w	80050d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fce:	d87f      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x168>
 8004fd0:	2b70      	cmp	r3, #112	; 0x70
 8004fd2:	d01a      	beq.n	800500a <HAL_TIM_ConfigClockSource+0xa2>
 8004fd4:	2b70      	cmp	r3, #112	; 0x70
 8004fd6:	d87b      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x168>
 8004fd8:	2b60      	cmp	r3, #96	; 0x60
 8004fda:	d050      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x116>
 8004fdc:	2b60      	cmp	r3, #96	; 0x60
 8004fde:	d877      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x168>
 8004fe0:	2b50      	cmp	r3, #80	; 0x50
 8004fe2:	d03c      	beq.n	800505e <HAL_TIM_ConfigClockSource+0xf6>
 8004fe4:	2b50      	cmp	r3, #80	; 0x50
 8004fe6:	d873      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x168>
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	d058      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x136>
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d86f      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x168>
 8004ff0:	2b30      	cmp	r3, #48	; 0x30
 8004ff2:	d064      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x156>
 8004ff4:	2b30      	cmp	r3, #48	; 0x30
 8004ff6:	d86b      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x168>
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d060      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x156>
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d867      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x168>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d05c      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x156>
 8005004:	2b10      	cmp	r3, #16
 8005006:	d05a      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005008:	e062      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6899      	ldr	r1, [r3, #8]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f000 fbed 	bl	80057f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800502c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	609a      	str	r2, [r3, #8]
      break;
 8005036:	e04e      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	6899      	ldr	r1, [r3, #8]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f000 fbd6 	bl	80057f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800505a:	609a      	str	r2, [r3, #8]
      break;
 800505c:	e03b      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6859      	ldr	r1, [r3, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	461a      	mov	r2, r3
 800506c:	f000 fa94 	bl	8005598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2150      	movs	r1, #80	; 0x50
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fba3 	bl	80057c2 <TIM_ITRx_SetConfig>
      break;
 800507c:	e02b      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	461a      	mov	r2, r3
 800508c:	f000 faf0 	bl	8005670 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2160      	movs	r1, #96	; 0x60
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fb93 	bl	80057c2 <TIM_ITRx_SetConfig>
      break;
 800509c:	e01b      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 fa74 	bl	8005598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2140      	movs	r1, #64	; 0x40
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fb83 	bl	80057c2 <TIM_ITRx_SetConfig>
      break;
 80050bc:	e00b      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f000 fb7a 	bl	80057c2 <TIM_ITRx_SetConfig>
        break;
 80050ce:	e002      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80050d0:	bf00      	nop
 80050d2:	e000      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80050d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	fffeff88 	.word	0xfffeff88

080050f4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005108:	2302      	movs	r3, #2
 800510a:	e031      	b.n	8005170 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f936 	bl	8005390 <TIM_SlaveTimer_SetConfig>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e018      	b.n	8005170 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800514c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800515c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b0c      	cmp	r3, #12
 800518a:	d831      	bhi.n	80051f0 <HAL_TIM_ReadCapturedValue+0x78>
 800518c:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <HAL_TIM_ReadCapturedValue+0x1c>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	080051c9 	.word	0x080051c9
 8005198:	080051f1 	.word	0x080051f1
 800519c:	080051f1 	.word	0x080051f1
 80051a0:	080051f1 	.word	0x080051f1
 80051a4:	080051d3 	.word	0x080051d3
 80051a8:	080051f1 	.word	0x080051f1
 80051ac:	080051f1 	.word	0x080051f1
 80051b0:	080051f1 	.word	0x080051f1
 80051b4:	080051dd 	.word	0x080051dd
 80051b8:	080051f1 	.word	0x080051f1
 80051bc:	080051f1 	.word	0x080051f1
 80051c0:	080051f1 	.word	0x080051f1
 80051c4:	080051e7 	.word	0x080051e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ce:	60fb      	str	r3, [r7, #12]

      break;
 80051d0:	e00f      	b.n	80051f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	60fb      	str	r3, [r7, #12]

      break;
 80051da:	e00a      	b.n	80051f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e2:	60fb      	str	r3, [r7, #12]

      break;
 80051e4:	e005      	b.n	80051f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	60fb      	str	r3, [r7, #12]

      break;
 80051ee:	e000      	b.n	80051f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80051f0:	bf00      	nop
  }

  return tmpreg;
 80051f2:	68fb      	ldr	r3, [r7, #12]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a40      	ldr	r2, [pc, #256]	; (8005364 <TIM_Base_SetConfig+0x114>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526e:	d00f      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a3d      	ldr	r2, [pc, #244]	; (8005368 <TIM_Base_SetConfig+0x118>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00b      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a3c      	ldr	r2, [pc, #240]	; (800536c <TIM_Base_SetConfig+0x11c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d007      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a3b      	ldr	r2, [pc, #236]	; (8005370 <TIM_Base_SetConfig+0x120>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a3a      	ldr	r2, [pc, #232]	; (8005374 <TIM_Base_SetConfig+0x124>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d108      	bne.n	80052a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a2f      	ldr	r2, [pc, #188]	; (8005364 <TIM_Base_SetConfig+0x114>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d02b      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b0:	d027      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a2c      	ldr	r2, [pc, #176]	; (8005368 <TIM_Base_SetConfig+0x118>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d023      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a2b      	ldr	r2, [pc, #172]	; (800536c <TIM_Base_SetConfig+0x11c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01f      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <TIM_Base_SetConfig+0x120>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d01b      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a29      	ldr	r2, [pc, #164]	; (8005374 <TIM_Base_SetConfig+0x124>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d017      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a28      	ldr	r2, [pc, #160]	; (8005378 <TIM_Base_SetConfig+0x128>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d013      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a27      	ldr	r2, [pc, #156]	; (800537c <TIM_Base_SetConfig+0x12c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00f      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a26      	ldr	r2, [pc, #152]	; (8005380 <TIM_Base_SetConfig+0x130>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00b      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a25      	ldr	r2, [pc, #148]	; (8005384 <TIM_Base_SetConfig+0x134>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d007      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a24      	ldr	r2, [pc, #144]	; (8005388 <TIM_Base_SetConfig+0x138>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d003      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a23      	ldr	r2, [pc, #140]	; (800538c <TIM_Base_SetConfig+0x13c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d108      	bne.n	8005314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <TIM_Base_SetConfig+0x114>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_Base_SetConfig+0xf8>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a0c      	ldr	r2, [pc, #48]	; (8005374 <TIM_Base_SetConfig+0x124>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d103      	bne.n	8005350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	615a      	str	r2, [r3, #20]
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40010000 	.word	0x40010000
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40000c00 	.word	0x40000c00
 8005374:	40010400 	.word	0x40010400
 8005378:	40014000 	.word	0x40014000
 800537c:	40014400 	.word	0x40014400
 8005380:	40014800 	.word	0x40014800
 8005384:	40001800 	.word	0x40001800
 8005388:	40001c00 	.word	0x40001c00
 800538c:	40002000 	.word	0x40002000

08005390 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4b3d      	ldr	r3, [pc, #244]	; (80054ac <TIM_SlaveTimer_SetConfig+0x11c>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b70      	cmp	r3, #112	; 0x70
 80053d4:	d01a      	beq.n	800540c <TIM_SlaveTimer_SetConfig+0x7c>
 80053d6:	2b70      	cmp	r3, #112	; 0x70
 80053d8:	d860      	bhi.n	800549c <TIM_SlaveTimer_SetConfig+0x10c>
 80053da:	2b60      	cmp	r3, #96	; 0x60
 80053dc:	d054      	beq.n	8005488 <TIM_SlaveTimer_SetConfig+0xf8>
 80053de:	2b60      	cmp	r3, #96	; 0x60
 80053e0:	d85c      	bhi.n	800549c <TIM_SlaveTimer_SetConfig+0x10c>
 80053e2:	2b50      	cmp	r3, #80	; 0x50
 80053e4:	d046      	beq.n	8005474 <TIM_SlaveTimer_SetConfig+0xe4>
 80053e6:	2b50      	cmp	r3, #80	; 0x50
 80053e8:	d858      	bhi.n	800549c <TIM_SlaveTimer_SetConfig+0x10c>
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d019      	beq.n	8005422 <TIM_SlaveTimer_SetConfig+0x92>
 80053ee:	2b40      	cmp	r3, #64	; 0x40
 80053f0:	d854      	bhi.n	800549c <TIM_SlaveTimer_SetConfig+0x10c>
 80053f2:	2b30      	cmp	r3, #48	; 0x30
 80053f4:	d054      	beq.n	80054a0 <TIM_SlaveTimer_SetConfig+0x110>
 80053f6:	2b30      	cmp	r3, #48	; 0x30
 80053f8:	d850      	bhi.n	800549c <TIM_SlaveTimer_SetConfig+0x10c>
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d050      	beq.n	80054a0 <TIM_SlaveTimer_SetConfig+0x110>
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d84c      	bhi.n	800549c <TIM_SlaveTimer_SetConfig+0x10c>
 8005402:	2b00      	cmp	r3, #0
 8005404:	d04c      	beq.n	80054a0 <TIM_SlaveTimer_SetConfig+0x110>
 8005406:	2b10      	cmp	r3, #16
 8005408:	d04a      	beq.n	80054a0 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800540a:	e047      	b.n	800549c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68d9      	ldr	r1, [r3, #12]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f000 f9ec 	bl	80057f8 <TIM_ETR_SetConfig>
      break;
 8005420:	e03f      	b.n	80054a2 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b05      	cmp	r3, #5
 8005428:	d101      	bne.n	800542e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e03a      	b.n	80054a4 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6a1a      	ldr	r2, [r3, #32]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0201 	bic.w	r2, r2, #1
 8005444:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005454:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	621a      	str	r2, [r3, #32]
      break;
 8005472:	e016      	b.n	80054a2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	6899      	ldr	r1, [r3, #8]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	461a      	mov	r2, r3
 8005482:	f000 f889 	bl	8005598 <TIM_TI1_ConfigInputStage>
      break;
 8005486:	e00c      	b.n	80054a2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	6899      	ldr	r1, [r3, #8]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	461a      	mov	r2, r3
 8005496:	f000 f8eb 	bl	8005670 <TIM_TI2_ConfigInputStage>
      break;
 800549a:	e002      	b.n	80054a2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800549c:	bf00      	nop
 800549e:	e000      	b.n	80054a2 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80054a0:	bf00      	nop
  }
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	fffefff8 	.word	0xfffefff8

080054b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4a28      	ldr	r2, [pc, #160]	; (800557c <TIM_TI1_SetConfig+0xcc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d01b      	beq.n	8005516 <TIM_TI1_SetConfig+0x66>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e4:	d017      	beq.n	8005516 <TIM_TI1_SetConfig+0x66>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4a25      	ldr	r2, [pc, #148]	; (8005580 <TIM_TI1_SetConfig+0xd0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <TIM_TI1_SetConfig+0x66>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4a24      	ldr	r2, [pc, #144]	; (8005584 <TIM_TI1_SetConfig+0xd4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00f      	beq.n	8005516 <TIM_TI1_SetConfig+0x66>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4a23      	ldr	r2, [pc, #140]	; (8005588 <TIM_TI1_SetConfig+0xd8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00b      	beq.n	8005516 <TIM_TI1_SetConfig+0x66>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4a22      	ldr	r2, [pc, #136]	; (800558c <TIM_TI1_SetConfig+0xdc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d007      	beq.n	8005516 <TIM_TI1_SetConfig+0x66>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4a21      	ldr	r2, [pc, #132]	; (8005590 <TIM_TI1_SetConfig+0xe0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d003      	beq.n	8005516 <TIM_TI1_SetConfig+0x66>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4a20      	ldr	r2, [pc, #128]	; (8005594 <TIM_TI1_SetConfig+0xe4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d101      	bne.n	800551a <TIM_TI1_SetConfig+0x6a>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <TIM_TI1_SetConfig+0x6c>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e003      	b.n	800553a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	b2db      	uxtb	r3, r3
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f023 030a 	bic.w	r3, r3, #10
 8005554:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f003 030a 	and.w	r3, r3, #10
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40010000 	.word	0x40010000
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800
 8005588:	40000c00 	.word	0x40000c00
 800558c:	40010400 	.word	0x40010400
 8005590:	40014000 	.word	0x40014000
 8005594:	40001800 	.word	0x40001800

08005598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f023 0201 	bic.w	r2, r3, #1
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f023 030a 	bic.w	r3, r3, #10
 80055d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	621a      	str	r2, [r3, #32]
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b087      	sub	sp, #28
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	f023 0210 	bic.w	r2, r3, #16
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005622:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	021b      	lsls	r3, r3, #8
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	031b      	lsls	r3, r3, #12
 800563a:	b29b      	uxth	r3, r3
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005648:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	621a      	str	r2, [r3, #32]
}
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f023 0210 	bic.w	r2, r3, #16
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800569a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	031b      	lsls	r3, r3, #12
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f023 0303 	bic.w	r3, r3, #3
 80056fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800570c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	b2db      	uxtb	r3, r3
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005720:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	621a      	str	r2, [r3, #32]
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005774:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005786:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	031b      	lsls	r3, r3, #12
 800578c:	b29b      	uxth	r3, r3
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800579a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	031b      	lsls	r3, r3, #12
 80057a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b085      	sub	sp, #20
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	f043 0307 	orr.w	r3, r3, #7
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	609a      	str	r2, [r3, #8]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005812:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	021a      	lsls	r2, r3, #8
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	431a      	orrs	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4313      	orrs	r3, r2
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	609a      	str	r2, [r3, #8]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	2201      	movs	r2, #1
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1a      	ldr	r2, [r3, #32]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	43db      	mvns	r3, r3
 800585a:	401a      	ands	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1a      	ldr	r2, [r3, #32]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	fa01 f303 	lsl.w	r3, r1, r3
 8005870:	431a      	orrs	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	621a      	str	r2, [r3, #32]
}
 8005876:	bf00      	nop
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
	...

08005884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005898:	2302      	movs	r3, #2
 800589a:	e06d      	b.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a30      	ldr	r2, [pc, #192]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d004      	beq.n	80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2f      	ldr	r2, [pc, #188]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d108      	bne.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a20      	ldr	r2, [pc, #128]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d022      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590e:	d01d      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1d      	ldr	r2, [pc, #116]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d018      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1c      	ldr	r2, [pc, #112]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1a      	ldr	r2, [pc, #104]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00e      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a15      	ldr	r2, [pc, #84]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d009      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a16      	ldr	r2, [pc, #88]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d004      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a15      	ldr	r2, [pc, #84]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d10c      	bne.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005952:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	4313      	orrs	r3, r2
 800595c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	40010000 	.word	0x40010000
 8005988:	40010400 	.word	0x40010400
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40014000 	.word	0x40014000
 800599c:	40001800 	.word	0x40001800

080059a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e040      	b.n	8005a70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fc fa98 	bl	8001f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2224      	movs	r2, #36	; 0x24
 8005a08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0201 	bic.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fa38 	bl	8005e90 <UART_SetConfig>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e022      	b.n	8005a70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fc8e 	bl	8006354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fd15 	bl	8006498 <UART_CheckIdleState>
 8005a6e:	4603      	mov	r3, r0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d113      	bne.n	8005ad0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00e      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d009      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 81b9 	beq.w	8005e38 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	4798      	blx	r3
      }
      return;
 8005ace:	e1b3      	b.n	8005e38 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80e3 	beq.w	8005c9e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d105      	bne.n	8005aee <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4ba5      	ldr	r3, [pc, #660]	; (8005d7c <HAL_UART_IRQHandler+0x304>)
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 80d8 	beq.w	8005c9e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d010      	beq.n	8005b1a <HAL_UART_IRQHandler+0xa2>
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00b      	beq.n	8005b1a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2201      	movs	r2, #1
 8005b08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b10:	f043 0201 	orr.w	r2, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d010      	beq.n	8005b46 <HAL_UART_IRQHandler+0xce>
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00b      	beq.n	8005b46 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2202      	movs	r2, #2
 8005b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b3c:	f043 0204 	orr.w	r2, r3, #4
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d010      	beq.n	8005b72 <HAL_UART_IRQHandler+0xfa>
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00b      	beq.n	8005b72 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2204      	movs	r2, #4
 8005b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b68:	f043 0202 	orr.w	r2, r3, #2
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d015      	beq.n	8005ba8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d104      	bne.n	8005b90 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00b      	beq.n	8005ba8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2208      	movs	r2, #8
 8005b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b9e:	f043 0208 	orr.w	r2, r3, #8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d011      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x15e>
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00c      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bcc:	f043 0220 	orr.w	r2, r3, #32
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 812d 	beq.w	8005e3c <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00c      	beq.n	8005c06 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c0c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d004      	beq.n	8005c26 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d031      	beq.n	8005c8a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fce5 	bl	80065f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d123      	bne.n	8005c82 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c48:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d013      	beq.n	8005c7a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c56:	4a4a      	ldr	r2, [pc, #296]	; (8005d80 <HAL_UART_IRQHandler+0x308>)
 8005c58:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fc fec6 	bl	80029f0 <HAL_DMA_Abort_IT>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d017      	beq.n	8005c9a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005c74:	4610      	mov	r0, r2
 8005c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c78:	e00f      	b.n	8005c9a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f8f2 	bl	8005e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c80:	e00b      	b.n	8005c9a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f8ee 	bl	8005e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c88:	e007      	b.n	8005c9a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f8ea 	bl	8005e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005c98:	e0d0      	b.n	8005e3c <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9a:	bf00      	nop
    return;
 8005c9c:	e0ce      	b.n	8005e3c <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	f040 80a7 	bne.w	8005df6 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 80a1 	beq.w	8005df6 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	f003 0310 	and.w	r3, r3, #16
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 809b 	beq.w	8005df6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2210      	movs	r2, #16
 8005cc6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd2:	2b40      	cmp	r3, #64	; 0x40
 8005cd4:	d156      	bne.n	8005d84 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005ce0:	893b      	ldrh	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 80ac 	beq.w	8005e40 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cee:	893a      	ldrh	r2, [r7, #8]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	f080 80a5 	bcs.w	8005e40 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	893a      	ldrh	r2, [r7, #8]
 8005cfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d08:	d02a      	beq.n	8005d60 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d18:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0201 	bic.w	r2, r2, #1
 8005d28:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d38:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0210 	bic.w	r2, r2, #16
 8005d54:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fc fdd8 	bl	8002910 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f87f 	bl	8005e78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d7a:	e061      	b.n	8005e40 <HAL_UART_IRQHandler+0x3c8>
 8005d7c:	04000120 	.word	0x04000120
 8005d80:	08006655 	.word	0x08006655
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d050      	beq.n	8005e44 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8005da2:	897b      	ldrh	r3, [r7, #10]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d04d      	beq.n	8005e44 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005db6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0210 	bic.w	r2, r2, #16
 8005de8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dea:	897b      	ldrh	r3, [r7, #10]
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f842 	bl	8005e78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005df4:	e026      	b.n	8005e44 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00d      	beq.n	8005e1c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d01a      	beq.n	8005e48 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	4798      	blx	r3
    }
    return;
 8005e1a:	e015      	b.n	8005e48 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d011      	beq.n	8005e4a <HAL_UART_IRQHandler+0x3d2>
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00c      	beq.n	8005e4a <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fc25 	bl	8006680 <UART_EndTransmit_IT>
    return;
 8005e36:	e008      	b.n	8005e4a <HAL_UART_IRQHandler+0x3d2>
      return;
 8005e38:	bf00      	nop
 8005e3a:	e006      	b.n	8005e4a <HAL_UART_IRQHandler+0x3d2>
    return;
 8005e3c:	bf00      	nop
 8005e3e:	e004      	b.n	8005e4a <HAL_UART_IRQHandler+0x3d2>
      return;
 8005e40:	bf00      	nop
 8005e42:	e002      	b.n	8005e4a <HAL_UART_IRQHandler+0x3d2>
      return;
 8005e44:	bf00      	nop
 8005e46:	e000      	b.n	8005e4a <HAL_UART_IRQHandler+0x3d2>
    return;
 8005e48:	bf00      	nop
  }

}
 8005e4a:	3720      	adds	r7, #32
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	4ba7      	ldr	r3, [pc, #668]	; (8006158 <UART_SetConfig+0x2c8>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	6979      	ldr	r1, [r7, #20]
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a95      	ldr	r2, [pc, #596]	; (800615c <UART_SetConfig+0x2cc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d120      	bne.n	8005f4e <UART_SetConfig+0xbe>
 8005f0c:	4b94      	ldr	r3, [pc, #592]	; (8006160 <UART_SetConfig+0x2d0>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d816      	bhi.n	8005f48 <UART_SetConfig+0xb8>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <UART_SetConfig+0x90>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f31 	.word	0x08005f31
 8005f24:	08005f3d 	.word	0x08005f3d
 8005f28:	08005f37 	.word	0x08005f37
 8005f2c:	08005f43 	.word	0x08005f43
 8005f30:	2301      	movs	r3, #1
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e14f      	b.n	80061d6 <UART_SetConfig+0x346>
 8005f36:	2302      	movs	r3, #2
 8005f38:	77fb      	strb	r3, [r7, #31]
 8005f3a:	e14c      	b.n	80061d6 <UART_SetConfig+0x346>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	77fb      	strb	r3, [r7, #31]
 8005f40:	e149      	b.n	80061d6 <UART_SetConfig+0x346>
 8005f42:	2308      	movs	r3, #8
 8005f44:	77fb      	strb	r3, [r7, #31]
 8005f46:	e146      	b.n	80061d6 <UART_SetConfig+0x346>
 8005f48:	2310      	movs	r3, #16
 8005f4a:	77fb      	strb	r3, [r7, #31]
 8005f4c:	e143      	b.n	80061d6 <UART_SetConfig+0x346>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a84      	ldr	r2, [pc, #528]	; (8006164 <UART_SetConfig+0x2d4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d132      	bne.n	8005fbe <UART_SetConfig+0x12e>
 8005f58:	4b81      	ldr	r3, [pc, #516]	; (8006160 <UART_SetConfig+0x2d0>)
 8005f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5e:	f003 030c 	and.w	r3, r3, #12
 8005f62:	2b0c      	cmp	r3, #12
 8005f64:	d828      	bhi.n	8005fb8 <UART_SetConfig+0x128>
 8005f66:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <UART_SetConfig+0xdc>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08005fa1 	.word	0x08005fa1
 8005f70:	08005fb9 	.word	0x08005fb9
 8005f74:	08005fb9 	.word	0x08005fb9
 8005f78:	08005fb9 	.word	0x08005fb9
 8005f7c:	08005fad 	.word	0x08005fad
 8005f80:	08005fb9 	.word	0x08005fb9
 8005f84:	08005fb9 	.word	0x08005fb9
 8005f88:	08005fb9 	.word	0x08005fb9
 8005f8c:	08005fa7 	.word	0x08005fa7
 8005f90:	08005fb9 	.word	0x08005fb9
 8005f94:	08005fb9 	.word	0x08005fb9
 8005f98:	08005fb9 	.word	0x08005fb9
 8005f9c:	08005fb3 	.word	0x08005fb3
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	77fb      	strb	r3, [r7, #31]
 8005fa4:	e117      	b.n	80061d6 <UART_SetConfig+0x346>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	77fb      	strb	r3, [r7, #31]
 8005faa:	e114      	b.n	80061d6 <UART_SetConfig+0x346>
 8005fac:	2304      	movs	r3, #4
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e111      	b.n	80061d6 <UART_SetConfig+0x346>
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e10e      	b.n	80061d6 <UART_SetConfig+0x346>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e10b      	b.n	80061d6 <UART_SetConfig+0x346>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a69      	ldr	r2, [pc, #420]	; (8006168 <UART_SetConfig+0x2d8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d120      	bne.n	800600a <UART_SetConfig+0x17a>
 8005fc8:	4b65      	ldr	r3, [pc, #404]	; (8006160 <UART_SetConfig+0x2d0>)
 8005fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fd2:	2b30      	cmp	r3, #48	; 0x30
 8005fd4:	d013      	beq.n	8005ffe <UART_SetConfig+0x16e>
 8005fd6:	2b30      	cmp	r3, #48	; 0x30
 8005fd8:	d814      	bhi.n	8006004 <UART_SetConfig+0x174>
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d009      	beq.n	8005ff2 <UART_SetConfig+0x162>
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d810      	bhi.n	8006004 <UART_SetConfig+0x174>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <UART_SetConfig+0x15c>
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d006      	beq.n	8005ff8 <UART_SetConfig+0x168>
 8005fea:	e00b      	b.n	8006004 <UART_SetConfig+0x174>
 8005fec:	2300      	movs	r3, #0
 8005fee:	77fb      	strb	r3, [r7, #31]
 8005ff0:	e0f1      	b.n	80061d6 <UART_SetConfig+0x346>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	77fb      	strb	r3, [r7, #31]
 8005ff6:	e0ee      	b.n	80061d6 <UART_SetConfig+0x346>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	77fb      	strb	r3, [r7, #31]
 8005ffc:	e0eb      	b.n	80061d6 <UART_SetConfig+0x346>
 8005ffe:	2308      	movs	r3, #8
 8006000:	77fb      	strb	r3, [r7, #31]
 8006002:	e0e8      	b.n	80061d6 <UART_SetConfig+0x346>
 8006004:	2310      	movs	r3, #16
 8006006:	77fb      	strb	r3, [r7, #31]
 8006008:	e0e5      	b.n	80061d6 <UART_SetConfig+0x346>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a57      	ldr	r2, [pc, #348]	; (800616c <UART_SetConfig+0x2dc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d120      	bne.n	8006056 <UART_SetConfig+0x1c6>
 8006014:	4b52      	ldr	r3, [pc, #328]	; (8006160 <UART_SetConfig+0x2d0>)
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800601e:	2bc0      	cmp	r3, #192	; 0xc0
 8006020:	d013      	beq.n	800604a <UART_SetConfig+0x1ba>
 8006022:	2bc0      	cmp	r3, #192	; 0xc0
 8006024:	d814      	bhi.n	8006050 <UART_SetConfig+0x1c0>
 8006026:	2b80      	cmp	r3, #128	; 0x80
 8006028:	d009      	beq.n	800603e <UART_SetConfig+0x1ae>
 800602a:	2b80      	cmp	r3, #128	; 0x80
 800602c:	d810      	bhi.n	8006050 <UART_SetConfig+0x1c0>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <UART_SetConfig+0x1a8>
 8006032:	2b40      	cmp	r3, #64	; 0x40
 8006034:	d006      	beq.n	8006044 <UART_SetConfig+0x1b4>
 8006036:	e00b      	b.n	8006050 <UART_SetConfig+0x1c0>
 8006038:	2300      	movs	r3, #0
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e0cb      	b.n	80061d6 <UART_SetConfig+0x346>
 800603e:	2302      	movs	r3, #2
 8006040:	77fb      	strb	r3, [r7, #31]
 8006042:	e0c8      	b.n	80061d6 <UART_SetConfig+0x346>
 8006044:	2304      	movs	r3, #4
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e0c5      	b.n	80061d6 <UART_SetConfig+0x346>
 800604a:	2308      	movs	r3, #8
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e0c2      	b.n	80061d6 <UART_SetConfig+0x346>
 8006050:	2310      	movs	r3, #16
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e0bf      	b.n	80061d6 <UART_SetConfig+0x346>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a45      	ldr	r2, [pc, #276]	; (8006170 <UART_SetConfig+0x2e0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d125      	bne.n	80060ac <UART_SetConfig+0x21c>
 8006060:	4b3f      	ldr	r3, [pc, #252]	; (8006160 <UART_SetConfig+0x2d0>)
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800606e:	d017      	beq.n	80060a0 <UART_SetConfig+0x210>
 8006070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006074:	d817      	bhi.n	80060a6 <UART_SetConfig+0x216>
 8006076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607a:	d00b      	beq.n	8006094 <UART_SetConfig+0x204>
 800607c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006080:	d811      	bhi.n	80060a6 <UART_SetConfig+0x216>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <UART_SetConfig+0x1fe>
 8006086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608a:	d006      	beq.n	800609a <UART_SetConfig+0x20a>
 800608c:	e00b      	b.n	80060a6 <UART_SetConfig+0x216>
 800608e:	2300      	movs	r3, #0
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e0a0      	b.n	80061d6 <UART_SetConfig+0x346>
 8006094:	2302      	movs	r3, #2
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e09d      	b.n	80061d6 <UART_SetConfig+0x346>
 800609a:	2304      	movs	r3, #4
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e09a      	b.n	80061d6 <UART_SetConfig+0x346>
 80060a0:	2308      	movs	r3, #8
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e097      	b.n	80061d6 <UART_SetConfig+0x346>
 80060a6:	2310      	movs	r3, #16
 80060a8:	77fb      	strb	r3, [r7, #31]
 80060aa:	e094      	b.n	80061d6 <UART_SetConfig+0x346>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a30      	ldr	r2, [pc, #192]	; (8006174 <UART_SetConfig+0x2e4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d125      	bne.n	8006102 <UART_SetConfig+0x272>
 80060b6:	4b2a      	ldr	r3, [pc, #168]	; (8006160 <UART_SetConfig+0x2d0>)
 80060b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060c4:	d017      	beq.n	80060f6 <UART_SetConfig+0x266>
 80060c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ca:	d817      	bhi.n	80060fc <UART_SetConfig+0x26c>
 80060cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d0:	d00b      	beq.n	80060ea <UART_SetConfig+0x25a>
 80060d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d6:	d811      	bhi.n	80060fc <UART_SetConfig+0x26c>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <UART_SetConfig+0x254>
 80060dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e0:	d006      	beq.n	80060f0 <UART_SetConfig+0x260>
 80060e2:	e00b      	b.n	80060fc <UART_SetConfig+0x26c>
 80060e4:	2301      	movs	r3, #1
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e075      	b.n	80061d6 <UART_SetConfig+0x346>
 80060ea:	2302      	movs	r3, #2
 80060ec:	77fb      	strb	r3, [r7, #31]
 80060ee:	e072      	b.n	80061d6 <UART_SetConfig+0x346>
 80060f0:	2304      	movs	r3, #4
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e06f      	b.n	80061d6 <UART_SetConfig+0x346>
 80060f6:	2308      	movs	r3, #8
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e06c      	b.n	80061d6 <UART_SetConfig+0x346>
 80060fc:	2310      	movs	r3, #16
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e069      	b.n	80061d6 <UART_SetConfig+0x346>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1c      	ldr	r2, [pc, #112]	; (8006178 <UART_SetConfig+0x2e8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d137      	bne.n	800617c <UART_SetConfig+0x2ec>
 800610c:	4b14      	ldr	r3, [pc, #80]	; (8006160 <UART_SetConfig+0x2d0>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006112:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800611a:	d017      	beq.n	800614c <UART_SetConfig+0x2bc>
 800611c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006120:	d817      	bhi.n	8006152 <UART_SetConfig+0x2c2>
 8006122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006126:	d00b      	beq.n	8006140 <UART_SetConfig+0x2b0>
 8006128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800612c:	d811      	bhi.n	8006152 <UART_SetConfig+0x2c2>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <UART_SetConfig+0x2aa>
 8006132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006136:	d006      	beq.n	8006146 <UART_SetConfig+0x2b6>
 8006138:	e00b      	b.n	8006152 <UART_SetConfig+0x2c2>
 800613a:	2300      	movs	r3, #0
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e04a      	b.n	80061d6 <UART_SetConfig+0x346>
 8006140:	2302      	movs	r3, #2
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e047      	b.n	80061d6 <UART_SetConfig+0x346>
 8006146:	2304      	movs	r3, #4
 8006148:	77fb      	strb	r3, [r7, #31]
 800614a:	e044      	b.n	80061d6 <UART_SetConfig+0x346>
 800614c:	2308      	movs	r3, #8
 800614e:	77fb      	strb	r3, [r7, #31]
 8006150:	e041      	b.n	80061d6 <UART_SetConfig+0x346>
 8006152:	2310      	movs	r3, #16
 8006154:	77fb      	strb	r3, [r7, #31]
 8006156:	e03e      	b.n	80061d6 <UART_SetConfig+0x346>
 8006158:	efff69f3 	.word	0xefff69f3
 800615c:	40011000 	.word	0x40011000
 8006160:	40023800 	.word	0x40023800
 8006164:	40004400 	.word	0x40004400
 8006168:	40004800 	.word	0x40004800
 800616c:	40004c00 	.word	0x40004c00
 8006170:	40005000 	.word	0x40005000
 8006174:	40011400 	.word	0x40011400
 8006178:	40007800 	.word	0x40007800
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a71      	ldr	r2, [pc, #452]	; (8006348 <UART_SetConfig+0x4b8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d125      	bne.n	80061d2 <UART_SetConfig+0x342>
 8006186:	4b71      	ldr	r3, [pc, #452]	; (800634c <UART_SetConfig+0x4bc>)
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006190:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006194:	d017      	beq.n	80061c6 <UART_SetConfig+0x336>
 8006196:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800619a:	d817      	bhi.n	80061cc <UART_SetConfig+0x33c>
 800619c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a0:	d00b      	beq.n	80061ba <UART_SetConfig+0x32a>
 80061a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a6:	d811      	bhi.n	80061cc <UART_SetConfig+0x33c>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <UART_SetConfig+0x324>
 80061ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061b0:	d006      	beq.n	80061c0 <UART_SetConfig+0x330>
 80061b2:	e00b      	b.n	80061cc <UART_SetConfig+0x33c>
 80061b4:	2300      	movs	r3, #0
 80061b6:	77fb      	strb	r3, [r7, #31]
 80061b8:	e00d      	b.n	80061d6 <UART_SetConfig+0x346>
 80061ba:	2302      	movs	r3, #2
 80061bc:	77fb      	strb	r3, [r7, #31]
 80061be:	e00a      	b.n	80061d6 <UART_SetConfig+0x346>
 80061c0:	2304      	movs	r3, #4
 80061c2:	77fb      	strb	r3, [r7, #31]
 80061c4:	e007      	b.n	80061d6 <UART_SetConfig+0x346>
 80061c6:	2308      	movs	r3, #8
 80061c8:	77fb      	strb	r3, [r7, #31]
 80061ca:	e004      	b.n	80061d6 <UART_SetConfig+0x346>
 80061cc:	2310      	movs	r3, #16
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e001      	b.n	80061d6 <UART_SetConfig+0x346>
 80061d2:	2310      	movs	r3, #16
 80061d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061de:	d15b      	bne.n	8006298 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80061e0:	7ffb      	ldrb	r3, [r7, #31]
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d827      	bhi.n	8006236 <UART_SetConfig+0x3a6>
 80061e6:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <UART_SetConfig+0x35c>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	08006211 	.word	0x08006211
 80061f0:	08006219 	.word	0x08006219
 80061f4:	08006221 	.word	0x08006221
 80061f8:	08006237 	.word	0x08006237
 80061fc:	08006227 	.word	0x08006227
 8006200:	08006237 	.word	0x08006237
 8006204:	08006237 	.word	0x08006237
 8006208:	08006237 	.word	0x08006237
 800620c:	0800622f 	.word	0x0800622f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006210:	f7fd fe6a 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 8006214:	61b8      	str	r0, [r7, #24]
        break;
 8006216:	e013      	b.n	8006240 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006218:	f7fd fe7a 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 800621c:	61b8      	str	r0, [r7, #24]
        break;
 800621e:	e00f      	b.n	8006240 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006220:	4b4b      	ldr	r3, [pc, #300]	; (8006350 <UART_SetConfig+0x4c0>)
 8006222:	61bb      	str	r3, [r7, #24]
        break;
 8006224:	e00c      	b.n	8006240 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006226:	f7fd fd73 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 800622a:	61b8      	str	r0, [r7, #24]
        break;
 800622c:	e008      	b.n	8006240 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006232:	61bb      	str	r3, [r7, #24]
        break;
 8006234:	e004      	b.n	8006240 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	77bb      	strb	r3, [r7, #30]
        break;
 800623e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d074      	beq.n	8006330 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	005a      	lsls	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	085b      	lsrs	r3, r3, #1
 8006250:	441a      	add	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	fbb2 f3f3 	udiv	r3, r2, r3
 800625a:	b29b      	uxth	r3, r3
 800625c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b0f      	cmp	r3, #15
 8006262:	d916      	bls.n	8006292 <UART_SetConfig+0x402>
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800626a:	d212      	bcs.n	8006292 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	b29b      	uxth	r3, r3
 8006270:	f023 030f 	bic.w	r3, r3, #15
 8006274:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	085b      	lsrs	r3, r3, #1
 800627a:	b29b      	uxth	r3, r3
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	b29a      	uxth	r2, r3
 8006282:	89fb      	ldrh	r3, [r7, #14]
 8006284:	4313      	orrs	r3, r2
 8006286:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	89fa      	ldrh	r2, [r7, #14]
 800628e:	60da      	str	r2, [r3, #12]
 8006290:	e04e      	b.n	8006330 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	77bb      	strb	r3, [r7, #30]
 8006296:	e04b      	b.n	8006330 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006298:	7ffb      	ldrb	r3, [r7, #31]
 800629a:	2b08      	cmp	r3, #8
 800629c:	d827      	bhi.n	80062ee <UART_SetConfig+0x45e>
 800629e:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <UART_SetConfig+0x414>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	080062c9 	.word	0x080062c9
 80062a8:	080062d1 	.word	0x080062d1
 80062ac:	080062d9 	.word	0x080062d9
 80062b0:	080062ef 	.word	0x080062ef
 80062b4:	080062df 	.word	0x080062df
 80062b8:	080062ef 	.word	0x080062ef
 80062bc:	080062ef 	.word	0x080062ef
 80062c0:	080062ef 	.word	0x080062ef
 80062c4:	080062e7 	.word	0x080062e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c8:	f7fd fe0e 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 80062cc:	61b8      	str	r0, [r7, #24]
        break;
 80062ce:	e013      	b.n	80062f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d0:	f7fd fe1e 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 80062d4:	61b8      	str	r0, [r7, #24]
        break;
 80062d6:	e00f      	b.n	80062f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062d8:	4b1d      	ldr	r3, [pc, #116]	; (8006350 <UART_SetConfig+0x4c0>)
 80062da:	61bb      	str	r3, [r7, #24]
        break;
 80062dc:	e00c      	b.n	80062f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062de:	f7fd fd17 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 80062e2:	61b8      	str	r0, [r7, #24]
        break;
 80062e4:	e008      	b.n	80062f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ea:	61bb      	str	r3, [r7, #24]
        break;
 80062ec:	e004      	b.n	80062f8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	77bb      	strb	r3, [r7, #30]
        break;
 80062f6:	bf00      	nop
    }

    if (pclk != 0U)
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d018      	beq.n	8006330 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	085a      	lsrs	r2, r3, #1
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	441a      	add	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006310:	b29b      	uxth	r3, r3
 8006312:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	2b0f      	cmp	r3, #15
 8006318:	d908      	bls.n	800632c <UART_SetConfig+0x49c>
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006320:	d204      	bcs.n	800632c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	60da      	str	r2, [r3, #12]
 800632a:	e001      	b.n	8006330 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800633c:	7fbb      	ldrb	r3, [r7, #30]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40007c00 	.word	0x40007c00
 800634c:	40023800 	.word	0x40023800
 8006350:	00f42400 	.word	0x00f42400

08006354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00a      	beq.n	800637e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01a      	beq.n	800646a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006452:	d10a      	bne.n	800646a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	605a      	str	r2, [r3, #4]
  }
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af02      	add	r7, sp, #8
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064a8:	f7fb ff12 	bl	80022d0 <HAL_GetTick>
 80064ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d10e      	bne.n	80064da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f817 	bl	80064fe <UART_WaitOnFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e00d      	b.n	80064f6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	603b      	str	r3, [r7, #0]
 800650a:	4613      	mov	r3, r2
 800650c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800650e:	e05e      	b.n	80065ce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006516:	d05a      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006518:	f7fb feda 	bl	80022d0 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	429a      	cmp	r2, r3
 8006526:	d302      	bcc.n	800652e <UART_WaitOnFlagUntilTimeout+0x30>
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d11b      	bne.n	8006566 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800653c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0201 	bic.w	r2, r2, #1
 800654c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e043      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	d02c      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800657e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006582:	d124      	bne.n	80065ce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800658c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800659c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0201 	bic.w	r2, r2, #1
 80065ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2220      	movs	r2, #32
 80065be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e00f      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4013      	ands	r3, r2
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	429a      	cmp	r2, r3
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	79fb      	ldrb	r3, [r7, #7]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d091      	beq.n	8006510 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800660c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0201 	bic.w	r2, r2, #1
 800661c:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006622:	2b01      	cmp	r3, #1
 8006624:	d107      	bne.n	8006636 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0210 	bic.w	r2, r2, #16
 8006634:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7ff fbf6 	bl	8005e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006678:	bf00      	nop
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006696:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff fbd3 	bl	8005e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066aa:	bf00      	nop
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066b4:	b084      	sub	sp, #16
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	f107 001c 	add.w	r0, r7, #28
 80066c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d120      	bne.n	800670e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	4b20      	ldr	r3, [pc, #128]	; (8006760 <USB_CoreInit+0xac>)
 80066de:	4013      	ands	r3, r2
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d105      	bne.n	8006702 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa5a 	bl	8006bbc <USB_CoreReset>
 8006708:	4603      	mov	r3, r0
 800670a:	73fb      	strb	r3, [r7, #15]
 800670c:	e010      	b.n	8006730 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fa4e 	bl	8006bbc <USB_CoreReset>
 8006720:	4603      	mov	r3, r0
 8006722:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	2b01      	cmp	r3, #1
 8006734:	d10b      	bne.n	800674e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f043 0206 	orr.w	r2, r3, #6
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f043 0220 	orr.w	r2, r3, #32
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800675a:	b004      	add	sp, #16
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	ffbdffbf 	.word	0xffbdffbf

08006764 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f023 0201 	bic.w	r2, r3, #1
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b082      	sub	sp, #8
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800679e:	78fb      	ldrb	r3, [r7, #3]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d106      	bne.n	80067b2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	60da      	str	r2, [r3, #12]
 80067b0:	e00b      	b.n	80067ca <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80067b2:	78fb      	ldrb	r3, [r7, #3]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60da      	str	r2, [r3, #12]
 80067c4:	e001      	b.n	80067ca <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e003      	b.n	80067d2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80067ca:	2032      	movs	r0, #50	; 0x32
 80067cc:	f7fb fd8c 	bl	80022e8 <HAL_Delay>

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067dc:	b084      	sub	sp, #16
 80067de:	b580      	push	{r7, lr}
 80067e0:	b086      	sub	sp, #24
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	e009      	b.n	8006810 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3340      	adds	r3, #64	; 0x40
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	2200      	movs	r2, #0
 8006808:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	3301      	adds	r3, #1
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b0e      	cmp	r3, #14
 8006814:	d9f2      	bls.n	80067fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d11c      	bne.n	8006856 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800682a:	f043 0302 	orr.w	r3, r3, #2
 800682e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006834:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	e005      	b.n	8006862 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006868:	461a      	mov	r2, r3
 800686a:	2300      	movs	r3, #0
 800686c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006874:	4619      	mov	r1, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687c:	461a      	mov	r2, r3
 800687e:	680b      	ldr	r3, [r1, #0]
 8006880:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	2b01      	cmp	r3, #1
 8006886:	d10c      	bne.n	80068a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d104      	bne.n	8006898 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800688e:	2100      	movs	r1, #0
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f959 	bl	8006b48 <USB_SetDevSpeed>
 8006896:	e018      	b.n	80068ca <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006898:	2101      	movs	r1, #1
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f954 	bl	8006b48 <USB_SetDevSpeed>
 80068a0:	e013      	b.n	80068ca <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d10c      	bne.n	80068c2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d104      	bne.n	80068b8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068ae:	2100      	movs	r1, #0
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f949 	bl	8006b48 <USB_SetDevSpeed>
 80068b6:	e008      	b.n	80068ca <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068b8:	2101      	movs	r1, #1
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f944 	bl	8006b48 <USB_SetDevSpeed>
 80068c0:	e003      	b.n	80068ca <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068c2:	2103      	movs	r1, #3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f93f 	bl	8006b48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068ca:	2110      	movs	r1, #16
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f8f3 	bl	8006ab8 <USB_FlushTxFifo>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f911 	bl	8006b04 <USB_FlushRxFifo>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	461a      	mov	r2, r3
 80068f4:	2300      	movs	r3, #0
 80068f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fe:	461a      	mov	r2, r3
 8006900:	2300      	movs	r3, #0
 8006902:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690a:	461a      	mov	r2, r3
 800690c:	2300      	movs	r3, #0
 800690e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006910:	2300      	movs	r3, #0
 8006912:	613b      	str	r3, [r7, #16]
 8006914:	e043      	b.n	800699e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800692c:	d118      	bne.n	8006960 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006940:	461a      	mov	r2, r3
 8006942:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	e013      	b.n	8006972 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006956:	461a      	mov	r2, r3
 8006958:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	e008      	b.n	8006972 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696c:	461a      	mov	r2, r3
 800696e:	2300      	movs	r3, #0
 8006970:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697e:	461a      	mov	r2, r3
 8006980:	2300      	movs	r3, #0
 8006982:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006990:	461a      	mov	r2, r3
 8006992:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006996:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	3301      	adds	r3, #1
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d3b7      	bcc.n	8006916 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069a6:	2300      	movs	r3, #0
 80069a8:	613b      	str	r3, [r7, #16]
 80069aa:	e043      	b.n	8006a34 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c2:	d118      	bne.n	80069f6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d6:	461a      	mov	r2, r3
 80069d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	e013      	b.n	8006a08 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ec:	461a      	mov	r2, r3
 80069ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	e008      	b.n	8006a08 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a02:	461a      	mov	r2, r3
 8006a04:	2300      	movs	r3, #0
 8006a06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	461a      	mov	r2, r3
 8006a16:	2300      	movs	r3, #0
 8006a18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a26:	461a      	mov	r2, r3
 8006a28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	3301      	adds	r3, #1
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d3b7      	bcc.n	80069ac <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d105      	bne.n	8006a70 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	f043 0210 	orr.w	r2, r3, #16
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699a      	ldr	r2, [r3, #24]
 8006a74:	4b0e      	ldr	r3, [pc, #56]	; (8006ab0 <USB_DevInit+0x2d4>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d005      	beq.n	8006a8e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	f043 0208 	orr.w	r2, r3, #8
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d105      	bne.n	8006aa0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699a      	ldr	r2, [r3, #24]
 8006a98:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <USB_DevInit+0x2d8>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aac:	b004      	add	sp, #16
 8006aae:	4770      	bx	lr
 8006ab0:	803c3800 	.word	0x803c3800
 8006ab4:	40000004 	.word	0x40000004

08006ab8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	019b      	lsls	r3, r3, #6
 8006aca:	f043 0220 	orr.w	r2, r3, #32
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4a09      	ldr	r2, [pc, #36]	; (8006b00 <USB_FlushTxFifo+0x48>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d901      	bls.n	8006ae4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e006      	b.n	8006af2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	d0f0      	beq.n	8006ad2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	00030d40 	.word	0x00030d40

08006b04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2210      	movs	r2, #16
 8006b14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4a09      	ldr	r2, [pc, #36]	; (8006b44 <USB_FlushRxFifo+0x40>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d901      	bls.n	8006b28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e006      	b.n	8006b36 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	f003 0310 	and.w	r3, r3, #16
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	d0f0      	beq.n	8006b16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	00030d40 	.word	0x00030d40

08006b48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b94:	f023 0303 	bic.w	r3, r3, #3
 8006b98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ba8:	f043 0302 	orr.w	r3, r3, #2
 8006bac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4a13      	ldr	r2, [pc, #76]	; (8006c20 <USB_CoreReset+0x64>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d901      	bls.n	8006bda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e01b      	b.n	8006c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	daf2      	bge.n	8006bc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f043 0201 	orr.w	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4a09      	ldr	r2, [pc, #36]	; (8006c20 <USB_CoreReset+0x64>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d901      	bls.n	8006c04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e006      	b.n	8006c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d0f0      	beq.n	8006bf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	00030d40 	.word	0x00030d40

08006c24 <__libc_init_array>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	4d0d      	ldr	r5, [pc, #52]	; (8006c5c <__libc_init_array+0x38>)
 8006c28:	4c0d      	ldr	r4, [pc, #52]	; (8006c60 <__libc_init_array+0x3c>)
 8006c2a:	1b64      	subs	r4, r4, r5
 8006c2c:	10a4      	asrs	r4, r4, #2
 8006c2e:	2600      	movs	r6, #0
 8006c30:	42a6      	cmp	r6, r4
 8006c32:	d109      	bne.n	8006c48 <__libc_init_array+0x24>
 8006c34:	4d0b      	ldr	r5, [pc, #44]	; (8006c64 <__libc_init_array+0x40>)
 8006c36:	4c0c      	ldr	r4, [pc, #48]	; (8006c68 <__libc_init_array+0x44>)
 8006c38:	f001 f858 	bl	8007cec <_init>
 8006c3c:	1b64      	subs	r4, r4, r5
 8006c3e:	10a4      	asrs	r4, r4, #2
 8006c40:	2600      	movs	r6, #0
 8006c42:	42a6      	cmp	r6, r4
 8006c44:	d105      	bne.n	8006c52 <__libc_init_array+0x2e>
 8006c46:	bd70      	pop	{r4, r5, r6, pc}
 8006c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c4c:	4798      	blx	r3
 8006c4e:	3601      	adds	r6, #1
 8006c50:	e7ee      	b.n	8006c30 <__libc_init_array+0xc>
 8006c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c56:	4798      	blx	r3
 8006c58:	3601      	adds	r6, #1
 8006c5a:	e7f2      	b.n	8006c42 <__libc_init_array+0x1e>
 8006c5c:	08007f08 	.word	0x08007f08
 8006c60:	08007f08 	.word	0x08007f08
 8006c64:	08007f08 	.word	0x08007f08
 8006c68:	08007f0c 	.word	0x08007f0c

08006c6c <memset>:
 8006c6c:	4402      	add	r2, r0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d100      	bne.n	8006c76 <memset+0xa>
 8006c74:	4770      	bx	lr
 8006c76:	f803 1b01 	strb.w	r1, [r3], #1
 8006c7a:	e7f9      	b.n	8006c70 <memset+0x4>
 8006c7c:	0000      	movs	r0, r0
	...

08006c80 <sin>:
 8006c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c82:	ec53 2b10 	vmov	r2, r3, d0
 8006c86:	4826      	ldr	r0, [pc, #152]	; (8006d20 <sin+0xa0>)
 8006c88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c8c:	4281      	cmp	r1, r0
 8006c8e:	dc07      	bgt.n	8006ca0 <sin+0x20>
 8006c90:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006d18 <sin+0x98>
 8006c94:	2000      	movs	r0, #0
 8006c96:	f000 fe5b 	bl	8007950 <__kernel_sin>
 8006c9a:	ec51 0b10 	vmov	r0, r1, d0
 8006c9e:	e007      	b.n	8006cb0 <sin+0x30>
 8006ca0:	4820      	ldr	r0, [pc, #128]	; (8006d24 <sin+0xa4>)
 8006ca2:	4281      	cmp	r1, r0
 8006ca4:	dd09      	ble.n	8006cba <sin+0x3a>
 8006ca6:	ee10 0a10 	vmov	r0, s0
 8006caa:	4619      	mov	r1, r3
 8006cac:	f7f9 fab0 	bl	8000210 <__aeabi_dsub>
 8006cb0:	ec41 0b10 	vmov	d0, r0, r1
 8006cb4:	b005      	add	sp, #20
 8006cb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cba:	4668      	mov	r0, sp
 8006cbc:	f000 f834 	bl	8006d28 <__ieee754_rem_pio2>
 8006cc0:	f000 0003 	and.w	r0, r0, #3
 8006cc4:	2801      	cmp	r0, #1
 8006cc6:	d008      	beq.n	8006cda <sin+0x5a>
 8006cc8:	2802      	cmp	r0, #2
 8006cca:	d00d      	beq.n	8006ce8 <sin+0x68>
 8006ccc:	b9d0      	cbnz	r0, 8006d04 <sin+0x84>
 8006cce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cd2:	ed9d 0b00 	vldr	d0, [sp]
 8006cd6:	2001      	movs	r0, #1
 8006cd8:	e7dd      	b.n	8006c96 <sin+0x16>
 8006cda:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cde:	ed9d 0b00 	vldr	d0, [sp]
 8006ce2:	f000 fa2d 	bl	8007140 <__kernel_cos>
 8006ce6:	e7d8      	b.n	8006c9a <sin+0x1a>
 8006ce8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cec:	ed9d 0b00 	vldr	d0, [sp]
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	f000 fe2d 	bl	8007950 <__kernel_sin>
 8006cf6:	ec53 2b10 	vmov	r2, r3, d0
 8006cfa:	ee10 0a10 	vmov	r0, s0
 8006cfe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006d02:	e7d5      	b.n	8006cb0 <sin+0x30>
 8006d04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d08:	ed9d 0b00 	vldr	d0, [sp]
 8006d0c:	f000 fa18 	bl	8007140 <__kernel_cos>
 8006d10:	e7f1      	b.n	8006cf6 <sin+0x76>
 8006d12:	bf00      	nop
 8006d14:	f3af 8000 	nop.w
	...
 8006d20:	3fe921fb 	.word	0x3fe921fb
 8006d24:	7fefffff 	.word	0x7fefffff

08006d28 <__ieee754_rem_pio2>:
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	ed2d 8b02 	vpush	{d8}
 8006d30:	ec55 4b10 	vmov	r4, r5, d0
 8006d34:	4bca      	ldr	r3, [pc, #808]	; (8007060 <__ieee754_rem_pio2+0x338>)
 8006d36:	b08b      	sub	sp, #44	; 0x2c
 8006d38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006d3c:	4598      	cmp	r8, r3
 8006d3e:	4682      	mov	sl, r0
 8006d40:	9502      	str	r5, [sp, #8]
 8006d42:	dc08      	bgt.n	8006d56 <__ieee754_rem_pio2+0x2e>
 8006d44:	2200      	movs	r2, #0
 8006d46:	2300      	movs	r3, #0
 8006d48:	ed80 0b00 	vstr	d0, [r0]
 8006d4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006d50:	f04f 0b00 	mov.w	fp, #0
 8006d54:	e028      	b.n	8006da8 <__ieee754_rem_pio2+0x80>
 8006d56:	4bc3      	ldr	r3, [pc, #780]	; (8007064 <__ieee754_rem_pio2+0x33c>)
 8006d58:	4598      	cmp	r8, r3
 8006d5a:	dc78      	bgt.n	8006e4e <__ieee754_rem_pio2+0x126>
 8006d5c:	9b02      	ldr	r3, [sp, #8]
 8006d5e:	4ec2      	ldr	r6, [pc, #776]	; (8007068 <__ieee754_rem_pio2+0x340>)
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	ee10 0a10 	vmov	r0, s0
 8006d66:	a3b0      	add	r3, pc, #704	; (adr r3, 8007028 <__ieee754_rem_pio2+0x300>)
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	dd39      	ble.n	8006de4 <__ieee754_rem_pio2+0xbc>
 8006d70:	f7f9 fa4e 	bl	8000210 <__aeabi_dsub>
 8006d74:	45b0      	cmp	r8, r6
 8006d76:	4604      	mov	r4, r0
 8006d78:	460d      	mov	r5, r1
 8006d7a:	d01b      	beq.n	8006db4 <__ieee754_rem_pio2+0x8c>
 8006d7c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007030 <__ieee754_rem_pio2+0x308>)
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	f7f9 fa45 	bl	8000210 <__aeabi_dsub>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	e9ca 2300 	strd	r2, r3, [sl]
 8006d8e:	4620      	mov	r0, r4
 8006d90:	4629      	mov	r1, r5
 8006d92:	f7f9 fa3d 	bl	8000210 <__aeabi_dsub>
 8006d96:	a3a6      	add	r3, pc, #664	; (adr r3, 8007030 <__ieee754_rem_pio2+0x308>)
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f7f9 fa38 	bl	8000210 <__aeabi_dsub>
 8006da0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006da4:	f04f 0b01 	mov.w	fp, #1
 8006da8:	4658      	mov	r0, fp
 8006daa:	b00b      	add	sp, #44	; 0x2c
 8006dac:	ecbd 8b02 	vpop	{d8}
 8006db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db4:	a3a0      	add	r3, pc, #640	; (adr r3, 8007038 <__ieee754_rem_pio2+0x310>)
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	f7f9 fa29 	bl	8000210 <__aeabi_dsub>
 8006dbe:	a3a0      	add	r3, pc, #640	; (adr r3, 8007040 <__ieee754_rem_pio2+0x318>)
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	460d      	mov	r5, r1
 8006dc8:	f7f9 fa22 	bl	8000210 <__aeabi_dsub>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	e9ca 2300 	strd	r2, r3, [sl]
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	f7f9 fa1a 	bl	8000210 <__aeabi_dsub>
 8006ddc:	a398      	add	r3, pc, #608	; (adr r3, 8007040 <__ieee754_rem_pio2+0x318>)
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	e7db      	b.n	8006d9c <__ieee754_rem_pio2+0x74>
 8006de4:	f7f9 fa16 	bl	8000214 <__adddf3>
 8006de8:	45b0      	cmp	r8, r6
 8006dea:	4604      	mov	r4, r0
 8006dec:	460d      	mov	r5, r1
 8006dee:	d016      	beq.n	8006e1e <__ieee754_rem_pio2+0xf6>
 8006df0:	a38f      	add	r3, pc, #572	; (adr r3, 8007030 <__ieee754_rem_pio2+0x308>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	f7f9 fa0d 	bl	8000214 <__adddf3>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	e9ca 2300 	strd	r2, r3, [sl]
 8006e02:	4620      	mov	r0, r4
 8006e04:	4629      	mov	r1, r5
 8006e06:	f7f9 fa03 	bl	8000210 <__aeabi_dsub>
 8006e0a:	a389      	add	r3, pc, #548	; (adr r3, 8007030 <__ieee754_rem_pio2+0x308>)
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f7f9 fa00 	bl	8000214 <__adddf3>
 8006e14:	f04f 3bff 	mov.w	fp, #4294967295
 8006e18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006e1c:	e7c4      	b.n	8006da8 <__ieee754_rem_pio2+0x80>
 8006e1e:	a386      	add	r3, pc, #536	; (adr r3, 8007038 <__ieee754_rem_pio2+0x310>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f7f9 f9f6 	bl	8000214 <__adddf3>
 8006e28:	a385      	add	r3, pc, #532	; (adr r3, 8007040 <__ieee754_rem_pio2+0x318>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	4604      	mov	r4, r0
 8006e30:	460d      	mov	r5, r1
 8006e32:	f7f9 f9ef 	bl	8000214 <__adddf3>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	e9ca 2300 	strd	r2, r3, [sl]
 8006e3e:	4620      	mov	r0, r4
 8006e40:	4629      	mov	r1, r5
 8006e42:	f7f9 f9e5 	bl	8000210 <__aeabi_dsub>
 8006e46:	a37e      	add	r3, pc, #504	; (adr r3, 8007040 <__ieee754_rem_pio2+0x318>)
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	e7e0      	b.n	8006e10 <__ieee754_rem_pio2+0xe8>
 8006e4e:	4b87      	ldr	r3, [pc, #540]	; (800706c <__ieee754_rem_pio2+0x344>)
 8006e50:	4598      	cmp	r8, r3
 8006e52:	f300 80d9 	bgt.w	8007008 <__ieee754_rem_pio2+0x2e0>
 8006e56:	f000 fe39 	bl	8007acc <fabs>
 8006e5a:	ec55 4b10 	vmov	r4, r5, d0
 8006e5e:	ee10 0a10 	vmov	r0, s0
 8006e62:	a379      	add	r3, pc, #484	; (adr r3, 8007048 <__ieee754_rem_pio2+0x320>)
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f7f9 fb89 	bl	8000580 <__aeabi_dmul>
 8006e6e:	4b80      	ldr	r3, [pc, #512]	; (8007070 <__ieee754_rem_pio2+0x348>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	f7f9 f9cf 	bl	8000214 <__adddf3>
 8006e76:	f7f9 fe1d 	bl	8000ab4 <__aeabi_d2iz>
 8006e7a:	4683      	mov	fp, r0
 8006e7c:	f7f9 fb16 	bl	80004ac <__aeabi_i2d>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	ec43 2b18 	vmov	d8, r2, r3
 8006e88:	a367      	add	r3, pc, #412	; (adr r3, 8007028 <__ieee754_rem_pio2+0x300>)
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	f7f9 fb77 	bl	8000580 <__aeabi_dmul>
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	4620      	mov	r0, r4
 8006e98:	4629      	mov	r1, r5
 8006e9a:	f7f9 f9b9 	bl	8000210 <__aeabi_dsub>
 8006e9e:	a364      	add	r3, pc, #400	; (adr r3, 8007030 <__ieee754_rem_pio2+0x308>)
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	460f      	mov	r7, r1
 8006ea8:	ec51 0b18 	vmov	r0, r1, d8
 8006eac:	f7f9 fb68 	bl	8000580 <__aeabi_dmul>
 8006eb0:	f1bb 0f1f 	cmp.w	fp, #31
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	460d      	mov	r5, r1
 8006eb8:	dc0d      	bgt.n	8006ed6 <__ieee754_rem_pio2+0x1ae>
 8006eba:	4b6e      	ldr	r3, [pc, #440]	; (8007074 <__ieee754_rem_pio2+0x34c>)
 8006ebc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec4:	4543      	cmp	r3, r8
 8006ec6:	d006      	beq.n	8006ed6 <__ieee754_rem_pio2+0x1ae>
 8006ec8:	4622      	mov	r2, r4
 8006eca:	462b      	mov	r3, r5
 8006ecc:	4630      	mov	r0, r6
 8006ece:	4639      	mov	r1, r7
 8006ed0:	f7f9 f99e 	bl	8000210 <__aeabi_dsub>
 8006ed4:	e00f      	b.n	8006ef6 <__ieee754_rem_pio2+0x1ce>
 8006ed6:	462b      	mov	r3, r5
 8006ed8:	4622      	mov	r2, r4
 8006eda:	4630      	mov	r0, r6
 8006edc:	4639      	mov	r1, r7
 8006ede:	f7f9 f997 	bl	8000210 <__aeabi_dsub>
 8006ee2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006ee6:	9303      	str	r3, [sp, #12]
 8006ee8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006eec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006ef0:	f1b8 0f10 	cmp.w	r8, #16
 8006ef4:	dc02      	bgt.n	8006efc <__ieee754_rem_pio2+0x1d4>
 8006ef6:	e9ca 0100 	strd	r0, r1, [sl]
 8006efa:	e039      	b.n	8006f70 <__ieee754_rem_pio2+0x248>
 8006efc:	a34e      	add	r3, pc, #312	; (adr r3, 8007038 <__ieee754_rem_pio2+0x310>)
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	ec51 0b18 	vmov	r0, r1, d8
 8006f06:	f7f9 fb3b 	bl	8000580 <__aeabi_dmul>
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	460d      	mov	r5, r1
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4630      	mov	r0, r6
 8006f14:	4639      	mov	r1, r7
 8006f16:	f7f9 f97b 	bl	8000210 <__aeabi_dsub>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4680      	mov	r8, r0
 8006f20:	4689      	mov	r9, r1
 8006f22:	4630      	mov	r0, r6
 8006f24:	4639      	mov	r1, r7
 8006f26:	f7f9 f973 	bl	8000210 <__aeabi_dsub>
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	462b      	mov	r3, r5
 8006f2e:	f7f9 f96f 	bl	8000210 <__aeabi_dsub>
 8006f32:	a343      	add	r3, pc, #268	; (adr r3, 8007040 <__ieee754_rem_pio2+0x318>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	4604      	mov	r4, r0
 8006f3a:	460d      	mov	r5, r1
 8006f3c:	ec51 0b18 	vmov	r0, r1, d8
 8006f40:	f7f9 fb1e 	bl	8000580 <__aeabi_dmul>
 8006f44:	4622      	mov	r2, r4
 8006f46:	462b      	mov	r3, r5
 8006f48:	f7f9 f962 	bl	8000210 <__aeabi_dsub>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4604      	mov	r4, r0
 8006f52:	460d      	mov	r5, r1
 8006f54:	4640      	mov	r0, r8
 8006f56:	4649      	mov	r1, r9
 8006f58:	f7f9 f95a 	bl	8000210 <__aeabi_dsub>
 8006f5c:	9a03      	ldr	r2, [sp, #12]
 8006f5e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b31      	cmp	r3, #49	; 0x31
 8006f66:	dc24      	bgt.n	8006fb2 <__ieee754_rem_pio2+0x28a>
 8006f68:	e9ca 0100 	strd	r0, r1, [sl]
 8006f6c:	4646      	mov	r6, r8
 8006f6e:	464f      	mov	r7, r9
 8006f70:	e9da 8900 	ldrd	r8, r9, [sl]
 8006f74:	4630      	mov	r0, r6
 8006f76:	4642      	mov	r2, r8
 8006f78:	464b      	mov	r3, r9
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	f7f9 f948 	bl	8000210 <__aeabi_dsub>
 8006f80:	462b      	mov	r3, r5
 8006f82:	4622      	mov	r2, r4
 8006f84:	f7f9 f944 	bl	8000210 <__aeabi_dsub>
 8006f88:	9b02      	ldr	r3, [sp, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006f90:	f6bf af0a 	bge.w	8006da8 <__ieee754_rem_pio2+0x80>
 8006f94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f98:	f8ca 3004 	str.w	r3, [sl, #4]
 8006f9c:	f8ca 8000 	str.w	r8, [sl]
 8006fa0:	f8ca 0008 	str.w	r0, [sl, #8]
 8006fa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fa8:	f8ca 300c 	str.w	r3, [sl, #12]
 8006fac:	f1cb 0b00 	rsb	fp, fp, #0
 8006fb0:	e6fa      	b.n	8006da8 <__ieee754_rem_pio2+0x80>
 8006fb2:	a327      	add	r3, pc, #156	; (adr r3, 8007050 <__ieee754_rem_pio2+0x328>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	ec51 0b18 	vmov	r0, r1, d8
 8006fbc:	f7f9 fae0 	bl	8000580 <__aeabi_dmul>
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	460d      	mov	r5, r1
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4640      	mov	r0, r8
 8006fca:	4649      	mov	r1, r9
 8006fcc:	f7f9 f920 	bl	8000210 <__aeabi_dsub>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	460f      	mov	r7, r1
 8006fd8:	4640      	mov	r0, r8
 8006fda:	4649      	mov	r1, r9
 8006fdc:	f7f9 f918 	bl	8000210 <__aeabi_dsub>
 8006fe0:	4622      	mov	r2, r4
 8006fe2:	462b      	mov	r3, r5
 8006fe4:	f7f9 f914 	bl	8000210 <__aeabi_dsub>
 8006fe8:	a31b      	add	r3, pc, #108	; (adr r3, 8007058 <__ieee754_rem_pio2+0x330>)
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	4604      	mov	r4, r0
 8006ff0:	460d      	mov	r5, r1
 8006ff2:	ec51 0b18 	vmov	r0, r1, d8
 8006ff6:	f7f9 fac3 	bl	8000580 <__aeabi_dmul>
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	f7f9 f907 	bl	8000210 <__aeabi_dsub>
 8007002:	4604      	mov	r4, r0
 8007004:	460d      	mov	r5, r1
 8007006:	e75f      	b.n	8006ec8 <__ieee754_rem_pio2+0x1a0>
 8007008:	4b1b      	ldr	r3, [pc, #108]	; (8007078 <__ieee754_rem_pio2+0x350>)
 800700a:	4598      	cmp	r8, r3
 800700c:	dd36      	ble.n	800707c <__ieee754_rem_pio2+0x354>
 800700e:	ee10 2a10 	vmov	r2, s0
 8007012:	462b      	mov	r3, r5
 8007014:	4620      	mov	r0, r4
 8007016:	4629      	mov	r1, r5
 8007018:	f7f9 f8fa 	bl	8000210 <__aeabi_dsub>
 800701c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007020:	e9ca 0100 	strd	r0, r1, [sl]
 8007024:	e694      	b.n	8006d50 <__ieee754_rem_pio2+0x28>
 8007026:	bf00      	nop
 8007028:	54400000 	.word	0x54400000
 800702c:	3ff921fb 	.word	0x3ff921fb
 8007030:	1a626331 	.word	0x1a626331
 8007034:	3dd0b461 	.word	0x3dd0b461
 8007038:	1a600000 	.word	0x1a600000
 800703c:	3dd0b461 	.word	0x3dd0b461
 8007040:	2e037073 	.word	0x2e037073
 8007044:	3ba3198a 	.word	0x3ba3198a
 8007048:	6dc9c883 	.word	0x6dc9c883
 800704c:	3fe45f30 	.word	0x3fe45f30
 8007050:	2e000000 	.word	0x2e000000
 8007054:	3ba3198a 	.word	0x3ba3198a
 8007058:	252049c1 	.word	0x252049c1
 800705c:	397b839a 	.word	0x397b839a
 8007060:	3fe921fb 	.word	0x3fe921fb
 8007064:	4002d97b 	.word	0x4002d97b
 8007068:	3ff921fb 	.word	0x3ff921fb
 800706c:	413921fb 	.word	0x413921fb
 8007070:	3fe00000 	.word	0x3fe00000
 8007074:	08007d28 	.word	0x08007d28
 8007078:	7fefffff 	.word	0x7fefffff
 800707c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007080:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007084:	ee10 0a10 	vmov	r0, s0
 8007088:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800708c:	ee10 6a10 	vmov	r6, s0
 8007090:	460f      	mov	r7, r1
 8007092:	f7f9 fd0f 	bl	8000ab4 <__aeabi_d2iz>
 8007096:	f7f9 fa09 	bl	80004ac <__aeabi_i2d>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	4630      	mov	r0, r6
 80070a0:	4639      	mov	r1, r7
 80070a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070a6:	f7f9 f8b3 	bl	8000210 <__aeabi_dsub>
 80070aa:	4b22      	ldr	r3, [pc, #136]	; (8007134 <__ieee754_rem_pio2+0x40c>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	f7f9 fa67 	bl	8000580 <__aeabi_dmul>
 80070b2:	460f      	mov	r7, r1
 80070b4:	4606      	mov	r6, r0
 80070b6:	f7f9 fcfd 	bl	8000ab4 <__aeabi_d2iz>
 80070ba:	f7f9 f9f7 	bl	80004ac <__aeabi_i2d>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4630      	mov	r0, r6
 80070c4:	4639      	mov	r1, r7
 80070c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070ca:	f7f9 f8a1 	bl	8000210 <__aeabi_dsub>
 80070ce:	4b19      	ldr	r3, [pc, #100]	; (8007134 <__ieee754_rem_pio2+0x40c>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	f7f9 fa55 	bl	8000580 <__aeabi_dmul>
 80070d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80070da:	ad04      	add	r5, sp, #16
 80070dc:	f04f 0803 	mov.w	r8, #3
 80070e0:	46a9      	mov	r9, r5
 80070e2:	2600      	movs	r6, #0
 80070e4:	2700      	movs	r7, #0
 80070e6:	4632      	mov	r2, r6
 80070e8:	463b      	mov	r3, r7
 80070ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80070ee:	46c3      	mov	fp, r8
 80070f0:	3d08      	subs	r5, #8
 80070f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80070f6:	f7f9 fcab 	bl	8000a50 <__aeabi_dcmpeq>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d1f3      	bne.n	80070e6 <__ieee754_rem_pio2+0x3be>
 80070fe:	4b0e      	ldr	r3, [pc, #56]	; (8007138 <__ieee754_rem_pio2+0x410>)
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	2302      	movs	r3, #2
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	4622      	mov	r2, r4
 8007108:	465b      	mov	r3, fp
 800710a:	4651      	mov	r1, sl
 800710c:	4648      	mov	r0, r9
 800710e:	f000 f8df 	bl	80072d0 <__kernel_rem_pio2>
 8007112:	9b02      	ldr	r3, [sp, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	4683      	mov	fp, r0
 8007118:	f6bf ae46 	bge.w	8006da8 <__ieee754_rem_pio2+0x80>
 800711c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007120:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007124:	f8ca 3004 	str.w	r3, [sl, #4]
 8007128:	f8da 300c 	ldr.w	r3, [sl, #12]
 800712c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007130:	e73a      	b.n	8006fa8 <__ieee754_rem_pio2+0x280>
 8007132:	bf00      	nop
 8007134:	41700000 	.word	0x41700000
 8007138:	08007da8 	.word	0x08007da8
 800713c:	00000000 	.word	0x00000000

08007140 <__kernel_cos>:
 8007140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	ec57 6b10 	vmov	r6, r7, d0
 8007148:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800714c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007150:	ed8d 1b00 	vstr	d1, [sp]
 8007154:	da07      	bge.n	8007166 <__kernel_cos+0x26>
 8007156:	ee10 0a10 	vmov	r0, s0
 800715a:	4639      	mov	r1, r7
 800715c:	f7f9 fcaa 	bl	8000ab4 <__aeabi_d2iz>
 8007160:	2800      	cmp	r0, #0
 8007162:	f000 8088 	beq.w	8007276 <__kernel_cos+0x136>
 8007166:	4632      	mov	r2, r6
 8007168:	463b      	mov	r3, r7
 800716a:	4630      	mov	r0, r6
 800716c:	4639      	mov	r1, r7
 800716e:	f7f9 fa07 	bl	8000580 <__aeabi_dmul>
 8007172:	4b51      	ldr	r3, [pc, #324]	; (80072b8 <__kernel_cos+0x178>)
 8007174:	2200      	movs	r2, #0
 8007176:	4604      	mov	r4, r0
 8007178:	460d      	mov	r5, r1
 800717a:	f7f9 fa01 	bl	8000580 <__aeabi_dmul>
 800717e:	a340      	add	r3, pc, #256	; (adr r3, 8007280 <__kernel_cos+0x140>)
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	4682      	mov	sl, r0
 8007186:	468b      	mov	fp, r1
 8007188:	4620      	mov	r0, r4
 800718a:	4629      	mov	r1, r5
 800718c:	f7f9 f9f8 	bl	8000580 <__aeabi_dmul>
 8007190:	a33d      	add	r3, pc, #244	; (adr r3, 8007288 <__kernel_cos+0x148>)
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	f7f9 f83d 	bl	8000214 <__adddf3>
 800719a:	4622      	mov	r2, r4
 800719c:	462b      	mov	r3, r5
 800719e:	f7f9 f9ef 	bl	8000580 <__aeabi_dmul>
 80071a2:	a33b      	add	r3, pc, #236	; (adr r3, 8007290 <__kernel_cos+0x150>)
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	f7f9 f832 	bl	8000210 <__aeabi_dsub>
 80071ac:	4622      	mov	r2, r4
 80071ae:	462b      	mov	r3, r5
 80071b0:	f7f9 f9e6 	bl	8000580 <__aeabi_dmul>
 80071b4:	a338      	add	r3, pc, #224	; (adr r3, 8007298 <__kernel_cos+0x158>)
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	f7f9 f82b 	bl	8000214 <__adddf3>
 80071be:	4622      	mov	r2, r4
 80071c0:	462b      	mov	r3, r5
 80071c2:	f7f9 f9dd 	bl	8000580 <__aeabi_dmul>
 80071c6:	a336      	add	r3, pc, #216	; (adr r3, 80072a0 <__kernel_cos+0x160>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f7f9 f820 	bl	8000210 <__aeabi_dsub>
 80071d0:	4622      	mov	r2, r4
 80071d2:	462b      	mov	r3, r5
 80071d4:	f7f9 f9d4 	bl	8000580 <__aeabi_dmul>
 80071d8:	a333      	add	r3, pc, #204	; (adr r3, 80072a8 <__kernel_cos+0x168>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f7f9 f819 	bl	8000214 <__adddf3>
 80071e2:	4622      	mov	r2, r4
 80071e4:	462b      	mov	r3, r5
 80071e6:	f7f9 f9cb 	bl	8000580 <__aeabi_dmul>
 80071ea:	4622      	mov	r2, r4
 80071ec:	462b      	mov	r3, r5
 80071ee:	f7f9 f9c7 	bl	8000580 <__aeabi_dmul>
 80071f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071f6:	4604      	mov	r4, r0
 80071f8:	460d      	mov	r5, r1
 80071fa:	4630      	mov	r0, r6
 80071fc:	4639      	mov	r1, r7
 80071fe:	f7f9 f9bf 	bl	8000580 <__aeabi_dmul>
 8007202:	460b      	mov	r3, r1
 8007204:	4602      	mov	r2, r0
 8007206:	4629      	mov	r1, r5
 8007208:	4620      	mov	r0, r4
 800720a:	f7f9 f801 	bl	8000210 <__aeabi_dsub>
 800720e:	4b2b      	ldr	r3, [pc, #172]	; (80072bc <__kernel_cos+0x17c>)
 8007210:	4598      	cmp	r8, r3
 8007212:	4606      	mov	r6, r0
 8007214:	460f      	mov	r7, r1
 8007216:	dc10      	bgt.n	800723a <__kernel_cos+0xfa>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4650      	mov	r0, sl
 800721e:	4659      	mov	r1, fp
 8007220:	f7f8 fff6 	bl	8000210 <__aeabi_dsub>
 8007224:	460b      	mov	r3, r1
 8007226:	4926      	ldr	r1, [pc, #152]	; (80072c0 <__kernel_cos+0x180>)
 8007228:	4602      	mov	r2, r0
 800722a:	2000      	movs	r0, #0
 800722c:	f7f8 fff0 	bl	8000210 <__aeabi_dsub>
 8007230:	ec41 0b10 	vmov	d0, r0, r1
 8007234:	b003      	add	sp, #12
 8007236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723a:	4b22      	ldr	r3, [pc, #136]	; (80072c4 <__kernel_cos+0x184>)
 800723c:	4920      	ldr	r1, [pc, #128]	; (80072c0 <__kernel_cos+0x180>)
 800723e:	4598      	cmp	r8, r3
 8007240:	bfcc      	ite	gt
 8007242:	4d21      	ldrgt	r5, [pc, #132]	; (80072c8 <__kernel_cos+0x188>)
 8007244:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007248:	2400      	movs	r4, #0
 800724a:	4622      	mov	r2, r4
 800724c:	462b      	mov	r3, r5
 800724e:	2000      	movs	r0, #0
 8007250:	f7f8 ffde 	bl	8000210 <__aeabi_dsub>
 8007254:	4622      	mov	r2, r4
 8007256:	4680      	mov	r8, r0
 8007258:	4689      	mov	r9, r1
 800725a:	462b      	mov	r3, r5
 800725c:	4650      	mov	r0, sl
 800725e:	4659      	mov	r1, fp
 8007260:	f7f8 ffd6 	bl	8000210 <__aeabi_dsub>
 8007264:	4632      	mov	r2, r6
 8007266:	463b      	mov	r3, r7
 8007268:	f7f8 ffd2 	bl	8000210 <__aeabi_dsub>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4640      	mov	r0, r8
 8007272:	4649      	mov	r1, r9
 8007274:	e7da      	b.n	800722c <__kernel_cos+0xec>
 8007276:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80072b0 <__kernel_cos+0x170>
 800727a:	e7db      	b.n	8007234 <__kernel_cos+0xf4>
 800727c:	f3af 8000 	nop.w
 8007280:	be8838d4 	.word	0xbe8838d4
 8007284:	bda8fae9 	.word	0xbda8fae9
 8007288:	bdb4b1c4 	.word	0xbdb4b1c4
 800728c:	3e21ee9e 	.word	0x3e21ee9e
 8007290:	809c52ad 	.word	0x809c52ad
 8007294:	3e927e4f 	.word	0x3e927e4f
 8007298:	19cb1590 	.word	0x19cb1590
 800729c:	3efa01a0 	.word	0x3efa01a0
 80072a0:	16c15177 	.word	0x16c15177
 80072a4:	3f56c16c 	.word	0x3f56c16c
 80072a8:	5555554c 	.word	0x5555554c
 80072ac:	3fa55555 	.word	0x3fa55555
 80072b0:	00000000 	.word	0x00000000
 80072b4:	3ff00000 	.word	0x3ff00000
 80072b8:	3fe00000 	.word	0x3fe00000
 80072bc:	3fd33332 	.word	0x3fd33332
 80072c0:	3ff00000 	.word	0x3ff00000
 80072c4:	3fe90000 	.word	0x3fe90000
 80072c8:	3fd20000 	.word	0x3fd20000
 80072cc:	00000000 	.word	0x00000000

080072d0 <__kernel_rem_pio2>:
 80072d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d4:	ed2d 8b02 	vpush	{d8}
 80072d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80072dc:	f112 0f14 	cmn.w	r2, #20
 80072e0:	9308      	str	r3, [sp, #32]
 80072e2:	9101      	str	r1, [sp, #4]
 80072e4:	4bc6      	ldr	r3, [pc, #792]	; (8007600 <__kernel_rem_pio2+0x330>)
 80072e6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80072e8:	9009      	str	r0, [sp, #36]	; 0x24
 80072ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072ee:	9304      	str	r3, [sp, #16]
 80072f0:	9b08      	ldr	r3, [sp, #32]
 80072f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80072f6:	bfa8      	it	ge
 80072f8:	1ed4      	subge	r4, r2, #3
 80072fa:	9306      	str	r3, [sp, #24]
 80072fc:	bfb2      	itee	lt
 80072fe:	2400      	movlt	r4, #0
 8007300:	2318      	movge	r3, #24
 8007302:	fb94 f4f3 	sdivge	r4, r4, r3
 8007306:	f06f 0317 	mvn.w	r3, #23
 800730a:	fb04 3303 	mla	r3, r4, r3, r3
 800730e:	eb03 0a02 	add.w	sl, r3, r2
 8007312:	9b04      	ldr	r3, [sp, #16]
 8007314:	9a06      	ldr	r2, [sp, #24]
 8007316:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80075f0 <__kernel_rem_pio2+0x320>
 800731a:	eb03 0802 	add.w	r8, r3, r2
 800731e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007320:	1aa7      	subs	r7, r4, r2
 8007322:	ae20      	add	r6, sp, #128	; 0x80
 8007324:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007328:	2500      	movs	r5, #0
 800732a:	4545      	cmp	r5, r8
 800732c:	dd18      	ble.n	8007360 <__kernel_rem_pio2+0x90>
 800732e:	9b08      	ldr	r3, [sp, #32]
 8007330:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007334:	aa20      	add	r2, sp, #128	; 0x80
 8007336:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80075f0 <__kernel_rem_pio2+0x320>
 800733a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800733e:	f1c3 0301 	rsb	r3, r3, #1
 8007342:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007346:	9307      	str	r3, [sp, #28]
 8007348:	9b07      	ldr	r3, [sp, #28]
 800734a:	9a04      	ldr	r2, [sp, #16]
 800734c:	4443      	add	r3, r8
 800734e:	429a      	cmp	r2, r3
 8007350:	db2f      	blt.n	80073b2 <__kernel_rem_pio2+0xe2>
 8007352:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007356:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800735a:	462f      	mov	r7, r5
 800735c:	2600      	movs	r6, #0
 800735e:	e01b      	b.n	8007398 <__kernel_rem_pio2+0xc8>
 8007360:	42ef      	cmn	r7, r5
 8007362:	d407      	bmi.n	8007374 <__kernel_rem_pio2+0xa4>
 8007364:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007368:	f7f9 f8a0 	bl	80004ac <__aeabi_i2d>
 800736c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007370:	3501      	adds	r5, #1
 8007372:	e7da      	b.n	800732a <__kernel_rem_pio2+0x5a>
 8007374:	ec51 0b18 	vmov	r0, r1, d8
 8007378:	e7f8      	b.n	800736c <__kernel_rem_pio2+0x9c>
 800737a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800737e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007382:	f7f9 f8fd 	bl	8000580 <__aeabi_dmul>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800738e:	f7f8 ff41 	bl	8000214 <__adddf3>
 8007392:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007396:	3601      	adds	r6, #1
 8007398:	9b06      	ldr	r3, [sp, #24]
 800739a:	429e      	cmp	r6, r3
 800739c:	f1a7 0708 	sub.w	r7, r7, #8
 80073a0:	ddeb      	ble.n	800737a <__kernel_rem_pio2+0xaa>
 80073a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073a6:	3508      	adds	r5, #8
 80073a8:	ecab 7b02 	vstmia	fp!, {d7}
 80073ac:	f108 0801 	add.w	r8, r8, #1
 80073b0:	e7ca      	b.n	8007348 <__kernel_rem_pio2+0x78>
 80073b2:	9b04      	ldr	r3, [sp, #16]
 80073b4:	aa0c      	add	r2, sp, #48	; 0x30
 80073b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80073bc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80073be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80073c2:	9c04      	ldr	r4, [sp, #16]
 80073c4:	930a      	str	r3, [sp, #40]	; 0x28
 80073c6:	ab98      	add	r3, sp, #608	; 0x260
 80073c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073cc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80073d0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80073d4:	f8cd b008 	str.w	fp, [sp, #8]
 80073d8:	4625      	mov	r5, r4
 80073da:	2d00      	cmp	r5, #0
 80073dc:	dc78      	bgt.n	80074d0 <__kernel_rem_pio2+0x200>
 80073de:	ec47 6b10 	vmov	d0, r6, r7
 80073e2:	4650      	mov	r0, sl
 80073e4:	f000 fbfc 	bl	8007be0 <scalbn>
 80073e8:	ec57 6b10 	vmov	r6, r7, d0
 80073ec:	2200      	movs	r2, #0
 80073ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80073f2:	ee10 0a10 	vmov	r0, s0
 80073f6:	4639      	mov	r1, r7
 80073f8:	f7f9 f8c2 	bl	8000580 <__aeabi_dmul>
 80073fc:	ec41 0b10 	vmov	d0, r0, r1
 8007400:	f000 fb6e 	bl	8007ae0 <floor>
 8007404:	4b7f      	ldr	r3, [pc, #508]	; (8007604 <__kernel_rem_pio2+0x334>)
 8007406:	ec51 0b10 	vmov	r0, r1, d0
 800740a:	2200      	movs	r2, #0
 800740c:	f7f9 f8b8 	bl	8000580 <__aeabi_dmul>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4630      	mov	r0, r6
 8007416:	4639      	mov	r1, r7
 8007418:	f7f8 fefa 	bl	8000210 <__aeabi_dsub>
 800741c:	460f      	mov	r7, r1
 800741e:	4606      	mov	r6, r0
 8007420:	f7f9 fb48 	bl	8000ab4 <__aeabi_d2iz>
 8007424:	9007      	str	r0, [sp, #28]
 8007426:	f7f9 f841 	bl	80004ac <__aeabi_i2d>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4630      	mov	r0, r6
 8007430:	4639      	mov	r1, r7
 8007432:	f7f8 feed 	bl	8000210 <__aeabi_dsub>
 8007436:	f1ba 0f00 	cmp.w	sl, #0
 800743a:	4606      	mov	r6, r0
 800743c:	460f      	mov	r7, r1
 800743e:	dd70      	ble.n	8007522 <__kernel_rem_pio2+0x252>
 8007440:	1e62      	subs	r2, r4, #1
 8007442:	ab0c      	add	r3, sp, #48	; 0x30
 8007444:	9d07      	ldr	r5, [sp, #28]
 8007446:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800744a:	f1ca 0118 	rsb	r1, sl, #24
 800744e:	fa40 f301 	asr.w	r3, r0, r1
 8007452:	441d      	add	r5, r3
 8007454:	408b      	lsls	r3, r1
 8007456:	1ac0      	subs	r0, r0, r3
 8007458:	ab0c      	add	r3, sp, #48	; 0x30
 800745a:	9507      	str	r5, [sp, #28]
 800745c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007460:	f1ca 0317 	rsb	r3, sl, #23
 8007464:	fa40 f303 	asr.w	r3, r0, r3
 8007468:	9302      	str	r3, [sp, #8]
 800746a:	9b02      	ldr	r3, [sp, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	dd66      	ble.n	800753e <__kernel_rem_pio2+0x26e>
 8007470:	9b07      	ldr	r3, [sp, #28]
 8007472:	2200      	movs	r2, #0
 8007474:	3301      	adds	r3, #1
 8007476:	9307      	str	r3, [sp, #28]
 8007478:	4615      	mov	r5, r2
 800747a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800747e:	4294      	cmp	r4, r2
 8007480:	f300 8099 	bgt.w	80075b6 <__kernel_rem_pio2+0x2e6>
 8007484:	f1ba 0f00 	cmp.w	sl, #0
 8007488:	dd07      	ble.n	800749a <__kernel_rem_pio2+0x1ca>
 800748a:	f1ba 0f01 	cmp.w	sl, #1
 800748e:	f000 80a5 	beq.w	80075dc <__kernel_rem_pio2+0x30c>
 8007492:	f1ba 0f02 	cmp.w	sl, #2
 8007496:	f000 80c1 	beq.w	800761c <__kernel_rem_pio2+0x34c>
 800749a:	9b02      	ldr	r3, [sp, #8]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d14e      	bne.n	800753e <__kernel_rem_pio2+0x26e>
 80074a0:	4632      	mov	r2, r6
 80074a2:	463b      	mov	r3, r7
 80074a4:	4958      	ldr	r1, [pc, #352]	; (8007608 <__kernel_rem_pio2+0x338>)
 80074a6:	2000      	movs	r0, #0
 80074a8:	f7f8 feb2 	bl	8000210 <__aeabi_dsub>
 80074ac:	4606      	mov	r6, r0
 80074ae:	460f      	mov	r7, r1
 80074b0:	2d00      	cmp	r5, #0
 80074b2:	d044      	beq.n	800753e <__kernel_rem_pio2+0x26e>
 80074b4:	4650      	mov	r0, sl
 80074b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80075f8 <__kernel_rem_pio2+0x328>
 80074ba:	f000 fb91 	bl	8007be0 <scalbn>
 80074be:	4630      	mov	r0, r6
 80074c0:	4639      	mov	r1, r7
 80074c2:	ec53 2b10 	vmov	r2, r3, d0
 80074c6:	f7f8 fea3 	bl	8000210 <__aeabi_dsub>
 80074ca:	4606      	mov	r6, r0
 80074cc:	460f      	mov	r7, r1
 80074ce:	e036      	b.n	800753e <__kernel_rem_pio2+0x26e>
 80074d0:	4b4e      	ldr	r3, [pc, #312]	; (800760c <__kernel_rem_pio2+0x33c>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	4630      	mov	r0, r6
 80074d6:	4639      	mov	r1, r7
 80074d8:	f7f9 f852 	bl	8000580 <__aeabi_dmul>
 80074dc:	f7f9 faea 	bl	8000ab4 <__aeabi_d2iz>
 80074e0:	f7f8 ffe4 	bl	80004ac <__aeabi_i2d>
 80074e4:	4b4a      	ldr	r3, [pc, #296]	; (8007610 <__kernel_rem_pio2+0x340>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	4680      	mov	r8, r0
 80074ea:	4689      	mov	r9, r1
 80074ec:	f7f9 f848 	bl	8000580 <__aeabi_dmul>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4630      	mov	r0, r6
 80074f6:	4639      	mov	r1, r7
 80074f8:	f7f8 fe8a 	bl	8000210 <__aeabi_dsub>
 80074fc:	f7f9 fada 	bl	8000ab4 <__aeabi_d2iz>
 8007500:	9b02      	ldr	r3, [sp, #8]
 8007502:	f843 0b04 	str.w	r0, [r3], #4
 8007506:	3d01      	subs	r5, #1
 8007508:	9302      	str	r3, [sp, #8]
 800750a:	ab70      	add	r3, sp, #448	; 0x1c0
 800750c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	4640      	mov	r0, r8
 8007516:	4649      	mov	r1, r9
 8007518:	f7f8 fe7c 	bl	8000214 <__adddf3>
 800751c:	4606      	mov	r6, r0
 800751e:	460f      	mov	r7, r1
 8007520:	e75b      	b.n	80073da <__kernel_rem_pio2+0x10a>
 8007522:	d105      	bne.n	8007530 <__kernel_rem_pio2+0x260>
 8007524:	1e63      	subs	r3, r4, #1
 8007526:	aa0c      	add	r2, sp, #48	; 0x30
 8007528:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800752c:	15c3      	asrs	r3, r0, #23
 800752e:	e79b      	b.n	8007468 <__kernel_rem_pio2+0x198>
 8007530:	4b38      	ldr	r3, [pc, #224]	; (8007614 <__kernel_rem_pio2+0x344>)
 8007532:	2200      	movs	r2, #0
 8007534:	f7f9 faaa 	bl	8000a8c <__aeabi_dcmpge>
 8007538:	2800      	cmp	r0, #0
 800753a:	d139      	bne.n	80075b0 <__kernel_rem_pio2+0x2e0>
 800753c:	9002      	str	r0, [sp, #8]
 800753e:	2200      	movs	r2, #0
 8007540:	2300      	movs	r3, #0
 8007542:	4630      	mov	r0, r6
 8007544:	4639      	mov	r1, r7
 8007546:	f7f9 fa83 	bl	8000a50 <__aeabi_dcmpeq>
 800754a:	2800      	cmp	r0, #0
 800754c:	f000 80b4 	beq.w	80076b8 <__kernel_rem_pio2+0x3e8>
 8007550:	f104 3bff 	add.w	fp, r4, #4294967295
 8007554:	465b      	mov	r3, fp
 8007556:	2200      	movs	r2, #0
 8007558:	9904      	ldr	r1, [sp, #16]
 800755a:	428b      	cmp	r3, r1
 800755c:	da65      	bge.n	800762a <__kernel_rem_pio2+0x35a>
 800755e:	2a00      	cmp	r2, #0
 8007560:	d07b      	beq.n	800765a <__kernel_rem_pio2+0x38a>
 8007562:	ab0c      	add	r3, sp, #48	; 0x30
 8007564:	f1aa 0a18 	sub.w	sl, sl, #24
 8007568:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 80a0 	beq.w	80076b2 <__kernel_rem_pio2+0x3e2>
 8007572:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80075f8 <__kernel_rem_pio2+0x328>
 8007576:	4650      	mov	r0, sl
 8007578:	f000 fb32 	bl	8007be0 <scalbn>
 800757c:	4f23      	ldr	r7, [pc, #140]	; (800760c <__kernel_rem_pio2+0x33c>)
 800757e:	ec55 4b10 	vmov	r4, r5, d0
 8007582:	46d8      	mov	r8, fp
 8007584:	2600      	movs	r6, #0
 8007586:	f1b8 0f00 	cmp.w	r8, #0
 800758a:	f280 80cf 	bge.w	800772c <__kernel_rem_pio2+0x45c>
 800758e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80075f0 <__kernel_rem_pio2+0x320>
 8007592:	465f      	mov	r7, fp
 8007594:	f04f 0800 	mov.w	r8, #0
 8007598:	2f00      	cmp	r7, #0
 800759a:	f2c0 80fd 	blt.w	8007798 <__kernel_rem_pio2+0x4c8>
 800759e:	ab70      	add	r3, sp, #448	; 0x1c0
 80075a0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007618 <__kernel_rem_pio2+0x348>
 80075a4:	ec55 4b18 	vmov	r4, r5, d8
 80075a8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80075ac:	2600      	movs	r6, #0
 80075ae:	e0e5      	b.n	800777c <__kernel_rem_pio2+0x4ac>
 80075b0:	2302      	movs	r3, #2
 80075b2:	9302      	str	r3, [sp, #8]
 80075b4:	e75c      	b.n	8007470 <__kernel_rem_pio2+0x1a0>
 80075b6:	f8db 3000 	ldr.w	r3, [fp]
 80075ba:	b955      	cbnz	r5, 80075d2 <__kernel_rem_pio2+0x302>
 80075bc:	b123      	cbz	r3, 80075c8 <__kernel_rem_pio2+0x2f8>
 80075be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80075c2:	f8cb 3000 	str.w	r3, [fp]
 80075c6:	2301      	movs	r3, #1
 80075c8:	3201      	adds	r2, #1
 80075ca:	f10b 0b04 	add.w	fp, fp, #4
 80075ce:	461d      	mov	r5, r3
 80075d0:	e755      	b.n	800747e <__kernel_rem_pio2+0x1ae>
 80075d2:	1acb      	subs	r3, r1, r3
 80075d4:	f8cb 3000 	str.w	r3, [fp]
 80075d8:	462b      	mov	r3, r5
 80075da:	e7f5      	b.n	80075c8 <__kernel_rem_pio2+0x2f8>
 80075dc:	1e62      	subs	r2, r4, #1
 80075de:	ab0c      	add	r3, sp, #48	; 0x30
 80075e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80075e8:	a90c      	add	r1, sp, #48	; 0x30
 80075ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80075ee:	e754      	b.n	800749a <__kernel_rem_pio2+0x1ca>
	...
 80075fc:	3ff00000 	.word	0x3ff00000
 8007600:	08007ef0 	.word	0x08007ef0
 8007604:	40200000 	.word	0x40200000
 8007608:	3ff00000 	.word	0x3ff00000
 800760c:	3e700000 	.word	0x3e700000
 8007610:	41700000 	.word	0x41700000
 8007614:	3fe00000 	.word	0x3fe00000
 8007618:	08007eb0 	.word	0x08007eb0
 800761c:	1e62      	subs	r2, r4, #1
 800761e:	ab0c      	add	r3, sp, #48	; 0x30
 8007620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007624:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007628:	e7de      	b.n	80075e8 <__kernel_rem_pio2+0x318>
 800762a:	a90c      	add	r1, sp, #48	; 0x30
 800762c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007630:	3b01      	subs	r3, #1
 8007632:	430a      	orrs	r2, r1
 8007634:	e790      	b.n	8007558 <__kernel_rem_pio2+0x288>
 8007636:	3301      	adds	r3, #1
 8007638:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800763c:	2900      	cmp	r1, #0
 800763e:	d0fa      	beq.n	8007636 <__kernel_rem_pio2+0x366>
 8007640:	9a08      	ldr	r2, [sp, #32]
 8007642:	18e3      	adds	r3, r4, r3
 8007644:	18a6      	adds	r6, r4, r2
 8007646:	aa20      	add	r2, sp, #128	; 0x80
 8007648:	1c65      	adds	r5, r4, #1
 800764a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800764e:	9302      	str	r3, [sp, #8]
 8007650:	9b02      	ldr	r3, [sp, #8]
 8007652:	42ab      	cmp	r3, r5
 8007654:	da04      	bge.n	8007660 <__kernel_rem_pio2+0x390>
 8007656:	461c      	mov	r4, r3
 8007658:	e6b5      	b.n	80073c6 <__kernel_rem_pio2+0xf6>
 800765a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800765c:	2301      	movs	r3, #1
 800765e:	e7eb      	b.n	8007638 <__kernel_rem_pio2+0x368>
 8007660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007662:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007666:	f7f8 ff21 	bl	80004ac <__aeabi_i2d>
 800766a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007670:	46b3      	mov	fp, r6
 8007672:	461c      	mov	r4, r3
 8007674:	2700      	movs	r7, #0
 8007676:	f04f 0800 	mov.w	r8, #0
 800767a:	f04f 0900 	mov.w	r9, #0
 800767e:	9b06      	ldr	r3, [sp, #24]
 8007680:	429f      	cmp	r7, r3
 8007682:	dd06      	ble.n	8007692 <__kernel_rem_pio2+0x3c2>
 8007684:	ab70      	add	r3, sp, #448	; 0x1c0
 8007686:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800768a:	e9c3 8900 	strd	r8, r9, [r3]
 800768e:	3501      	adds	r5, #1
 8007690:	e7de      	b.n	8007650 <__kernel_rem_pio2+0x380>
 8007692:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007696:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800769a:	f7f8 ff71 	bl	8000580 <__aeabi_dmul>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4640      	mov	r0, r8
 80076a4:	4649      	mov	r1, r9
 80076a6:	f7f8 fdb5 	bl	8000214 <__adddf3>
 80076aa:	3701      	adds	r7, #1
 80076ac:	4680      	mov	r8, r0
 80076ae:	4689      	mov	r9, r1
 80076b0:	e7e5      	b.n	800767e <__kernel_rem_pio2+0x3ae>
 80076b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076b6:	e754      	b.n	8007562 <__kernel_rem_pio2+0x292>
 80076b8:	ec47 6b10 	vmov	d0, r6, r7
 80076bc:	f1ca 0000 	rsb	r0, sl, #0
 80076c0:	f000 fa8e 	bl	8007be0 <scalbn>
 80076c4:	ec57 6b10 	vmov	r6, r7, d0
 80076c8:	4b9f      	ldr	r3, [pc, #636]	; (8007948 <__kernel_rem_pio2+0x678>)
 80076ca:	ee10 0a10 	vmov	r0, s0
 80076ce:	2200      	movs	r2, #0
 80076d0:	4639      	mov	r1, r7
 80076d2:	f7f9 f9db 	bl	8000a8c <__aeabi_dcmpge>
 80076d6:	b300      	cbz	r0, 800771a <__kernel_rem_pio2+0x44a>
 80076d8:	4b9c      	ldr	r3, [pc, #624]	; (800794c <__kernel_rem_pio2+0x67c>)
 80076da:	2200      	movs	r2, #0
 80076dc:	4630      	mov	r0, r6
 80076de:	4639      	mov	r1, r7
 80076e0:	f7f8 ff4e 	bl	8000580 <__aeabi_dmul>
 80076e4:	f7f9 f9e6 	bl	8000ab4 <__aeabi_d2iz>
 80076e8:	4605      	mov	r5, r0
 80076ea:	f7f8 fedf 	bl	80004ac <__aeabi_i2d>
 80076ee:	4b96      	ldr	r3, [pc, #600]	; (8007948 <__kernel_rem_pio2+0x678>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	f7f8 ff45 	bl	8000580 <__aeabi_dmul>
 80076f6:	460b      	mov	r3, r1
 80076f8:	4602      	mov	r2, r0
 80076fa:	4639      	mov	r1, r7
 80076fc:	4630      	mov	r0, r6
 80076fe:	f7f8 fd87 	bl	8000210 <__aeabi_dsub>
 8007702:	f7f9 f9d7 	bl	8000ab4 <__aeabi_d2iz>
 8007706:	f104 0b01 	add.w	fp, r4, #1
 800770a:	ab0c      	add	r3, sp, #48	; 0x30
 800770c:	f10a 0a18 	add.w	sl, sl, #24
 8007710:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007714:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007718:	e72b      	b.n	8007572 <__kernel_rem_pio2+0x2a2>
 800771a:	4630      	mov	r0, r6
 800771c:	4639      	mov	r1, r7
 800771e:	f7f9 f9c9 	bl	8000ab4 <__aeabi_d2iz>
 8007722:	ab0c      	add	r3, sp, #48	; 0x30
 8007724:	46a3      	mov	fp, r4
 8007726:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800772a:	e722      	b.n	8007572 <__kernel_rem_pio2+0x2a2>
 800772c:	ab70      	add	r3, sp, #448	; 0x1c0
 800772e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007732:	ab0c      	add	r3, sp, #48	; 0x30
 8007734:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007738:	f7f8 feb8 	bl	80004ac <__aeabi_i2d>
 800773c:	4622      	mov	r2, r4
 800773e:	462b      	mov	r3, r5
 8007740:	f7f8 ff1e 	bl	8000580 <__aeabi_dmul>
 8007744:	4632      	mov	r2, r6
 8007746:	e9c9 0100 	strd	r0, r1, [r9]
 800774a:	463b      	mov	r3, r7
 800774c:	4620      	mov	r0, r4
 800774e:	4629      	mov	r1, r5
 8007750:	f7f8 ff16 	bl	8000580 <__aeabi_dmul>
 8007754:	f108 38ff 	add.w	r8, r8, #4294967295
 8007758:	4604      	mov	r4, r0
 800775a:	460d      	mov	r5, r1
 800775c:	e713      	b.n	8007586 <__kernel_rem_pio2+0x2b6>
 800775e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007762:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007766:	f7f8 ff0b 	bl	8000580 <__aeabi_dmul>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	4620      	mov	r0, r4
 8007770:	4629      	mov	r1, r5
 8007772:	f7f8 fd4f 	bl	8000214 <__adddf3>
 8007776:	3601      	adds	r6, #1
 8007778:	4604      	mov	r4, r0
 800777a:	460d      	mov	r5, r1
 800777c:	9b04      	ldr	r3, [sp, #16]
 800777e:	429e      	cmp	r6, r3
 8007780:	dc01      	bgt.n	8007786 <__kernel_rem_pio2+0x4b6>
 8007782:	45b0      	cmp	r8, r6
 8007784:	daeb      	bge.n	800775e <__kernel_rem_pio2+0x48e>
 8007786:	ab48      	add	r3, sp, #288	; 0x120
 8007788:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800778c:	e9c3 4500 	strd	r4, r5, [r3]
 8007790:	3f01      	subs	r7, #1
 8007792:	f108 0801 	add.w	r8, r8, #1
 8007796:	e6ff      	b.n	8007598 <__kernel_rem_pio2+0x2c8>
 8007798:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800779a:	2b02      	cmp	r3, #2
 800779c:	dc0b      	bgt.n	80077b6 <__kernel_rem_pio2+0x4e6>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dc6e      	bgt.n	8007880 <__kernel_rem_pio2+0x5b0>
 80077a2:	d045      	beq.n	8007830 <__kernel_rem_pio2+0x560>
 80077a4:	9b07      	ldr	r3, [sp, #28]
 80077a6:	f003 0007 	and.w	r0, r3, #7
 80077aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80077ae:	ecbd 8b02 	vpop	{d8}
 80077b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d1f3      	bne.n	80077a4 <__kernel_rem_pio2+0x4d4>
 80077bc:	ab48      	add	r3, sp, #288	; 0x120
 80077be:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80077c2:	46d0      	mov	r8, sl
 80077c4:	46d9      	mov	r9, fp
 80077c6:	f1b9 0f00 	cmp.w	r9, #0
 80077ca:	f1a8 0808 	sub.w	r8, r8, #8
 80077ce:	dc64      	bgt.n	800789a <__kernel_rem_pio2+0x5ca>
 80077d0:	465c      	mov	r4, fp
 80077d2:	2c01      	cmp	r4, #1
 80077d4:	f1aa 0a08 	sub.w	sl, sl, #8
 80077d8:	dc7e      	bgt.n	80078d8 <__kernel_rem_pio2+0x608>
 80077da:	2000      	movs	r0, #0
 80077dc:	2100      	movs	r1, #0
 80077de:	f1bb 0f01 	cmp.w	fp, #1
 80077e2:	f300 8097 	bgt.w	8007914 <__kernel_rem_pio2+0x644>
 80077e6:	9b02      	ldr	r3, [sp, #8]
 80077e8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80077ec:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f040 8099 	bne.w	8007928 <__kernel_rem_pio2+0x658>
 80077f6:	9b01      	ldr	r3, [sp, #4]
 80077f8:	e9c3 5600 	strd	r5, r6, [r3]
 80077fc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007800:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007804:	e7ce      	b.n	80077a4 <__kernel_rem_pio2+0x4d4>
 8007806:	ab48      	add	r3, sp, #288	; 0x120
 8007808:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	f7f8 fd00 	bl	8000214 <__adddf3>
 8007814:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007818:	f1bb 0f00 	cmp.w	fp, #0
 800781c:	daf3      	bge.n	8007806 <__kernel_rem_pio2+0x536>
 800781e:	9b02      	ldr	r3, [sp, #8]
 8007820:	b113      	cbz	r3, 8007828 <__kernel_rem_pio2+0x558>
 8007822:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007826:	4619      	mov	r1, r3
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	e9c3 0100 	strd	r0, r1, [r3]
 800782e:	e7b9      	b.n	80077a4 <__kernel_rem_pio2+0x4d4>
 8007830:	2000      	movs	r0, #0
 8007832:	2100      	movs	r1, #0
 8007834:	e7f0      	b.n	8007818 <__kernel_rem_pio2+0x548>
 8007836:	ab48      	add	r3, sp, #288	; 0x120
 8007838:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f7f8 fce8 	bl	8000214 <__adddf3>
 8007844:	3c01      	subs	r4, #1
 8007846:	2c00      	cmp	r4, #0
 8007848:	daf5      	bge.n	8007836 <__kernel_rem_pio2+0x566>
 800784a:	9b02      	ldr	r3, [sp, #8]
 800784c:	b1e3      	cbz	r3, 8007888 <__kernel_rem_pio2+0x5b8>
 800784e:	4602      	mov	r2, r0
 8007850:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007854:	9c01      	ldr	r4, [sp, #4]
 8007856:	e9c4 2300 	strd	r2, r3, [r4]
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007862:	f7f8 fcd5 	bl	8000210 <__aeabi_dsub>
 8007866:	ad4a      	add	r5, sp, #296	; 0x128
 8007868:	2401      	movs	r4, #1
 800786a:	45a3      	cmp	fp, r4
 800786c:	da0f      	bge.n	800788e <__kernel_rem_pio2+0x5be>
 800786e:	9b02      	ldr	r3, [sp, #8]
 8007870:	b113      	cbz	r3, 8007878 <__kernel_rem_pio2+0x5a8>
 8007872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007876:	4619      	mov	r1, r3
 8007878:	9b01      	ldr	r3, [sp, #4]
 800787a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800787e:	e791      	b.n	80077a4 <__kernel_rem_pio2+0x4d4>
 8007880:	465c      	mov	r4, fp
 8007882:	2000      	movs	r0, #0
 8007884:	2100      	movs	r1, #0
 8007886:	e7de      	b.n	8007846 <__kernel_rem_pio2+0x576>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	e7e2      	b.n	8007854 <__kernel_rem_pio2+0x584>
 800788e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007892:	f7f8 fcbf 	bl	8000214 <__adddf3>
 8007896:	3401      	adds	r4, #1
 8007898:	e7e7      	b.n	800786a <__kernel_rem_pio2+0x59a>
 800789a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800789e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80078a2:	4620      	mov	r0, r4
 80078a4:	4632      	mov	r2, r6
 80078a6:	463b      	mov	r3, r7
 80078a8:	4629      	mov	r1, r5
 80078aa:	f7f8 fcb3 	bl	8000214 <__adddf3>
 80078ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4620      	mov	r0, r4
 80078b8:	4629      	mov	r1, r5
 80078ba:	f7f8 fca9 	bl	8000210 <__aeabi_dsub>
 80078be:	4632      	mov	r2, r6
 80078c0:	463b      	mov	r3, r7
 80078c2:	f7f8 fca7 	bl	8000214 <__adddf3>
 80078c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80078ca:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80078ce:	ed88 7b00 	vstr	d7, [r8]
 80078d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80078d6:	e776      	b.n	80077c6 <__kernel_rem_pio2+0x4f6>
 80078d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80078dc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80078e0:	4640      	mov	r0, r8
 80078e2:	4632      	mov	r2, r6
 80078e4:	463b      	mov	r3, r7
 80078e6:	4649      	mov	r1, r9
 80078e8:	f7f8 fc94 	bl	8000214 <__adddf3>
 80078ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4640      	mov	r0, r8
 80078f6:	4649      	mov	r1, r9
 80078f8:	f7f8 fc8a 	bl	8000210 <__aeabi_dsub>
 80078fc:	4632      	mov	r2, r6
 80078fe:	463b      	mov	r3, r7
 8007900:	f7f8 fc88 	bl	8000214 <__adddf3>
 8007904:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007908:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800790c:	ed8a 7b00 	vstr	d7, [sl]
 8007910:	3c01      	subs	r4, #1
 8007912:	e75e      	b.n	80077d2 <__kernel_rem_pio2+0x502>
 8007914:	ab48      	add	r3, sp, #288	; 0x120
 8007916:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f7f8 fc79 	bl	8000214 <__adddf3>
 8007922:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007926:	e75a      	b.n	80077de <__kernel_rem_pio2+0x50e>
 8007928:	9b01      	ldr	r3, [sp, #4]
 800792a:	9a01      	ldr	r2, [sp, #4]
 800792c:	601d      	str	r5, [r3, #0]
 800792e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007932:	605c      	str	r4, [r3, #4]
 8007934:	609f      	str	r7, [r3, #8]
 8007936:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800793a:	60d3      	str	r3, [r2, #12]
 800793c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007940:	6110      	str	r0, [r2, #16]
 8007942:	6153      	str	r3, [r2, #20]
 8007944:	e72e      	b.n	80077a4 <__kernel_rem_pio2+0x4d4>
 8007946:	bf00      	nop
 8007948:	41700000 	.word	0x41700000
 800794c:	3e700000 	.word	0x3e700000

08007950 <__kernel_sin>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	ed2d 8b04 	vpush	{d8-d9}
 8007958:	eeb0 8a41 	vmov.f32	s16, s2
 800795c:	eef0 8a61 	vmov.f32	s17, s3
 8007960:	ec55 4b10 	vmov	r4, r5, d0
 8007964:	b083      	sub	sp, #12
 8007966:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800796a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800796e:	9001      	str	r0, [sp, #4]
 8007970:	da06      	bge.n	8007980 <__kernel_sin+0x30>
 8007972:	ee10 0a10 	vmov	r0, s0
 8007976:	4629      	mov	r1, r5
 8007978:	f7f9 f89c 	bl	8000ab4 <__aeabi_d2iz>
 800797c:	2800      	cmp	r0, #0
 800797e:	d051      	beq.n	8007a24 <__kernel_sin+0xd4>
 8007980:	4622      	mov	r2, r4
 8007982:	462b      	mov	r3, r5
 8007984:	4620      	mov	r0, r4
 8007986:	4629      	mov	r1, r5
 8007988:	f7f8 fdfa 	bl	8000580 <__aeabi_dmul>
 800798c:	4682      	mov	sl, r0
 800798e:	468b      	mov	fp, r1
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	4620      	mov	r0, r4
 8007996:	4629      	mov	r1, r5
 8007998:	f7f8 fdf2 	bl	8000580 <__aeabi_dmul>
 800799c:	a341      	add	r3, pc, #260	; (adr r3, 8007aa4 <__kernel_sin+0x154>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	4680      	mov	r8, r0
 80079a4:	4689      	mov	r9, r1
 80079a6:	4650      	mov	r0, sl
 80079a8:	4659      	mov	r1, fp
 80079aa:	f7f8 fde9 	bl	8000580 <__aeabi_dmul>
 80079ae:	a33f      	add	r3, pc, #252	; (adr r3, 8007aac <__kernel_sin+0x15c>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f8 fc2c 	bl	8000210 <__aeabi_dsub>
 80079b8:	4652      	mov	r2, sl
 80079ba:	465b      	mov	r3, fp
 80079bc:	f7f8 fde0 	bl	8000580 <__aeabi_dmul>
 80079c0:	a33c      	add	r3, pc, #240	; (adr r3, 8007ab4 <__kernel_sin+0x164>)
 80079c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c6:	f7f8 fc25 	bl	8000214 <__adddf3>
 80079ca:	4652      	mov	r2, sl
 80079cc:	465b      	mov	r3, fp
 80079ce:	f7f8 fdd7 	bl	8000580 <__aeabi_dmul>
 80079d2:	a33a      	add	r3, pc, #232	; (adr r3, 8007abc <__kernel_sin+0x16c>)
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	f7f8 fc1a 	bl	8000210 <__aeabi_dsub>
 80079dc:	4652      	mov	r2, sl
 80079de:	465b      	mov	r3, fp
 80079e0:	f7f8 fdce 	bl	8000580 <__aeabi_dmul>
 80079e4:	a337      	add	r3, pc, #220	; (adr r3, 8007ac4 <__kernel_sin+0x174>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	f7f8 fc13 	bl	8000214 <__adddf3>
 80079ee:	9b01      	ldr	r3, [sp, #4]
 80079f0:	4606      	mov	r6, r0
 80079f2:	460f      	mov	r7, r1
 80079f4:	b9eb      	cbnz	r3, 8007a32 <__kernel_sin+0xe2>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4650      	mov	r0, sl
 80079fc:	4659      	mov	r1, fp
 80079fe:	f7f8 fdbf 	bl	8000580 <__aeabi_dmul>
 8007a02:	a325      	add	r3, pc, #148	; (adr r3, 8007a98 <__kernel_sin+0x148>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f7f8 fc02 	bl	8000210 <__aeabi_dsub>
 8007a0c:	4642      	mov	r2, r8
 8007a0e:	464b      	mov	r3, r9
 8007a10:	f7f8 fdb6 	bl	8000580 <__aeabi_dmul>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4620      	mov	r0, r4
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	f7f8 fbfa 	bl	8000214 <__adddf3>
 8007a20:	4604      	mov	r4, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	ec45 4b10 	vmov	d0, r4, r5
 8007a28:	b003      	add	sp, #12
 8007a2a:	ecbd 8b04 	vpop	{d8-d9}
 8007a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a32:	4b1b      	ldr	r3, [pc, #108]	; (8007aa0 <__kernel_sin+0x150>)
 8007a34:	ec51 0b18 	vmov	r0, r1, d8
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f7f8 fda1 	bl	8000580 <__aeabi_dmul>
 8007a3e:	4632      	mov	r2, r6
 8007a40:	ec41 0b19 	vmov	d9, r0, r1
 8007a44:	463b      	mov	r3, r7
 8007a46:	4640      	mov	r0, r8
 8007a48:	4649      	mov	r1, r9
 8007a4a:	f7f8 fd99 	bl	8000580 <__aeabi_dmul>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	ec51 0b19 	vmov	r0, r1, d9
 8007a56:	f7f8 fbdb 	bl	8000210 <__aeabi_dsub>
 8007a5a:	4652      	mov	r2, sl
 8007a5c:	465b      	mov	r3, fp
 8007a5e:	f7f8 fd8f 	bl	8000580 <__aeabi_dmul>
 8007a62:	ec53 2b18 	vmov	r2, r3, d8
 8007a66:	f7f8 fbd3 	bl	8000210 <__aeabi_dsub>
 8007a6a:	a30b      	add	r3, pc, #44	; (adr r3, 8007a98 <__kernel_sin+0x148>)
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	4606      	mov	r6, r0
 8007a72:	460f      	mov	r7, r1
 8007a74:	4640      	mov	r0, r8
 8007a76:	4649      	mov	r1, r9
 8007a78:	f7f8 fd82 	bl	8000580 <__aeabi_dmul>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4630      	mov	r0, r6
 8007a82:	4639      	mov	r1, r7
 8007a84:	f7f8 fbc6 	bl	8000214 <__adddf3>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	4629      	mov	r1, r5
 8007a90:	f7f8 fbbe 	bl	8000210 <__aeabi_dsub>
 8007a94:	e7c4      	b.n	8007a20 <__kernel_sin+0xd0>
 8007a96:	bf00      	nop
 8007a98:	55555549 	.word	0x55555549
 8007a9c:	3fc55555 	.word	0x3fc55555
 8007aa0:	3fe00000 	.word	0x3fe00000
 8007aa4:	5acfd57c 	.word	0x5acfd57c
 8007aa8:	3de5d93a 	.word	0x3de5d93a
 8007aac:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ab0:	3e5ae5e6 	.word	0x3e5ae5e6
 8007ab4:	57b1fe7d 	.word	0x57b1fe7d
 8007ab8:	3ec71de3 	.word	0x3ec71de3
 8007abc:	19c161d5 	.word	0x19c161d5
 8007ac0:	3f2a01a0 	.word	0x3f2a01a0
 8007ac4:	1110f8a6 	.word	0x1110f8a6
 8007ac8:	3f811111 	.word	0x3f811111

08007acc <fabs>:
 8007acc:	ec51 0b10 	vmov	r0, r1, d0
 8007ad0:	ee10 2a10 	vmov	r2, s0
 8007ad4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ad8:	ec43 2b10 	vmov	d0, r2, r3
 8007adc:	4770      	bx	lr
	...

08007ae0 <floor>:
 8007ae0:	ec51 0b10 	vmov	r0, r1, d0
 8007ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007aec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007af0:	2e13      	cmp	r6, #19
 8007af2:	ee10 5a10 	vmov	r5, s0
 8007af6:	ee10 8a10 	vmov	r8, s0
 8007afa:	460c      	mov	r4, r1
 8007afc:	dc32      	bgt.n	8007b64 <floor+0x84>
 8007afe:	2e00      	cmp	r6, #0
 8007b00:	da14      	bge.n	8007b2c <floor+0x4c>
 8007b02:	a333      	add	r3, pc, #204	; (adr r3, 8007bd0 <floor+0xf0>)
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f7f8 fb84 	bl	8000214 <__adddf3>
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f7f8 ffc6 	bl	8000aa0 <__aeabi_dcmpgt>
 8007b14:	b138      	cbz	r0, 8007b26 <floor+0x46>
 8007b16:	2c00      	cmp	r4, #0
 8007b18:	da57      	bge.n	8007bca <floor+0xea>
 8007b1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007b1e:	431d      	orrs	r5, r3
 8007b20:	d001      	beq.n	8007b26 <floor+0x46>
 8007b22:	4c2d      	ldr	r4, [pc, #180]	; (8007bd8 <floor+0xf8>)
 8007b24:	2500      	movs	r5, #0
 8007b26:	4621      	mov	r1, r4
 8007b28:	4628      	mov	r0, r5
 8007b2a:	e025      	b.n	8007b78 <floor+0x98>
 8007b2c:	4f2b      	ldr	r7, [pc, #172]	; (8007bdc <floor+0xfc>)
 8007b2e:	4137      	asrs	r7, r6
 8007b30:	ea01 0307 	and.w	r3, r1, r7
 8007b34:	4303      	orrs	r3, r0
 8007b36:	d01f      	beq.n	8007b78 <floor+0x98>
 8007b38:	a325      	add	r3, pc, #148	; (adr r3, 8007bd0 <floor+0xf0>)
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	f7f8 fb69 	bl	8000214 <__adddf3>
 8007b42:	2200      	movs	r2, #0
 8007b44:	2300      	movs	r3, #0
 8007b46:	f7f8 ffab 	bl	8000aa0 <__aeabi_dcmpgt>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d0eb      	beq.n	8007b26 <floor+0x46>
 8007b4e:	2c00      	cmp	r4, #0
 8007b50:	bfbe      	ittt	lt
 8007b52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007b56:	fa43 f606 	asrlt.w	r6, r3, r6
 8007b5a:	19a4      	addlt	r4, r4, r6
 8007b5c:	ea24 0407 	bic.w	r4, r4, r7
 8007b60:	2500      	movs	r5, #0
 8007b62:	e7e0      	b.n	8007b26 <floor+0x46>
 8007b64:	2e33      	cmp	r6, #51	; 0x33
 8007b66:	dd0b      	ble.n	8007b80 <floor+0xa0>
 8007b68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007b6c:	d104      	bne.n	8007b78 <floor+0x98>
 8007b6e:	ee10 2a10 	vmov	r2, s0
 8007b72:	460b      	mov	r3, r1
 8007b74:	f7f8 fb4e 	bl	8000214 <__adddf3>
 8007b78:	ec41 0b10 	vmov	d0, r0, r1
 8007b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b80:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007b84:	f04f 33ff 	mov.w	r3, #4294967295
 8007b88:	fa23 f707 	lsr.w	r7, r3, r7
 8007b8c:	4207      	tst	r7, r0
 8007b8e:	d0f3      	beq.n	8007b78 <floor+0x98>
 8007b90:	a30f      	add	r3, pc, #60	; (adr r3, 8007bd0 <floor+0xf0>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f7f8 fb3d 	bl	8000214 <__adddf3>
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f7f8 ff7f 	bl	8000aa0 <__aeabi_dcmpgt>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d0bf      	beq.n	8007b26 <floor+0x46>
 8007ba6:	2c00      	cmp	r4, #0
 8007ba8:	da02      	bge.n	8007bb0 <floor+0xd0>
 8007baa:	2e14      	cmp	r6, #20
 8007bac:	d103      	bne.n	8007bb6 <floor+0xd6>
 8007bae:	3401      	adds	r4, #1
 8007bb0:	ea25 0507 	bic.w	r5, r5, r7
 8007bb4:	e7b7      	b.n	8007b26 <floor+0x46>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007bbc:	fa03 f606 	lsl.w	r6, r3, r6
 8007bc0:	4435      	add	r5, r6
 8007bc2:	4545      	cmp	r5, r8
 8007bc4:	bf38      	it	cc
 8007bc6:	18e4      	addcc	r4, r4, r3
 8007bc8:	e7f2      	b.n	8007bb0 <floor+0xd0>
 8007bca:	2500      	movs	r5, #0
 8007bcc:	462c      	mov	r4, r5
 8007bce:	e7aa      	b.n	8007b26 <floor+0x46>
 8007bd0:	8800759c 	.word	0x8800759c
 8007bd4:	7e37e43c 	.word	0x7e37e43c
 8007bd8:	bff00000 	.word	0xbff00000
 8007bdc:	000fffff 	.word	0x000fffff

08007be0 <scalbn>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	ec55 4b10 	vmov	r4, r5, d0
 8007be6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007bea:	4606      	mov	r6, r0
 8007bec:	462b      	mov	r3, r5
 8007bee:	b99a      	cbnz	r2, 8007c18 <scalbn+0x38>
 8007bf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007bf4:	4323      	orrs	r3, r4
 8007bf6:	d036      	beq.n	8007c66 <scalbn+0x86>
 8007bf8:	4b39      	ldr	r3, [pc, #228]	; (8007ce0 <scalbn+0x100>)
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	ee10 0a10 	vmov	r0, s0
 8007c00:	2200      	movs	r2, #0
 8007c02:	f7f8 fcbd 	bl	8000580 <__aeabi_dmul>
 8007c06:	4b37      	ldr	r3, [pc, #220]	; (8007ce4 <scalbn+0x104>)
 8007c08:	429e      	cmp	r6, r3
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	460d      	mov	r5, r1
 8007c0e:	da10      	bge.n	8007c32 <scalbn+0x52>
 8007c10:	a32b      	add	r3, pc, #172	; (adr r3, 8007cc0 <scalbn+0xe0>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	e03a      	b.n	8007c8e <scalbn+0xae>
 8007c18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007c1c:	428a      	cmp	r2, r1
 8007c1e:	d10c      	bne.n	8007c3a <scalbn+0x5a>
 8007c20:	ee10 2a10 	vmov	r2, s0
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 faf4 	bl	8000214 <__adddf3>
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	460d      	mov	r5, r1
 8007c30:	e019      	b.n	8007c66 <scalbn+0x86>
 8007c32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c36:	460b      	mov	r3, r1
 8007c38:	3a36      	subs	r2, #54	; 0x36
 8007c3a:	4432      	add	r2, r6
 8007c3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007c40:	428a      	cmp	r2, r1
 8007c42:	dd08      	ble.n	8007c56 <scalbn+0x76>
 8007c44:	2d00      	cmp	r5, #0
 8007c46:	a120      	add	r1, pc, #128	; (adr r1, 8007cc8 <scalbn+0xe8>)
 8007c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c4c:	da1c      	bge.n	8007c88 <scalbn+0xa8>
 8007c4e:	a120      	add	r1, pc, #128	; (adr r1, 8007cd0 <scalbn+0xf0>)
 8007c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c54:	e018      	b.n	8007c88 <scalbn+0xa8>
 8007c56:	2a00      	cmp	r2, #0
 8007c58:	dd08      	ble.n	8007c6c <scalbn+0x8c>
 8007c5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c66:	ec45 4b10 	vmov	d0, r4, r5
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007c70:	da19      	bge.n	8007ca6 <scalbn+0xc6>
 8007c72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c76:	429e      	cmp	r6, r3
 8007c78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007c7c:	dd0a      	ble.n	8007c94 <scalbn+0xb4>
 8007c7e:	a112      	add	r1, pc, #72	; (adr r1, 8007cc8 <scalbn+0xe8>)
 8007c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e2      	bne.n	8007c4e <scalbn+0x6e>
 8007c88:	a30f      	add	r3, pc, #60	; (adr r3, 8007cc8 <scalbn+0xe8>)
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	f7f8 fc77 	bl	8000580 <__aeabi_dmul>
 8007c92:	e7cb      	b.n	8007c2c <scalbn+0x4c>
 8007c94:	a10a      	add	r1, pc, #40	; (adr r1, 8007cc0 <scalbn+0xe0>)
 8007c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0b8      	beq.n	8007c10 <scalbn+0x30>
 8007c9e:	a10e      	add	r1, pc, #56	; (adr r1, 8007cd8 <scalbn+0xf8>)
 8007ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ca4:	e7b4      	b.n	8007c10 <scalbn+0x30>
 8007ca6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007caa:	3236      	adds	r2, #54	; 0x36
 8007cac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007cb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ce8 <scalbn+0x108>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	e7e8      	b.n	8007c8e <scalbn+0xae>
 8007cbc:	f3af 8000 	nop.w
 8007cc0:	c2f8f359 	.word	0xc2f8f359
 8007cc4:	01a56e1f 	.word	0x01a56e1f
 8007cc8:	8800759c 	.word	0x8800759c
 8007ccc:	7e37e43c 	.word	0x7e37e43c
 8007cd0:	8800759c 	.word	0x8800759c
 8007cd4:	fe37e43c 	.word	0xfe37e43c
 8007cd8:	c2f8f359 	.word	0xc2f8f359
 8007cdc:	81a56e1f 	.word	0x81a56e1f
 8007ce0:	43500000 	.word	0x43500000
 8007ce4:	ffff3cb0 	.word	0xffff3cb0
 8007ce8:	3c900000 	.word	0x3c900000

08007cec <_init>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	bf00      	nop
 8007cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf2:	bc08      	pop	{r3}
 8007cf4:	469e      	mov	lr, r3
 8007cf6:	4770      	bx	lr

08007cf8 <_fini>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr
